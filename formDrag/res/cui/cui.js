/*! cui 2016-11-25 */
(function( factory ) {
	if ( typeof define === 'function' && define.amd ) {
		define([ 'jquery' ], factory );
} else {
	factory( jQuery );
	}
}(function( $ ) {

if (document.documentMode !== undefined ) { // IE only
	if (document.documentMode <= 5) {
		alert("CoralUI can not be used in this ('quirks') mode!");
	}
}
var CoralUIVersion = "4.1.5";
window.Coral = {
	cc: function( componentName, id ){
		$.parser.component.push({componentName: componentName, id: id});
	}
}
window.coral = {};
$.uiplugins = $.uiplugins || {};
coral.eventsQueue = [];
coral.eventsParser = function() {
	$.each(coral.eventsQueue,function(i){
		var o = coral.eventsQueue.shift();
		o.instance._on.apply(o.instance, o.args);
	});
	coral.eventsTimer = null;
} 
coral.render = function(context){
	$(context).attr("data-render", "");
	$.parser.parse(context);
}
var validAction = false;
$.controller = function(controllerName, obj) {
	if (obj) {
		window[controllerName] = window[controllerName] || {};
		return $.extend(true, window[controllerName], obj);
	} else {
		return window[controllerName];
	}
}
$.coralApply = function (fun,t,param){
	var type = $(t).attr("component-role"),opts={};
    if (type){
    	opts = $(t)[type]("option");
    }
	if (opts.controllerName) {
		t = $.controller(opts.controllerName); 
	}
	if ($.isFunction(fun)) {
		return fun.apply(t,param);
	}
};
$.coral = $.coral || {};
$.coral.openTag = true;
$.coral.strictLayout = false;
coral.regSpecialChars = [ "^","$","(",")","[","]","{","}",".","?","+","*","|","\\"];
coral.specialCharsMap = {
		"&": "&amp;", //必须放在第一个,先将&转换了，之后就不会影响到转换后生成的&
		"#":"&#35",//必须放在第二个,先将&转换了，之后就不会影响到转换后生成的& 
        ">" : "&gt;", 
        "<" : "&lt;", 
        "‘":"&lsquo", 
        "’":"&rsquo", 
        ",":"&sbquo", 
        "'":"&#39", 
        "\\":"&#92;", 
        "\"":"&ldquo;", 
        "!":"&#33", 
        "%":"&#37", 
        "~":"&#126", 
        "@":"&#64", 
        "=":"&#61", 
        "(":"&#40", 
        ")":"&#41", 
        "{":"&#123", 
        "}":"&#125", 
        "[":"&#91;", 
        "]":"&#93;", 
        "$":"&#36", 
        "?":"&#63", 
        "*":"&#42;", 
        "|":"&#124;", 
        "^":"&#94;", 
        ".":"&#46;", 
        "+":"&#43;", 
        "/":"&#47;", 
        " ":"&nbsp;" 
	};
$(document).unbind(".clearTips").bind("click.clearTips", function(e){
	if ( validAction ) {
		validAction = false;
		e.stopPropagation();
		return;
	}
	$(".coral-validate-state-error").slideUp(100, function( e ){
		$(this).remove();
	});
	validAction = false;
});

// 鼠标滚动时，重新计算校验提示信息的位置
$(document).unbind("mousewheel").bind("mousewheel", function(e) {
	var validateSuffix = $.validate.validateSuffix();
	
	setTimeout( function() {
		$.each( $(".coral-validate-state-error"), function(idx, item) {
			var className = $(item).attr("class");
			var componentId = className.substring(0, className.indexOf(validateSuffix));
			var $field = $("#"+componentId).find(".ctrl-init");
			var $validator = $field.parents(".coral-validate");
			$(item).remove();
			$validator.validate("validItem", $field, null, true);
		});
	}, 0);
});
//
$.coral.decode = function (value){
	return value;
	var specialCharsMap = coral.specialCharsMap;
	function keyToRegex (key){
		if(isRegexSpecialChar(key)){ 
	        key="\\"+key; 
	    } 
	    var regex = new RegExp(key,"g"); 
	    return regex; 
	}
    function isRegexSpecialChar(character){
		var length = coral.regSpecialChars.length; 
		var ch; 
		for(var index = 0; index < length; index++ ) { 
		    ch = coral.regSpecialChars[index]; 
		    if(character == ch) return true; 
		} 
		return false; 
    }
	if(value==null || value == "") {
		return value; 
	}
	for(var key in specialCharsMap){ 
	    var regex = keyToRegex(key);//有key得到相应的正则表达式 
	    value = value.replace(regex,specialCharsMap[key]);//根据正则表达式来替换相应的内容 
	} 
	return value; 
};
$.coral.encode = function(value){
	return value;
	var specialCharsMap = coral.specialCharsMap;
	if (value == null || value == "" || typeof value != "string"){
		return value;
	}
	for (var key in specialCharsMap){
		var reg = new RegExp(specialCharsMap[key],"g");
		value = value.replace(reg,key);
	}
	return value;
};
$.coral.getStyles = function (el) {
	if(window.getComputedStyle){
		var styles= window.getComputedStyle( el, null );
		return styles;
	}else if(document.documentElement.currentStyle){
		var styles= el.currentStyle;
		return styles;
	}
};
$.coral.fitParent = function ($ele, fit) {
	fit = (fit == undefined ? true : fit);
	//var parent = $ele.parent().closest(".ctrl-fit-element")[0];
	var parent = $ele.parent();
	//parent = $(parent);
	if (fit) {
		if (!parent.hasClass("coral-noscroll")) {
			parent.addClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").addClass("coral-panel-fit");
			}
		}
	} else {
		if (parent.hasClass("coral-noscroll")) {
			parent.removeClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").removeClass("coral-panel-fit");
			}
		}
	}
	return {
		width: parent.width(),
		height: parent.height()
	};
};
$.coral.getLeft = function ( my, of ) {
	var left = of.offset().left;
	if (left + my.outerWidth() > $(window).outerWidth()
			+ $(document).scrollLeft()) {
		left = $(window).outerWidth() + $(document).scrollLeft()
				- my.outerWidth();
	}
	if (left < 0) {
		left = 0;
	}
	return left;
};
$.coral.getTop = function ( my, of, direction ) {
	var top = of.offset().top + of.outerHeight();
	
	if (direction == "up") {
		top = of.offset().top - my.outerHeight();	
	} else {
		if (top + my.outerHeight() > $(window).outerHeight()
				+ $(document).scrollTop()) {
			top = of.offset().top - my.outerHeight();
		}
		if (top < $(document).scrollTop()) {
			top = of.offset().top + of.outerHeight();
		}		
	}
	
	return top;
};
$.coral.findComponent = function( selector, context ){
	var component = [];
	if ( !selector ){ selector = '.ctrl-init'; }
	var init = $( selector, context );
	var rclass = /[\t\r\n]/g;
	if (init.length){
		$.each(init, function(){
			var name = "",
				className = this.className.replace(rclass, " ").split(" "),
				i = 0,
				l = className.length;
			for ( ; i < l; i++ ) {
				name = $( this ).attr( "component-role" );
				component.push($(this)[name]("instance"));//$().textbox()
				break;
			}
		});
	}
	return component;
};
$.coral.setIsLabel = function(isSet, context) {
	var fields = $.coral.findComponent(".ctrl-form-element", context),
		i = 0, 
		l = fields.length;
	for (i; i < l; i++) {
        var c = fields[i];
        c._setOption("isLabel", isSet);
        if(c.element.hasClass("hasTooltip")) {
        	if(isSet == false) {
        		c.element.tooltip("enable");
        	} else {
        		c.element.tooltip("disable");
        	}
        }
	}
};
$.coral.setIslabel = $.coral.setIsLabel;//旧版本的大小写字母兼容
$.coral.setReadOnly = function(isSet, context){
	var fields = $.coral.findComponent( ".ctrl-form-element", context),
		i = 0, 
		l = fields.length;
	for (i; i < l; i++) {
	    var c = fields[i];
	    c._setOption("readonly", isSet);
	    if(c.element.hasClass("hasTooltip")) {
	    	if(isSet == false) {
	    		c.element.tooltip("enable");
	    	} else {
	    		c.element.tooltip("disable");
	    	}
	    }
	}
};
$.coral.renderComponent = function( context ){
	var component = [];
	var selector = '.coral-no-rendered';
	if ( !context ){ context = 'body'; }
	var init = $( selector, context );
	var rclass = /[\t\r\n]/g;
	if (init.length){
		$.each(init, function(){
			var name = "",
				className = this.className.replace(rclass, " ").split(" "),
				i = 0,
				l = className.length;
			for ( ; i < l; i++ ) {
				name = $( this ).attr( "component-role" );
				rendered = $( this ).prop( "rendered" );
				if ( !rendered ) {
					$( this ).removeClass( "coral-no-rendered" );
					var ins = $(this)[name]("instance");
					$( this ).addClass( "ctrl-init ctrl-init-"+this.componentName );
					ins._create();
					ins._renderComponent();
				}
				break;
			}
		});
	}
	return component;
};
$.coral.parseShortCut = function(options){
	$.coral.addShortCut(options.shortKey,options.callback,options.opts);
}
$.coral.formatOption = function(opts){
	delete opts.xtype;
	var itemsOptStr = JSON.stringify(opts),
		itemsOptStr = itemsOptStr.replace("{",""),
		itemsOptStr = itemsOptStr.substring(0,itemsOptStr.length-1);
	return itemsOptStr;
}
$.coral.customComponent = function(opt){
	var type = opt.xtype,optStr;
	var typeStr = [],item = opt.items;
	switch (type) {
    case "layout":
    	item = opt.regions;
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<div class='coralui-"+ type +"' data-options='"+ optStr +"'>");
    	if(item){
    		for(var j = 0; j< item.length;j++){
    			var subItem = item[j];
    			itemStr = $.coral.formatOption(item[j]);
    			typeStr.push("<div data-options='"+ itemStr +"'>")
    			if(subItem.items){
    				var itemSub = item[j].items;
    				for(var k = 0; k< itemSub.length;k++){
    					var str = $.coral.customComponent(itemSub[k]);
    					typeStr.push(str);
    				}
    			}
    			typeStr.push("</div>");
    		}
    		typeStr.push("</div>");
    	}
    	break;
    case "row": 
    	item = opt.columns;
    	typeStr.push('<div class="row-fluid clearfix">');
    	if(item.length){
    		for(var j = 0; j< item.length;j++){
    			var subItem = item[j];
    			typeStr.push('<div class="span'+ subItem.percent+' column ctrl-init ctrl-init-sortable coral-sortable">');
    			if(subItem.items.length != 0){
    				var itemSub = item[j].items;
    				for(var k = 0; k< itemSub.length;k++){
    					var str = $.coral.customComponent(itemSub[k]);
    					typeStr.push(str);
    				}
    			}
    			typeStr.push("</div>");
    		}
    	}
    	typeStr.push("</div>");
		break;   	
    case "accordion":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<div class='coralui-"+ type +"' data-options='"+ optStr +"'>");
    	if(item){
    		for(var k = 0; k< item.length;k++){
    			var str = $.coral.customComponent(item[k]);
    			typeStr.push(str);
    		}
    	}
    	typeStr.push("</div>");
    	break;
    case "container":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push("<div class='demo ui-sortable ctrl-init ctrl-init-sortable coral-sortable'>");
    	if(item){
    		for(var k = 0; k< item.length;k++){
    			var str = $.coral.customComponent(item[k]);
    			typeStr.push(str);
    		}
    	}
    	typeStr.push("</div>");
    	break;
    case "tree":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push("<ul class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "grid":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push("<div class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "form":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push("<form class='coralui-form' data-options='"+ optStr +"'>");
    	if(item){
    		typeStr.push('<div class="ui-draggable"><div class="column">')
    		for(var j = 0; j< item.length;j++){
    			var subItem = item[j];
				var str = $.coral.customComponent(item[j]);
				typeStr.push(str);
    		}
    		typeStr.push("</div></div>");
    	}else{
    		typeStr.push('<div class="ui-draggable"><div class="column"></div></div>')
    	}
    	typeStr.push("</form>");
    	break;
    case "textbox":
    case "combobox":
    case "combogrid":
    case "combotree":
    case "datepicker":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<input class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "radio":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<input type="+type +" class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "textarea":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<textarea class='coralui-textbox" + "' data-options='"+ optStr +"'/>");
    	break;
    case "button":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<button class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "toolbar":
    case "progressbar":
    	optStr = $.coral.formatOption(opt);
    	typeStr.push( "<div class='coralui-"+ type +"' data-options='"+ optStr +"'/>");
    	break;
    case "view":
    	var items = opt.items;
    	delete opt.items;
    	optStr = $.coral.formatOption(opt);
    	opt.items = items;
    	typeStr.push( "<div class='coralui-"+ type +"' data-options='"+ optStr +"'>");
    	if(item.length){
    		for(var k = 0; k< item.length;k++){
    			var str = $.coral.customComponent(item[k]);
    			typeStr.push(str);
    		}
    	}
    	typeStr.push("</div>");
    	break;
	}
	return typeStr.join("");
};
$.coral.customRender = function(opt){
	var str = "";
	str = $.coral.customComponent(opt);
	var $element = $(opt.renderTo || "body").html(str);
	$.parser.parse($element);
};
$.coral.callFunction = function(shortCut,e,that){
	var shortcut_combination,callback,opt;
	var default_options = {
			'type':'keydown',
			'propagate':false,
			'disable_in_input':false,
			'target':document,
			'keycode':false
	}
	if(shortCut instanceof Array){
		for(var j = 0; j<shortCut.length; j++){
			shortcut_combination = shortCut[j].shortKey;
			callback = shortCut[j].callback;
			opt = shortCut[j].opts;
			if(!opt) opt = default_options;
			shortKey(shortcut_combination,callback,opt,e,that);
		}
	} else {
		shortcut_combination = shortCut.shortKey;
		callback = shortCut.callback;
		opt = shortCut.opts;
		if(!opt) opt = default_options;
		shortKey(shortcut_combination,callback,opt,e,that);
	}
	function shortKey(shortcut_combination,callback,opt,e,that){
		shortcut_combination = shortcut_combination.toLowerCase();
		e = e || window.event;
		if(opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields
			var element;
			if(e.target) element=e.target;
			else if(e.srcElement) element=e.srcElement;
			if(element.nodeType==3) element=element.parentNode;

			if(element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
		}
		//Find Which key is pressed
		if (e.keyCode) code = e.keyCode;
		else if (e.which) code = e.which;
		var character = String.fromCharCode(code).toLowerCase();
		
		if(code == 188) character=","; //If the user presses , when the type is onkeydown
		if(code == 190) character="."; //If the user presses , when the type is onkeydown

		var keys = shortcut_combination.split("+");
		//Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
		var kp = 0;
		
		//Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
		var shift_nums = {
			"`":"~",
			"1":"!",
			"2":"@",
			"3":"#",
			"4":"$",
			"5":"%",
			"6":"^",
			"7":"&",
			"8":"*",
			"9":"(",
			"0":")",
			"-":"_",
			"=":"+",
			";":":",
			"'":"\"",
			",":"<",
			".":">",
			"/":"?",
			"\\":"|"
		}
		//Special Keys - and their codes
		var special_keys = {
			'esc':27,
			'escape':27,
			'tab':9,
			'space':32,
			'return':13,
			'enter':13,
			'backspace':8,

			'scrolllock':145,
			'scroll_lock':145,
			'scroll':145,
			'capslock':20,
			'caps_lock':20,
			'caps':20,
			'numlock':144,
			'num_lock':144,
			'num':144,
			
			'pause':19,
			'break':19,
			
			'insert':45,
			'home':36,
			'delete':46,
			'end':35,
			
			'pageup':33,
			'page_up':33,
			'pu':33,

			'pagedown':34,
			'page_down':34,
			'pd':34,

			'left':37,
			'up':38,
			'right':39,
			'down':40,

			'f1':112,
			'f2':113,
			'f3':114,
			'f4':115,
			'f5':116,
			'f6':117,
			'f7':118,
			'f8':119,
			'f9':120,
			'f10':121,
			'f11':122,
			'f12':123
		}

		var modifiers = { 
			shift: { wanted:false, pressed:false},
			ctrl : { wanted:false, pressed:false},
			alt  : { wanted:false, pressed:false},
			meta : { wanted:false, pressed:false}	//Meta is Mac specific
		};
	                
		if(e.ctrlKey)	modifiers.ctrl.pressed = true;
		if(e.shiftKey)	modifiers.shift.pressed = true;
		if(e.altKey)	modifiers.alt.pressed = true;
		if(e.metaKey)   modifiers.meta.pressed = true;
	                
		for(var i=0; k=keys[i],i<keys.length; i++) {
			//Modifiers
			if(k == 'ctrl' || k == 'control') {
				kp++;
				modifiers.ctrl.wanted = true;

			} else if(k == 'shift') {
				kp++;
				modifiers.shift.wanted = true;

			} else if(k == 'alt') {
				kp++;
				modifiers.alt.wanted = true;
			} else if(k == 'meta') {
				kp++;
				modifiers.meta.wanted = true;
			} else if(k.length > 1) { //If it is a special key
				if(special_keys[k] == code) kp++;
				
			} else if(opt['keycode']) {
				if(opt['keycode'] == code) kp++;

			} else { //The special keys did not match
				if(character == k) kp++;
				else {
					if(shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
						character = shift_nums[character]; 
						if(character == k) kp++;
					}
				}
			}
		}
		
		if(kp == keys.length && 
					modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
					modifiers.shift.pressed == modifiers.shift.wanted &&
					modifiers.alt.pressed == modifiers.alt.wanted &&
					modifiers.meta.pressed == modifiers.meta.wanted) {
			callback.apply(that?that.element:e,[e]);

			if(!opt['propagate']) { //Stop the event
				//e.cancelBubble is supported by IE - this will kill the bubbling process.
				e.cancelBubble = true;
				e.returnValue = false;

				//e.stopPropagation works in Firefox.
				if (e.stopPropagation) {
					e.stopPropagation();
					e.preventDefault();
				}
				return false;
			}
		}
	}
};

var all_shortcuts = {};
function shortCutOuter(shortCut) {
	var default_options = {
			'type':'keydown',
			'propagate':false,
			'disable_in_input':false,
			'target':document,
			'keycode':false
	}
	var shortcut_combination = shortCut.shortKey,
		opt = shortCut.opts;
	if(!opt) opt = default_options;
	var ele = opt.target;
	if(typeof opt.target == 'string') ele = document.getElementById(opt.target);
	var ths = this;
	var func = function(e) {
		$.coral.callFunction(shortCut);
	}
	all_shortcuts[shortcut_combination] = {
			'callback':func, 
			'target':ele, 
			'event': opt['type']
	};
	//Attach the function with the event
	if(ele.addEventListener) ele.addEventListener(opt['type'], func, false);
	else if(ele.attachEvent) ele.attachEvent('on'+opt['type'], func);
	else ele['on'+opt['type']] = func;
}
$.coral.addShortCut = function(shortCut){
	var i;
	if(shortCut instanceof Object){
		for(i = 0; i<shortCut.length; i++){
			shortCutOuter(shortCut[i]);
		}
	}
};
$.coral.removeShortCut = function(shortcut_combination,trigger){
	shortcut_combination = shortcut_combination.toLowerCase();
	var binding = all_shortcuts[shortcut_combination];
	delete(all_shortcuts[shortcut_combination])
	if(!binding) return;
	var type = binding['event'];
	var callback = binding['callback'];
	if(trigger) {
		var ele = $(trigger);
	}else {
		var ele = binding['target'];
	}
	if(ele.detachEvent) ele.detachEvent('on'+type, callback);
	else if(ele.removeEventListener) ele.removeEventListener(type, callback, false);
	else ele['on'+type] = false;
};
$.coral.valid = {};
$.coral.valid = function( element/*, hasErrorTips*/ ) {
	validAction = true;
	var count = 0,
		excluded = $.data(element, "excluded"),
		validElements = element.find($("[class*='coral-validation-']")),
		errTipsType = null,
		hasErrorTips = true;
	
	 if ( excluded && "string" === typeof excluded ) {
         // Convert to array first
         excluded = $.map( excluded.split( ',' ), function( item ) {
             // Trim the spaces
             return $.trim( item );
         });
     }
	 if ( "form" === element[0].tagName.toLowerCase() ) {
		 errTipsType = element.form("option", "errTipsType");		 
	 }
	 
	 validElements.each( function () {
		 var className = this.className, 
			 coralType = "",
			 clsArray = className.split(" ");
			 
		 for ( var item in clsArray ) {
			 if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
				 coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
				 break;
			 }
		 }
		 // 如果在排除范围内，则返回，不校验
		 if ( _isExclud( $( this )[coralType]("component"), excluded) ) {
    		 return ;
    	 }
		 if ( "none" === errTipsType ) {
			 hasErrorTips = false;
		 }
		 if ( !_valid( $( this ), coralType, hasErrorTips ) ) {
			 if ( "first" === errTipsType ) {
				 hasErrorTips = false;
			 }
			 ++ count;
		 }
	 });
	 
	 if ( count > 0 ) {
		 return false;
	 } else {
		 return true;
	 }
	
     function _isExclud( $component, excluded ) {
    	 if ( !excluded ) {
    		 return false;
    	 }
    	 
    	 var length = excluded.length;
         
    	 for ( var i = 0; i < length; i++ ) {
             if ( "string" === typeof excluded[i] && $component.is(excluded[i]) ){
                 return true;
             }
         }
    	 
    	 return false;
     }
     
     function _valid( $element, coralType, hasErrorTips ) {    	 
    	 if ( "datepicker" == coralType ) {
    		 return $element[coralType]( "valid", $element, hasErrorTips );
    	 }
    	 // 如果不在上面的列中，则默认通过校验
    	 if ( $.inArray( coralType, ["textbox", "combobox", "combotree", "radio", "radiolist", "checkbox", "checkboxlist"] ) > -1 ) {
    		 return $element[coralType]( "valid", hasErrorTips );
    	 }
     }      
}

jQuery.support.placeholder = (function(){
    var i = document.createElement('input');
    return 'placeholder' in i;
})();

var uuid = 0,
	runiqueId = /^coral-id-\d+$/;

// $.coral might exist from components with no dependencies, e.g., $.coral.position


$.extend( $.coral, {
	version: "4.0.3",
	
	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	},
	zindex : 1000
});
// plugins
$.fn.extend({
	scrollParent: function( includeHidden ) {
		var position = this.css( "position" ),
			excludeStaticParent = position === "absolute",
			overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
			scrollParent = this.parents().filter( function() {
				var parent = $( this );
				if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
					return false;
				}
				return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) + parent.css( "overflow-x" ) );
			}).eq( 0 );

		return position === "fixed" || !scrollParent.length ? $( this[ 0 ].ownerDocument || document ) : scrollParent;
	},
	
	uniqueId: function(prefix) {
		return this.each(function() {
			if ( !this.id ) {
				if (prefix) {
					prefix += "-";
				} else {
					prefix = "";
				}
				this.id = prefix + "coral-id-" + (++uuid);
			}
		});
	},

	removeUniqueId: function() {
		return this.each(function() {
			if ( runiqueId.test( this.id ) ) {
				$( this ).removeAttr( "id" );
			}
		});
	},
	closestComponent: function(selector){
		return this.each(function() {
			$( this ).closest( ".ctrl-init-" + selector );
		});
	}
});

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var map, mapName, img,
		nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		map = element.parentNode;
		mapName = map.name;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap='#" + mapName + "']" )[ 0 ];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName ) ?
		!element.disabled :
		"a" === nodeName ?
			element.href || isTabIndexNotNaN :
			isTabIndexNotNaN) &&
		// the element and all of its ancestors must be visible
		visible( element );
}

function visible( element ) {
	return $.expr.filters.visible( element ) &&
		!$( element ).parents().addBack().filter(function() {
			return $.css( this, "visibility" ) === "hidden";
		}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
				if ( border ) {
					size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// support: jQuery <1.8
if ( !$.fn.addBack ) {
	$.fn.addBack = function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	};
}

// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
	$.fn.removeData = (function( removeData ) {
		return function( key ) {
			if ( arguments.length ) {
				return removeData.call( this, $.camelCase( key ) );
			} else {
				return removeData.call( this );
			}
		};
	})( $.fn.removeData );
}





// deprecated
$.coral.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

$.fn.extend({
	focus: (function( orig ) {
		return function( delay, fn ) {
			return typeof delay === "number" ?
				this.each(function() {
					var elem = this;
					setTimeout(function() {
						$( elem ).focus();
						if ( fn ) {
							fn.call( elem );
						}
					}, delay );
				}) :
				orig.apply( this, arguments );
		};
	})( $.fn.focus ),
	
	disableSelection: (function() {
		var eventType = "onselectstart" in document.createElement( "div" ) ?
			"selectstart" :
			"mousedown";

		return function() {
			return this.bind( eventType + ".coral-disableSelection", function( event ) {
				event.preventDefault();
			});
		};
	})(),

	enableSelection: function() {
		return this.unbind( ".coral-disableSelection" );
	},
	
	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	}
});

$.extend( $.coral, {
	// $.coral.plugin is deprecated. Use $.component() extensions instead.
	plugin: {
		add: function( module, option, set ) {
			var i,
				proto = $.coral[ module ].prototype;
			for ( i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args, allowDisconnected ) {
			var i,
				set = instance.plugins[ name ];
			
			if ( !set ) {
				return;
			}
			if ( !allowDisconnected && ( !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) ) {
				return;
			}
			for ( i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	/**
	 * qiucs @2014.7.18
	 * 在window对象中获取指定函数(字符串)
	 */
	toFunction : function (fn) {
		var ns = null, i = 0, _fn = null;//不再设置为function，否则无法判断此function是否是undefined
		if ($.isFunction(fn)) {
			return fn;
		}
		if (typeof fn === "string") {
			// 1. 没有多层命名空间
			if ($.isFunction(window[fn])) {
				return window[fn];
			}
			// 2. 多层命名空间的有运算的
			try {
				_fn = eval("(" + fn + ")");
				if ($.isFunction(_fn)) {
					return _fn;
				}
			} catch (e) {}
			// 3. 多层命名空间无运算的	
			if (fn.indexOf(".") > 0) {
				ns = fn.split(".");
				_fn = window[ns[0]];
				if (!_fn) return null;
				for (i = 1; i < ns.length; i ++) {
					_fn = _fn[ns[i]];
					if (!_fn) return null;
				}
			}
			return _fn;
		}
		
		return fn;
	}
});

$.extend({
	/**
	 * qiucs @2014.7.23
	 * 通过url获取JSON对象
	 */
	loadJson : function (url, params) {
		var data = null;
		$.ajax({
			url : url,
			type: "get",
			dataType : "json",
			async : false,
			data : params,
			success : function(rlt) {
				data = rlt;
			},
			error : function (req, error, errThrow) {
				$.error("function load json error: " + error);
			}
		});
		return data;
	},
	/**
	 * qiucs @2014.9.18
-	 * 判断当元素是否为coral组件
-	 * @param elem 元素
-	 * @param type 组件类型，如 button/comobobox/ panel/ ...
	 */
	isCoral : function (elem, type) {
		if (arguments.length < 2 || !elem) return false;
		if (elem.jquery) elem = elem.get(0);
		return !!$.data(elem, "coral-" + type);
	}
});
function _refreshAllComponent(parent) {
	if( typeof(parent)=="undefined" ) {
		parent = "body";
	}
	var tag = parent.tagName ? parent.tagName.toLowerCase() : "";
	parent = $(parent)[0];
	if (parent.style.display == "none" || 
			tag == "style" ||
			tag == "script") {
		return;
	}
	var children = parent.childNodes;
	var componentId = $(parent).attr("component-id"),
		$ele = $("#" + componentId),
		type = $ele.attr("component-role");
	if (!componentId) {
		for (var i = 0, l = children.length; i < l; i++) {
			var child = children[i];
			if (child.nodeType == 1) {
				if (child.parentNode == parent ){
					_refreshAllComponent(child)
				}
			}
		}
	} else {
		if (typeof(type)==='undefined') return;
		if ($.inArray(type, $.coral.formPlugins)!==-1) {
			return;
		}
		if (type == "panel") {
			$ele[type]("resizePanel");
		} else {
			$ele[type]("refresh");
		}
	}
}
function _refreshChild(context) {
	var context = $(context)[0];
	var children = context.childNodes;
	for (var i = 0, l = children.length; i < l; i++) {
		var child = children[i];
		if (child.nodeType == 1) {
			if (child.parentNode == context ){
				_refreshAllComponent(child)
			}
		}
	}
}
$.extend( $.coral, {
	beforeDoOverflow: function(){},
	scriptPath: function(){
		var scripts = document.getElementsByTagName( 'script' );
		var script = scripts[ scripts.length - 1 ];
		var path=script.src.substring(0,script.src.lastIndexOf("/")+1);
		return path;
	}(),
	contextPathFun : function () {
		//获取当前网址，如： http://localhost:8080/coral/meun.jsp
		var curWwwPath=window.document.location.href;
		//获取主机地址之后的目录，如：coral/meun.jsp
 	    var pathName=window.document.location.pathname;
 	    var pos=curWwwPath.indexOf(pathName);
	    //获取主机地址，如： http://localhost:8083
 	    var localhostPaht=curWwwPath.substring(0,pos);
	    //获取带"/"的项目名，如：/coral
 	    var projectName=pathName.substring(0,pathName.substr(1).indexOf('/')+1);
 	    return projectName;
	},
	adjustedUI : function(element){
		var maxHeight,
		$element = $(element),
		parent = $element.parent();
		
		maxHeight = parent.height();
		$element.siblings( ":visible" ).each(function() {
			var elem = $( this ),
				position = elem.css( "position" );

			if ( position === "absolute" || position === "fixed" ) {
				return;
			}
			maxHeight -= elem.outerHeight( true );
		});
		$element.height( Math.max( 0, maxHeight - $element.innerHeight() + $element.height() ) )
			//.css( "overflow", "auto" );//
			.addClass("coral-scroll");
		var id = $element.uniqueId("coral-adjuested").attr("id");
		$element.attr("component-id", id);
		$element.attr("component-role", "adjusted");
		$.coral.refreshAllComponent(element);
		//$.coral.fitParent(parent, true);
	},
	/***
	 * com: compoent
	 * pCom: parent
	 */
	isFit: function(com, pCom){
		// closetParentComponent
		var closestPCom = $(com).parent().closest(".ctrl-fit-element");
		if (!closestPCom.length) {
			closestPCom = $("body");
		}
		// 如果找到的直接父组件（closestPCom）与传进来的父容器（pCom）相等，
		// 或者父容器（pCom）由直接父组件提供（closestPCom），
		// 则判断为是最佳自适应时机
		var isBestFit = closestPCom.length && ( closestPCom[0] === $(pCom)[0] || closestPCom.find( pCom ).length );
		return isBestFit;
	},
	formPlugins:["button", "menubutton", "textbox", "autocomplete", "autocompletetree","uploader", "splitbutton",
	             "radio","radiolist","checkbox","checkboxlist","spinner","slider","combo","fileuploader",
		         "combobox","combotree","combogrid","datepicker","tree","progressbar"]
	,
	getUI: function(name) {
		if ($.uiplugins[name]) {
			return $.uiplugins[name];
		} else {
			return -1;
		}
	},
	refreshChild: function (context) {
		_refreshChild(context);
	},
	/**
	 * refresh all the coral comonent to adjusted container 
	 **/
	refreshAllComponent : function (parent) {
		_refreshAllComponent(parent);
	}
});
$.coral.contextPath = $.coral.contextPathFun.apply();

$.fn.caret = function(pos) {
    var target = this[0];
	var isContentEditable = target.contentEditable === 'true';
    //get
    if (arguments.length == 0) {
    	//HTML5
    	if (window.getSelection) {
    		//contenteditable
	        if (isContentEditable) {
	        	target.focus();
	        	var range1 = window.getSelection().getRangeAt(0),
	        		range2 = range1.cloneRange();
				range2.selectNodeContents(target);
				range2.setEnd(range1.endContainer, range1.endOffset);
				return range2.toString().length;
	        }
	        //textarea
	        return target.selectionStart;
	      }
    	//IE<9
    	if (document.selection) {
    		target.focus();
    		//contenteditable
    		if (isContentEditable) {
    			var range1 = document.selection.createRange(), 
    		  		range2 = document.body.createTextRange();
	    		  range2.moveToElementText(target);
	    		  range2.setEndPoint('EndToEnd', range1);
	    		  return range2.text.length;
    		}
	    	  //textarea
	    	  var pos = 0,
	    	  	range = target.createTextRange(),
	            range2 = document.selection.createRange().duplicate(),
	            bookmark = range2.getBookmark();
	    	  range.moveToBookmark(bookmark);
	    	  while (range.moveStart('character', -1) !== 0) pos++;
	    	  return pos;
    	}
    	// Addition for jsdom support
    	if (target.selectionStart)
    		return target.selectionStart;
    	//not supported
    	return 0;
    }
    //set
    if (pos == -1)
    	pos = this[isContentEditable? 'text' : 'val']().length;
    //HTML5
    if (window.getSelection) {
    	//contenteditable
    	if (isContentEditable) {
    		target.focus();
    		window.getSelection().collapse(target.firstChild, pos);
    	}
    	//textarea
    	else
    		target.setSelectionRange(pos, pos);
    }
    //IE<9
    else if (document.body.createTextRange) {
    	if (isContentEditable) {
    		var range = document.body.createTextRange();
    	  		range.moveToElementText(target);
	  		range.moveStart('character', pos);
	  		range.collapse(true);
	  		range.select();
    	} else {
	    	  var range = target.createTextRange();
	    	  range.move('character', pos);
	    	  range.select();
    	}
    }
    if (!isContentEditable)
    	target.focus();
    return pos;
}
;

(function() {
var uuid = 0,
	slice = Array.prototype.slice;
$.cleanData = (function( orig ) {
	return function( elems ) {
		var events, elem, i;
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			try {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}

			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		orig( elems );
	};
})( $.cleanData );
$.component = function( name, base, prototype ) {
	var fullName, existingConstructor, constructor, basePrototype,
		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple components (#8876)
		proxiedPrototype = {},
		namespace = name.split( "." )[ 0 ];

	name = name.split( "." )[ 1 ];
	fullName = namespace + "-" + name;

	if ( !prototype ) {
		prototype = base;
		base = $.Component;
	}

	// create selector for plugin
	$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
		return !!$.data( elem, fullName );
	};

	$[ namespace ] = $[ namespace ] || {};
	existingConstructor = $[ namespace ][ name ];
	constructor = $[ namespace ][ name ] = function( options, element ) {
		// allow instantiation without "new" keyword
		if ( !this._createComponent ) {
			return new constructor( options, element );
		}
		// allow instantiation without initializing for simple inheritance
		// must use "new" keyword (the code above always passes args)
		if ( arguments.length ) {
			if (options && options.noUseParse) {
				options = $.component.extend( {}, $.fn[name].defaults || {}, options );
			} else {
				options = $.component.extend( {}, $.fn[name].defaults || {}, this._parseOptions(element),
						options );
			}
			this._createComponent( options, element );
		}
	};
	// 兼容旧的写法，如果是fill和coral-adjusted都当做是adjusted组件。
	$.uiplugins = $.uiplugins || {};
	if (name && !$.uiplugins.name) {
		if (name == "adjusted") {
			$.uiplugins["fill"] = constructor;
			$.uiplugins["coral-adjusted"] = constructor;
		}
		$.uiplugins["coralui-"+name] = constructor;
	}
	// extend with the existing constructor to carry over any static properties
	$.extend( constructor, existingConstructor, {
		version: prototype.version,
		// copy the object used to create the prototype in case we need to
		// redefine the component later
		_proto: $.extend( {}, prototype ),
		// track components that inherit from this component in case this component is
		// redefined after a component inherits from it
		_childConstructors: []
	});

	basePrototype = new base();
	// we need to make the options hash a property directly on the new instance
	// otherwise we'll modify the options hash on the prototype that we're
	// inheriting from
	basePrototype.options = $.component.extend( {}, basePrototype.options );
	$.each( prototype, function( prop, value ) {
		if ( !$.isFunction( value ) ) {
			proxiedPrototype[ prop ] = value;
			return;
		}
		proxiedPrototype[ prop ] = (function() {
			var _super = function() {
					return base.prototype[ prop ].apply( this, arguments );
				},
				_superApply = function( args ) {
					return base.prototype[ prop ].apply( this, args );
				};
			return function() {
				var __super = this._super,
					__superApply = this._superApply,
					returnValue;

				this._super = _super;
				this._superApply = _superApply;

				returnValue = value.apply( this, arguments );

				this._super = __super;
				this._superApply = __superApply;

				return returnValue;
			};
		})();
	});
	constructor.prototype = $.component.extend( basePrototype, {
		// TODO: remove support for componentEventPrefix
		// always use the name + a colon as the prefix, e.g., draggable:start
		// don't prefix for components that aren't DOM-based
		componentEventPrefix: existingConstructor ? (basePrototype.componentEventPrefix || name) : name
	}, proxiedPrototype, {
		constructor: constructor,
		namespace: namespace,
		componentName: name,
		componentFullName: fullName
	});

	// If this component is being redefined then we need to find all components that
	// are inheriting from it and redefine all of them so that they inherit from
	// the new version of this component. We're essentially trying to replace one
	// level in the prototype chain.
	if ( existingConstructor ) {
		$.each( existingConstructor._childConstructors, function( i, child ) {
			var childPrototype = child.prototype;

			// redefine the child component using the same prototype that was
			// originally used, but inherit from the new version of the base
			$.component( childPrototype.namespace + "." + childPrototype.componentName, constructor, child._proto );
		});
		// remove the list of existing child constructors from the old constructor
		// so the old child constructors can be garbage collected
		delete existingConstructor._childConstructors;
	} else {
		base._childConstructors.push( constructor );
	}

	$.component.bridge( name, constructor );
	
	return constructor;	
};

$.component.extend = function( target ) {
	var input = slice.call( arguments, 1 ),
		inputIndex = 0,
		inputLength = input.length,
		key,
		value;
	for ( ; inputIndex < inputLength; inputIndex++ ) {
		for ( key in input[ inputIndex ] ) {
			value = input[ inputIndex ][ key ];
			if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
				// Clone objects
				if ( $.isPlainObject( value ) ) {
					target[ key ] = $.isPlainObject( target[ key ] ) ?
						$.component.extend( {}, target[ key ], value ) :
						// Don't extend strings, arrays, etc. with objects
						$.component.extend( {}, value );
				// Copy everything else by reference
				} else {
					target[ key ] = value;
				}
			}
		}
	}
	return target;
};

$.component.bridge = function( name, object ) {
	var fullName = object.prototype.componentFullName || name;
	$.fn[ name ] = function( options ) {
		var isMethodCall = typeof options === "string",
			args = slice.call( arguments, 1 ),
			returnValue = this;

		// tree的js旧的初始化写法的兼容
		// 旧的初始化参数的第一个参数是option，第二个参数是node
		if (name == 'tree') {
			if (arguments[1]) {
				options.data = arguments[1];
			}
		}
		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ?
			$.component.extend.apply( null, [ options ].concat(args) ) :
			options;

		if ( isMethodCall ) {
			this.each(function() {
				var methodValue,
					instance = $.data( this, fullName );
				if ( !instance ) {
					return $.error( "cannot call methods on " + name + " prior to initialization; " +
						"attempted to call method '" + options + "'" );
				}
				if ( options === "instance" ) {
					returnValue = instance;
					return false;
				}
				if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
					return $.error( "no such method '" + options + "' for " + name + " component instance" );
				}
				methodValue = instance[ options ].apply( instance, args );
				if ( methodValue !== instance && methodValue !== undefined ) {
					returnValue = methodValue && methodValue.jquery ?
						returnValue.pushStack( methodValue.get() ) :
						methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data( this, fullName );
				if ( instance ) {
					instance.option( options || {} );
					if ( instance._init ) {
						instance._init();
					}
				} else {
					/*if ( this.id && typeof (this.id) == "string" ) {
						var $Script = $( "#"+this.id + "_s" );
						if( $Script.length>0 ) {
							$Script.remove();
						}
					}*/
					$.data( this, fullName, new object( options, this ) );
				}
			});
		}

		return returnValue;
	};
};

$.Component = function( /* options, element */ ) {};
$.Component._childConstructors = [];

$.Component.prototype = {
	componentName: "component",
	componentEventPrefix: "",
	defaultElement: "<div>",
	castProperties: null, /*options中的哪些属性值(字符串)要转换为对象["data","setting.checkalbe"]*/
	options: {
		disabled: false,
		authorized: true,
		rendered: true,
		// callbacks
		onCreate: null
	},
	formFieldArray: [
	    "autocomplete", "autocompletetree", "combobox", "combotree", "combogrid",
	    "checkbox", "checkboxlist", "datepicker", "radio","radiolist", "spinner", "textbox","fileuploader"
    ],
	panelArray: [
	    "accordion", "dialog", "form", "grid", "layout", "panel", "tabs", "toolbar", "splitcontainer", "view", "adjusted"
    ],
    refresh: function() {
    	
    },
  /*  prepareCreate: function(element) {
    	var that = this;
		this.element = $( element );
		if ( element !== this ) {
			$.data( element, this.componentFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === element ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}
    },*/
	_createComponent: function( options, element ) {
		var that = this;
		element = $( element || this.defaultElement || this )[ 0 ];
		this.element = $( element );
		this.uuid = uuid++;
		this.eventNamespace = "." + this.componentName + this.uuid;
		// 组件身份识别
		if ( !this.element.attr( "component-role" ) ) {
			// TODO: 目前没有好的方案对一个组件初始化两次，所以只能这么做，
			// 如果不处理，element的component-role会被改变
			this.element.attr( "component-role", this.componentName );
		}
		/**
		 * add parseOptions to support the parse option of tag
		 * 
		 * added by mengshuai
		 */
		this.options = $.component.extend( {},
			this.options,
			this._getCreateOptions(),
			options );
		/*if($.migrate&&options&&$.migrate[this.componentName]
			&&this.componentName!="grid"
			&&this.componentName!="tree"//grid在内部处理migrate，此处跳过migrate来提供效率
				){
			this.options = $.extend(true,{},this.options,$.migrate[this.componentName](options));
		}*/
		if ( !this.options.authorized || this.options.authorized === "false" ) { this.element.remove(); }
		this.bindings = $();
		this.hoverable = $();
		this.focusable = $();
		if ( element !== this ) {
			$.data( element, this.componentFullName, this );
			this._on( true, this.element, {
				remove: function( event ) {
					if ( event.target === that.element[0] ) {
						this.destroy();
					}
				}
			});
			this.document = $( element.style ?
				// element within the document
				element.ownerDocument :
				// element is window or document
				element.document || element );
			this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
		}
		/*if ( typeof ( this.options.rendered ) == "undefined" ) {
			this.options.rendered = true;
		} else {
			this.options.rendered = false;
		}*/
		//var data = this.element.data('events');
		this.element.prop( "rendered", !!this.options.rendered );
		if ( !this.options.rendered ) {
			this.element.addClass( "coral-no-rendered" );
			return;
		} else {
			this.element.addClass( "ctrl-init ctrl-init-"+this.componentName );
			this._create();
			this._renderComponent();
		}
	},
	_renderComponent: function(){
		if ( this.options.componentCls ) {
			this.component().addClass( this.options.componentCls );
		}
		if ( this.options.cls ) {
			this.element.addClass( this.options.cls );
		}
		// 处理动态添加的表单元素，添加校验
		/*if ( $.inArray( this.componentName, this.formFieldArray ) > -1 ) {
			this.element.addClass( "ctrl-form-element coral-validation-" + this.componentName );
			//var form = this.element.closest("form");
			// 如果form存在，则不进行添加
			// 如果form不存在，额外的进行添加
			//if ( !form.length && !$.data( this.element[0], "inited" )) {
			$.validate.addField( this.element, this.options );
			//}
			
		}*/
		if (this.addField) {
			this.addField();
		}
		if ( $.inArray( this.componentName, this.panelArray ) > -1 ) {
			if (typeof this.element.attr("id") != "undefined") {
				this.options.id = this.element.attr("id");
			} else if (this.options.id) {
				this.element.attr("id", this.options.id);
			} else {
				this.options.id = this.element.uniqueId(this.componentName).attr("id");
			}
			this.component().addClass( "ctrl-fit-element" );
			this.component().attr("component-id", this.options.id);
		} else {
			if (typeof this.element.attr("id") != "undefined") {
				this.options.id = this.element.attr("id");
			} else if (this.options.id) {
				this.element.attr("id", this.options.id);
			}
		}
		this._trigger( "onCreate", null, this._getCreateEventData() );
		this._init();
	},
	properties: ["controllerName"],
	_parseOptions: function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, this.properties, this.castProperties));
	},
	_getCreateOptions: $.noop,
	_getCreateEventData: $.noop,
	_create: $.noop,
	_init: $.noop,

	valid: function() {
		var data = {
			hasTips: false,
			element: this.element
		};
		return ( $.validate.validateField( null, data ).length > 0 ? false : true );
	},
	isValid: function(){
		
	},
	destroy: function() {
		this._destroy();
		// we can probably remove the unbind calls in 2.0
		// all event bindings should go through this._on()
		this.element
			.unbind( this.eventNamespace )
			// 1.9 BC for #7810
			// TODO remove dual storage
			.removeData( this.componentName )
			.removeData( this.componentFullName )
			// support: jquery <1.6.3
			// http://bugs.jquery.com/ticket/9413
			.removeData( $.camelCase( this.componentFullName ) );
		this.element.removeClass(
		"ctrl-form-element " + "ctrl-init ctrl-init-" + this.componentName );
		this.component()
			.unbind( this.eventNamespace )
			.removeAttr( "aria-disabled" )
			.removeAttr( "component-role" )
			.removeClass(
				this.componentFullName + "-disabled " +
				"coral-state-disabled" );
		this.element.removeAttr( "component-role" );
		this.element.removeAttr( "data-options" );
		// clean up events and states
		this.bindings.unbind( this.eventNamespace );
		this.hoverable.removeClass( "coral-state-hover" );
		this.focusable.removeClass( "coral-state-focus" );
	},
	_destroy: $.noop,

	component: function() {
		return this.element;
	},
	option: function( key, value ) {
		var options = key,
			parts,
			curOption,
			i;

		if ( arguments.length === 0 ) {
			// don't return a reference to the internal hash
			return $.component.extend( {}, this.options );
		}

		if ( typeof key === "string" ) {
			// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
			options = {};
			parts = key.split( "." );
			key = parts.shift();
			if ( parts.length ) {
				curOption = options[ key ] = $.component.extend( {}, this.options[ key ] );
				for ( i = 0; i < parts.length - 1; i++ ) {
					curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
					curOption = curOption[ parts[ i ] ];
				}
				key = parts.pop();
				if ( arguments.length === 1 ) {
					return curOption[ key ] === undefined ? null : curOption[ key ];
				}
				curOption[ key ] = value;
			} else {
				if ( arguments.length === 1 ) {
					return this.options[ key ] === undefined ? null : this.options[ key ];
				}
				options[ key ] = value;
			}
		}

		this._setOptions( options );

		return this;
	},
	_setOptions: function( options ) {
		var key;

		for ( key in options ) {
			this._setOption( key, options[ key ] );
			this.element.trigger( "onOptionChange", {key: key, value: options[ key ]} );
		}

		return this;
	},
	_setOption: function( key, value ) {
		this.options[ key ] = value;

		if ( key === "disabled" ) {
			this.component()
				.toggleClass( this.componentFullName + "-disabled coral-state-disabled", !!value )
				.attr( "aria-disabled", value );

			// If the component is becoming disabled, then nothing is interactive
			if ( value ) {
				this.hoverable.removeClass( "coral-state-hover" );
				this.focusable.removeClass( "coral-state-focus" );
			}
		}

		return this;
	},
	enable: function() {
		return this._setOptions({ disabled: false });
	},
	disable: function() {
		return this._setOptions({ disabled: true });
	},
	show: function() {
		this.component().removeClass("coral-state-hidden").show();
	},
	hide: function() {
		this.component().addClass("coral-state-hidden").hide();
	},
	// 初始化搜索引擎，创建拼音搜索索引
	/**
	 * key 如： 
	 * dataArr 如： [{id:'1', name:'节点1'},{id:'2', name:'节点2'}]
	 */
	_pinyinEngine: function () {
		return new pinyinEngine();
	},
	_pinyinSetCache: function (engine, key, dataArr) {
		
		for (var i in dataArr) {
			// @param	{Array}	标签
			// @param	{Any}	被索引的内容
			engine.setCache([dataArr[i][key]], dataArr[i]);
		}
		
		return engine;
	},
	/** 
	 * @param engine 
	 * @param keyword 搜索的关键字
	 * @param callback 返回dataResult
	 */
	_pinyinSearch: function (engine, keyword, callback) {
		var dataResult = [];
		
		engine.search(keyword, function (data) {
			dataResult.push(data);
		});
		
		callback(dataResult);
	},
	_on: function( suppressDisabledCheck, element, handlers ) {
		var delegateElement,
			instance = this;

		// no suppressDisabledCheck flag, shuffle arguments
		if ( typeof suppressDisabledCheck !== "boolean" ) {
			handlers = element;
			element = suppressDisabledCheck;
			suppressDisabledCheck = false;
		}

		// no element argument, shuffle and use this.element
		if ( !handlers ) {
			handlers = element;
			element = this.element;
			delegateElement = this.component();
		} else {
			// accept selectors, DOM elements
			element = delegateElement = $( element );
			this.bindings = this.bindings.add( element );
		}

		$.each( handlers, function( event, handler ) {
			function handlerProxy() {
				// allow components to customize the disabled handling
				// - disabled as an array instead of boolean
				// - disabled class as method for disabling individual parts
				if ( !suppressDisabledCheck &&
						( instance.options.disabled === true ||
							$( this ).hasClass( "coral-state-disabled" ) ) ) {
					return;
				}
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}

			// copy the guid so direct unbinding works
			if ( typeof handler !== "string" ) {
				handlerProxy.guid = handler.guid =
					handler.guid || handlerProxy.guid || $.guid++;
			}

			var match = event.match( /^([\w:-]*)\s*(.*)$/ ),
				eventName = match[1] + instance.eventNamespace,
				selector = match[2];
			if ( selector ) {
				delegateElement.delegate( selector, eventName, handlerProxy );
			} else {
				element.bind( eventName, handlerProxy );
			}
		});
	},

	_off: function( element, eventName ) {
		eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
		element.unbind( eventName ).undelegate( eventName );
	},

	_delay: function( handler, delay ) {
		function handlerProxy() {
			return ( typeof handler === "string" ? instance[ handler ] : handler )
				.apply( instance, arguments );
		}
		var instance = this;
		return setTimeout( handlerProxy, delay || 0 );
	},

	_hoverable: function( element ) {
		this.hoverable = this.hoverable.add( element );
		this._on( element, {
			mouseenter: function( event ) {
				$( event.currentTarget ).addClass( "coral-state-hover" );
			},
			mouseleave: function( event ) {
				$( event.currentTarget ).removeClass( "coral-state-hover" );
			}
		});
	},

	_focusable: function( element ) {
		this.focusable = this.focusable.add( element );
		this._on( element, {
			focusin: function( event ) {
				$( event.currentTarget ).addClass( "coral-state-focus" );
			},
			focusout: function( event ) {
				$( event.currentTarget ).removeClass( "coral-state-focus" );
			}
		});
	},
    addNoTrigger: function ( string ){
    	this.options.noTriggerEvent.push(string);
    },
	_trigger: function( type, event, data ) {
		var noTrigger = this.options.noTriggerEvent||[];
		if ( noTrigger.length ) {
			for( var i=0;i<noTrigger.length;i++ ){
				if( type==noTrigger[i] ){
					noTrigger.splice(i,1);
					return;
				} 
			}
		}
		var ctype = this.options[ type ];
		if (this.options.controllerName && typeof ctype === "string") {
			ctype = this.options.controllerName + "." + ctype;
		}
		var prop, orig, 
			/**
			 * 1. $.isFunction to find the function of tag
			 * 
			 * 2. if "type" is function then not trigger the function of options.
			 */
		    fn = $.isFunction(type)?type:$.coral.toFunction( ctype ), rData = {};

		data = data || {};
		event = $.Event( event );
		event.type = ( type === this.componentEventPrefix ?
			type :
			this.componentEventPrefix + type ).toLowerCase();
		// the original event may come from any element
		// so we need to reset the target on the new event
		event.target = this.element[ 0 ];
		// copy original event properties over to the new event
		orig = event.originalEvent;
		if ( orig ) {
			for ( prop in orig ) {
				if ( !( prop in event ) ) {
					event[ prop ] = orig[ prop ];
				}
			}
		}

		this.element.trigger( event, data );
		// customData只是为了用在回调函数中，自定义事件的e.data中无法取得此处的customData
		event.data = event.data || {};
		$.extend(event.data, this.options.dataCustom);
		$.extend(event.data, {"controllerName": this.options.controllerName});
		var _t;
		_t = $.controller(this.options.controllerName);
		if (this.options.controllerName && !$.isFunction(this.options[ type ]) && _t) {
			$.extend(event.data, {"element": this.element[0]});
		} else {
			_t = this.element[0];
		}
		return !( $.isFunction(fn) && fn.apply( _t, [ event ].concat( data ) ) === false || event.isDefaultPrevented() );
		/*rData["prevented"] = !( $.isFunction(fn) && fn.apply( this.element[0], [ event ].concat( data ) ) === false 
			|| event.isDefaultPrevented() );
		
		if (data[0] && data[0]["getData"] == true) {
			rData["result"] = event["result"];
		} else {
			return rData["prevented"];
		}
		return rData;*/
	}
};

$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
	$.Component.prototype[ "_" + method ] = function( element, options, callback ) {
		if ( typeof options === "string" ) {
			options = { effect: options };
		}
		var hasOptions,
			effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;
		options = options || {};
		if ( typeof options === "number" ) {
			options = { duration: options };
		}
		hasOptions = !$.isEmptyObject( options );
		options.complete = callback;
		if ( options.delay ) {
			element.delay( options.delay );
		}
		if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
			element[ method ]( options );
		} else if ( effectName !== method && element[ effectName ] ) {
			element[ effectName ]( options.duration, options.easing, callback );
		} else {
			element.queue(function( next ) {
				$( this )[ method ]();
				if ( callback ) {
					callback.call( element[ 0 ] );
				}
				next();
			});
		}
	};
});

})();
;

$.component("coral.formelement", {
	version: "4.0.2",
	options: {
		inputLabelGutter: 10//textbox和button之间的间距
	},
	getValidateValue: function() {
		return this.getValue();
	},
	clearError: function() {
		this.component().removeClass("hasErrorIcon coral-validate-error");
		this.component().find(".coral-errorIcon").remove();
		this.element.prop("isError", false);
	},
	addField: function() {
		this.element.addClass( "ctrl-form-element coral-validation-" + this.componentName );
		var that = this;
		var $field = this.element,
			form = $field.closest(".coral-form-default"),//form 初始化好才有coral-form-default这个样式
			formOptions =form.length > 0 ? 
				$.extend( {},$.validate.options, form["form"]("option") ): 
				$.extend( {},$.validate.options );
		if ( 
			// 说明form没有初始化好
			$field.closest(".coral-form-default").length === 0 && 
			// 说明存在form
			$field.closest("form").length > 0 ) return;
		
		var opts = this.options,
			required = opts.required,
			name = opts.name,
			showStar = opts.showStar,
			starBefore = opts.starBefore,
			validTypeOptions = opts.validTypeOptions,
			triggers = opts.triggers || formOptions.triggers[this.componentName] || $.validate.options.triggers[this.componentName];
		
		 // 绑定触发校验的事件
		var events = $.map( triggers, function(item) {
			return that.componentEventPrefix + item + ".field";
        }).join(" ");
		// 绑定组件的校验方法
		$field.off(".field").on( events, function( event, ui ) {
			$.validate.validItem($( this ), event, true);
		});
		$field.off(".focuselement").on( that.componentName + "onkeydown" + ".focuselement", function( e, ui ) {
			var keyCode = $.coral.keyCode,record = 0;
			var fbutton = form.find(".coral-button"),
				button;
			$.each (fbutton,function(i) {
				if (fbutton[i].type == "submit") {
					button = fbutton[i];
				}
			});
			var f = form.find(".tabbable"),
				record = 0;
			var activeElement = document.activeElement,
				isActive;
			$.each (f,function(i) {
				isActive = f[i] === activeElement;
				record = i;
				if (isActive) return false;
			});
			if (isActive && f[record].tagName != "TEXTAREA") {
				if (e.shiftKey) {
					switch (e.keyCode) {
					case keyCode.ENTER:
						//e.preventDefault();
						if (record > 0) {
							f[record - 1].focus();
						} else if ( record == 0 ) {
							if (button) {
								button.focus();
							} else {
								f[f.length - 1].focus();
							}
						}
						break;
					}
				} else {
					switch (e.keyCode) {
					case keyCode.ENTER:
						//e.preventDefault();
						if (record < f.length-1 ) {
							f[record + 1].focus();
						} else if(record == f.length-1) {
							if (button) {
								button.focus();
							} else {
								f[0].focus();
							}
						}
						break;
					}
				}
			}
		});
		// 初始化必输项设置 *
		if ( typeof required === "boolean" && required ) {
			$.validate._changeRequiredMark(this.element, required);
		}
	},
	_setOption: function( key, value ) {
		var that = this,
			opts = this.options;
		this._super( key, value );
		switch(key) {
			case "required":
				$.validate._changeRequiredMark(that.element,value);
				that.clearError();
				break;
			case "isLabel":
			case "readonly":
			case "readonlyInput":
				that.clearError();
				break;
			case "maxlength":
				$.validate.showTooltip(that.element, opts.validTypeOptions);
				break;
			}
	},
	_createLabel: function(){
		var pos = this.options.labelPosition || "left" ,
			labelField = this.options.labelField;
		this._initLabel(pos, labelField);
	},
	_initLabel: function(pos , labelField ){
		this.labelPanel = $("<label class='coral-label ' style='width:100px;position:absolute;' data-pos=" 
				+ pos + ">"+ labelField +"</label>");
		this.labelWraper = this.component();
		this.labelWraper["prepend"](this.labelPanel);
		this._positionLabelPanel(pos);
	},
	_positionLabelPanel: function(direction){
		var width = this.labelPanel.outerWidth();
		this.component().css(
			"padding-" + direction, width
		);
		this.labelPanel.css(direction, 0);
	}
});
;

$.component("coral.inputbase", $.coral.formelement, {
	version: "4.0.2",
	options: {
		inputButtonGutter: 5//textbox和button之间的间距
	},
	setAtrr: function() {
		var attrs = [ "id", "name", "value", "component-role", "data-options"];
		for(var i=0; i<attrs.length; i++){
			if (this.element.attr(attrs[i])) {
				this.textboxInput.setAttribute(attrs[i], this.element.attr(attrs[i]));
			}
		}
	},
	createInput: function() {
		
		var comboArrow = "", clearIcon="", name="", type="";
		if(this.options.hasArrow == true){
			if (this.options.showDirection == "down") {
				comboArrow = "<span class='coral-combo-arrow coral-icon-arrow cui-icon-arrow-down3'></span>";
			} 
			if (this.options.showDirection == "up") {
				comboArrow = "<span class='coral-combo-arrow coral-icon-arrow cui-icon-arrow-up3'></span>";
			} 
		}
		if ("hidden" !== this.element.attr("type") && 
				"file" !== this.element.attr("type") && 
				"password" !== this.element.attr("type") && 
				"text" !== this.element.attr("type") && 
				"INPUT" == this.element[0].tagName.toUpperCase() ) {
			type = "text";
		} else {
			type = this.element.attr("type");
			if(!type){
				type = "text";
			}
		}
		// 删除图标
		if ( this.options.showClose && !this.options.required) {
			clearIcon = "<span class='coral-input-clearIcon cui-icon-cross2'></span>";
		}
		var ele = "<input type=\""+ type +"\" class=\""+ this.className +"\" autocomplete=\"off\"/>";
		if (this.element[0].tagName == "TEXTAREA"){
			ele = "<textarea type='textarea' class='"+ this.className+"'/>"+this.element.text()+"</textarea>";
		}
		ele = "<span class='coral-textbox-border coral-corner-all "+ this.classBorder +"'>"+ ele + clearIcon + comboArrow +"</span>"
		ele += "<input name=\"" + name + "\" type='hidden'  class=\"" + this.hiddenClass + "\"/>";
		
		this.textboxWrapper = document.createElement("span");
		this.textboxWrapper.className = this.compClass;
		this.textboxWrapper.innerHTML = ele;
		this.elementBorder = this.textboxWrapper.firstChild;
		this.textboxInput = this.elementBorder.firstChild;
		this.clearIcon = $(this.textboxInput.nextSibling);
		this.setAtrr();
		this.cloneCopyEvent(this.element[0], this.textboxInput);
		var parent = this.element[0].parentNode;
		if (parent && this.textboxWrapper != this.element[0])
			parent.replaceChild(this.textboxWrapper, this.element[0]);
		//this.element.replaceWith(this.textboxWrapper);
		//this.prepareCreate(this.textboxInput);
	},
	cloneCopyEvent: function( src, dest ) {

		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}

		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	},
	_setOption: function( key, value ) {
		var that = this;
		this._super( key, value );
		this.component().find(".button").each(function(){
			var type = $(this).attr("data-pos");
			var arr = type.split("_");
			// 设置isLabel后，需要控制附带按钮的隐藏与显示，输入框的padding的控制。
			if ( key === "isLabel" ) {
				if (value) {
					$(this).hide();
					if (arr[0] == "outer") {
						that.component().css("padding-" + arr[1], 0);
					} else {
						that.component().find(".coral-textbox-border").css("padding-" + arr[1],0);
					}
				} else {
					$(this).show();
					var width = $(this).outerWidth();
					if (arr[0] == "outer") {
						that.component().css("padding-" + arr[1], width + that.options.inputButtonGutter );
					} else {
						that.component().find(".coral-textbox-border").css("padding-" + arr[1], width);
					}
				}
			}
			// readonly disable isLabel需要控制按钮的禁用与启用
			if ( key === "readonly" || key === "disable" || key==="isLabel"){
				var $buttons = $(this).find(".ctrl-init-button");
				if(value){
					$buttons.button("disable");
				} else {
					$buttons.button("enable");
				}
			}
		});
	},
	_outerButtons: function() {
		this.uiDialogOuterButtonPanel = $("<span class='coral-outerbuttonset coral-outer coral-corner-all'></span>");
		this.component().append(this.uiDialogOuterButtonPanel);
		this._createtoolPanelItems(this.options.buttonOptions, null, this.uiDialogOuterButtonPanel, null, "button");
		this.component().css("padding-right", this.uiDialogOuterButtonPanel.outerWidth() + 8);
	},
	_createButtonPanel: function() {
		var is = false,
			i,
			direction = "right",
			pos = "inner",
			key = "innerRight",
			opermethod = "prepend",
			buttons = this.options.buttons;
		for (i=0; i < this.options.buttons.length;i++) {
			if (buttons[i]["innerLeft"]) {
				key = "innerLeft";
				direction = "left";
				is = true;
			}
			if (buttons[i]["innerRight"]) {
				key = "innerRight";
				direction = "right";
				opermethod = "append";
				is = true;
			}
			if (buttons[i]["outerRight"]) {
				key = "outerRight";
				direction = "right";
				pos = "outer";
				opermethod = "append";
				is = true;
			}
			if (buttons[i]["outerLeft"]) {
				key = "outerLeft";
				direction = "left";
				pos = "outer";
				is = true;
			}
			if (buttons[i]["floatRight"]) {
				key = "floatRight";
				pos = "float";
				opermethod = "append";
				is = true;
			}
			if (buttons[i]["floatLeft"]) {
				key = "floatLeft";
				direction = "left";
				pos = "float";
				is = true;
			}
			var button = buttons[i][key]?buttons[i][key][0]:buttons[i];
			if (button.type && button.type == "combobox") {
				this._initToolPanel(pos, key, direction, opermethod, i, "combobox");
			} else if (is) {
				this._initToolPanel(pos, key, direction, opermethod, i, "button");
			}
		}
		// 兼容buttons的旧的构造方法
		if (!is) {
			this.uiDialogButtonPanel = $("<span class='button " + key + " coral-textbox-btn-icons coral-buttonset coral-corner-" 
				+ direction+ "' data-pos=" + pos + "_" + direction + "></span>"); 
			this._createtoolPanelItems(this.options.buttons, direction , this.uiDialogButtonPanel, pos, "button");
			this.elementBorder.append(this.uiDialogButtonPanel);
			this.elementBorder.css("padding-right", this.uiDialogButtonPanel.outerWidth());
			this.uiDialogButtonPanel.css("right", 0);
			this.rightPos = this.uiDialogButtonPanel.outerWidth();
		}
	},
	_initToolPanel: function(pos, key, direction, opermethod, i, addType) {
		var that = this;
		if (pos == "inner") {
			this.uiButtonPanel = $("<span class='button " + key + " coral-buttonset coral-inner coral-corner-"
				+ direction + "' data-pos=" + pos + "_" + direction + "></span>");
			this.buttonPanelWraper = this.elementBorder;
		} else {
			this.uiButtonPanel = $("<span class='button " + key + " coral-outerbuttonset coral-outer coral-corner-all' data-pos=" 
				+ pos + "_" + direction + "></span>");
			this.buttonPanelWraper = this.component();
		}
		this.buttonPanelWraper[opermethod](this.uiButtonPanel);
		this._createtoolPanelItems(this.options.buttons[i][key], direction, this.uiButtonPanel, pos, addType);
		this._positionToolPanel(pos, direction);
	},
	_positionToolPanel: function(pos, direction){
		// 由于宽度计算会出现小数的情况，外层的面板+1px像素，避免里面按钮的文字出现换行。
		var width = this.uiButtonPanel.outerWidth() + 1;
		if (pos === "inner") {
			this.elementBorder.css("padding-" + direction, width);
			this.uiButtonPanel.css(direction, 0);
		} else if (pos === "float") {
			this.uiButtonPanel.css(
				direction, -(width + this.options.inputButtonGutter)
			);
		} else if (pos === "outer") {
			this.component().css(
				"padding-" + direction, width + this.options.inputButtonGutter
			);
			this.uiButtonPanel.css(direction, 0);
		}
		// 左侧按钮面板需要加宽度，否则会撑满整行，遮挡输入框，右侧按钮面板不会遮挡输入框。
		if (direction === "left") {
			this.uiButtonPanel.css("width", width);
		}
		if (pos + direction === "innerright") {
			this.rightPos = this.uiButtonPanel.outerWidth();
		}
	},
	_createtoolPanelItems: function(items , direction , appendTo , pos, itemType) {
		var that = this;
		if ($.isEmptyObject(items)) items = {};
		if (items instanceof Array == false) {
			items = [items];
		}
		$.each( items, function(i) {
			var addCls = "",
				removeCls = "coral-corner-all";
			if (pos=="inner" && direction == "left") {
				if(i == 0){
					addCls = "coral-corner-left";
				}
			} else if (pos=="inner" && direction == "right") {
				if (i==(items.length-1)) {
					addCls = "coral-corner-right";
				}
			} else {
				removeCls = "";
			}
			if (itemType === "button") {
				var click,
					props = $.extend({type: "button"}, {click: this.click});
				this.click = this.onClick || this.click;
				delete this.onClick;
				click = this.click || $.noop;
				props.click = function() {
					click.apply(that.element[0], arguments);
				};
				delete this.click;
				var button = $( "<button></button>", props ).button(this);
				button.button("component")
				.addClass(addCls)
				.removeClass(removeCls)
				.appendTo(appendTo);
				this.click = click;
			} else if (itemType === "combobox") {
				//delete this.type;??
				this.width = "item";
				// 必须先初始化，然后再添加到appendTo里面，否则会因为没有初始化好，造成下拉框会垂直排列。
				var combobox1 = $("<input type='text'/>").appendTo("body");
				// 数据加载好和值发生变化后需要动态改变输入框的长度。
				combobox1
					.off(".changeLength")
					.on("comboboxonload.changeLength", {target: combobox1}, function(e){
						that.resizeCombo.apply(e.data.target.combobox("instance"));
					})
					.on("comboboxonchange.changeLength", {target: combobox1}, function(e){
						that.resizeCombo.apply(e.data.target.combobox("instance"));
					})
					.combobox(this);
				combobox1
					.combobox("component")
					.addClass(addCls)
					.removeClass(removeCls)
					.appendTo(appendTo)
				    .addClass("coral-DropDownButton");
			}
		});
	},
	resizeCombo: function() {
		var that = this,
			opts = this.options,
	        totalWitdh = 0;// total width of items
		function resizeComboOuter(pos, direction) {
			var gutter = that.options.inputButtonGutter,
				totalWitdh = 0;// total width of items
			if (pos === "outer") {
				$(".coral-outer").children(".coral-DropDownButton").each(function(){
					totalWitdh += $(this).width();
				})
				that.component().closest(".coral-outer").css("width", totalWitdh);
				that.component()
					.closest(".coral-outer")
					.closest(".coral-textbox")
					.css(
						"padding-" + direction, totalWitdh + gutter
					);
			}
			if (pos === "inner") {
				if (that.component().hasClass("coral-inner-left")) {
					$(".coral-inner").find(".coral-inner-left").each(function() {
						totalWitdh += $(this).width();
					})
					that.component().closest(".coral-textbox-border").css("padding-left", totalWitdh);
				}
				// TODO: 暂时不支持innerRight的下拉模式
			}
		}
		// 重新计算内部按钮的尺寸和边距
		if (this.component().closest(".coral-inner").length) {
			resizeComboOuter("inner", "left");
		}
		var outer = this.component().closest(".coral-outer");
		// 重新计算外部按钮的尺寸和边距
		if (outer.length) {
			if (outer.attr("data-pos") == "outer_right") {
				resizeComboOuter("outer", "right");
			}
			if (outer.attr("data-pos") == "outer_left") {
				resizeComboOuter("outer", "left");
			}
		}
	}
});
;

function _parseUI(context, controllerName) {
	var index = -1,
	controllerName = controllerName || null;
	//context = $(context)[0];
	var classNames = String(context.className);
	if (classNames) {
		// 判断是不是组件
		var component = $(context);
		if (!component.attr("component-role")) {
			var classNameArr = classNames.split(" ");
			for (var i = 0, l = classNameArr.length; i < l; i++) {
				var className = classNameArr[i], 
					UI = $.coral.getUI(className);
				if (UI !== -1) {
					var name = className.split("-")[1];
					index = $.inArray(name, $.parser.formPlugins);
					if (component[name]){
						component.removeClass('coralui-' + name);
						if (name == "view") {
							//得到参数，得到参数之后赋值给opts
							controllerName = $.parser.parseOptions(component).controllerName;
						}
						if (controllerName) {
							component.attr("controllerName", controllerName);
						}
						new UI({}, component);
						//component[name]();
						break;
					}
				}
			}
		}
	}
	if( index !== -1) return;
	var children = context.childNodes;
	if (context.getAttribute("data-render") === "false") {
		return;
	}
	for (var i = 0; i < children.length; i++) {
		var child = children[i];
		if (child.nodeType == 1)
			if (child.parentNode == context)
				_parseUI(child, controllerName);
	}
}
$.parser = {
	auto: true,
	doneArr: [],
	component: [],
	onComplete: function(context){},
	onInit: function(context){},
	plugins:["coralui-tabs","coralui-layout","coralui-grid","coralui-panel",
	         "coralui-button", "coralui-menubutton" , "coralui-treebutton",
	         "coralui-splitbutton", "coralui-accordion","coralui-textbox", 
	         "coralui-autocomplete","coralui-autocompletetree","coralui-uploader", "coralui-radio",
	         "coralui-radiolist","coralui-checkbox", "coralui-checkboxlist",
	         "coralui-spinner","coralui-slider","coralui-combo","coralui-combobox",
	         "coralui-combotree","coralui-combogrid", "coralui-datepicker",
	         "coralui-form","coralui-picgrid","coralui-tree","coralui-toolbar",
	         "coralui-progressbar","coralui-menu","coralui-menubar",
	         "coralui-contextmenu","coralui-slidemenu","coralui-tieredmenu",
	         "coralui-navigatemenu","coralui-dialog","coralui-subfield",
	         "coralui-splitcontainer","coralui-view", "coralui-loading",
	         "coralui-adjusted","fill","coral-adjusted"],
	formPlugins:["grid","button", "menubutton", "textbox", "autocomplete","uploader", "splitbutton",
	             "radio","radiolist","checkbox","checkboxlist","spinner","slider","combo",
		         "combobox","combotree","combogrid","datepicker","tree","progressbar","colorpicker"],
    isElement: function(el) {
    	if (el && el.appendChild) {
			return true;
		}
    	return false;
    },
	parse: function(context){
		if (typeof context == "string") {
			if (!$(context).length) {
				context = document.body;
			}
		}
		if (!context) {
			context = document.body;
		}
		$.parser.onInit.call($.parser, context);
		if (!$.parser.isElement($(context)[0])) {
			context = document.body;
		}
		_parseUI($(context)[0]);
		$.coral.refreshAllComponent(context);
		$.parser.onComplete.call($.parser, context);
		$.each($.parser.doneArr,function(i){
			var fun = $.parser.doneArr.shift();
			if ( $.isFunction(fun) ) {
				fun.call($.parser);
			} else if (fun) {
				var o = fun;
				if ( $.isFunction(o.fun) ) {
					o.fun.call(o.context, o.args);
				}
			}
		});
	},
	/**
	 * parse options, including standard 'data-options' attribute.
	 * 
	 * calling examples:
	 * $.parser.parseOptions(target);
	 * $.parser.parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
	 *  castProperties --options中要转换了属性 格式：["data", "setting.xx.xx", ...]
	 */
	parseOptions: function(target, properties, castProperties){
		var t = $(target),
		    s = $.trim(t.attr('data-options')),
		    first = null,
		    last  = null,
		    opts  = null,
		    i     = 0,
		    name  = null,
		    value = null,
		    type  = null,
		    options = {};
		
		if (s){
			first = s.substring(0,1);
			last  = s.substring(s.length-1,1);
			if (first != '{') s = '{' + s;
			if (last != '}') s = s + '}';
			options = (new Function('return ' + s))();
		}
			
		if (properties){
			opts = {};
			for(var i=0; i<properties.length; i++){
				value = properties[i];
				if (typeof value == 'string'){
					if (value == 'width' || value == 'height' || value == 'left' || value == 'top'){
						opts[value] = parseInt(target.style[value]) || undefined;
					} else {
						opts[value] = t.attr(value);
					}
				} else {
					for(name in value){
						type = value[name];
						if (type == 'boolean'){
							opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
						} else if (type == 'number'){
							opts[name] = t.attr(name)=='0' ? 0 : parseFloat(t.attr(name)) || undefined;
						}
					}
				}
			}
			$.extend(options, opts); opts = null;
		}
		if ( castProperties instanceof Array) {
			for (i = 0; i < castProperties.length; i++) {
				name = castProperties[i];
				if (options.controllerName && typeof options[name] == "string" && options[name] !="true" && options[name] !="false") {
					options[name] = options.controllerName + "." + options[name];
				}
				change2object(options, name.split("."), options.controllerName);
			}
		}
		return options;
	}
};
$(function(){
	if (!window.easyloader && $.parser.auto){
		$.parser.parse();
	}
});

/**
 * 把指定属性名的值(字符串)转换为对象
 */
function change2object (obj, keys)  {
	var key = keys.shift();
	if (keys.length == 0) {
		if (obj && obj[key] && typeof obj[key] === "string") {
			try {
				obj[key] = (new Function('return ' + obj[key]))();
			} catch (e) {}
		}
	} else {
		change2object (obj[key], keys);
	}
}
$.parseDone = function(done){
	$.parser.doneArr.push(done);
};
;

var validate_uuid = 0, validateSuffix = "coralForm", validatePrefix = "validate";

$.validate = {
	options: {
		onStatus: "onstatus",
		errorMode: 1,// 0表示下面显示错误信息  ；1代表感叹号 ； 
		errMsgPosition: "leftBottom",
		requiredMsg : "*必输项",
		triggers: {
			textbox: ["onchange","onblur","onkeyup"],
			radio: ["onchange","onblur"],
			checkbox: ["onchange","onblur"],
			radiolist: ["onchange","onblur"],
			checkboxlist: ["onchange","onblur"],
			combobox: ["onchange","onblur"],
			colorpicker:[],
			combotree: ["onchange","onblur"],
			combogrid: ["onchange","onblur"],
			datepicker: ["onchange","onblur"],
			autocomplete: ["onchange","onblur"],
			spinner: ["onchange","onblur"],
			textboxlist: ["onchange","onblur"],
			autocompletetree: ["onchange","onblur"],
			fileuploader: ["onchange"]
		}
	},
	// 返回校验后缀
	validateSuffix: function() {
		return validateSuffix;
	},
	/**
	 * param
	 * json {
	 *	validType: "minlength", //("required", "maxlength", "validType", "pattern")
	 *	validValue: "5"         //("false", "20", "number/float/ip/port", "正则表达式String")
	 *	optionValue: "yyyy-MM-dd",
	 *	elementValue: "value"
	 * }
	 * 
	 * return "" || "<%=出错信息 %>";
	 */		
	_validate: function (json) {
		var type = json.validType,
			validValue = json.validValue,
			elementValue = json.elementValue,
			optionValue = json.optionValue,
			field = json.field,
			requiredMsg = json.requiredMsg,
			errMsg = json.errMsg;
		
		if (typeof validValue == "undefined") {
			return "";
		}
		switch (type) {
			case "required":
				return this._checkRequired(validValue, elementValue, requiredMsg);
			case "minlength": 
				return this._checkMinlength(validValue, elementValue, errMsg);
			case "maxlength": 
				return this._checkMaxlength(validValue, elementValue, errMsg);
			case "pattern": 
				return this._checkPattern(validValue, elementValue, errMsg);
			case "validType":
				return this._checkValidType(validValue, elementValue, optionValue, errMsg);
			case "valid":
				return this._checkValid(validValue, elementValue, errMsg, field);
			case "specialCharacters":
				return this._isSpecialCharacters(validValue, elementValue, errMsg);
			default:
				return "";
		}			
	},
	/**
	 * 获取校验组件的类型
	 * @param el 组件jquery对象
	 * @return {string} 组件类型
	 */
	getFieldType: function(el) {
		return $( el ).attr( "component-role" );
		/*var classArray = $(el)[0].className.split(" "),
			type = "";

		for ( var item in classArray ) {
			if ( classArray[item].indexOf( "coral-validation-" ) >=  0 ) {
				type = classArray[item].substr( classArray[item].indexOf( "coral-validation-" ) + 17 );
				return type;
			}
		}
		
		return null;*/
	},
	validTypeNames: ["required","minlength","maxlength","pattern","validType","valid","specialCharacters"],
	// 校验类型控制 ??
	validTypeOptions: {
		"maxlength": {
			restrictInput: false,
			showTooltip: false
		},
		"number": {
			restrictInput: false
		},
		"naturalnumber": {
			restrictInput: false
		},
		"integer": {
			restrictInput: false
		},
		"float": {
			restrictInput: false
		},
		"zh": {
			restrictInput: false
		},
		"letter": {
			restrictInput: false
		},
		"uppercase": {
			restrictInput: false
		},
		"lowercase": {
			restrictInput: false
		},
		"zhOrNumOrLett": {
			restrictInput: false
		},
		"ip": {
			restrictInput: false
		},
		"port": {
			restrictInput: false
		},
		"url": {
			restrictInput: false
		},
		"email": {
			restrictInput: false
		},
		"mobile": {
			restrictInput: false
		},
		"idno": {
			restrictInput: false
		},
		"zipcode": {
			restrictInput: false
		}
	},
	/**
	 * data: isComponent ,如果是grid可能是对td的校验，无法获取component和option，也不能通过内置的校验进行提示
	 */
	validateField: function( event, data ) {
		validAction = true;
		data.validoptions = data.validoptions || {};
		var el = data.element,
			type = $.validate.getFieldType( el ),
    	 	component = data.notComponent?data.component : el[type]("component"),
    	 	options = data.notComponent?data.validoptions : el[type]("option"), // 获取组件的所有参数（options）
    	 	val = null, 
    	 	hasTips = data.hasTips,
    	 	errorArrayOriginal = [],
    	 	errorResults = [],
    	 	errorMode = options.errorMode || data.validoptions.errorMode || $.validate.options.errorMode,
    	 	errMsgPosition = options.errMsgPosition || data.validoptions.errMsgPosition || $.validate.options.errMsgPosition,
    	 	readonly = options.readonly,
    	 	disabled = options.disabled,
    	 	isLabel = options.isLabel;
		if (!component.is(":visible")) {
    		hasTips =  false;
    	}
		hasTips = false;
		// don't valid hidden input element 
		if ( "hidden" == el.attr("type") ) {
			el.prop( "isError", false );
			return errorResults;
		} 
		// if isLabel or disabled ,then don't valid 
		if ( isLabel || disabled) {
			el.prop( "isError", false ); 
			return errorResults;
		}
		// 针对表格的校验的特殊处理，表格里面不包含组件，只有td元素
		if ( data.notComponent ) {
			val = data.value;
		} else {
			// get value of the special way
			if ( "radio" === type || "checkbox" === type ) {
				val = el.prop("checked") ? el[type]("getValue") : "";
			} else {
				try {
					val = el[type]("getValidateValue");// default way to getValue method
				} catch (e){
					$.error( "cannot call methods on " + type + " , please achieve the getValue method !" );
				}
			}
		}
		for( var i = 0; i < this.validTypeNames.length; i++ ) {
			var vt = this.validTypeNames[i],
				vo = {
					optionValue: options.validType,
					requiredMsg: options.requiredMsg, 
					elementValue: val,// 表单元素的值。
					field: el,
					errMsg: options.errMsg,
					validValue: options[ vt ], // 比如：代表必输项的值是true或者false；maxlength对应的最大值是多少。
					validType: vt // 校验的形式 必输项，最大值，最小值等
				};
			//when validType is required, it does't need valid empty value
			if ( options[ vt ] && (vt == "required")?true:(val != "") ) {
				var error = $.validate._validate( vo );
				error == "" || errorResults.push( error );// if has error, then push the error to results.
			}
		}
		if ( errorResults.length > 0 ) {
			$.validate.hideErrors( component );
			if ( !data.notComponent ) {
				if( errorMode == 0 ){
					$(component).attr( "data-errors", errorResults.toString() ); 
				} else {
					var paddingRight = component.css("padding-right");
					component.append("<span class='cui-icon-notification2 coral-errorIcon' style='right:"+paddingRight+"' data-errors = '"+errorResults.toString()+"' ></span>")											
					component.addClass( "hasErrorIcon " );
				}
			}
			component.addClass( "coral-validate-error " );
			var eventData = errorResults;
			$.validate._apply(options.onValidError, el, event, eventData);
			$(el).prop( "isError", true );
			return errorResults;
		} else {
			$.validate._apply(options.onValidSuccess, el, event, {});
			component.removeClass( "coral-validate-error" );
			$.validate.hideErrors( component );
			$(el).prop( "isError", false ); 
			$(component).removeAttr( "data-errors" ); 
			return errorResults;
		}
	},
	/**
      * 改变回调函数的的指针this为初始化的field，
      **/
     _apply: function( callback, el, event, data ) {
    	 var fun = $.coral.toFunction( callback );
    	 
    	 if ( $.isFunction(fun) ) {
    		 return fun.apply( el, [event, data] );
    	 }
     },
	//脚本校验
	_checkValid: function (validValue, elementValue, errMsg, field) {
		var errMsgResult = "";
		
		if ( !!errMsg ) {
			errMsgResult = errMsg;
		}
		
		var validResult = null;
		
		if (validValue) {
			validResult = $.coralApply ($.coral.toFunction(validValue),field&&field[0], [{"value": elementValue}]);
//			validResult = $.coral.toFunction(validValue).apply( field&&field[0], [{"value": elementValue}] );
			if ( typeof validResult == "object" && typeof validResult.isValid == "boolean" ) {
				
				if ( validResult.isValid ) {
					return "";
				} else {
					if ( !!validResult.errMsg ) {
						return validResult.errMsg;
					}
					return errMsgResult == "" ? validResult.errMsg : errMsgResult;
				}
			}
			if ( typeof validResult == "boolean" ) {
				if ( validResult ) {
					return errMsgResult;
				} else {
					return errMsgResult;
				}
			}
			/*if ( typeof validResult.isValid == "boolean" ) {
				if (typeof validResult.message != "string") {
					return "";
				}
				if ( validResult.isValid ) {
					return "";
				} else {
					return errMsgResult == "" ? validResult.message : errMsgResult;
				}
			}*/
		}
		return "";
	},
//			_trigger1: function( field, validValue, data ) {
//				return $.coral.toFunction(validValue).apply( field[0], data );
//				/*var that = this;
//				
//				event = $.Event(event);
//				
//				var rData = {};
//				
//				var _fn = $.coral.toFunction(validValue);
//				_fn.apply( null, [ event ].concat( data ) );
//				
//				if ( data[0] && data[0]["getData"] == true ) {
//					rData["result"] = event["result"];
//				} else {
//					return rData["prevented"];
//				}
//				
//				return rData;*/
//				
//				
//			},
	//校验必输项
	_checkRequired: function (validValue, elementValue, requiredMsg) {
		//var errMsgResult = $.fn.coralValidator.validators["required"];
		//此处应该配置requiredMsg
		var errMsgResult = $.validate.options.requiredMsg;			
		if ( requiredMsg ) {
			errMsgResult = requiredMsg;
		}
		
		if (typeof validValue == "boolean" && validValue && ("" == $.trim(elementValue))) {
			return errMsgResult;
		} else {
			return "";
		}
	},
	//校验最小长度
	_checkMinlength: function (validValue, elementValue, errMsg) {
		var errMsgResult = "最少输入" + validValue + "个字符！";
		
		if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
			errMsgResult = errMsg;
		}
		if (validValue && this._isPositiveInteger(validValue)) {
			var minLength = parseInt(validValue), nowLength = this._getByteLength(elementValue);
			
			if (nowLength < minLength) {
				return errMsgResult;
			} else {
				return "";
			}
		}
	},
	//校验最大长度
	_checkMaxlength: function (validValue, elementValue, errMsg) {
		var errMsgResult = "最多输入" + validValue + "个字符！";
		
		if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
			errMsgResult = errMsg;
		}
		
		if (validValue && this._isPositiveInteger(validValue)) {
			var maxLength = parseInt(validValue), nowLength = this._getByteLength(elementValue);
			
			if (nowLength > maxLength) {
				return errMsgResult;
			} else {
				return "";
			}
		}
	},
	//校验正则表达式
	_checkPattern: function(validValue, elementValue, errMsg) {
		var errMsgResult = "请输入匹配的字符串！";
		
		if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
			errMsgResult = errMsg;
		}
		
		if (validValue) {
			var reg = eval(validValue.replace(/\/\//g, "\/"));
			if (!reg.test($.trim(elementValue))) {
				return errMsgResult;
			} else {
				return "";
			}
		} else {
			return "";
		}	
	},
	//校验特殊符号
	_isSpecialCharacters: function ( validValue, elementValue, errMsg ) {
		var errMsgResult = "含有特殊符号！";
		if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
			errMsgResult = errMsg;
		}
		if (validValue) {
			var reg = eval(validValue.replace(/\/\//g, "\/"));
			if (reg.test($.trim(elementValue))) {
				return errMsgResult;
			} else {
				return "";
			}
		} else {
			return "";
		}
	},
	//校验快捷类型
	_checkValidType: function (validValue, elementValue, optionValue, errMsg) {
		var errMsgResult = "";
		
		if ( typeof errMsg != "undefined" && errMsg != null && errMsg != "" ) {
			errMsgResult = errMsg;
		}
		
		var val = elementValue;
		
		switch (validValue) {
			case "number":
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入数字！";
				}
				return this._isNumber(val) ? "" :  errMsgResult;
			case "naturalnumber": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入自然数！";
				}
				return this._isNaturalnumber(val) ? "" :  errMsgResult;
			case "integer": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入整数！";
				}
				return this._isInteger(val) ? "" :  errMsgResult;
			case "float": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入实数！";
				}
				return this._isFloat(val) ? "" :  errMsgResult;
			case "zh": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入汉字！";
				}
				return this._isZh(val) ? "" :  errMsgResult;
			case "letter": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入英文字母！";
				}
				return this._isLetter(val) ? "" :  errMsgResult;
			case "uppercase":
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入大写英文字母！";
				}
				return this._isUppercase(val) ? "" :  errMsgResult;
			case "lowercase":
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入小写英文字母！";
				}
				return this._isLowercase(val) ? "" :  errMsgResult;
			case "zhOrNumOrLett":
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入汉字、数字、英文字母！";
				}
				return this._isZhOrNumOrLett(val) ? "" :  errMsgResult;
			case "ip":
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的计算机IP地址！";
				}
				return this._isIp(val) ? "" :  errMsgResult;
			case "port": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的计算机IP地址端口号！";
				}
				return this._isPort(val) ? "" :  errMsgResult;
			case "url": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的网页地址！";
				}
				return this._isUrl(val) ? "" :  errMsgResult;
			case "email": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的电子邮件地址！";
				}
				return this._isEmail(val) ? "" :  errMsgResult;
			case "mobile": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的手机号码！";
				}
				return this._isMobile(val) ? "" :  errMsgResult;
			case "idno": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法的身份证号码！";
				}
				return this._isIDNo(val) ? "" :  errMsgResult;
			case "zipcode": 
				if ( "" == errMsgResult ) {
					errMsgResult = "请输入合法邮政编码！";
				}
				return this._isZipcode(val) ? "" :  errMsgResult;
			default: 
				return "";
		}
	},
	_isNumber: function ( val ) {
		if(!isNaN( val )) {
			return true;
		} else {
			return false;
		}
	},
	_isNaturalnumber: function ( val ) {
		if (/^[0-9]+$/.test( val )) {
			return true;
		} else {
			return false;
		}
	},
	_isInteger: function ( val ) {
		if (/^(\+|-)?\d+$/.test( val )) {
			return true;
		} else {
			return false;
		}
	},
	_isFloat: function ( val ) {
		if (/^(\+|-)?\d+($|\.\d+$)/.test( val )) {
			return true;
		} else {
			return false;
		}
	},
	_isZh: function ( val ) {
		if (/^[\u4e00-\u9fa5]+$/.test(val)) {  
			return true;  
	    } else {
	    	return false;
	    }   
	},
	_isLetter: function ( val ) {
		if (/^[A-Za-z]+$/.test(val)) {  
			return true;  
	    } else {
	    	return false;
	    }   
	},
	_isUppercase: function ( val ) {
		if (/^[A-Z]+$/.test(val)) {  
			return true;  
	    } else {
	    	return false;
	    }   
	},
	_isLowercase: function ( val ) {
		if (/^[a-z]+$/.test(val)) {  
			return true;  
	    } else {
	    	return false;
	    }   
	},
	_isZhOrNumOrLett: function ( val ) {
		if (/^[0-9a-zA-Z\u4e00-\u9fa5]+$/.test(val)) {  
			return true;  
	    } else {
	    	return false;
	    }   
	},
	_isIp: function ( val ) {
		if (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/.test(val)) {  
			if(RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256)  
				return true;
	    } else {
	    	return false;
	    }   
	},
	_isPort: function ( val ) {
		if (this._isNaturalnumber (val) && val < 65536) { 
			return true;
	    } else {
	    	return false;
	    }   
	},
	_isUrl: function ( val ) {
		if (/^(http|https|ftp):\/\/(www\.)?.+.?$/.test(val)) { //支持http,https,ftp
			return true;
	    } else {
	    	return false;
	    }   
	},
	_isEmail: function ( val ) {
		if (/^([-_A-Za-z0-9\.]+)@([_A-Za-z0-9]+\.)+[A-Za-z0-9]{2,3}$/.test(val)) { 
			return true;
	    } else {
	    	return false;
	    }   
	},
	_isMobile: function ( val ) {
		if (/^0?(13[0-9]|15[012356789]|17[0-9]|18[0-9]|14[57])[0-9]{8}$/.test(val)) { 
			return true;
	    } else {
	    	return false;
	    }   
	},
	_isIDNo: function ( val ) {
		 var aCity={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"};  
		   
	    var iSum = 0;  
	    var info = "";  
	    var strIDno = val;  
	    var idCardLength = strIDno.length;    
	    if(!/^\d{17}(\d|x)$/i.test(strIDno)&&!/^\d{15}$/i.test(strIDno))   
	    {  
	        return false;  
	    }  
	   
	    //在后面的运算中x相当于数字10,所以转换成a  
	    strIDno = strIDno.replace(/x$/i,"a");  
	  
	    if(aCity[parseInt(strIDno.substr(0,2))]==null)  
	    {  
	        return false;  
	    }  
	      
	    if (idCardLength==18)  
	    {  
	        var sBirthday=strIDno.substr(6,4)+"-"+Number(strIDno.substr(10,2))+"-"+Number(strIDno.substr(12,2));  
	        var d = new Date(sBirthday.replace(/-/g,"/"))  
	        if(sBirthday!=(d.getFullYear()+"-"+ (d.getMonth()+1) + "-" + d.getDate()))  
	        {  
	            return false;  
	        }  
	  
	        for(var i = 17;i>=0;i --)  
	            iSum += (Math.pow(2,i) % 11) * parseInt(strIDno.charAt(17 - i),11);  
	  
	        if(iSum%11!=1)  
	        {    
	            return false;  
	        }  
	    }  
	    else if (idCardLength==15)  
	    {  
	        sBirthday = "19" + strIDno.substr(6,2) + "-" + Number(strIDno.substr(8,2)) + "-" + Number(strIDno.substr(10,2));  
	        var d = new Date(sBirthday.replace(/-/g,"/"))  
	        var dd = d.getFullYear().toString() + "-" + (d.getMonth()+1) + "-" + d.getDate();     
	        if(sBirthday != dd)  
	        {   
	            return false;  
	        }  
	    }  
	    return true; 
	},
	_isZipcode: function ( val ) {
		if (this._isNaturalnumber(val) && val.length == 6) { 
			return true;
	    } else {
	    	return false;
	    }   
	},
	_isDate: function ( val, format ) {
		var date = $.trim(val); 
	    var year,month,day,datePat,matchArray;  
	  
	    if(/^(y{4})(-|\/)(M{1,2})\2(d{1,2})$/.test(format))  
	        datePat = /^(\d{4})(-|\/)(\d{1,2})\2(\d{1,2})$/;  
	    else if(/^(y{4})(年)(M{1,2})(月)(d{1,2})(日)$/.test(format))  
	        datePat = /^(\d{4})年(\d{1,2})月(\d{1,2})日$/;  
	    else if(format=="yyyyMMdd")  
	        datePat = /^(\d{4})(\d{2})(\d{2})$/;  
	    else  
	    {   
	        return false;  
	    }  
	    matchArray = date.match(datePat);  
	    if(matchArray == null)   
	    {  
	        return false;  
	    }  
	    if(/^(y{4})(-|\/)(M{1,2})\2(d{1,2})$/.test(format))  
	    {  
	        year = matchArray[1];  
	        month = matchArray[3];  
	        day = matchArray[4];  
	    } else  
	    {  
	        year = matchArray[1];  
	        month = matchArray[2];  
	        day = matchArray[3];  
	    }  
	    if (month < 1 || month > 12)  
	    {               
	        return false;  
	    }  
	    if (day < 1 || day > 31)  
	    {  
	        return false;  
	    }       
	    if ((month==4 || month==6 || month==9 || month==11) && day==31)  
	    {  
	        return false;  
	    }       
	    if (month==2)  
	    {  
	        var isleap=(year % 4==0 && (year % 100 !=0 || year % 400==0));  
	        if (day>29)  
	        {                  
	            return false;  
	        }  
	        if ((day==29) && (!isleap))  
	        {                 
	            return false;  
	        }  
	    }  
	    return true;   
	},
	/**
	 * show required "*"
	 */
	showRequiredMark: function( ui ) {
		var $component = ui.component;
		$component.find( "span.coral-validate-required:first" ).remove();
		$component.append( "<span class='coral-validate-required'>*</span>" );
	},
	hideRequiredMark: function( ui ) {
		var $component = ui.component;
		//$component.removeClass("coral-validate-starBefore");
		$component.find( "span.coral-validate-required:first" ).remove();
	},
	/**
	 * 
	 * @param element
	 * @param errorArray
	 * @param tipsPosition: leftTop, leftBottom, rightTop, rightBottom, right
	 */
	showErrors: function(element, errorArray, tipsPosition, noDelay) {
		// 如果是前置模式，则提示错误信息相对于 border 元素
		var $component = element; // cache component element
		if (element.hasClass("coral-hasLabel") || element.hasClass("coral-validate-starBefore")) {
			if ( element.find(".coral-radio-label").length ) {
				element = element.find(".coral-radio-label");
			} else if ( element.find(".coral-checkbox-label").length ) {
				element = element.find(".coral-checkbox-label");
			} else if ( element.find(".coral-label").next().length ) {
				element = element.find(".coral-label").next();
			} else if (element.find(".coral-validate-required").next().length) {
				element = element.find(".coral-validate-required").next();
			}
		}
		//setTimeout(function(){
		var hasForm = true, $form = $(element).parents("form"),
			container = "tooltip",
			errorContent = errorArray.join("<br />"), 
			$message, 
			position, 
			$element = $(element);
		var id = $element.attr("id"), $message = $("."+id+validateSuffix);
		var errorArrowClass = "coral-validate-errorArrow-top";
		
		if ( $(element).parents("form").length != 0 ) {
			container = $( $form ).form("option", "container");
		} 
		switch (tipsPosition) {
			case "leftTop": 
				errorArrowClass = "coral-validate-errorArrow-top";
				break;
			case "leftBottom": 
				errorArrowClass = "coral-validate-errorArrow-bottom";
				break;
			case "rightTop":
				errorArrowClass = "coral-validate-errorArrow-top";
				break;
			case "rightBottom":
				errorArrowClass = "coral-validate-errorArrow-bottom";
				break;
			case "right":
				errorArrowClass = "coral-validate-errorArrow-right";
				break;
			default:
				break;
		}

		var arrow = '<div class="' + errorArrowClass + '"></div>';
		if(id==null) {
			id = $element.attr("id", validatePrefix + validate_uuid++).attr("id");
		}
		if($("."+id+validateSuffix).length>0){
			$("."+id+validateSuffix).find(".error-content").html(errorContent);
		} else {
			$message = $("<div class='" + id+validateSuffix + " coral-validate-state-error'><div class='error-content'>"+errorContent+"</div>"+arrow+"</div>");
			var formContext = $(element).parents("form").attr("context");
			// 如果为elements 则插在element后面，如果为body 则插在body里面；
			if ( $( formContext ).length > 0 ) {
				$( formContext ).append($message);
			} else {
				$(document.body).append($message);
			}
				
			position = $element.position();
		}
		var my = "left top", at = "right-20 top-" + ( $message.outerHeight() + 8 );
		switch (tipsPosition) {
			case "leftTop": 
				my = "right top";
				at = "left+" + $message.outerWidth() + " top-" + ( $message.outerHeight() + 8 );
				break;
			case "leftBottom": 
				my = "right bottom";
				at = "left+" + $message.outerWidth() + " bottom+" + ( $message.outerHeight() + 8 );
				break;
			case "rightTop":
				my = "left top";
				at = "right-20 top-" + ( $message.outerHeight() + 8 );
				break;
			case "rightBottom":
				my = "left bottom";
				at = "right-20 bottom+" + ( $message.outerHeight() + 8 );
				break;
			case "right":
				my = "left middle";
				at = "right+15 middle";
				break;
			default:
				break;
		};
		
		$message.position({
			my: my,
			at: at,
			of: $element
		});
		
		$component.addClass("coral-validate-error");
		//}, 0);
		var that = this;
		// 校验提示信息（不包括红色边框），在2秒后消失。
		setTimeout(function() {
			//that.hideErrorsTip($element);
		}, 2000);	
	},
	/**
	 * 清除页面上的错误提示信息，以及元素的红色提示边框
	 */
	clearErrors:function(context){
		var fields = $.coral.findComponent( ".ctrl-form-element", context ),
			i = 0, 
			l = fields.length;
		for (i; i < l; i++) {
	        var c = fields[i];
	        c.clearError();
		}
	},
	clear: function() {
		$(".coral-validate-state-error").remove();
		$( ".coral-errorIcon" ).remove();
		$(".coral-validate-error").removeClass("coral-validate-error");
	},
	hideErrors: function ( element ) {
		var $element = $(element);
		var id = $element.attr("id");
		$("." + id + validateSuffix).remove();
		$( ".coral-errorIcon", $element ).remove();
		$element.removeClass("coral-validate-error hasErrorIcon ");
	},
        	
	hideErrorsTip: function(element){
		var $element = $(element);
		var id = $element.attr("id");
		$("."+id + validateSuffix).remove();
	},
	_showTooltip: function(element, tips){
		var $element = $(element);
		var $message = $("<div class='coral-validate-tooltip'>" + tips + "</div>");
		$(document.body).after($message);
		var position = $element.position();
		$message.position({
			my: "left top",
			at: "right+20 top+" + ($(element).height()/2 - $message.outerHeight()/2),
			of: $element
		});
	},
	_hideTooltip: function(element){
		var $element = $(element);
		$('.coral-validate-tooltip').remove();
	},
	//截取字符串，根据长度（支持中英文混合）
	_getSubString: function(str, n) { 
		var r=/[^\x00-\xff]/g;			
		if(str.replace(r,"mm").length<=n)
			return str;
		
		var m = Math.floor(n/2); 
		for(var i = m; i < str.length; i++) {
			if (str.substr(0, i).replace(r,"mm").length >= n) { 
				return str.substr(0,i); 
			}
		}
		
		return str; 
	},
	//获取字符串的字节长度
	_getByteLength: function (str) {			
		var length = 0; 

		for (var i = 0; i < str.length; i++) {
			var item = str.charAt(i);
			
			if (item.match(/[^\x00-\xff]/ig) != null) //全角 
				length += 2; 
			else 
				length += 1; 
		} 
		return length; 
	}, 
	//判断是否是正整数
	_isPositiveInteger: function (str) {
		return parseInt(str).toString() === "NaN" ? false : (parseInt(str) > 0 ? true : false);
	},
	showTooltip: function (el, validTypeOptions){
		validTypeOptions = $.extend(true,{},$.validate.validTypeOptions,validTypeOptions);
		var showTooltip = validTypeOptions.maxlength.showTooltip;			
		if (!showTooltip) return;	
		$(el).attr("tooltips","tooltips");
		$(el).tooltip({
			items : "[tooltips]"
		}).addClass("hasTooltip");
		$.validate.getMaxLength(el);
		$(el).on({
			"keyup": function(e){
				$.validate.getMaxLength(el);
			}
		})
	},
	getMaxLength: function(el){
		var number = 0,
			val = $(el).val(),
		    type = $(el).attr( "component-role" ),
		    isLabel = $(el)[type]("option","isLabel"),
		    readonly = $(el)[type]("option","readonly"),
		    readonlyInput = $(el)[type]("option","readonlyInput"),
		    length = $.validate._getByteLength(val),
		    maxlength = $(el)[type]("option","maxlength"),
		    number = maxlength - length;
		if(isLabel == false && readonly == false && readonlyInput == false){
			$(el).tooltip("option","content","还可以输入"+ number +"个字符");
		}
	},
	/**
	 * 强制校验处理方法
	 **/
	restrictInput: function ( el, event, hasTips ) {
		var type = $( el ).attr( "component-role" ),
			opts = $( el )[type]("option"),
			result = null;

		$.each($.validate.validTypeNames, function(i, d) {
			var opt = opts[d],// maxlength opt -> 10
				arg1 = $.validate.validTypeOptions[d],// {}				
				arg2 = $.validate.validTypeOptions[opt],// {}
				argKey = null,
				argValue = null;
				
			if (opt && arg1) {
				argKey = d;
				argValue = arg1;
			} else if (opt && arg2) {
				argKey = opt;
				argValue = arg2;
			}

			if ( argKey && argValue ) {
				if ( argValue.restrictInput ) {
					result = $.validate.forbiddenInput(argKey, event, el);
				}
			}
		});	

		return result;
    },
    /**
    	禁止输入处理
    **/
    forbiddenInput: function (arg, event, el) {
    	var type = $( el ).attr( "component-role" ),
			opts = $( el )[type]("option"),
			result = null;
    	var val = el.val();
    	switch (arg) {
			case "maxlength":
				if ( ( !event.ctrlKey && -1 == $.inArray(event.keyCode,[8, 46, 9, 37, 39, 35, 36]) ) && ( "" !== $.validate._checkMaxlength(opts[arg], val+String.fromCharCode(event.keyCode)) ) ) {
					var length = 0,
					    string = [];
					for ( var i = 0; i < val.length; i++ ){
						var item = val.charAt(i);														
						if ( item.match(/[^\x00-\xff]/ig) !== null ){//全角 
							length += 2; 
							if ( length <= opts[arg] ){
								string.push(item);
							}
					}
						else {
							length += 1; 
							if ( length <= opts[arg] ){
								string.push(item);
							}
						}
					} 
					el.val(string.join(""));
					result =  false;
				}
				break;
			case "number":
				if ( ( !event.ctrlKey && -1 == $.inArray(event.keyCode,[8, 46, 9, 37, 39, 35, 36]) ) && ( event.keyCode < 48 || (event.keyCode > 57 && event.keyCode < 96) || event.keyCode > 105 ) ) {
					result = false;
				}
				var re = /^[0-9]+.?[0-9]*$/;
				if ( !re.test(val)){
					$( el ).val("");
				}
				break;
			default:
				break;
		}

		return result;
    },
    _changeRequiredMark: function($field, value) {
    	var type = $field.attr("component-role");
    	var form = $field.closest(".ctrl-init-form"),
			formOptions;
		if ( form.length > 0 ) {
			formOptions = form.form("option");
		}
		var optionShowRequired = $field[type]("option", "showRequiredMark"),
			optionHideRequired = $field[type]("option", "hideRequiredMark"),
			showRequiredMark = optionShowRequired == null ? 
				(formOptions && formOptions.showRequiredMark) || $.validate.showRequiredMark : optionShowRequired,
			hideRequiredMark = optionHideRequired == null ? 
				(formOptions && formOptions.hideRequiredMark) || $.validate.hideRequiredMark : optionHideRequired;
		showRequiredMark = $.coral.toFunction(showRequiredMark);
		hideRequiredMark = $.coral.toFunction(hideRequiredMark);
		if ( value === true ) {
			showRequiredMark && showRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
		} else {
			hideRequiredMark && hideRequiredMark.apply( $field[0], [{component: $field[type]( "component" )}] );
		}
    },
	/**
	 * 校验表单元素的方法
	 **/
	validItem: function ( el, event, hasTips ) {
		var options = this.options;
		var data = {
			validoptions: options,
			hasTips: hasTips,
			element: el
		};
		var type = $( el ).attr( "component-role" ),
			opts = $( el )[type]("option"),
			excluded = opts.excluded;
		if (excluded) return ;
	 	$.validate.validateField( event ,data );    	 	
    },
	setExcluded: function(isSet, context){
		var fields = $.coral.findComponent( ".ctrl-form-element", $(context) ),
			i = 0, 
			l = fields.length;
		for (i; i < l; i++) {
	        var c = fields[i];
	        c._setOption("excluded", isSet);
	        c.component().removeClass( "coral-validate-error" );
	        c.component().removeAttr( "data-errors" ); 
	        $( ".coral-errorIcon", c.component() ).remove();
	        // clear error states
	        c.element.prop( "isError", false );
		}
	}
};
	
$.component( "coral.validate", {
	version: $.coral.version,
	options: {
		onStatus: "onstatus",
		showStar: true, // 必输项，是否显示 “*”
		errMessages: {
			required: "* 必输项",
			minLength: "{0}",
			maxLength: "{0}",
			pattern: "",
			validType: {
				number: ""	
			},
			valid: ""
		}, 
		fields: {},
		errMsgPosition: "leftBottom", // "leftTop", "leftBottom", "rightTop", "rightBottom", "right"
		excluded: [":disabled", ":hidden", ":not(:visible)"] // ":disabled,:hidden,:not(:visible)" 校验的时候排除不检验的元素
	},
	
	/**
	 * judge the field need valid or not
	 **/
	_isExclud: function ( $field, excluded ) {
    	 if ( !excluded ) {
    		 return false;
    	 }
    	 
    	 var length = excluded.length;
    	 var type = $field.attr( "component-role" ),
    	 	opts = $field[type]("option"),
    	 	isExcluded = opts.excluded,
			$component = $field[type]("component");
    	 for ( var i = 0; i < length; i++ ) {
             if ( ( "string" === typeof excluded[i] && 
            		 $component.is(excluded[i]) ) || isExcluded ){
                 return true;
             }
         }
    	 return false;
     },
	/**
	 * 构建组件
	 * @return
	 */
	_create: function() {
		var that = this;
		this.element.addClass( "coral-validate ctrl-init ctrl-init-validate" );
		//that._initField();
		this.element.addClass( "inited-validate" );
	},
	_destroy: function(){
		this.element.removeClass( "coral-validate ctrl-init ctrl-init-validate" );
		this._super();
	},
	//设置属性处理
	_setOption: function( key, value ) {
		//默认属性不允许更改
		if (key == "id" || key == "name") {
			return;
		}
		
		this._super( key, value );
		
		return ;
	},
	/**
	 * remove field on form
	 */
	removeField: function(){
		
	},
	/**
	 * update rules on field
	 */ 
	updateField: function(){
		
	},
	/**
	 * 绑定触发校验的事件
	 * @return 
	 */
	_initField: function() {
		//var fields = $(this.element).parent().find($("[class*='coral-validation-']"));
		var fields = $( this.element ).find( ".ctrl-form-element" );
		//$.validate.addField( fields, this.options );
		
	},
     /**
	 *  校验所有元素
	 *  @param el 组件jquery对象
	 *  @return {boolean} true代表通过，false代表不通过
	 */
	valid: function( el ) {
		if ( !el ) {
			el = this.element;
		}
		
		var that = this,
			fields = null,
			errCount = 0,
			excluded = this.options.excluded,
			errTipsType = null,
			hasTips = true;
		
		if ( excluded && "string" === typeof excluded ) {
	         excluded = $.map( excluded.split( ',' ), function( item ) {
	             return $.trim( item );
	         });
	    }
		
		if ( el.is($("[class*='coral-validation-']")) ) {
			fields = $(el);
		} else {
			fields = $(el).find($("[class*='coral-validation-']"));
		}
		if ( "form" === $(el)[0].tagName.toLowerCase()) {
			errTipsType = $(el).form("option", "errTipsType");
		}
		errTipsType = "none";
		fields.each( function( index ) {
			var $field = $( this ),
				type = $.validate.getFieldType( $field );
			 // 如果在排除范围内，则返回，不校验
			if ( that._isExclud( $field, excluded) ) {
	    		 return ;
			}
			if ( "none" === errTipsType ) {
				hasTips = false;
			}
			$.validate.validItem($field, null, hasTips);
			//$field.trigger( type + that.options.onStatus + ".validate",  { hasTips: hasTips } );
			 
			if ( $field.prop( "isError" ) ) {
				if ( "first" === errTipsType ) {
					hasTips = false;
				}
				if(errCount == 0){
					$field[type]("focus");
				}
				++ errCount;
			}
		});
		return ( errCount > 0 ? false : true );
	}	
});
;

/*!
 * 组件库 4.0：鼠标辅助工具
 *
 * 依赖JS文件:
 *	jquery.coral.component.js
 */
(function() {

var mouseHandled = false;
$( document ).mouseup( function() {
	mouseHandled = false;
});

$.component("coral.mouse", {
	version: "4.0.1",
	options: {
		cancel: "input,textarea,button,select,option",
		distance: 1,
		delay: 0
	},
	_mouseInit: function() {
		var that = this;

		this.element
			.bind("mousedown."+this.componentName, function(event) {
				return that._mouseDown(event);
			})
			.bind("click."+this.componentName, function(event) {
				if (true === $.data(event.target, that.componentName + ".preventClickEvent")) {
					$.removeData(event.target, that.componentName + ".preventClickEvent");
					event.stopImmediatePropagation();
					return false;
				}
			});

		this.started = false;
	},

	// TODO: make sure destroying one instance of mouse doesn't mess with
	// other instances of mouse
	_mouseDestroy: function() {
		this.element.unbind("."+this.componentName);
		if ( this._mouseMoveDelegate ) {
			this.document
				.unbind("mousemove."+this.componentName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.componentName, this._mouseUpDelegate);
		}
	},

	_mouseDown: function(event) {
		// don't let more than one component handle mouseStart
		if( mouseHandled ) { return; }

		// we may have missed mouseup (out of window)
		(this._mouseStarted && this._mouseUp(event));

		this._mouseDownEvent = event;

		var that = this,
			btnIsLeft = (event.which === 1),
			// event.target.nodeName works around a bug in IE 8 with
			// disabled inputs (#7620)
			elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
		if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
			return true;
		}

		this.mouseDelayMet = !this.options.delay;
		if (!this.mouseDelayMet) {
			this._mouseDelayTimer = setTimeout(function() {
				that.mouseDelayMet = true;
			}, this.options.delay);
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted = (this._mouseStart(event) !== false);
			if (!this._mouseStarted) {
				event.preventDefault();
				return true;
			}
		}

		// Click event may never have fired (Gecko & Opera)
		if (true === $.data(event.target, this.componentName + ".preventClickEvent")) {
			$.removeData(event.target, this.componentName + ".preventClickEvent");
		}

		// these delegates are required to keep context
		this._mouseMoveDelegate = function(event) {
			return that._mouseMove(event);
		};
		this._mouseUpDelegate = function(event) {
			return that._mouseUp(event);
		};
		this.document
			.bind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.bind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		event.preventDefault();

		mouseHandled = true;
		return true;
	},

	_mouseMove: function(event) {
		// IE mouseup check - mouseup happened when mouse was out of window
		if ($.coral.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
			return this._mouseUp(event);
		}
		// Iframe mouseup check - mouseup occurred in another document
		else if ( !event.which ) {
			return this._mouseUp( event );
		}
		
		if (this._mouseStarted) {
			this._mouseDrag(event);
			return event.preventDefault();
		}

		if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
			this._mouseStarted =
				(this._mouseStart(this._mouseDownEvent, event) !== false);
			(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
		}

		return !this._mouseStarted;
	},

	_mouseUp: function(event) {
		this.document
			.unbind( "mousemove." + this.widgetName, this._mouseMoveDelegate )
			.unbind( "mouseup." + this.widgetName, this._mouseUpDelegate );

		if (this._mouseStarted) {
			this._mouseStarted = false;

			if (event.target === this._mouseDownEvent.target) {
				$.data(event.target, this.componentName + ".preventClickEvent", true);
			}

			this._mouseStop(event);
		}

		mouseHandled = false;
		return false;
	},

	_mouseDistanceMet: function(event) {
		return (Math.max(
				Math.abs(this._mouseDownEvent.pageX - event.pageX),
				Math.abs(this._mouseDownEvent.pageY - event.pageY)
			) >= this.options.distance
		);
	},

	_mouseDelayMet: function(/* event */) {
		return this.mouseDelayMet;
	},

	// These are placeholder methods, to be overriden by extending plugin
	_mouseStart: function(/* event */) {},
	_mouseDrag: function(/* event */) {},
	_mouseStop: function(/* event */) {},
	_mouseCapture: function(/* event */) { return true; }
});

})();
;

(function() {

/*jshint loopfunc: true */

function isOverAxis( x, reference, size ) {
	return ( x >= reference ) && ( x < ( reference + size ) );
}

function isFloating(item) {
	return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
}

$.component("coral.sortable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "sort",
	ready: false,
	options: {
		appendTo: "parent",
		axis: false,
		connectWith: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		dropOnEmpty: true,
		forcePlaceholderSize: false,
		forceHelperSize: false,
		grid: false,
		handle: false,
		helper: "original",
		items: "> *",
		opacity: false,
		placeholder: false,
		revert: false,
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		scope: "default",
		tolerance: "intersect",
		zIndex: 1000,

		// callbacks
		activate: null,
		beforeStop: null,
		change: null,
		deactivate: null,
		out: null,
		over: null,
		receive: null,
		remove: null,
		sort: null,
		start: null,
		stop: null,
		update: null
	},
	_create: function() {

		var o = this.options;
		this.containerCache = {};
		this.element.addClass("coral-sortable");

		//Get the items
		this.refresh();

		//Let's determine if the items are being displayed horizontally
		this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

		//Let's determine the parent's offset
		this.offset = this.element.offset();

		//Initialize mouse events for interaction
		this._mouseInit();

		this._setHandleClassName();
		
		//We're ready to go
		this.ready = true;

	},

	_setOption: function( key, value ) {
		this._super( key, value );

		if ( key === "handle" ) {
			this._setHandleClassName();
		}
	},

	_setHandleClassName: function() {
		this.element.find( ".coral-sortable-handle" ).removeClass( "coral-sortable-handle" );
		$.each( this.items, function() {
			( this.instance.options.handle ?
					this.item.find( this.instance.options.handle ) : this.item )
					.addClass( "coral-sortable-handle" );
		});
	},
	_destroy: function() {
		this.element
			.removeClass( "coral-sortable coral-sortable-disabled" )
			.find( ".coral-sortable-handle" )
			.removeClass( "coral-sortable-handle" );
		this._mouseDestroy();

		for ( var i = this.items.length - 1; i >= 0; i-- ) {
			this.items[i].item.removeData(this.componentName + "-item");
		}

		return this;
	},

	_mouseCapture: function(event, overrideHandle) {
		var currentItem = null,
			validHandle = false,
			that = this;

		if (this.reverting) {
			return false;
		}

		if(this.options.disabled || this.options.type === "static") {
			return false;
		}

		//We have to refresh the items data once first
		this._refreshItems(event);

		//Find out if the clicked node (or one of its parents) is a actual item in this.items
		$(event.target).parents().each(function() {
			if($.data(this, that.componentName + "-item") === that) {
				currentItem = $(this);
				return false;
			}
		});
		if($.data(event.target, that.componentName + "-item") === that) {
			currentItem = $(event.target);
		}

		if(!currentItem) {
			return false;
		}
		if(this.options.handle && !overrideHandle) {
			$(this.options.handle, currentItem).find("*").addBack().each(function() {
				if(this === event.target) {
					validHandle = true;
				}
			});
			if(!validHandle) {
				return false;
			}
		}

		this.currentItem = currentItem;
		this._removeCurrentsFromItems();
		return true;

	},

	_mouseStart: function(event, overrideHandle, noActivation) {

		var i, body,
			o = this.options;

		this.currentContainer = this;

		//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
		this.refreshPositions();

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		//Cache the helper size
		this._cacheHelperProportions();

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Get the next scrolling parent
		this.scrollParent = this.helper.scrollParent();

		//The element's absolute position on the page minus margins
		this.offset = this.currentItem.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		// Only after we got the offset, we can change the helper's position to absolute
		// TODO: Still need to figure out a way to make relative sorting possible
		this.helper.css("position", "absolute");
		this.cssPosition = this.helper.css("position");

		//Generate the original position
		this.originalPosition = this._generatePosition(event);
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Cache the former DOM position
		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

		//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
		if(this.helper[0] !== this.currentItem[0]) {
			this.currentItem.hide();
		}

		//Create the placeholder
		this._createPlaceholder();

		//Set a containment if given in the options
		if(o.containment) {
			this._setContainment();
		}

		if( o.cursor && o.cursor !== "auto" ) { // cursor option
			body = this.document.find( "body" );

			// support: IE
			this.storedCursor = body.css( "cursor" );
			body.css( "cursor", o.cursor );

			this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
		}

		if(o.opacity) { // opacity option
			if (this.helper.css("opacity")) {
				this._storedOpacity = this.helper.css("opacity");
			}
			this.helper.css("opacity", o.opacity);
		}

		if(o.zIndex) { // zIndex option
			if (this.helper.css("zIndex")) {
				this._storedZIndex = this.helper.css("zIndex");
			}
			this.helper.css("zIndex", o.zIndex);
		}

		//Prepare scrolling
		if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
			this.overflowOffset = this.scrollParent.offset();
		}

		//Call callbacks
		this._trigger("start", event, this._uiHash());

		//Recache the helper size
		if(!this._preserveHelperProportions) {
			this._cacheHelperProportions();
		}


		//Post "activate" events to possible containers
		if( !noActivation ) {
			for ( i = this.containers.length - 1; i >= 0; i-- ) {
				this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
			}
		}

		//Prepare possible droppables
		if($.coral.ddmanager) {
			$.coral.ddmanager.current = this;
		}

		if ($.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(this, event);
		}

		this.dragging = true;

		this.helper.addClass("coral-sortable-helper");
		this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
		return true;

	},

	_mouseDrag: function(event) {
		var i, item, itemElement, intersection,
			o = this.options,
			scrolled = false;

		//Compute the helpers position
		this.position = this._generatePosition(event);
		this.positionAbs = this._convertPositionTo("absolute");

		if (!this.lastPositionAbs) {
			this.lastPositionAbs = this.positionAbs;
		}

		//Do scrolling
		if(this.options.scroll) {
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

				if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
				} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
					this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
				}

				if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
				} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
					this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
				}

			} else {

				if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}

				if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}

			}

			if(scrolled !== false && $.coral.ddmanager && !o.dropBehaviour) {
				$.coral.ddmanager.prepareOffsets(this, event);
			}
		}

		//Regenerate the absolute position used for position checks
		this.positionAbs = this._convertPositionTo("absolute");

		//Set the helper position
		if(!this.options.axis || this.options.axis !== "y") {
			this.helper[0].style.left = this.position.left+"px";
		}
		if(!this.options.axis || this.options.axis !== "x") {
			this.helper[0].style.top = this.position.top+"px";
		}

		//Rearrange
		for (i = this.items.length - 1; i >= 0; i--) {

			//Cache variables and intersection, continue if no intersection
			item = this.items[i];
			itemElement = item.item[0];
			intersection = this._intersectsWithPointer(item);
			if (!intersection) {
				continue;
			}

			// Only put the placeholder inside the current Container, skip all
			// items form other containers. This works because when moving
			// an item from one container to another the
			// currentContainer is switched before the placeholder is moved.
			//
			// Without this moving items in "sub-sortables" can cause the placeholder to jitter
			// beetween the outer and inner container.
			if (item.instance !== this.currentContainer) {
				continue;
			}

			// cannot intersect with itself
			// no useless actions that have been done before
			// no action if the item moved is the parent of the item checked
			if (itemElement !== this.currentItem[0] &&
				this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
				!$.contains(this.placeholder[0], itemElement) &&
				(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
			) {

				this.direction = intersection === 1 ? "down" : "up";

				if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
					this._rearrange(event, item);
				} else {
					break;
				}

				this._trigger("change", event, this._uiHash());
				break;
			}
		}

		//Post events to containers
		this._contactContainers(event);

		//Interconnect with droppables
		if($.coral.ddmanager) {
			$.coral.ddmanager.drag(this, event);
		}

		//Call callbacks
		this._trigger("sort", event, this._uiHash());

		this.lastPositionAbs = this.positionAbs;
		return false;

	},

	_mouseStop: function(event, noPropagation) {

		if(!event) {
			return;
		}

		//If we are using droppables, inform the manager about the drop
		if ($.coral.ddmanager && !this.options.dropBehaviour) {
			$.coral.ddmanager.drop(this, event);
		}

		if(this.options.revert) {
			var that = this,
				cur = this.placeholder.offset(),
				axis = this.options.axis,
				animation = {};

			if ( !axis || axis === "x" ) {
				animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
			}
			if ( !axis || axis === "y" ) {
				animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
			}
			this.reverting = true;
			$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
				that._clear(event);
			});
		} else {
			this._clear(event, noPropagation);
		}

		return false;

	},

	cancel: function() {

		if(this.dragging) {

			this._mouseUp({ target: null });

			if(this.options.helper === "original") {
				this.currentItem.css(this._storedCSS).removeClass("coral-sortable-helper");
			} else {
				this.currentItem.show();
			}

			//Post deactivating events to containers
			for (var i = this.containers.length - 1; i >= 0; i--){
				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", null, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		if (this.placeholder) {
			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			if(this.placeholder[0].parentNode) {
				this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
			}
			if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
				this.helper.remove();
			}

			$.extend(this, {
				helper: null,
				dragging: false,
				reverting: false,
				_noFinalSort: null
			});

			if(this.domPosition.prev) {
				$(this.domPosition.prev).after(this.currentItem);
			} else {
				$(this.domPosition.parent).prepend(this.currentItem);
			}
		}

		return this;

	},

	serialize: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			str = [];
		o = o || {};

		$(items).each(function() {
			var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
			if (res) {
				str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
			}
		});

		if(!str.length && o.key) {
			str.push(o.key + "=");
		}

		return str.join("&");

	},

	toArray: function(o) {

		var items = this._getItemsAsjQuery(o && o.connected),
			ret = [];

		o = o || {};

		items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
		return ret;

	},

	/* Be careful with the following core functions */
	_intersectsWith: function(item) {

		var x1 = this.positionAbs.left,
			x2 = x1 + this.helperProportions.width,
			y1 = this.positionAbs.top,
			y2 = y1 + this.helperProportions.height,
			l = item.left,
			r = l + item.width,
			t = item.top,
			b = t + item.height,
			dyClick = this.offset.click.top,
			dxClick = this.offset.click.left,
			isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
			isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
			isOverElement = isOverElementHeight && isOverElementWidth;

		if ( this.options.tolerance === "pointer" ||
			this.options.forcePointerForContainers ||
			(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
		) {
			return isOverElement;
		} else {

			return (l < x1 + (this.helperProportions.width / 2) && // Right Half
				x2 - (this.helperProportions.width / 2) < r && // Left Half
				t < y1 + (this.helperProportions.height / 2) && // Bottom Half
				y2 - (this.helperProportions.height / 2) < b ); // Top Half

		}
	},

	_intersectsWithPointer: function(item) {

		var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
			isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
			isOverElement = isOverElementHeight && isOverElementWidth,
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (!isOverElement) {
			return false;
		}

		return this.floating ?
			( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
			: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

	},

	_intersectsWithSides: function(item) {

		var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
			isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
			verticalDirection = this._getDragVerticalDirection(),
			horizontalDirection = this._getDragHorizontalDirection();

		if (this.floating && horizontalDirection) {
			return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
		} else {
			return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
		}

	},

	_getDragVerticalDirection: function() {
		var delta = this.positionAbs.top - this.lastPositionAbs.top;
		return delta !== 0 && (delta > 0 ? "down" : "up");
	},

	_getDragHorizontalDirection: function() {
		var delta = this.positionAbs.left - this.lastPositionAbs.left;
		return delta !== 0 && (delta > 0 ? "right" : "left");
	},

	refresh: function(event) {
		this._refreshItems(event);
		this._setHandleClassName();
		this.refreshPositions();
		return this;
	},

	_connectWith: function() {
		var options = this.options;
		return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
	},

	_getItemsAsjQuery: function(connected) {

		var i, j, cur, inst,
			items = [],
			queries = [],
			connectWith = this._connectWith();

		if(connectWith && connected) {
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for ( j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.componentFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".coral-sortable-helper").not(".coral-sortable-placeholder"), inst]);
					}
				}
			}
		}

		queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".coral-sortable-helper").not(".coral-sortable-placeholder"), this]);

		for (i = queries.length - 1; i >= 0; i--){
			queries[i][0].each(function() {
				items.push(this);
			});
		}

		return $(items);

	},

	_removeCurrentsFromItems: function() {

		var list = this.currentItem.find(":data(" + this.componentName + "-item)");

		this.items = $.grep(this.items, function (item) {
			for (var j=0; j < list.length; j++) {
				if(list[j] === item.item[0]) {
					return false;
				}
			}
			return true;
		});

	},

	_refreshItems: function(event) {

		this.items = [];
		this.containers = [this];

		var i, j, cur, inst, targetData, _queries, item, queriesLength,
			items = this.items,
			queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
			connectWith = this._connectWith();

		if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
			for (i = connectWith.length - 1; i >= 0; i--){
				cur = $(connectWith[i]);
				for (j = cur.length - 1; j >= 0; j--){
					inst = $.data(cur[j], this.componentFullName);
					if(inst && inst !== this && !inst.options.disabled) {
						queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
						this.containers.push(inst);
					}
				}
			}
		}

		for (i = queries.length - 1; i >= 0; i--) {
			targetData = queries[i][1];
			_queries = queries[i][0];

			for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
				item = $(_queries[j]);

				item.data(this.componentName + "-item", targetData); // Data for target checking (mouse manager)

				items.push({
					item: item,
					instance: targetData,
					width: 0, height: 0,
					left: 0, top: 0
				});
			}
		}

	},

	refreshPositions: function(fast) {

		//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
		if(this.offsetParent && this.helper) {
			this.offset.parent = this._getParentOffset();
		}

		var i, item, t, p;

		for (i = this.items.length - 1; i >= 0; i--){
			item = this.items[i];

			//We ignore calculating positions of all connected containers when we're not over them
			if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
				continue;
			}

			t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

			if (!fast) {
				item.width = t.outerWidth();
				item.height = t.outerHeight();
			}

			p = t.offset();
			item.left = p.left;
			item.top = p.top;
		}

		if(this.options.custom && this.options.custom.refreshContainers) {
			this.options.custom.refreshContainers.call(this);
		} else {
			for (i = this.containers.length - 1; i >= 0; i--){
				p = this.containers[i].element.offset();
				this.containers[i].containerCache.left = p.left;
				this.containers[i].containerCache.top = p.top;
				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
			}
		}

		return this;
	},

	_createPlaceholder: function(that) {
		that = that || this;
		var className,
			o = that.options;

		if(!o.placeholder || o.placeholder.constructor === String) {
			className = o.placeholder;
			o.placeholder = {
				element: function() {

					var nodeName = that.currentItem[0].nodeName.toLowerCase(),
						element = $( "<" + nodeName + ">", that.document[0] )
							.addClass(className || that.currentItem[0].className+" coral-sortable-placeholder")
							.removeClass("coral-sortable-helper");

					if ( nodeName === "tr" ) {
						that.currentItem.children().each(function() {
							$( "<td>&#160;</td>", that.document[0] )
								.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
								.appendTo( element );
						});
					} else if ( nodeName === "img" ) {
						element.attr( "src", that.currentItem.attr( "src" ) );
					}

					if ( !className ) {
						element.css( "visibility", "hidden" );
					}

					return element;
				},
				update: function(container, p) {

					// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
					// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
					if(className && !o.forcePlaceholderSize) {
						return;
					}

					//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
					if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
					if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
				}
			};
		}

		//Create the placeholder
		that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

		//Append it after the actual current item
		that.currentItem.after(that.placeholder);

		//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
		o.placeholder.update(that, that.placeholder);

	},

	_contactContainers: function(event) {
		var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis,
			innermostContainer = null,
			innermostIndex = null;

		// get innermost container that intersects with item
		for (i = this.containers.length - 1; i >= 0; i--) {

			// never consider a container that's located within the item itself
			if($.contains(this.currentItem[0], this.containers[i].element[0])) {
				continue;
			}

			if(this._intersectsWith(this.containers[i].containerCache)) {

				// if we've already found a container and it's more "inner" than this, then continue
				if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
					continue;
				}

				innermostContainer = this.containers[i];
				innermostIndex = i;

			} else {
				// container doesn't intersect. trigger "out" event if necessary
				if(this.containers[i].containerCache.over) {
					this.containers[i]._trigger("out", event, this._uiHash(this));
					this.containers[i].containerCache.over = 0;
				}
			}

		}

		// if no intersecting containers found, return
		if(!innermostContainer) {
			return;
		}

		// move the item into the container if it's not there already
		if(this.containers.length === 1) {
			if (!this.containers[innermostIndex].containerCache.over) {
				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}
		} else {

			//When entering a new container, we will find the item with the least distance and append our item near it
			dist = 10000;
			itemWithLeastDistance = null;
			floating = innermostContainer.floating || isFloating(this.currentItem);
			posProperty = floating ? "left" : "top";
			sizeProperty = floating ? "width" : "height";
			axis = floating ? "clientX" : "clientY";
			
			for (j = this.items.length - 1; j >= 0; j--) {
				if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
					continue;
				}
				if(this.items[j].item[0] === this.currentItem[0]) {
					continue;
				}
				
				cur = this.items[j].item.offset()[posProperty];
				nearBottom = false;
				if ( event[ axis ] - cur > this.items[ j ][ sizeProperty ] / 2 ) {
					nearBottom = true;
				}

				if ( Math.abs( event[ axis ] - cur ) < dist ) {
					dist = Math.abs( event[ axis ] - cur );
					itemWithLeastDistance = this.items[ j ];
					this.direction = nearBottom ? "up": "down";
				}
			}

			//Check if dropOnEmpty is enabled
			if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
				return;
			}

			if(this.currentContainer === this.containers[innermostIndex]) {
				return;
			}

			itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
			this._trigger("change", event, this._uiHash());
			this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
			this.currentContainer = this.containers[innermostIndex];

			//Update the placeholder
			this.options.placeholder.update(this.currentContainer, this.placeholder);

			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
			this.containers[innermostIndex].containerCache.over = 1;
		}


	},

	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

		//Add the helper to the DOM if that didn't happen already
		if(!helper.parents("body").length) {
			$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
		}

		if(helper[0] === this.currentItem[0]) {
			this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
		}

		if(!helper[0].style.width || o.forceHelperSize) {
			helper.width(this.currentItem.width());
		}
		if(!helper[0].style.height || o.forceHelperSize) {
			helper.height(this.currentItem.height());
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_getParentOffset: function() {


		//Get the offsetParent and cache its position
		this.offsetParent = this.helper.offsetParent();
		var po = this.offsetParent.offset();

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		// This needs to be actually done for all browsers, since pageX/pageY includes this information
		// with an ugly IE fix
		if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.coral.ie)) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
		};

	},

	_getRelativeOffset: function() {

		if(this.cssPosition === "relative") {
			var p = this.currentItem.position();
			return {
				top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
				left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
			};
		} else {
			return { top: 0, left: 0 };
		}

	},

	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
			top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
		};
	},

	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var ce, co, over,
			o = this.options;
		if(o.containment === "parent") {
			o.containment = this.helper[0].parentNode;
		}
		if(o.containment === "document" || o.containment === "window") {
			this.containment = [
				0 - this.offset.relative.left - this.offset.parent.left,
				0 - this.offset.relative.top - this.offset.parent.top,
				$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
				($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
			];
		}

		if(!(/^(document|window|parent)$/).test(o.containment)) {
			ce = $(o.containment)[0];
			co = $(o.containment).offset();
			over = ($(ce).css("overflow") !== "hidden");

			this.containment = [
				co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
				co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
				co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
				co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
			];
		}

	},

	_convertPositionTo: function(d, pos) {

		if(!pos) {
			pos = this.position;
		}
		var mod = d === "absolute" ? 1 : -1,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
			scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
			)
		};

	},

	_generatePosition: function(event) {

		var top, left,
			o = this.options,
			pageX = event.pageX,
			pageY = event.pageY,
			scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

		// This is another very weird special case that only happens for relative elements:
		// 1. If the css position is relative
		// 2. and the scroll parent is the document or similar to the offset parent
		// we have to refresh the relative offset during the scroll so there are no jumps
		if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
			this.offset.relative = this._getRelativeOffset();
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		if(this.originalPosition) { //If we are not dragging yet, we won't check for options

			if(this.containment) {
				if(event.pageX - this.offset.click.left < this.containment[0]) {
					pageX = this.containment[0] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top < this.containment[1]) {
					pageY = this.containment[1] + this.offset.click.top;
				}
				if(event.pageX - this.offset.click.left > this.containment[2]) {
					pageX = this.containment[2] + this.offset.click.left;
				}
				if(event.pageY - this.offset.click.top > this.containment[3]) {
					pageY = this.containment[3] + this.offset.click.top;
				}
			}

			if(o.grid) {
				top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
				pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
				pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

		}

		return {
			top: (
				pageY -																// The absolute mouse position
				this.offset.click.top -													// Click offset (relative to the element)
				this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
			),
			left: (
				pageX -																// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
			)
		};

	},

	_rearrange: function(event, i, a, hardRefresh) {

		a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

		//Various things done here to improve the performance:
		// 1. we create a setTimeout, that calls refreshPositions
		// 2. on the instance, we have a counter variable, that get's higher after every append
		// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
		// 4. this lets only the last addition to the timeout stack through
		this.counter = this.counter ? ++this.counter : 1;
		var counter = this.counter;

		this._delay(function() {
			if(counter === this.counter) {
				this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
			}
		});

	},

	_clear: function(event, noPropagation) {

		this.reverting = false;
		// We delay all events that have to be triggered to after the point where the placeholder has been removed and
		// everything else normalized again
		var i,
			delayedTriggers = [];

		// We first have to update the dom position of the actual currentItem
		// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
		if(!this._noFinalSort && this.currentItem.parent().length) {
			this.placeholder.before(this.currentItem);
		}
		this._noFinalSort = null;

		if(this.helper[0] === this.currentItem[0]) {
			for(i in this._storedCSS) {
				if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
					this._storedCSS[i] = "";
				}
			}
			this.currentItem.css(this._storedCSS).removeClass("coral-sortable-helper");
		} else {
			this.currentItem.show();
		}

		if(this.fromOutside && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
		}
		if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".coral-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
			delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
		}

		// Check if the items Container has Changed and trigger appropriate
		// events.
		if (this !== this.currentContainer) {
			if(!noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
				delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
				delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
			}
		}


		//Post events to containers
		for (i = this.containers.length - 1; i >= 0; i--){
			if(!noPropagation) {
				delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
			}
			if(this.containers[i].containerCache.over) {
				delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				this.containers[i].containerCache.over = 0;
			}
		}

		//Do what was originally in plugins
		if ( this.storedCursor ) {
			this.document.find( "body" ).css( "cursor", this.storedCursor );
			this.storedStylesheet.remove();
		}
		if(this._storedOpacity) {
			this.helper.css("opacity", this._storedOpacity);
		}
		if(this._storedZIndex) {
			this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
		}

		this.dragging = false;
		if(this.cancelHelperRemoval) {
			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return false;
		}

		if(!noPropagation) {
			this._trigger("beforeStop", event, this._uiHash());
		}

		//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
		this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

		if(this.helper[0] !== this.currentItem[0]) {
			this.helper.remove();
		}
		this.helper = null;

		if(!noPropagation) {
			for (i=0; i < delayedTriggers.length; i++) {
				delayedTriggers[i].call(this, event);
			} //Trigger all delayed events
			this._trigger("stop", event, this._uiHash());
		}

		this.fromOutside = false;
		return true;

	},

	_trigger: function() {
		if ($.Component.prototype._trigger.apply(this, arguments) === false) {
			this.cancel();
		}
	},

	_uiHash: function(_inst) {
		var inst = _inst || this;
		return {
			helper: inst.helper,
			placeholder: inst.placeholder || $([]),
			position: inst.position,
			originalPosition: inst.originalPosition,
			offset: inst.positionAbs,
			item: inst.currentItem,
			sender: _inst ? _inst.element : null
		};
	}

});

})();
;

/*!
 * 组件库4.0：拖动辅助工具
 *
 * 依赖JS文件:
 *	jquery.ui.core.js
 *	jquery.ui.mouse.js
 *	jquery.ui.component.js
 */
(function() {

$.component("coral.draggable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "drag",
	options: {
		addClasses: true,
		appendTo: "parent",
		axis: false,
		connectToSortable: false,
		containment: false,
		cursor: "auto",
		cursorAt: false,
		grid: false,
		handle: false,
		helper: "original",
		iframeFix: false,
		opacity: false,
		refreshPositions: false,
		revert: false,
		revertDuration: 500,
		scope: "default",
		scroll: true,
		scrollSensitivity: 20,
		scrollSpeed: 20,
		snap: false,
		snapMode: "both",
		snapTolerance: 20,
		stack: false,
		zIndex: false,

		// callbacks
		drag: null,
		start: null,
		stop: null
	},
	_create: function() {

		if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
			this.element[0].style.position = "relative";
		}
		if (this.options.addClasses){
			this.element.addClass("coral-draggable");
		}
		if (this.options.disabled){
			this.element.addClass("coral-draggable-disabled");
		}
		this._setHandleClassName();
		
		this._mouseInit();
	},
	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "handle" ) {
			this._removeHandleClassName();
			this._setHandleClassName();
		}
	},

	_destroy: function() {
		if ( ( this.helper || this.element ).is( ".coral-draggable-dragging" ) ) {
			this.destroyOnClear = true;
			return;
		}
		this.element.removeClass( "coral-draggable coral-draggable-dragging coral-draggable-disabled" );
		this._removeHandleClassName();
		this._mouseDestroy();
	},

	_mouseCapture: function(event) {

		var document = this.document[ 0 ],
			o = this.options;

		// support: IE9
		// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
		try {
			// Support: IE9+
			// If the <body> is blurred, IE will switch windows, see #9520
			if ( document.activeElement && document.activeElement.nodeName.toLowerCase() !== "body" ) {
				// Blur any element that currently has focus, see #4261
				$( document.activeElement ).blur();
			}
		} catch ( error ) {}

		// among others, prevent a drag on a resizable-handle
		if (this.helper || o.disabled || $(event.target).closest(".coral-resizable-handle").length > 0) {
			return false;
		}

		//Quit if we're not on a valid handle
		this.handle = this._getHandle(event);
		if (!this.handle) {
			return false;
		}

		$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
			$("<div class='coral-draggable-iframeFix' style='background: #fff;'></div>")
			.css({
				width: this.offsetWidth + "px", height: this.offsetHeight + "px",
				position: "absolute", opacity: "0.001", zIndex: 1000
			})
			.css($(this).offset())
			.appendTo("body");
		});

		return true;

	},

	_mouseStart: function(event) {

		var o = this.options;

		//Create and append the visible helper
		this.helper = this._createHelper(event);

		this.helper.addClass("coral-draggable-dragging");

		//Cache the helper size
		this._cacheHelperProportions();

		//If ddmanager is used for droppables, set the global draggable
		if ($.coral.ddmanager) {
			$.coral.ddmanager.current = this;
		}

		/*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */

		//Cache the margins of the original element
		this._cacheMargins();

		//Store the helper's css position
		this.cssPosition = this.helper.css( "position" );
		this.scrollParent = this.helper.scrollParent( true );
		this.offsetParent = this.helper.offsetParent();
		this.offsetParentCssPosition = this.offsetParent.css( "position" );

		//The element's absolute position on the page minus margins
		this.offset = this.positionAbs = this.element.offset();
		this.offset = {
			top: this.offset.top - this.margins.top,
			left: this.offset.left - this.margins.left
		};

		//Reset scroll cache
		this.offset.scroll = false;

		$.extend(this.offset, {
			click: { //Where the click happened, relative to the element
				left: event.pageX - this.offset.left,
				top: event.pageY - this.offset.top
			},
			parent: this._getParentOffset(),
			relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
		});

		//Generate the original position
		this.originalPosition = this.position = this._generatePosition( event, false );
		this.originalPageX = event.pageX;
		this.originalPageY = event.pageY;

		//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

		//Set a containment if given in the options
		this._setContainment();

		//Trigger event + callbacks
		if (this._trigger("start", event) === false) {
			this._clear();
			return false;
		}

		//Recache the helper size
		this._cacheHelperProportions();

		//Prepare the droppable offsets
		if ($.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(this, event);
		}

		this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

		//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
		if ( $.coral.ddmanager ) {
			$.coral.ddmanager.dragStart(this, event);
		}

		return true;
	},

	_mouseDrag: function(event, noPropagation) {
		// reset any necessary cached properties (see #5009)
		if ( this.offsetParentCssPosition === "fixed" ) {
			this.offset.parent = this._getParentOffset();
		}

		//Compute the helpers position
		this.position = this._generatePosition( event, true );
		this.positionAbs = this._convertPositionTo("absolute");

		//Call plugins and callbacks and use the resulting position if something is returned
		if (!noPropagation) {
			var ui = this._uiHash();
			if(this._trigger("drag", event, ui) === false) {
				this._mouseUp({});
				return false;
			}
			this.position = ui.position;
		}

		this.helper[ 0 ].style.left = this.position.left + "px";
		this.helper[ 0 ].style.top = this.position.top + "px";
		
		if($.coral.ddmanager) {
			$.coral.ddmanager.drag(this, event);
		}

		return false;
	},

	_mouseStop: function(event) {

		//If we are using droppables, inform the manager about the drop
		var that = this,
			dropped = false;
		if ($.coral.ddmanager && !this.options.dropBehaviour) {
			dropped = $.coral.ddmanager.drop(this, event);
		}

		//if a drop comes from outside (a sortable)
		if(this.dropped) {
			dropped = this.dropped;
			this.dropped = false;
		}

		//if the original element is no longer in the DOM don't bother to continue (see #8269)
		if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
			return false;
		}

		if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
			$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
				if(that._trigger("stop", event) !== false) {
					that._clear();
				}
			});
		} else {
			if(this._trigger("stop", event) !== false) {
				this._clear();
			}
		}

		return false;
	},

	_mouseUp: function(event) {
		//Remove frame helpers
		$("div.coral-draggable-iframeFix").each(function() {
			this.parentNode.removeChild(this);
		});

		//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
		if( $.coral.ddmanager ) {
			$.coral.ddmanager.dragStop(this, event);
		}
		
		// The interaction is over; whether or not the click resulted in a drag, focus the element
		this.element.focus();
		
		return $.coral.mouse.prototype._mouseUp.call(this, event);
	},

	cancel: function() {

		if(this.helper.is(".coral-draggable-dragging")) {
			this._mouseUp({});
		} else {
			this._clear();
		}

		return this;

	},

	_getHandle: function(event) {
		return this.options.handle ?
			!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
			true;
	},

	_setHandleClassName: function() {
		this.handleElement = this.options.handle ?
			this.element.find( this.options.handle ) : this.element;
			this.handleElement.addClass( "coral-draggable-handle" );
	},
	
	_removeHandleClassName: function() {
		this.handleElement.removeClass( "coral-draggable-handle" );
	},
		
	_createHelper: function(event) {

		var o = this.options,
			helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[ 0 ], [ event ])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

		if (!helper.parents("body").length) {
			helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
		}

		if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
			helper.css("position", "absolute");
		}

		return helper;

	},

	_adjustOffsetFromHelper: function(obj) {
		if (typeof obj === "string") {
			obj = obj.split(" ");
		}
		if ($.isArray(obj)) {
			obj = {left: +obj[0], top: +obj[1] || 0};
		}
		if ("left" in obj) {
			this.offset.click.left = obj.left + this.margins.left;
		}
		if ("right" in obj) {
			this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
		}
		if ("top" in obj) {
			this.offset.click.top = obj.top + this.margins.top;
		}
		if ("bottom" in obj) {
			this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
		}
	},

	_isRootNode: function( element ) {
		return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];
	},
	
	_getParentOffset: function() {

		//Get the offsetParent and cache its position
		var po = this.offsetParent.offset(),
			document = this.document[ 0 ];

		// This is a special case where we need to modify a offset calculated on start, since the following happened:
		// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
		// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
		//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
		if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
			po.left += this.scrollParent.scrollLeft();
			po.top += this.scrollParent.scrollTop();
		}

		if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {
			po = { top: 0, left: 0 };
		}

		return {
			top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
			left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
		};

	},

	_getRelativeOffset: function() {
		if ( this.cssPosition !== "relative" ) {
			return { top: 0, left: 0 };
		}

		var p = this.element.position(),
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: p.top - ( parseInt(this.helper.css( "top" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),
			left: p.left - ( parseInt(this.helper.css( "left" ), 10) || 0 ) + ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )
		};

	},
	
	_cacheMargins: function() {
		this.margins = {
			left: (parseInt(this.element.css("marginLeft"), 10) || 0),
			top: (parseInt(this.element.css("marginTop"), 10) || 0),
			right: (parseInt(this.element.css("marginRight"), 10) || 0),
			bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
		};
	},
	
	_cacheHelperProportions: function() {
		this.helperProportions = {
			width: this.helper.outerWidth(),
			height: this.helper.outerHeight()
		};
	},

	_setContainment: function() {

		var over, c, ce,
			o = this.options,
			document = this.document[ 0 ];

		this.relativeContainer = null;

		if ( !o.containment ) {
			this.containment = null;
			return;
		}

		if ( o.containment === "window" ) {
			this.containment = [
				$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
				$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
				$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
				$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment === "document") {
			this.containment = [
				0,
				0,
				$( document ).width() - this.helperProportions.width - this.margins.left,
				( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
			];
			return;
		}

		if ( o.containment.constructor === Array ) {
			this.containment = o.containment;
			return;
		}

		if ( o.containment === "parent" ) {
			o.containment = this.helper[ 0 ].parentNode;
		}

		c = $( o.containment );
		ce = c[ 0 ];

		if ( !ce ) {
			return;
		}

		over = c.css( "overflow" ) !== "hidden";

		this.containment = [
			( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
			( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ),
			( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
			( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
		];
		this.relativeContainer = c;
	},

	_convertPositionTo: function(d, pos) {

		if (!pos) {
			pos = this.position;
		}

		var mod = d === "absolute" ? 1 : -1,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );

		return {
			top: (
				pos.top	+																// The absolute mouse position
				this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod)
			),
			left: (
				pos.left +																// The absolute mouse position
				this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
				( ( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod)
			)
		};

	},

	_generatePosition: function( event, constrainPosition ) {

		var containment, co, top, left,
			o = this.options,
			scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),
			pageX = event.pageX,
			pageY = event.pageY;

		// Cache the scroll
		if ( !scrollIsRootNode || !this.offset.scroll ) {
			this.offset.scroll = {
				top: this.scrollParent.scrollTop(),
				left: this.scrollParent.scrollLeft()
			};
		}

		/*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */

		// If we are not dragging yet, we won't check for options
		if ( constrainPosition ) {
			if ( this.containment ) {
				if ( this.relativeContainer ){
					co = this.relativeContainer.offset();
					containment = [
						this.containment[ 0 ] + co.left,
						this.containment[ 1 ] + co.top,
						this.containment[ 2 ] + co.left,
						this.containment[ 3 ] + co.top
					];
				} else {
					containment = this.containment;
				}

				if (event.pageX - this.offset.click.left < containment[0]) {
					pageX = containment[0] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top < containment[1]) {
					pageY = containment[1] + this.offset.click.top;
				}
				if (event.pageX - this.offset.click.left > containment[2]) {
					pageX = containment[2] + this.offset.click.left;
				}
				if (event.pageY - this.offset.click.top > containment[3]) {
					pageY = containment[3] + this.offset.click.top;
				}
			}

			if (o.grid) {
				//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
				top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
				pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

				left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
				pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
			}

			if ( o.axis === "y" ) {
				pageX = this.originalPageX;
			}

			if ( o.axis === "x" ) {
				pageY = this.originalPageY;
			}
		}

		return {
			top: (
				pageY -																	// The absolute mouse position
				this.offset.click.top	-												// Click offset (relative to the element)
				this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.top : ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )
			),
			left: (
				pageX -																	// The absolute mouse position
				this.offset.click.left -												// Click offset (relative to the element)
				this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
				this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
				( this.cssPosition === "fixed" ? -this.offset.scroll.left : ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )
			)
		};

	},

	_clear: function() {
		this.helper.removeClass("coral-draggable-dragging");
		if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
			this.helper.remove();
		}
		this.helper = null;
		this.cancelHelperRemoval = false;
		if ( this.destroyOnClear ) {
			this.destroy();
		}
	},

	// From now on bulk stuff - mainly helpers

	_trigger: function(type, event, ui) {
		ui = ui || this._uiHash();
		$.coral.plugin.call( this, type, [ event, ui, this ], true );
		//The absolute position has to be recalculated after plugins
		if(type === "drag") {
			this.positionAbs = this._convertPositionTo("absolute");
		}
		return $.Component.prototype._trigger.call(this, type, event, ui);
	},

	plugins: {},

	_uiHash: function() {
		return {
			helper: this.helper,
			position: this.position,
			originalPosition: this.originalPosition,
			offset: this.positionAbs
		};
	}

});

$.coral.plugin.add("draggable", "connectToSortable", {
	start: function( event, ui, inst ) {

		var o = inst.options,
			uiSortable = $.extend({}, ui, { item: inst.element });
		inst.sortables = [];
		$(o.connectToSortable).each(function() {
			var sortable = $.data(this, "coral-sortable");
			if (sortable && !sortable.options.disabled) {
				inst.sortables.push({
					instance: sortable,
					shouldRevert: sortable.options.revert
				});
				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
				sortable._trigger("activate", event, uiSortable);
			}
		});

	},
	stop: function( event, ui, inst ) {

		//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
		var uiSortable = $.extend( {}, ui, {
			item: inst.element
		});

		$.each(inst.sortables, function() {
			if(this.instance.isOver) {

				this.instance.isOver = 0;

				inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
				this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

				//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
				if(this.shouldRevert) {
					this.instance.options.revert = this.shouldRevert;
				}

				//Trigger the stop of the sortable
				this.instance._mouseStop(event);

				this.instance.options.helper = this.instance.options._helper;

				//If the helper has been the original item, restore properties in the sortable
				if(inst.options.helper === "original") {
					this.instance.currentItem.css({ top: "auto", left: "auto" });
				}

			} else {
				this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
				this.instance._trigger("deactivate", event, uiSortable);
			}

		});

	},
	drag: function( event, ui, inst ) {

		var that = this;

		$.each(inst.sortables, function() {

			var innermostIntersecting = false,
				thisSortable = this;

			//Copy over some variables to allow calling the sortable's native _intersectsWith
			this.instance.positionAbs = inst.positionAbs;
			this.instance.helperProportions = inst.helperProportions;
			this.instance.offset.click = inst.offset.click;

			if(this.instance._intersectsWith(this.instance.containerCache)) {
				innermostIntersecting = true;
				$.each(inst.sortables, function () {
					this.instance.positionAbs = inst.positionAbs;
					this.instance.helperProportions = inst.helperProportions;
					this.instance.offset.click = inst.offset.click;
					if (this !== thisSortable &&
						this.instance._intersectsWith(this.instance.containerCache) &&
						$.contains(thisSortable.instance.element[0], this.instance.element[0])
					) {
						innermostIntersecting = false;
					}
					return innermostIntersecting;
				});
			}


			if(innermostIntersecting) {
				//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
				if(!this.instance.isOver) {

					this.instance.isOver = 1;
					//Now we fake the start of dragging for the sortable instance,
					//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
					//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
					this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("coral-sortable-item", true);
					this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
					this.instance.options.helper = function() { return ui.helper[0]; };

					event.target = this.instance.currentItem[0];
					this.instance._mouseCapture(event, true);
					this.instance._mouseStart(event, true, true);

					//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
					this.instance.offset.click.top = inst.offset.click.top;
					this.instance.offset.click.left = inst.offset.click.left;
					this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
					this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

					inst._trigger("toSortable", event);
					inst.dropped = this.instance.element; //draggable revert needs that
					//hack so receive/update callbacks work (mostly)
					inst.currentItem = inst.element;
					this.instance.fromOutside = inst;

				}

				//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
				if(this.instance.currentItem) {
					this.instance._mouseDrag(event);
				}

			} else {

				//If it doesn't intersect with the sortable, and it intersected before,
				//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
				if(this.instance.isOver) {

					this.instance.isOver = 0;
					this.instance.cancelHelperRemoval = true;

					//Prevent reverting on this forced stop
					this.instance.options.revert = false;

					// The out event needs to be triggered independently
					this.instance._trigger("out", event, this.instance._uiHash(this.instance));

					this.instance._mouseStop(event, true);
					this.instance.options.helper = this.instance.options._helper;

					//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
					this.instance.currentItem.remove();
					if(this.instance.placeholder) {
						this.instance.placeholder.remove();
					}

					inst._trigger("fromSortable", event);
					inst.dropped = false; //draggable revert needs that
				}

			}

		});

	}
});

$.coral.plugin.add("draggable", "cursor", {
	start: function( event, ui, instance ) {
		var t = $( "body" ),
			o = instance.options;
		
		if (t.css("cursor")) {
			o._cursor = t.css("cursor");
		}
		t.css("cursor", o.cursor);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if (o._cursor) {
			$("body").css("cursor", o._cursor);
		}
	}
});

$.coral.plugin.add("draggable", "opacity", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;
		if(t.css("opacity")) {
			o._opacity = t.css("opacity");
		}
		t.css("opacity", o.opacity);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;
		if(o._opacity) {
			$(ui.helper).css("opacity", o._opacity);
		}
	}
});

$.coral.plugin.add("draggable", "scroll", {
	start: function( event, ui, i ) {
		if ( !i.scrollParentNotHidden ) {
			i.scrollParentNotHidden = i.helper.scrollParent( false );
		}

		if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] && i.scrollParentNotHidden[ 0 ].tagName !== "HTML" ) {
			i.overflowOffset = i.scrollParentNotHidden.offset();
		}
	},
	drag: function( event, ui, i  ) {

		var o = i.options,
			scrolled = false,
			scrollParent = i.scrollParentNotHidden[ 0 ],
			document = i.document[ 0 ];

		if ( scrollParent !== document && scrollParent.tagName !== "HTML" ) {
			if ( !o.axis || o.axis !== "x" ) {
				if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
				} else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {
					scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
				}
			}

			if ( !o.axis || o.axis !== "y" ) {
				if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
				} else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {
					scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
				}
			}

		} else {

			if (!o.axis || o.axis !== "x") {
				if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
				} else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
					scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
				}
			}

			if (!o.axis || o.axis !== "y") {
				if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
				} else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
					scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
				}
			}

		}

		if (scrolled !== false && $.coral.ddmanager && !o.dropBehaviour) {
			$.coral.ddmanager.prepareOffsets(i, event);
		}

	}
});

$.coral.plugin.add("draggable", "snap", {
	start: function( event, ui, i ) {

		var o = i.options;

		i.snapElements = [];

		$(o.snap.constructor !== String ? ( o.snap.items || ":data(coral-draggable)" ) : o.snap).each(function() {
			var $t = $(this),
				$o = $t.offset();
			if (this !== i.element[0]) {
				i.snapElements.push({
					item: this,
					width: $t.outerWidth(), height: $t.outerHeight(),
					top: $o.top, left: $o.left
				});
			}
		});

	},
	drag: function( event, ui, inst ) {

		var ts, bs, ls, rs, l, r, t, b, i, first,
			o = inst.options,
			d = o.snapTolerance,
			x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
			y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

		for (i = inst.snapElements.length - 1; i >= 0; i--){

			l = inst.snapElements[i].left;
			r = l + inst.snapElements[i].width;
			t = inst.snapElements[i].top;
			b = t + inst.snapElements[i].height;

			if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
				if (inst.snapElements[i].snapping) {
					(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = false;
				continue;
			}

			if (o.snapMode !== "inner") {
				ts = Math.abs(t - y2) <= d;
				bs = Math.abs(b - y1) <= d;
				ls = Math.abs(l - x2) <= d;
				rs = Math.abs(r - x1) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
				}
			}

			first = (ts || bs || ls || rs);

			if (o.snapMode !== "outer") {
				ts = Math.abs(t - y1) <= d;
				bs = Math.abs(b - y2) <= d;
				ls = Math.abs(l - x1) <= d;
				rs = Math.abs(r - x2) <= d;
				if (ts) {
					ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
				}
				if (bs) {
					ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
				}
				if (ls) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
				}
				if (rs) {
					ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
				}
			}

			if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
				(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
			}
			inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

		}

	}
});

$.coral.plugin.add("draggable", "stack", {
	start: function( event, ui, instance ) {
		var min,
			o = instance.options,
			group = $.makeArray($(o.stack)).sort(function(a, b) {
				return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
			});

		if (!group.length) { return; }

		min = parseInt($(group[0]).css("zIndex"), 10) || 0;
		$(group).each(function(i) {
			$(this).css("zIndex", min + i);
		});
		this.css("zIndex", (min + group.length));
	}
});

$.coral.plugin.add("draggable", "zIndex", {
	start: function( event, ui, instance ) {
		var t = $( ui.helper ),
			o = instance.options;

		if (t.css("zIndex")) {
			o._zIndex = t.css("zIndex");
		}
		t.css("zIndex", o.zIndex);
	},
	stop: function( event, ui, instance ) {
		var o = instance.options;

		if (o._zIndex) {
			$(ui.helper).css("zIndex", o._zIndex);
		}
	}
});

})();
;

/*!
 * jQuery coral Droppable 4.0.1
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.component.js
 *	jquery.ui.mouse.js
 *	jquery.ui.draggable.js
 */
(function() {

function isOverAxis( x, reference, size ) {
	return ( x >= reference ) && ( x < ( reference + size ) );
}

$.component("coral.droppable", {
	version: "4.0.1",
	componentEventPrefix: "drop",
	options: {
		accept: "*",
		activeClass: false,
		addClasses: true,
		greedy: false,
		hoverClass: false,
		scope: "default",
		tolerance: "intersect",

		// callbacks
		activate: null,
		deactivate: null,
		drop: null,
		out: null,
		over: null
	},
	_create: function() {

		var proportions,
			o = this.options,
			accept = o.accept;

		this.isover = false;
		this.isout = true;

		this.accept = $.isFunction(accept) ? accept : function(d) {
			return d.is(accept);
		};

		this.proportions = function( /* valueToWrite */ ) {
				if ( arguments.length ) {
						// Store the droppable's proportions
						proportions = arguments[ 0 ];
				} else {
						// Retrieve or derive the droppable's proportions
						return proportions ?
								proportions :
								proportions = {
										width: this.element[ 0 ].offsetWidth,
										height: this.element[ 0 ].offsetHeight
								};
			}
		};
		this._addToManager( o.scope );

		(o.addClasses && this.element.addClass("coral-droppable"));

	},

	_addToManager: function( scope ) {
		// Add the reference and positions to the manager
		$.coral.ddmanager.droppables[ scope ] = $.coral.ddmanager.droppables[ scope ] || [];
		$.coral.ddmanager.droppables[ scope ].push( this );
	},
	
	_splice: function( drop ) {
		var i = 0;
		for ( ; i < drop.length; i++ ) {
			if ( drop[i] === this ) {
				drop.splice(i, 1);
			}
		}
	},

	_destroy: function() {
		var drop = $.coral.ddmanager.droppables[ this.options.scope ];

		this._splice( drop );
		
		this.element.removeClass("coral-droppable coral-droppable-disabled");
	},

	_setOption: function(key, value) {

		if(key === "accept") {
			this.accept = $.isFunction(value) ? value : function(d) {
				return d.is(value);
			};
		} else if ( key === "scope" ) {
			var drop = $.coral.ddmanager.droppables[ this.options.scope ];
			
			this._splice( drop );
			this._addToManager( value );
		}
		
		this._super( key, value );
	},

	_activate: function(event) {
		var draggable = $.coral.ddmanager.current;
		if(this.options.activeClass) {
			this.element.addClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("activate", event, this.ui(draggable));
		}
	},

	_deactivate: function(event) {
		var draggable = $.coral.ddmanager.current;
		if(this.options.activeClass) {
			this.element.removeClass(this.options.activeClass);
		}
		if(draggable){
			this._trigger("deactivate", event, this.ui(draggable));
		}
	},

	_over: function(event) {

		var draggable = $.coral.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.addClass(this.options.hoverClass);
			}
			this._trigger("over", event, this.ui(draggable));
		}

	},

	_out: function(event) {

		var draggable = $.coral.ddmanager.current;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return;
		}

		if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("out", event, this.ui(draggable));
		}

	},

	_drop: function(event,custom) {

		var draggable = custom || $.coral.ddmanager.current,
			childrenIntersection = false;

		// Bail if draggable and droppable are same element
		if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
			return false;
		}

		this.element.find(":data(coral-droppable)").not(".coral-draggable-dragging").each(function() {
			var inst = $.data(this, "coral-droppable");
			if(
				inst.options.greedy &&
				!inst.options.disabled &&
				inst.options.scope === draggable.options.scope &&
				inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
				$.coral.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)
			) { childrenIntersection = true; return false; }
		});
		if(childrenIntersection) {
			return false;
		}

		if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(this.options.hoverClass) {
				this.element.removeClass(this.options.hoverClass);
			}
			this._trigger("drop", event, this.ui(draggable));
			return this.element;
		}

		return false;

	},

	ui: function(c) {
		return {
			draggable: (c.currentItem || c.element),
			helper: c.helper,
			position: c.position,
			offset: c.positionAbs
		};
	}

});


$.coral.intersect = (function() {
	function isOverAxis( x, reference, size ) {
		return ( x >= reference ) && ( x < ( reference + size ) );
	}

	return function( draggable, droppable, toleranceMode, event ) {

		if ( !droppable.offset ) {
			return false;
		}

		var x1 = ( draggable.positionAbs || draggable.position.absolute ).left,
			y1 = ( draggable.positionAbs || draggable.position.absolute ).top,
			x2 = x1 + draggable.helperProportions.width,
			y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left,
			t = droppable.offset.top,
			r = l + droppable.proportions().width,
			b = t + droppable.proportions().height;

		switch ( toleranceMode ) {
		case "fit":
			return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );
		case "intersect":
			return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half
				x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half
				t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half
				y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half
		case "pointer":
			return isOverAxis( event.pageY, t, droppable.proportions().height ) && isOverAxis( event.pageX, l, droppable.proportions().width );
		case "touch":
			return (
				( y1 >= t && y1 <= b ) || // Top edge touching
				( y2 >= t && y2 <= b ) || // Bottom edge touching
				( y1 < t && y2 > b ) // Surrounded vertically
			) && (
				( x1 >= l && x1 <= r ) || // Left edge touching
				( x2 >= l && x2 <= r ) || // Right edge touching
				( x1 < l && x2 > r ) // Surrounded horizontally
			);
		default:
			return false;
		}
	};
})();

/*
	This manager tracks offsets of draggables and droppables
*/
$.coral.ddmanager = {
	current: null,
	droppables: { "default": [] },
	prepareOffsets: function(t, event) {

		var i, j,
			m = $.coral.ddmanager.droppables[t.options.scope] || [],
			type = event ? event.type : null, // workaround for #2317
			list = (t.currentItem || t.element).find(":data(coral-droppable)").addBack();

		droppablesLoop: for (i = 0; i < m.length; i++) {

			//No disabled and non-accepted
			if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
				continue;
			}

			// Filter out elements in the current dragged item
			for (j=0; j < list.length; j++) {
				if(list[j] === m[i].element[0]) {
					m[i].proportions().height = 0;
					continue droppablesLoop;
				}
			}

			m[i].visible = m[i].element.css("display") !== "none";
			if(!m[i].visible) {
				continue;
			}

			//Activate the droppable if used directly from draggables
			if(type === "mousedown") {
				m[i]._activate.call(m[i], event);
			}

			m[ i ].offset = m[ i ].element.offset();
			m[ i ].proportions({ width: m[ i ].element[ 0 ].offsetWidth, height: m[ i ].element[ 0 ].offsetHeight });
		}

	},
	drop: function(draggable, event) {

		var dropped = false;
		// Create a copy of the droppables in case the list changes during the drop (#9116)
		$.each(($.coral.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

			if(!this.options) {
				return;
			}
			if (!this.options.disabled && this.visible && $.coral.intersect(draggable, this, this.options.tolerance, event)) {
				dropped = this._drop.call(this, event) || dropped;
			}

			if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				this.isout = true;
				this.isover = false;
				this._deactivate.call(this, event);
			}

		});
		return dropped;

	},
	dragStart: function( draggable, event ) {
		//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
		draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
			if( !draggable.options.refreshPositions ) {
				$.coral.ddmanager.prepareOffsets( draggable, event );
			}
		});
	},
	drag: function( draggable, event ) {

		//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
		if(draggable.options.refreshPositions) {
			$.coral.ddmanager.prepareOffsets(draggable, event);
		}

		//Run through all droppables and check their positions based on specific tolerance options
		$.each($.coral.ddmanager.droppables[draggable.options.scope] || [], function() {

			if(this.options.disabled || this.greedyChild || !this.visible) {
				return;
			}

			var parentInstance, scope, parent,
				intersects = $.coral.intersect(draggable, this, this.options.tolerance, event),
				c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
			if(!c) {
				return;
			}

			if (this.options.greedy) {
				// find droppable parents with same scope
				scope = this.options.scope;
				parent = this.element.parents(":data(coral-droppable)").filter(function () {
					return $.data(this, "coral-droppable").options.scope === scope;
				});

				if (parent.length) {
					parentInstance = $.data(parent[0], "coral-droppable");
					parentInstance.greedyChild = (c === "isover");
				}
			}

			// we just moved into a greedy child
			if (parentInstance && c === "isover") {
				parentInstance.isover = false;
				parentInstance.isout = true;
				parentInstance._out.call(parentInstance, event);
			}

			this[c] = true;
			this[c === "isout" ? "isover" : "isout"] = false;
			this[c === "isover" ? "_over" : "_out"].call(this, event);

			// we just moved out of a greedy child
			if (parentInstance && c === "isout") {
				parentInstance.isout = false;
				parentInstance.isover = true;
				parentInstance._over.call(parentInstance, event);
			}
		});

	},
	dragStop: function( draggable, event ) {
		draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
		//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
		if( !draggable.options.refreshPositions ) {
			$.coral.ddmanager.prepareOffsets( draggable, event );
		}
	}
};

})();
;

(function() {

function num(v) {
	return parseInt(v, 10) || 0;
}

function isNumber(value) {
	return !isNaN(parseInt(value, 10));
}
function hasScroll( el, a ) {
	
	//If overflow is hidden, the element might have extra content, but the user wants to hide it
	if ( $( el ).css( "overflow" ) === "hidden") {
		return false;
	}
	
	var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
	has = false;

	if ( el[ scroll ] > 0 ) {
		return true;
	}
	
	// TODO: determine which cases actually cause this to happen
	// if the element doesn't have the scroll set, see if it's possible to
	// set the scroll
	el[ scroll ] = 1;
	has = ( el[ scroll ] > 0 );
	el[ scroll ] = 0;
	return has;
}
$.component("coral.resizable", $.coral.mouse, {
	version: "4.0.1",
	componentEventPrefix: "resize",
	options: {
		alsoResize: false,
		animate: false,
		animateDuration: "slow",
		animateEasing: "swing",
		aspectRatio: false,
		autoHide: false,
		containment: false,
		ghost: false,
		grid: false,
		layout: false,//layout缁勪欢浣跨敤姝ゅ睘鎬�		handles: "e,s,se",
		helper: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 10,
		minWidth: 10,
		// See #7960
		zIndex: 90,

		// callbacks
		resize: null,
		start: null,
		stop: null
	},
	_create: function() {

		var n, i, handle, axis, hname,
			that = this,
			o = this.options;
		this.element.addClass("coral-resizable");

		$.extend(this, {
			_aspectRatio: !!(o.aspectRatio),
			aspectRatio: o.aspectRatio,
			originalElement: this.element,
			_proportionallyResizeElements: [],
			_helper: o.helper || o.ghost || o.animate ? o.helper || "coral-resizable-helper" : null
		});

		//Wrap the element if it cannot hold child nodes
		if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

			//Create a wrapper element and set the wrapper to the new current internal element
			this.element.wrap(
				$("<div class='coral-wrapper' style='overflow: hidden;'></div>").css({
					position: this.element.css("position"),
					width: this.element.outerWidth(),
					height: this.element.outerHeight(),
					top: this.element.css("top"),
					left: this.element.css("left")
				})
			);

			//Overwrite the original this.element
			this.element = this.element.parent().data(
				"coral-resizable", this.element.data("coral-resizable")
			);

			this.elementIsWrapper = true;

			//Move margins to the wrapper
			this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
			this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

			//Prevent Safari textarea resize
			this.originalResizeStyle = this.originalElement.css("resize");
			this.originalElement.css("resize", "none");

			//Push the actual element to our proportionallyResize internal array
			this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

			// avoid IE jump (hard set the margin)
			this.originalElement.css({ margin: this.originalElement.css("margin") });

			// fix handlers offset
			this._proportionallyResize();

		}

		this.handles = o.handles || (!$(".coral-resizable-handle", this.element).length ? "e,s,se" : { n: ".coral-resizable-n", e: ".coral-resizable-e", s: ".coral-resizable-s", w: ".coral-resizable-w", se: ".coral-resizable-se", sw: ".coral-resizable-sw", ne: ".coral-resizable-ne", nw: ".coral-resizable-nw" });
		if(this.handles.constructor === String) {

			if ( this.handles === "all") {
				this.handles = "n,e,s,w,se,sw,ne,nw";
			}

			n = this.handles.split(",");
			this.handles = {};

			for(i = 0; i < n.length; i++) {

				handle = $.trim(n[i]);
				hname = "coral-resizable-"+handle;
				axis = $("<div class='coral-resizable-handle " + hname + "'></div>");

				// Apply zIndex to all handles - see #7960
				axis.css({ zIndex: o.zIndex });

				//TODO : What's going on here?
				if ("se" === handle) {
					axis.addClass("coral-icon coral-icon-gripsmall-diagonal-se");
				}

				//Insert into internal handles object and append to element
				this.handles[handle] = ".coral-resizable-"+handle;
				this.element.append(axis);
			}

		}

		this._renderAxis = function(target) {

			var i, axis, padPos, padWrapper;

			target = target || this.element;

			for(i in this.handles) {

				if(this.handles[i].constructor === String) {
					this.handles[i] = this.element.children( this.handles[ i ] ).first().show();
				}

				//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
				if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

					axis = $(this.handles[i], this.element);

					//Checking the correct pad and border
					padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

					//The padding type i have to apply...
					padPos = [ "padding",
						/ne|nw|n/.test(i) ? "Top" :
						/se|sw|s/.test(i) ? "Bottom" :
						/^e$/.test(i) ? "Right" : "Left" ].join("");

					target.css(padPos, padWrapper);

					this._proportionallyResize();

				}

				//TODO: What's that good for? There's not anything to be executed left
				if(!$(this.handles[i]).length) {
					continue;
				}
			}
		};

		//TODO: make renderAxis a prototype function
		this._renderAxis(this.element);

		this._handles = $(".coral-resizable-handle", this.element)
			.disableSelection();

		//Matching axis name
		this._handles.mouseover(function() {
			if (!that.resizing) {
				if (this.className) {
					axis = this.className.match(/coral-resizable-(se|sw|ne|nw|n|e|s|w)/i);
				}
				//Axis, default = se
				that.axis = axis && axis[1] ? axis[1] : "se";
			}
		});

		//If we want to auto hide the elements
		if (o.autoHide) {
			this._handles.hide();
			$(this.element)
				.addClass("coral-resizable-autohide")
				.mouseenter(function() {
					if (o.disabled) {
						return;
					}
					$(this).removeClass("coral-resizable-autohide");
					that._handles.show();
				})
				.mouseleave(function(){
					if (o.disabled) {
						return;
					}
					if (!that.resizing) {
						$(this).addClass("coral-resizable-autohide");
						that._handles.hide();
					}
				});
		}

		//Initialize the mouse interaction
		this._mouseInit();

	},

	_destroy: function() {

		this._mouseDestroy();

		var wrapper,
			_destroy = function(exp) {
				$(exp).removeClass("coral-resizable coral-resizable-disabled coral-resizable-resizing")
					.removeData("resizable").removeData("coral-resizable").unbind(".resizable").find(".coral-resizable-handle").remove();
			};

		//TODO: Unwrap at same DOM position
		if (this.elementIsWrapper) {
			_destroy(this.element);
			wrapper = this.element;
			this.originalElement.css({
				position: wrapper.css("position"),
				width: wrapper.outerWidth(),
				height: wrapper.outerHeight(),
				top: wrapper.css("top"),
				left: wrapper.css("left")
			}).insertAfter( wrapper );
			wrapper.remove();
		}

		this.originalElement.css("resize", this.originalResizeStyle);
		_destroy(this.originalElement);

		return this;
	},

	_mouseCapture: function(event) {
		var i, handle,
			capture = false;

		for (i in this.handles) {
			handle = $(this.handles[i])[0];
			if (handle === event.target || $.contains(handle, event.target)) {
				capture = true;
			}
		}

		return !this.options.disabled && capture;
	},

	_mouseStart: function(event) {

		var curleft, curtop, cursor,
			o = this.options,
			el = this.element;

		this.resizing = true;

		this._renderProxy();

		curleft = num(this.helper.css("left"));
		curtop = num(this.helper.css("top"));

		if (o.containment) {
			curleft += $(o.containment).scrollLeft() || 0;
			curtop += $(o.containment).scrollTop() || 0;
		}

		//Store needed variables
		this.offset = this.helper.offset();
		this.position = { left: curleft, top: curtop };
		this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: el.width(), height: el.height() };
		this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
		this.originalPosition = { left: curleft, top: curtop };
		this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
		this.originalMousePosition = { left: event.pageX, top: event.pageY };

		//Aspect Ratio
		this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

		cursor = $(".coral-resizable-" + this.axis).css("cursor");
		$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

		el.addClass("coral-resizable-resizing");
		this._propagate("start", event);
		return true;
	},

	_mouseDrag: function(event) {

		var data, props,
			smp = this.originalMousePosition,
			a = this.axis,
			dx = (event.pageX-smp.left)||0,
			dy = (event.pageY-smp.top)||0,
			trigger = this._change[a];

		this._updatePrevProperties();
				
		if (!trigger) {
			return false;
		}

		// Calculate the attrs that will be change
		data = trigger.apply(this, [event, dx, dy]);

		// Put this in the mouseDrag handler since the user can start pressing shift while resizing
		this._updateVirtualBoundaries(event.shiftKey);
		if (this._aspectRatio || event.shiftKey) {
			data = this._updateRatio(data, event);
		}

		data = this._respectSize(data, event);

		this._updateCache(data);

		// plugins callbacks need to be called first
		this._propagate("resize", event);

		props = this._applyChanges();
		
		if (!this._helper && this._proportionallyResizeElements.length) {
			this._proportionallyResize();
		}

		// Call the user callback if the element was resized
		if ( ! $.isEmptyObject(props) ) {
			this._updatePrevProperties();
			this._trigger("resize", event, this.ui());
			this._applyChanges();
		}

		return false;
	},

	_mouseStop: function(event) {

		this.resizing = false;
		var pr, ista, soffseth, soffsetw, s, left, top,
			o = this.options, that = this;

		if(this._helper) {

			pr = this._proportionallyResizeElements;
			ista = pr.length && (/textarea/i).test(pr[0].nodeName);
			soffseth = ista && hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
			soffsetw = ista ? 0 : that.sizeDiff.width;

			s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			if (!o.animate) {
				this.element.css($.extend(s, { top: top, left: left }));
			}

			that.helper.height(that.size.height);
			that.helper.width(that.size.width);

			if (this._helper && !o.animate) {
				this._proportionallyResize();
			}
		}

		$("body").css("cursor", "auto");

		this.element.removeClass("coral-resizable-resizing");

		this._propagate("stop", event ,this.ui());

		if (this._helper) {
			this.helper.remove();
		}

		return false;

	},
	_updatePrevProperties: function() {
		this.prevPosition = {
			top: this.position.top,
			left: this.position.left
		};
		this.prevSize = {
			width: this.size.width,
			height: this.size.height
		};
	},

	_applyChanges: function() {
		var props = {};

		if ( this.position.top !== this.prevPosition.top ) {
			props.top = this.position.top + "px";
		}
		if ( this.position.left !== this.prevPosition.left ) {
			props.left = this.position.left + "px";
		}
		if ( this.size.width !== this.prevSize.width ) {
			props.width = this.size.width + "px";
		}
		if ( this.size.height !== this.prevSize.height ) {
			props.height = this.size.height + "px";
		}

		this.helper.css( props );

		return props;
	},

	_updateVirtualBoundaries: function(forceAspectRatio) {
		var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
			o = this.options;

		b = {
			minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
			maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
			minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
			maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
		};

		if(this._aspectRatio || forceAspectRatio) {
			// We want to create an enclosing box whose aspect ration is the requested one
			// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
			pMinWidth = b.minHeight * this.aspectRatio;
			pMinHeight = b.minWidth / this.aspectRatio;
			pMaxWidth = b.maxHeight * this.aspectRatio;
			pMaxHeight = b.maxWidth / this.aspectRatio;

			if(pMinWidth > b.minWidth) {
				b.minWidth = pMinWidth;
			}
			if(pMinHeight > b.minHeight) {
				b.minHeight = pMinHeight;
			}
			if(pMaxWidth < b.maxWidth) {
				b.maxWidth = pMaxWidth;
			}
			if(pMaxHeight < b.maxHeight) {
				b.maxHeight = pMaxHeight;
			}
		}
		this._vBoundaries = b;
	},

	_updateCache: function(data) {
		this.offset = this.helper.offset();
		if (isNumber(data.left)) {
			this.position.left = data.left;
		}
		if (isNumber(data.top)) {
			this.position.top = data.top;
		}
		if (isNumber(data.height)) {
			this.size.height = data.height;
		}
		if (isNumber(data.width)) {
			this.size.width = data.width;
		}
	},

	_updateRatio: function( data ) {

		var cpos = this.position,
			csize = this.size,
			a = this.axis;

		if (isNumber(data.height)) {
			data.width = (data.height * this.aspectRatio);
		} else if (isNumber(data.width)) {
			data.height = (data.width / this.aspectRatio);
		}

		if (a === "sw") {
			data.left = cpos.left + (csize.width - data.width);
			data.top = null;
		}
		if (a === "nw") {
			data.top = cpos.top + (csize.height - data.height);
			data.left = cpos.left + (csize.width - data.width);
		}

		return data;
	},

	_respectSize: function( data ) {

		var o = this._vBoundaries,
			a = this.axis,
			ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
			isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
			dw = this.originalPosition.left + this.originalSize.width,
			dh = this.position.top + this.size.height,
			cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
		if (isminw) {
			data.width = o.minWidth;
		}
		if (isminh) {
			data.height = o.minHeight;
		}
		if (ismaxw) {
			data.width = o.maxWidth;
		}
		if (ismaxh) {
			data.height = o.maxHeight;
		}

		if (isminw && cw) {
			data.left = dw - o.minWidth;
		}
		if (ismaxw && cw) {
			data.left = dw - o.maxWidth;
		}
		if (isminh && ch) {
			data.top = dh - o.minHeight;
		}
		if (ismaxh && ch) {
			data.top = dh - o.maxHeight;
		}

		// fixing jump error on top/left - bug #2330
		if (!data.width && !data.height && !data.left && data.top) {
			data.top = null;
		} else if (!data.width && !data.height && !data.top && data.left) {
			data.left = null;
		}

		return data;
	},

	_getPaddingPlusBorderDimensions: function( element ) {
		var i = 0,
			widths = [],
			borders = [
				element.css( "borderTopWidth" ),
				element.css( "borderRightWidth" ),
				element.css( "borderBottomWidth" ),
				element.css( "borderLeftWidth" )
			],
			paddings = [
				element.css( "paddingTop" ),
				element.css( "paddingRight" ),
				element.css( "paddingBottom" ),
				element.css( "paddingLeft" )
			];

		for ( ; i < 4; i++ ) {
			widths[ i ] = ( parseInt( borders[ i ], 10 ) || 0 );
			widths[ i ] += ( parseInt( paddings[ i ], 10 ) || 0 );
		}

		return {
			height: widths[ 0 ] + widths[ 2 ],
			width: widths[ 1 ] + widths[ 3 ]
		};
	},

	_proportionallyResize: function() {

		if (!this._proportionallyResizeElements.length) {
			return;
		}

		var prel,
			i = 0,
			element = this.helper || this.element;

		for ( ; i < this._proportionallyResizeElements.length; i++) {

			prel = this._proportionallyResizeElements[i];

			// TODO: Seems like a bug to cache this.outerDimensions
			// considering that we are in a loop.
			if (!this.outerDimensions) {
				this.outerDimensions = this._getPaddingPlusBorderDimensions( prel );
			}

			prel.css({
				height: (element.height() - this.outerDimensions.height) || 0,
				width: (element.width() - this.outerDimensions.width) || 0
			});

		}

	},

	_renderProxy: function() {

		var el = this.element, o = this.options;
		this.elementOffset = el.offset();

		if(this._helper) {

			this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

			this.helper.addClass(this._helper).css({
				width: this.element.outerWidth() - 1,
				height: this.element.outerHeight() - 1,
				position: "absolute",
				left: this.elementOffset.left +"px",
				top: this.elementOffset.top +"px",
				zIndex: ++o.zIndex //TODO: Don't modify option
			});

			this.helper
				.appendTo("body")
				.disableSelection();

		} else {
			this.helper = this.element;
		}

	},

	_change: {
		e: function(event, dx) {
			return { width: this.originalSize.width + dx };
		},
		w: function(event, dx) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { left: sp.left + dx, width: cs.width - dx };
		},
		n: function(event, dx, dy) {
			var cs = this.originalSize, sp = this.originalPosition;
			return { top: sp.top + dy, height: cs.height - dy };
		},
		s: function(event, dx, dy) {
			return { height: this.originalSize.height + dy };
		},
		se: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		sw: function(event, dx, dy) {
			return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		},
		ne: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
		},
		nw: function(event, dx, dy) {
			return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
		}
	},

	_propagate: function(n, event) {
		$.coral.plugin.call(this, n, [event, this.ui()]);
		(n !== "resize" && this._trigger(n, event, this.ui()));
	},

	plugins: {},

	ui: function() {
		return {
			originalElement: this.originalElement,
			element: this.element,
			helper: this.helper,
			position: this.position,
			size: this.size,
			originalSize: this.originalSize,
			originalPosition: this.originalPosition
		};
	}

});

/*
 * Resizable Extensions
 */

$.coral.plugin.add("resizable", "animate", {

	stop: function( event ) {
		var that = $(this).data("coral-resizable"),
			o = that.options,
			pr = that._proportionallyResizeElements,
			ista = pr.length && (/textarea/i).test(pr[0].nodeName),
			soffseth = ista && hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
			soffsetw = ista ? 0 : that.sizeDiff.width,
			style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
			left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
			top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

		that.element.animate(
			$.extend(style, top && left ? { top: top, left: left } : {}), {
				duration: o.animateDuration,
				easing: o.animateEasing,
				step: function() {

					var data = {
						width: parseInt(that.element.css("width"), 10),
						height: parseInt(that.element.css("height"), 10),
						top: parseInt(that.element.css("top"), 10),
						left: parseInt(that.element.css("left"), 10)
					};

					if (pr && pr.length) {
						$(pr[0]).css({ width: data.width, height: data.height });
					}

					// propagating resize, and updating values for each animation step
					that._updateCache(data);
					that._propagate("resize", event);

				}
			}
		);
	}

});

$.coral.plugin.add("resizable", "containment", {

	start: function() {
		var element, p, co, ch, cw, width, height,
			that = $(this).data("coral-resizable"),
			o = that.options,
			el = that.element,
			oc = o.containment,
			ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

		if (!ce) {
			return;
		}

		that.containerElement = $(ce);

		if (/document/.test(oc) || oc === document) {
			that.containerOffset = { left: 0, top: 0 };
			that.containerPosition = { left: 0, top: 0 };

			that.parentData = {
				element: $(document), left: 0, top: 0,
				width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
			};
		}

		// i'm a node, so compute top, left, right, bottom
		else {
			element = $(ce);
			p = [];
			$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

			that.containerOffset = element.offset();
			that.containerPosition = element.position();
			that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

			co = that.containerOffset;
			ch = that.containerSize.height;
			cw = that.containerSize.width;
			width = (hasScroll(ce, "left") ? ce.scrollWidth : cw );
			height = (hasScroll(ce) ? ce.scrollHeight : ch);

			that.parentData = {
				element: ce, left: co.left, top: co.top, width: width, height: height
			};
		}
	},

	resize: function( event ) {
		var woset, hoset, isParent, isOffsetRelative,
			that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cp = that.position,
			pRatio = that._aspectRatio || event.shiftKey,
			cop = {
				top: 0,
				left: 0
			},
			ce = that.containerElement,
			continueResize = true;

		if ( ce[ 0 ] !== document && ( /static/ ).test( ce.css( "position" ) ) ) {
			cop = co;
		}

		if ( cp.left < ( that._helper ? co.left : 0 ) ) {
			that.size.width = that.size.width +
				( that._helper ?
					( that.position.left - co.left ) :
					( that.position.left - cop.left ) );

			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
			that.position.left = o.helper ? co.left : 0;
		}

		if ( cp.top < ( that._helper ? co.top : 0 ) ) {
			that.size.height = that.size.height +
				( that._helper ?
					( that.position.top - co.top ) :
					that.position.top );

			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
			that.position.top = that._helper ? co.top : 0;
		}

		isParent = that.containerElement.get( 0 ) === that.element.parent().get( 0 );
		isOffsetRelative = /relative|absolute/.test( that.containerElement.css( "position" ) );

		if ( isParent && isOffsetRelative ) {
			that.offset.left = that.parentData.left + that.position.left;
			that.offset.top = that.parentData.top + that.position.top;
		} else {
			that.offset.left = that.element.offset().left;
			that.offset.top = that.element.offset().top;
		}

		woset = Math.abs( that.sizeDiff.width +
			(that._helper ?
				that.offset.left - cop.left :
				(that.offset.left - co.left)) );

		hoset = Math.abs( that.sizeDiff.height +
			(that._helper ?
				that.offset.top - cop.top :
				(that.offset.top - co.top)) );

		if ( woset + that.size.width >= that.parentData.width ) {
			that.size.width = that.parentData.width - woset;
			if ( pRatio ) {
				that.size.height = that.size.width / that.aspectRatio;
				continueResize = false;
			}
		}

		if ( hoset + that.size.height >= that.parentData.height ) {
			that.size.height = that.parentData.height - hoset;
			if ( pRatio ) {
				that.size.width = that.size.height * that.aspectRatio;
				continueResize = false;
			}
		}

		if ( !continueResize ){
			that.position.left = that.prevPosition.left;
			that.position.top = that.prevPosition.top;
			that.size.width = that.prevSize.width;
			that.size.height = that.prevSize.height;
		}
	},

	stop: function() {
		var that = $( this ).resizable( "instance" ),
			o = that.options,
			co = that.containerOffset,
			cop = that.containerPosition,
			ce = that.containerElement,
			helper = $( that.helper ),
			ho = helper.offset(),
			w = helper.outerWidth() - that.sizeDiff.width,
			h = helper.outerHeight() - that.sizeDiff.height;

		if ( that._helper && !o.animate && ( /relative/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}

		if ( that._helper && !o.animate && ( /static/ ).test( ce.css( "position" ) ) ) {
			$( this ).css({
				left: ho.left - cop.left - co.left,
				width: w,
				height: h
			});
		}
	}
});

$.coral.plugin.add("resizable", "alsoResize", {

	start: function () {
		var that = $(this).data("coral-resizable"),
			o = that.options,
			_store = function (exp) {
				$(exp).each(function() {
					var el = $(this);
					el.data("coral-resizable-alsoresize", {
						width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
						left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
					});
				});
			};

		if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
			if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
			else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
		}else{
			_store(o.alsoResize);
		}
	},

resize: function (event, ui) {
	var that = $(this).data("coral-resizable"),
		o = that.options,
		os = that.originalSize,
		op = that.originalPosition,
		delta = {
			height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
			top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
		},

		_alsoResize = function (exp, c) {
			$(exp).each(function() {
				var el = $(this), start = $(this).data("coral-resizable-alsoresize"), style = {},
					css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
				var styles = $.coral.getStyles(el[0]);//在jquery.core.js中添加了getStyles()方法，获取元素的style值；
				//判断一下浏览器是否支持boxSizing并获得元素boxSizing的属性值是否为border-box
				var isBorderBox = jQuery.support.boxSizing && jQuery.css( el, "boxSizing", false, styles ) === "border-box";
				$.each(css, function (i, prop) {
					var sum = (start[prop]||0) + (delta[prop]||0);
					if (sum && sum >= 0) {
						/**原代码：直接 style[prop] = sum || null;
						 * 不对boxSizing的值进行判断
						 * 改后的代码：对boxSizing的值进行判断，如果box-sizing:border-box,进行处理*/
						if ( isBorderBox ) {
							if($.inArray(prop,['width','height'])>=0){
								el[prop](sum);
							}else{
								el.css(prop,sum);
							}
						} else {
							style[prop] = sum || null;
						}
					}
				});
				el.css(style);
			});
		};

	if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
		$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
	}else{
		_alsoResize(o.alsoResize);
	}
},

stop: function () {
	$(this).removeData("resizable-alsoresize");
	}
});

$.coral.plugin.add("resizable", "ghost", {

	start: function() {

		var that = $(this).data("coral-resizable"), o = that.options, cs = that.size;

		that.ghost = that.originalElement.clone();
		that.ghost
			.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
			.addClass("coral-resizable-ghost")
			.addClass(typeof o.ghost === "string" ? o.ghost : "");

		that.ghost.appendTo(that.helper);

	},

	resize: function(){
		var that = $(this).data("coral-resizable");
		if (that.ghost) {
			that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
		}
	},

	stop: function() {
		var that = $(this).data("coral-resizable");
		if (that.ghost && that.helper) {
			that.helper.get(0).removeChild(that.ghost.get(0));
		}
	}

});

$.coral.plugin.add("resizable", "grid", {

	resize: function() {
		var outerDimensions,
			that = $(this).resizable( "instance" ),
			o = that.options,
			cs = that.size,
			os = that.originalSize,
			op = that.originalPosition,
			a = that.axis,
			grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
			gridX = (grid[0]||1),
			gridY = (grid[1]||1),
			ox = Math.round((cs.width - os.width) / gridX) * gridX,
			oy = Math.round((cs.height - os.height) / gridY) * gridY,
			newWidth = os.width + ox,
			newHeight = os.height + oy,
			isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
			isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
			isMinWidth = o.minWidth && (o.minWidth > newWidth),
			isMinHeight = o.minHeight && (o.minHeight > newHeight);

		o.grid = grid;

		if (isMinWidth) {
			newWidth += gridX;
		}
		if (isMinHeight) {
			newHeight += gridY;
		}
		if (isMaxWidth) {
			newWidth -= gridX;
		}
		if (isMaxHeight) {
			newHeight -= gridY;
		}

		if (/^(se|s|e)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
		} else if (/^(ne)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.top = op.top - oy;
		} else if (/^(sw)$/.test(a)) {
			that.size.width = newWidth;
			that.size.height = newHeight;
			that.position.left = op.left - ox;
		} else {
			if ( newHeight - gridY <= 0 || newWidth - gridX <= 0) {
				outerDimensions = that._getPaddingPlusBorderDimensions( this );
			}
				
			if ( newHeight - gridY > 0 ) {
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else {
				newHeight = gridY - outerDimensions.height;
				that.size.height = newHeight;
				that.position.top = op.top + os.height - newHeight;
			}
			if ( newWidth - gridX > 0 ) {
				that.size.width = newWidth;
				that.position.left = op.left - ox;
			} else {
				newWidth = gridY - outerDimensions.height;
				that.size.width = newWidth;
				that.position.left = op.left + os.width - newWidth;
			}
		}
	}

});

})();
;

(function() {

$.component("coral.selectable", $.coral.mouse, {
	version: "4.0.1",
	options: {
		appendTo: "body",
		autoRefresh: true,
		distance: 0,
		filter: "*",
		tolerance: "touch",

		// callbacks
		selected: null,
		selecting: null,
		start: null,
		stop: null,
		unselected: null,
		unselecting: null
	},
	_create: function() {
		var selectees,
			that = this;

		this.element.addClass("coral-selectable");

		this.dragged = false;

		// cache selectee children based on filter
		this.refresh = function() {
			selectees = $(that.options.filter, that.element[0]);
			selectees.addClass("coral-selectee");
			selectees.each(function() {
				var $this = $(this),
					pos = $this.offset();
				$.data(this, "selectable-item", {
					element: this,
					$element: $this,
					left: pos.left,
					top: pos.top,
					right: pos.left + $this.outerWidth(),
					bottom: pos.top + $this.outerHeight(),
					startselected: false,
					selected: $this.hasClass("coral-selected"),
					selecting: $this.hasClass("coral-selecting"),
					unselecting: $this.hasClass("coral-unselecting")
				});
			});
		};
		this.refresh();

		this.selectees = selectees.addClass("coral-selectee");

		this._mouseInit();

		this.helper = $("<div class='coral-selectable-helper'></div>");
	},

	_destroy: function() {
		this.selectees
			.removeClass("coral-selectee")
			.removeData("selectable-item");
		this.element
			.removeClass("coral-selectable coral-selectable-disabled");
		this._mouseDestroy();
	},

	_mouseStart: function(event) {
		var that = this,
			options = this.options;

		this.opos = [event.pageX, event.pageY];

		if (this.options.disabled) {
			return;
		}

		this.selectees = $(options.filter, this.element[0]);

		this._trigger("start", event);

		$(options.appendTo).append(this.helper);
		// position helper (lasso)
		this.helper.css({
			"left": event.pageX,
			"top": event.pageY,
			"width": 0,
			"height": 0
		});

		if (options.autoRefresh) {
			this.refresh();
		}

		this.selectees.filter(".coral-selected").each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.startselected = true;
			if (!event.metaKey && !event.ctrlKey) {
				selectee.$element.removeClass("coral-selected");
				selectee.selected = false;
				selectee.$element.addClass("coral-unselecting");
				selectee.unselecting = true;
				// selectable UNSELECTING callback
				that._trigger("unselecting", event, {
					unselecting: selectee.element
				});
			}
		});

		$(event.target).parents().addBack().each(function() {
			var doSelect,
				selectee = $.data(this, "selectable-item");
			if (selectee) {
				doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("coral-selected");
				selectee.$element
					.removeClass(doSelect ? "coral-unselecting" : "coral-selected")
					.addClass(doSelect ? "coral-selecting" : "coral-unselecting");
				selectee.unselecting = !doSelect;
				selectee.selecting = doSelect;
				selectee.selected = doSelect;
				// selectable (UN)SELECTING callback
				if (doSelect) {
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				} else {
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
				return false;
			}
		});

	},

	_mouseDrag: function(event) {

		this.dragged = true;

		if (this.options.disabled) {
			return;
		}

		var tmp,
			that = this,
			options = this.options,
			x1 = this.opos[0],
			y1 = this.opos[1],
			x2 = event.pageX,
			y2 = event.pageY;

		if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
		if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
		this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

		this.selectees.each(function() {
			var selectee = $.data(this, "selectable-item"),
				hit = false;

			//prevent helper from being selected if appendTo: selectable
			if (!selectee || selectee.element === that.element[0]) {
				return;
			}

			if (options.tolerance === "touch") {
				hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
			} else if (options.tolerance === "fit") {
				hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
			}

			if (hit) {
				// SELECT
				if (selectee.selected) {
					selectee.$element.removeClass("coral-selected");
					selectee.selected = false;
				}
				if (selectee.unselecting) {
					selectee.$element.removeClass("coral-unselecting");
					selectee.unselecting = false;
				}
				if (!selectee.selecting) {
					selectee.$element.addClass("coral-selecting");
					selectee.selecting = true;
					// selectable SELECTING callback
					that._trigger("selecting", event, {
						selecting: selectee.element
					});
				}
			} else {
				// UNSELECT
				if (selectee.selecting) {
					if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
						selectee.$element.removeClass("coral-selecting");
						selectee.selecting = false;
						selectee.$element.addClass("coral-selected");
						selectee.selected = true;
					} else {
						selectee.$element.removeClass("coral-selecting");
						selectee.selecting = false;
						if (selectee.startselected) {
							selectee.$element.addClass("coral-unselecting");
							selectee.unselecting = true;
						}
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
				if (selectee.selected) {
					if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
						selectee.$element.removeClass("coral-selected");
						selectee.selected = false;

						selectee.$element.addClass("coral-unselecting");
						selectee.unselecting = true;
						// selectable UNSELECTING callback
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
				}
			}
		});

		return false;
	},

	_mouseStop: function(event) {
		var that = this;

		this.dragged = false;

		$(".coral-unselecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("coral-unselecting");
			selectee.unselecting = false;
			selectee.startselected = false;
			that._trigger("unselected", event, {
				unselected: selectee.element
			});
		});
		$(".coral-selecting", this.element[0]).each(function() {
			var selectee = $.data(this, "selectable-item");
			selectee.$element.removeClass("coral-selecting").addClass("coral-selected");
			selectee.selecting = false;
			selectee.selected = true;
			selectee.startselected = true;
			that._trigger("selected", event, {
				selected: selectee.element
			});
		});
		this._trigger("stop", event);

		this.helper.remove();

		return false;
	}

});

})();
;

/*!
 * 组件库4.0：元素位置辅助工具
 */
(function() {

$.coral = $.coral || {};

var cachedScrollbarWidth, supportsOffsetFractions,
	max = Math.max,
	abs = Math.abs,
	round = Math.round,
	rhorizontal = /left|center|right/,
	rvertical = /top|center|bottom/,
	roffset = /[\+\-]\d+(\.[\d]+)?%?/,
	rposition = /^\w+/,
	rpercent = /%$/,
	_position = $.fn.position;

function getOffsets( offsets, width, height ) {
	return [
		parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
		parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
	];
}

function parseCss( element, property ) {
	return parseInt( $.css( element, property ), 10 ) || 0;
}

function getDimensions( elem ) {
	var raw = elem[0];
	if ( raw.nodeType === 9 ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: 0, left: 0 }
		};
	}
	if ( $.isWindow( raw ) ) {
		return {
			width: elem.width(),
			height: elem.height(),
			offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
		};
	}
	if ( raw.preventDefault ) {
		return {
			width: 0,
			height: 0,
			offset: { top: raw.pageY, left: raw.pageX }
		};
	}
	return {
		width: elem.outerWidth(),
		height: elem.outerHeight(),
		offset: elem.offset()
	};
}

$.position = {
	scrollbarWidth: function() {
		if ( cachedScrollbarWidth !== undefined ) {
			return cachedScrollbarWidth;
		}
		var w1, w2,
			div = $( "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
			innerDiv = div.children()[0];

		$( "body" ).append( div );
		w1 = innerDiv.offsetWidth;
		div.css( "overflow", "scroll" );

		w2 = innerDiv.offsetWidth;

		if ( w1 === w2 ) {
			w2 = div[0].clientWidth;
		}

		div.remove();

		return (cachedScrollbarWidth = w1 - w2);
	},
	getScrollInfo: function( within ) {
		var overflowX = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-x" ),
			overflowY = within.isWindow || within.isDocument ? "" :
				within.element.css( "overflow-y" ),
			hasOverflowX = overflowX === "scroll" ||
				( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
			hasOverflowY = overflowY === "scroll" ||
				( overflowY === "auto" && within.height < within.element[0].scrollHeight );
		return {
			width: hasOverflowY ? $.position.scrollbarWidth() : 0,
			height: hasOverflowX ? $.position.scrollbarWidth() : 0
		};
	},
	getWithinInfo: function( element ) {
		var withinElement = $( element || window ),
			isWindow = $.isWindow( withinElement[0] ),
			isDocument = !!withinElement[ 0 ] && withinElement[ 0 ].nodeType === 9;
		return {
			element: withinElement,
			isWindow: isWindow,
			isDocument: isDocument,
			offset: withinElement.offset() || { left: 0, top: 0 },
			scrollLeft: withinElement.scrollLeft(),
			scrollTop: withinElement.scrollTop(),
			// support: jQuery 1.6.x
			// jQuery 1.6 doesn't support .outerWidth/Height() on documents or windows
			width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
			height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
		};
	}
};

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
		target = $( options.of ),
		within = $.position.getWithinInfo( options.within ),
		scrollInfo = $.position.getScrollInfo( within ),
		collision = ( options.collision || "flip" ).split( " " ),
		offsets = {};

	dimensions = getDimensions( target );
	if ( target[0].preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
	}
	targetWidth = dimensions.width;
	targetHeight = dimensions.height;
	targetOffset = dimensions.offset;
	// clone to reuse original targetOffset later
	basePosition = $.extend( {}, targetOffset );

	// force my and at to have valid horizontal and vertical positions
	// if a value is missing or invalid, it will be converted to center
	$.each( [ "my", "at" ], function() {
		var pos = ( options[ this ] || "" ).split( " " ),
			horizontalOffset,
			verticalOffset;

		if ( pos.length === 1) {
			pos = rhorizontal.test( pos[ 0 ] ) ?
				pos.concat( [ "center" ] ) :
				rvertical.test( pos[ 0 ] ) ?
					[ "center" ].concat( pos ) :
					[ "center", "center" ];
		}
		pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
		pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

		// calculate offsets
		horizontalOffset = roffset.exec( pos[ 0 ] );
		verticalOffset = roffset.exec( pos[ 1 ] );
		offsets[ this ] = [
			horizontalOffset ? horizontalOffset[ 0 ] : 0,
			verticalOffset ? verticalOffset[ 0 ] : 0
		];

		// reduce to just the positions without the offsets
		options[ this ] = [
			rposition.exec( pos[ 0 ] )[ 0 ],
			rposition.exec( pos[ 1 ] )[ 0 ]
		];
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	if ( options.at[ 0 ] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[ 0 ] === "center" ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[ 1 ] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[ 1 ] === "center" ) {
		basePosition.top += targetHeight / 2;
	}

	atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
	basePosition.left += atOffset[ 0 ];
	basePosition.top += atOffset[ 1 ];

	return this.each(function() {
		var collisionPosition, using,
			elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseCss( this, "marginLeft" ),
			marginTop = parseCss( this, "marginTop" ),
			collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
			collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
			position = $.extend( {}, basePosition ),
			myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

		if ( options.my[ 0 ] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[ 0 ] === "center" ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[ 1 ] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[ 1 ] === "center" ) {
			position.top -= elemHeight / 2;
		}

		position.left += myOffset[ 0 ];
		position.top += myOffset[ 1 ];

		// if the browser doesn't support fractions, then round for consistent results
		if ( !supportsOffsetFractions ) {
			position.left = round( position.left );
			position.top = round( position.top );
		}

		collisionPosition = {
			marginLeft: marginLeft,
			marginTop: marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.coral.position[ collision[ i ] ] ) {
				$.coral.position[ collision[ i ] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
					my: options.my,
					at: options.at,
					within: within,
					elem : elem
				});
			}
		});

		if ( options.using ) {
			// adds feedback as second argument to using callback, if present
			using = function( props ) {
				var left = targetOffset.left - position.left,
					right = left + targetWidth - elemWidth,
					top = targetOffset.top - position.top,
					bottom = top + targetHeight - elemHeight,
					feedback = {
						target: {
							element: target,
							left: targetOffset.left,
							top: targetOffset.top,
							width: targetWidth,
							height: targetHeight
						},
						element: {
							element: elem,
							left: position.left,
							top: position.top,
							width: elemWidth,
							height: elemHeight
						},
						horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
						vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
					};
				if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
					feedback.horizontal = "center";
				}
				if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
					feedback.vertical = "middle";
				}
				if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
					feedback.important = "horizontal";
				} else {
					feedback.important = "vertical";
				}
				options.using.call( this, props, feedback );
			};
		}

		elem.offset( $.extend( position, { using: using } ) );
	});
};

$.coral.position = {
	fit: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
				outerWidth = within.width,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = withinOffset - collisionPosLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
				newOverRight;

			// element is wider than within
			if ( data.collisionWidth > outerWidth ) {
				// element is initially over the left side of within
				if ( overLeft > 0 && overRight <= 0 ) {
					newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
					position.left += overLeft - newOverRight;
				// element is initially over right side of within
				} else if ( overRight > 0 && overLeft <= 0 ) {
					position.left = withinOffset;
				// element is initially over both left and right sides of within
				} else {
					if ( overLeft > overRight ) {
						position.left = withinOffset + outerWidth - data.collisionWidth;
					} else {
						position.left = withinOffset;
					}
				}
			// too far left -> align with left edge
			} else if ( overLeft > 0 ) {
				position.left += overLeft;
			// too far right -> align with right edge
			} else if ( overRight > 0 ) {
				position.left -= overRight;
			// adjust based on position and margin
			} else {
				position.left = max( position.left - collisionPosLeft, position.left );
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
				outerHeight = data.within.height,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = withinOffset - collisionPosTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
				newOverBottom;

			// element is taller than within
			if ( data.collisionHeight > outerHeight ) {
				// element is initially over the top of within
				if ( overTop > 0 && overBottom <= 0 ) {
					newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
					position.top += overTop - newOverBottom;
				// element is initially over bottom of within
				} else if ( overBottom > 0 && overTop <= 0 ) {
					position.top = withinOffset;
				// element is initially over both top and bottom of within
				} else {
					if ( overTop > overBottom ) {
						position.top = withinOffset + outerHeight - data.collisionHeight;
					} else {
						position.top = withinOffset;
					}
				}
			// too far up -> align with top
			} else if ( overTop > 0 ) {
				position.top += overTop;
			// too far down -> align with bottom edge
			} else if ( overBottom > 0 ) {
				position.top -= overBottom;
			// adjust based on position and margin
			} else {
				position.top = max( position.top - collisionPosTop, position.top );
			}
		}
	},
	flip: {
		left: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.left + within.scrollLeft,
				outerWidth = within.width,
				offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
				collisionPosLeft = position.left - data.collisionPosition.marginLeft,
				overLeft = collisionPosLeft - offsetLeft,
				overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					data.at[ 0 ] === "right" ?
						-data.targetWidth :
						0,
				offset = -2 * data.offset[ 0 ],
				newOverRight,
				newOverLeft;

			if ( overLeft < 0 ) {
				newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
				if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
					position.left += myOffset + atOffset + offset;
				}
			}
			else if ( overRight > 0 ) {
				newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
				if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
					position.left += myOffset + atOffset + offset;
				}
			}
		},
		top: function( position, data ) {
			var within = data.within,
				withinOffset = within.offset.top + within.scrollTop,
				outerHeight = within.height,
				offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
				collisionPosTop = position.top - data.collisionPosition.marginTop,
				overTop = collisionPosTop - offsetTop,
				overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
				top = data.my[ 1 ] === "top",
				myOffset = top ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					data.at[ 1 ] === "bottom" ?
						-data.targetHeight :
						0,
				offset = -2 * data.offset[ 1 ],
				newOverTop,
				newOverBottom;
			if ( overTop < 0 ) {
				newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
				if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
			else if ( overBottom > 0 ) {
				newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
				if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
					position.top += myOffset + atOffset + offset;
				}
			}
		}
	},
	flipfit: {
		left: function() {
			$.coral.position.flip.left.apply( this, arguments );
			$.coral.position.fit.left.apply( this, arguments );
		},
		top: function() {
			$.coral.position.flip.top.apply( this, arguments );
			$.coral.position.fit.top.apply( this, arguments );
		}
	}
};

// fraction support test
(function () {
	var testElement, testElementParent, testElementStyle, offsetLeft, i,
		body = document.getElementsByTagName( "body" )[ 0 ],
		div = document.createElement( "div" );

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px;";

	offsetLeft = $( div ).offset().left;
	supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );
})();

}() );
;

/******************************************************************************/
/*********************************** EASING ***********************************/
/******************************************************************************/

(function() {

// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

var baseEasings = {};

$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
	baseEasings[ name ] = function( p ) {
		return Math.pow( p, i + 2 );
	};
});

$.extend( baseEasings, {
	Sine: function ( p ) {
		return 1 - Math.cos( p * Math.PI / 2 );
	},
	Circ: function ( p ) {
		return 1 - Math.sqrt( 1 - p * p );
	},
	Elastic: function( p ) {
		return p === 0 || p === 1 ? p :
			-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
	},
	Back: function( p ) {
		return p * p * ( 3 * p - 2 );
	},
	Bounce: function ( p ) {
		var pow2,
			bounce = 4;

		while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
		return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
	}
});

$.each( baseEasings, function( name, easeIn ) {
	$.easing[ "easeIn" + name ] = easeIn;
	$.easing[ "easeOut" + name ] = function( p ) {
		return 1 - easeIn( 1 - p );
	};
	$.easing[ "easeInOut" + name ] = function( p ) {
		return p < 0.5 ?
			easeIn( p * 2 ) / 2 :
			1 - easeIn( p * -2 + 2 ) / 2;
	};
});

})();
;

$.grid = $.grid||{};
 var grid = $.component( "coral.grid",{
		version: "4.0.1",
		castProperties : ["rowEditButtons", "data","subGridOptions","initData","subGridRowExpanded","shortCut", "rowList","pager","pagerTemplate", "celloptions","colModel", "picTemplate","rowattr","cellattr"],
		options: {
			
		},
		grid: {
				
		},
		diff: 2,
		getScrollBarWidth: function () {
			var inner = document.createElement('p');
			inner.style.width = "100%";
			inner.style.height = "200px";

			var outer = document.createElement('div');
			outer.style.position = "absolute";
			outer.style.top = "0px";
			outer.style.left = "0px";
			outer.style.visibility = "hidden";
			outer.style.width = "200px";
			outer.style.height = "150px";
			outer.style.overflow = "hidden";
			outer.appendChild (inner);

			document.body.appendChild (outer);
			var w1 = inner.offsetWidth;
		  	outer.style.overflow = 'scroll';
		  	var w2 = inner.offsetWidth;
		  	if (w1 == w2) w2 = outer.clientWidth;

		  	document.body.removeChild (outer);

		  	return (w1 - w2)+this.diff;
		},
		_destroy: function(){
	        var destroyPag = "",
	            elementId = $(this.element).attr("id");
	        if (this.pagers){
	             destroyPag = $(this.pagers).empty().addClass(elementId);
	        }
	        $(this.element).empty();
			this.element.removeClass( "ctrl-init ctrl-init-grid" );
			this.element.removeClass( "coral-grid" );
			this.element.removeClass( this.options.cls );
	        this.component().replaceWith(this.element).append(destroyPag); 
		},
		/***
		 * 第一步：
		 * 初始化生成统一的模型数据
		 * 第二步：
		 * 分离不同表格的构造方法，构造方法基于统一模型，可方便切换
		 * 第三部：
		 * 构造表格，绑定方法
		 * 
		 */
		_create: function() {
			var options = this.options,
				that = this,
				activeClass = "coral-state-active",
				focusClass = "coral-state-focus",
				id = this.element.uniqueId().attr("id");
			options.id = id;
			var p = {
				_index : {},
				altRows:false,
				altclass: " coral-priority-secondary ",
				ajaxGridOptions:{},//grid请求的默认参数
				asyncType: "post",//Ajax 的 http 请求模式
				autoSave: false,//点击表格其他位置是否自动保存编辑状态的单元格。
				autoValid: true,
				autoWidth: true,
				allowSaveOnError: true,//出错的时候是否允许保存，默认是允许的。
				cls: "",
				caption: "",
				colModel: [],//列模型，根据页面html，自动构造
				colNames: [],//列名字，根据页面html，自动构造
				cellLayout: 1,
				cellEdit: false,
				subGridWidth: 22,
				cellsubmit: "clientArray",
				clicksToEdit: 2,
				data : [],
				datatype: "json",
				direction : "ltr",
				allowCellSelect: false,
				deselectAfterSort: true,
				emptyrecords: "无数据",
				expandColumn: null,
				height: 150,//列表默认高度
				idPrefix : "",
				initData: false,
				customPicgrid: $.noop(),
				gridview: false,
				grouping : false,
				groupingView : {groupField:[],groupOrder:[], groupText:[],groupColumnShow:[],groupSummary:[], showSummaryOnHide: false, sortitems:[], sortnames:[], summary:[],summaryval:[], plusicon: 'cui-icon-plus3', minusicon: 'cui-icon-minus3', displayField: [], groupSummaryPos:[], formatDisplayField : [], _locgr : false},
				subGridOptions: {
				      "plusicon"  : "cui-icon-arrow-right3",
				      "minusicon" : "cui-icon-arrow-down3",
				      "openicon"  : ""
				    },
				groupHeaders: [],
				groupHeader: false,
				search: false,
				remoteFilter: false,
				fitStyle: "auto",
				forceFit : false,
				hoverrows : true,
				lastsort: 0,
				loadonce: true,
				loadui: "enable", // lihaibo 20141111
				loadtext: "加载中，请耐心等候 ...", // lihaibo 20141111
				minWidth: false,
				multiselect: false,
				multiselectWidth: 30,
				multiboxonly: false,
				multikey: "",
				clickRowToSelect:true,
				subGridRowExpanded:null,
				model: "grid",
				page: 1,//列表默认页码
				pager: "",
				pagerStyle: "flex",
				pginput: true,
				records: 0,
				rninput: true,
				rowEditButtons: [],
				pgbuttons: true,
				showGridHeader: true,
				enableHighlight: false,
				picTemplate: "picTemplate",
				postData: {},
				prmNames: {page:"P_pageNumber",rows:"P_pagesize", sort: "P_orders",order: "sord", search:"_search", nd:"nd", id:"id",oper:"oper",editoper:"edit",addoper:"add",deloper:"del", subgridid:"id", npage: null, totalrows:"totalrows"},
				rowNum: 20,//默认每页显示行数
				rowNumMax: 200,//默认每页显示最大行数
				rownumbers: false,
				rownumWidth: 35,
				rownumName: "",
				rowList: [10,20,30],
				savedRow: [],
				scrollOffset:this.getScrollBarWidth(),
				selarrrow: [],
				singleselect: false,
				sortorder: "asc",
				treeGrid : false,
				treeGridModel : 'adjacency',
				treeReader : {},
				treeANode : -1,
				tree_root_level : 0,
				generalLevel : false,
				onSortableColumns: false,
				sortableColumnsOptions: {},
				onSortableRows: false,
				beforeSortableRows: false,
				afterSortableRows: false,
				editableRows: false,
				onSortableStart: false,
				onSortableStop: false,
				onSortableReceive: false,
				onSortableRemove: false,
				onSortableLoad: false,
				connectGridId: null,
				containSortOrder: false,
				sortSeparator: " ",
				shrinkToFit: true,
				toppager: false,
				toolbar: [false,""],
				url: "",//grid加载的远程地址
				useProp: true,
				viewsortcols : [false,'vertical',true],
				viewrecords: true,
				minIndex: null,
				maxIndex: null,
				preIndex: null,
				beforePopulate: null
			};
			options = $.extend(true,{},p,$.grid.defaults,this.options);
			// 兼容处理
			if(options.model == "pic"){options.model = "card";}
			this.options = options;
			this.options.isValid = true;
			options.postData = $.coral.toFunction(options.postData);
			options.localReader = $.extend(true,{
				root: "data",
				page: "pageNumber",
				total: "totalPages",
				records: "total",
				repeatitems: false,
				cell: "cell",
				id: "id",
				userData: "userData",
				subgrid: {root:"data", repeatitems: true, cell:"cell"}
			},options.localReader);
			options.jsonReader = $.extend(true,{
				root: "data",
				page: "pageNumber",
				total: "totalPages",
				records: "total",
				repeatitems: false,
				cell: "cell",
				id: "id",
				userData: "userData"
			},options.jsonReader);
			
			if(this.options.pivotData && this.options.pivotData.length){
				this.jqPivot(this.options.pivotData,this.options.pivotOption,this.options.gridOption,this.options.ajaxOption);
			}
		//	jqPivot
			
			if(this.options.data.length) { this.normalizeData(); this.refreshIndex(); }
			this.id = id;
			var grid = {
				groupHeader: [],
				headers:[],
				cols:[],
				footers: [],
				dragStart: function(i,x,y) {//index, event, the offset of column
					var grid = this;
					this.resizing = { idx: i, startX: x.clientX, sOL : y[0]};
					grid.columnsView.style.cursor = "col-resize";
					this.curGbox = $("#rs_m"+$.grid.coralID(that.options.id),"#"+$.grid.coralID(that.options.id));
					this.curGbox.css({display:"block",left:y[0],top:y[1],height:y[2]});
					that._trigger("onResizeStart", x, [{"index":i}]);
					document.onselectstart=function(){return false;};
				},
				dragMove: function(x) {
					if(this.resizing) {
						var diff = x.clientX-this.resizing.startX,
						h = this.headers[this.resizing.idx], //current header
						newWidth = that.options.direction === "ltr" ? h.width + diff : h.width - diff, //new width of current header
						hn, //new header
						nWn; //new width of new header
						$("#test").html(diff);
						if(newWidth > 33) {
							this.curGbox.css({left:this.resizing.sOL+diff});
							if(that.options.forceFit===true ){
								hn = this.headers[this.resizing.idx+options.nv];
								nWn = that.options.direction === "ltr" ? hn.width - diff : hn.width + diff;
								if(nWn >33) {
									h.newWidth = newWidth;
									hn.newWidth = nWn;
								}
							} else {
								this.newWidth = that.options.direction === "ltr" ? that.options.tblwidth+diff : that.options.tblwidth-diff;
								h.newWidth = newWidth;
							}
						}
					}
				},
				dragEnd: function() {
					this.columnsView.style.cursor = "default";
					if(this.resizing) {
						var idx = this.resizing.idx,
						nw = this.headers[idx].newWidth || this.headers[idx].width;
						nw = parseInt(nw,10);
						this.resizing = false;
						$("#rs_m"+$.grid.coralID(that.options.id)).css("display","none");
						that.options.colModel[idx].width = nw;
						this.headers[idx].width = nw;
						this.headers[idx].el.style.width = nw + "px";
						this.cols[idx].style.width = nw+"px";
						if($('table:first',this.rowsView).hasClass("coral-grid-btable-frozen")){//处理冻结行
							$("tr.jqgfirstrow>td:eq("+idx+")", $('table:first',this.rowsView))[0].style.width = nw+"px";
						}
						var groupHeader = $("tr.jqg-first-row-header>th:eq("+idx+")", $('table:first',this.columnsView));
						if(groupHeader.length>0){groupHeader[0].style.width = nw+"px";}
						if(this.footers.length>0) {this.footers[idx].style.width = nw+"px";}
						if(that.options.forceFit===true){
							nw = this.headers[idx+options.nv].newWidth || this.headers[idx+options.nv].width;
							this.headers[idx+options.nv].width = nw;
							this.headers[idx+options.nv].el.style.width = nw + "px";
							this.cols[idx+options.nv].style.width = nw+"px";
							if(this.footers.length>0) {this.footers[idx+options.nv].style.width = nw+"px";}
							that.options.colModel[idx+options.nv].width = nw;
							
							groupHeader = $("tr.jqg-first-row-header>th:eq("+(idx+options.nv)+")", $('table:first',this.columnsView));
							if(groupHeader.length>0){groupHeader[0].style.width = nw+"px";}
						} else {
							that.options.tblwidth = this.newWidth || that.options.tblwidth;
							//$('table:first',this.rowsView).css("width",that.options.tblwidth+"px");
							$('table',this.rowsView).css("width",that.options.tblwidth+"px");//包括冻结行的宽度
							$('table:first',this.columnsView).css("width",that.options.tblwidth+"px");
							this.columnsView.scrollLeft = this.rowsView.scrollLeft;
							if(that.options.footerrow) {
								$('table:first',this.sDiv).css("width",p.tblwidth+"px");
								this.sDiv.scrollLeft = this.rowsView.scrollLeft;
							}
						}
						that._trigger("onResizeStop",null, [{"newWidth":nw,"index":idx,"headers":this.headers}]);
					}
					this.curGbox = null;
					document.onselectstart=function(){return true;};
				},
				selectionPreserver : function(that) {
					var opts = that.options,
					sr = opts.selrow, sra = opts.selarrrow ? $.makeArray(opts.selarrrow) : null,
					left = that.grid.rowsView.scrollLeft,
					restoreSelection = function() {
						var i;
						opts.selrow = null;
						opts.selarrrow = [];
						if(opts.multiselect && sra && sra.length>0) {
							for(i=0;i<sra.length;i++){
								if (sra[i] != sr) {
									$(that.element).grid("setSelection",sra[i],false, null);
								}
							}
						}
						if (sr) {
							$(that.element).grid("setSelection",sr,false,null);
						}
						that.grid.rowsView.scrollLeft = left;
						$(that.element).unbind('.selectionPreserver', restoreSelection);
					};
					$(that.element).bind('gridoncomplete.selectionPreserver', restoreSelection);				
				}
			};
			this.grid = grid;
			
			/* 
			 * 找到页面上定义的列容器
			 * 分页条的class名字包含grid的id，所以查找列的时候需要排除此情况
			 * */
			var gridColumns = this.element.find(">div").filter(function(){
					if($(this).hasClass(that.options.id))return false;
					return true;
				}),
				gridRows = $("<div class='coral-grid-rows'></div>");
			if(gridColumns.length==0){//如果是js初始化需要手动创建列div
				this.element.prepend("<div></div>");
				gridColumns =  this.element.find(">div").filter(function(){
					if($(this).hasClass(that.id))return false;
					return true;
				});
			}
			that.gridRows = gridRows;
			that.gridColumns = gridColumns;
			that._analyzeColumns(gridColumns);
			gridColumns.addClass("coral-grid-columns").after(gridRows);
			//rowsView 表格内容部分的view
			grid.rowsView = document.createElement("div");
			$(grid.rowsView).addClass("coral-grid-rows-view").appendTo(gridRows);
			
		//	$("<div class='coral-grid-loading' id='"+"load_"+$.grid.coralID(that.options.id)+"'>" + that.options.loadtext + "</div>").appendTo( this.element );
			$("<span class='coral-grid-noRecordsTips' id='"+"noRecordsTips_"+$.grid.coralID(that.options.id)+"'>" + that.options.emptyrecords + "</span>").appendTo( $(grid.rowsView) );
			
			//columnsView 表格表头部分的view
			grid.columnsView = document.createElement("div");
			$(grid.columnsView).addClass("coral-state-default coral-grid-columns-view").appendTo(gridColumns)
				.append("<div class='coral-grid-topRightCell'></div>");	
			that.pic = $("<ul class='coral-pic'></ul>");
			gridColumns.addClass("coral-grid-columns").after(that.pic);
			if(that.options.grouping===true) {
				that.options.scroll = false;
				that.options.rownumbers = false;
				//that.options.subGrid = false;
				that.options.treeGrid = false;
				that.options.gridview = true;
			}
			if(this.options.treeGrid === true) {
				try { $(that.element).grid("setTreeGrid");} catch (_) {}
				if(that.options.datatype != "local") { that.options.localReader = {id: "_id_"};	}
			}
			if(this.options.subGrid) {
				try { $(that.element).grid("setSubGrid");} catch (s){}
			}
			
			if(this.options.multiselect) {
				this.options.singleselect = false;
			}
			if (!this.options.keyName) {
				this.options.keyName = false;
			}
			for (var i=0; i<this.options.colModel.length;i++) {
				this.options.colModel[i] = $.extend(true, {}, this.options.cmTemplate, this.options.colModel[i].template || {}, this.options.colModel[i]);
				if (this.options.keyName === false && this.options.colModel[i].key===true) {
					this.options.keyName = this.options.colModel[i].name;
				}
			}
			//设置多选
			if(this.options.multiselect) {
				this.options.colNames.unshift("<input role='checkbox' id='cb_"+this.options.id+"' class='cbox' type='checkbox'/>");
				//this.options.colModel.unshift({name:'cb',width:isSafari ? that.options.multiselectWidth+that.options.cellLayout : that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
				this.options.colModel.unshift({name:'cb', width:that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
			}else if(this.options.singleselect){
				this.options.colNames.unshift("");
				this.options.colModel.unshift({name:'cb', width:that.options.multiselectWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
			}
			//设置行号
			if(this.options.rownumbers) {
				this.options.colNames.unshift(that.options.rownumName);
				this.options.colModel.unshift({name:'rn',width:that.options.rownumWidth,sortable:false,resizable:false,hidedlg:true,search:false,align:'center',fixed:true});
			}
			that._transToGrid();
			that._transToPicgrid();
			
			that._transPagers();
			that._cvH = $(grid.columnsView).height();//列头的高度不能每次获取，如果切换的时候列头的高度是隐藏的，获得的值是0
			// 20150203 grid 初始化时，数据加载前，先让pager拉下来（假如是自适应的情况下）
			if ( "fill" !== options.fitStyle ) {
			}
			that._setGridHeight(that.options.height);
			// 20150203
			if(options.model == "grid") {
				that.pic.hide();
			}else if(options.model == "card"){
				that.gridRows.hide();
				that.gridColumns.hide();
			}
			// lihaibo 20141111 begin
			that.setFrozenColumns();
			this.component().addClass(options.componentCls);
			this._populate();
			// end
			that._setUpEvent();
			$(window).unload(function () {
				that = null;
			});
			// Clicks outside of a grid cancel any edit row
			this._on( this.document, {
				mousedown: function( event ) {
					if ( this.options.autoSave && this._closeOnDocumentClick( event ) ) {
						this.restoreAll( event );
					}
					if(this._closeOnDocumentClick( event )){
						$(this.rows.namedItem(this.options.selrow)).removeClass("coral-grid-cell-focus");
						for(var i = 0;i<this.rows.length;i++){
							var tdFocused = $(this.rows[i]).find("td");
							if($(tdFocused).hasClass('coral-grid-cell-focus')) {
								$(tdFocused).removeClass("coral-grid-cell-focus");
							}
						}
					}
				}
			});
			if(this.options.showGridHeader == true && that.options.model != "card") {
				this.showGridHeader();
			} else{
				this.hideGridHeader();
			}
//			this.pagers = this.element.find(".coral-grid-pager");
//			if (this.pagers && this.options.width){
//				this.pagers.css({
//					width : this.options.width + "px"
//				})
//			}
		},
		_closeOnDocumentClick: function( event ) {
			return !$( event.target ).closest( ".coral-grid" ).length;
		},
		_transPagers: function(){
			var that = this;
			// 处理多个分页条
			this.pagers = $("."+this.id);
			if(this.options.pager == true){
				this.options.pager =$("<div id='pager_0_"+ this.id +"'></div>");
				this.options.pager.addClass("coral-grid-pager").removeClass(that.id).appendTo(this.element);
				that._setPager( this.options.pager[0].id, '' );
			}else{
				this.pagers.each(function(ind){
					$(this).addClass("coral-grid-pager").removeClass(that.id).attr("id","pager_"+ ind++ +"_"+that.id);
				});
				if(this.pagers){
					this.pagers.each(function(i){
						that._setPager( that.pagers[i].id, '' );
					});
				}
			}
			that.options.pager = "."+that.id;
		},
		toolbar: function(){
			return $( ".pager-toolbar", this.element );
		},
		_transToPicgrid: function(){
			var that = this;
				
			that.pic.css({height:230,'overflow':'auto'});
		},
		_transToGrid: function(){
			var that = this,
				options = this.options;
			if ($.inArray(that.options.multikey,that._sortkeys) == -1 ) {that.options.multikey = false;}
			that.options.sortorder = that.options.sortorder.toLowerCase();
			
			this.element.addClass("coral-grid");
			this.element.addClass(that.options.cls); // add cls attribute
			
			that._transGridView();
			//$(gv).css("width",grid.width+"px");
			
		},
		_transGridView: function(){
			var that = this,
				options = this.options,
				grid = this.grid,
			    ni = options.rownumbers===true ? 1 :0,
			    gi = options.multiselect ===true ? 1 :(options.singleselect === true ? 1 :0),
			    si = options.subGrid===true ? 1 :0;
			var dir= options.direction,i;
			var thead = "<thead><tr class='coral-grid-labels' role='rowheader'>",
			tdc, idn, w, res, sort,
			td, ptr, tbody, imgs,iac="",idc="";
			// 最后一列不允许拖拽列宽
			if(options.shrinkToFit===true && options.forceFit===true) {
				for (i=options.colModel.length-1;i>=0;i--){
					if(!options.colModel[i].hidden) {
						options.colModel[i].resizable=false;
						break;
					}
				}
			}

			$.each(this.options.colModel, function() {
				if(typeof this.hidden === 'undefined') {this.hidden=false;}
			});
			//if(that.options.viewsortcols[1] == 'horizontal') {iac=" coral-i-asc";idc=" coral-i-desc";}
			//tdc = isMSIE ?  "class='coral-th-div-ie'" :"";
			imgs = "<span class='s-ico' style='display:none'><span sort='asc' class='coral-grid-ico-sort coral-icon-asc"+iac+" coral-state-disabled cui-icon-arrow-up5 coral-sort-"+dir+"'></span>";
			imgs += "<span sort='desc' class='coral-grid-ico-sort coral-icon-desc"+idc+" coral-state-disabled cui-icon-arrow-down5 coral-sort-"+dir+"'></span></span>";
			for(i=0;i<options.colNames.length;i++){
				var tooltip = that.options.headertitles ? (" title=\""+$.grid.stripHtml(that.options.colNames[i])+"\"") :"";
				var coralColumnSortableDisabledClass = options.colModel[i].columnSortable ? "coral-columnSortable-disabled" : "";
				//var tooltip = ""
				thead += "<th id='"+options.id+"_"+options.colModel[i].name+"' role='columnheader' class='coral-state-default " + coralColumnSortableDisabledClass + " coral-th-column coral-th-"+dir+"'"+ tooltip+">";
				idn = options.colModel[i].index || options.colModel[i].name;
				if( i<ni+si+gi ){
					thead += "<div id='jqgh_"+options.id+"_"+options.colModel[i].name+"' "+tdc+">"+options.colNames[i];
				}else{
					thead += "<div id='jqgh_"+options.id+"_"+options.colModel[i].name+"' "+" title='"+options.colNames[i]+"'"+tdc+">"+options.colNames[i];
				}
				if(!options.colModel[i].width)  { options.colModel[i].width = 150; }
				else { options.colModel[i].width = parseInt(options.colModel[i].width,10); }
				if(typeof(options.colModel[i].title) !== "boolean") { options.colModel[i].title = true; }
				if (idn == options.sortname) {
					options.lastsort = i;
				}
				thead += imgs+"</div></th>";
			}
			thead += "</tr></thead>";
			imgs = null;
			var hTable = $("<table class='coral-grid-htable' role='grid' aria-labelledby='gbox_"+this.id+"' cellspacing='0' cellpadding='0' border='0'></table>").append(thead);
			that.gridColumns.find(".coral-grid-columns-view").append(hTable);
			
			$("thead tr:first th",grid.columnsView).hover(function(){$(this).addClass('coral-state-hover');},function(){$(this).removeClass('coral-state-hover');});
			that._setMultiselect();
			var ww;
			if(typeof(options.width)!=='undefined') {
				if(typeof(options.width)=='string' && options.width=='auto'){
					var pw = $(that.element).innerWidth();
					that.options.width = pw > 0?  pw: 'nw';
					ww = pw;
				//	that._setOption('width',pw);
				}else{
					ww = options.width;
				//	that._setOption('width',options.width);
				}
			}
			// beforePopulate里面可能设置了colModel里面的值，所以诸如_setColWidth引用colModel属性的方法都
			// 要放到beforePopulate后面。
			that._trigger("beforePopulate", null, []);
			// 设置宽度 有可能改变colmodel的宽度
			this._setColWidth();
			$(that.element).append("<div class='coral-grid-resize-mark' id='rs_m"+that.options.id+"'>&#160;</div>");
			
			thead = $("thead:first",that.element).get(0);
			
			var	tfoot = "";
			if(that.options.footerrow) { tfoot += "<table role='grid' style='width:"+that.options.tblwidth+"px' class='ui-jqgrid-ftable' cellspacing='0' cellpadding='0' border='0'><tbody><tr role='row' class='ui-widget-content footrow'>"; }
			var thr = $("tr:first",thead),
			firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
			$("th",thr).each(function ( j ) {
				w = options.colModel[j].width;
				if(typeof options.colModel[j].resizable === 'undefined') {options.colModel[j].resizable = true;}
				if(options.colModel[j].resizable){
					res = document.createElement("span");
					$(res).html("&#160;").addClass('coral-grid-resize coral-grid-resize-'+dir);
					$(res).css("cursor","col-resize");
					$(this).addClass(options.resizeclass);
				} else {
					res = "";
				}
				$(this).css("width",w+"px").prepend(res);
				//$(this).prepend(res);
				var hdcol = "";
				if( options.colModel[j].hidden ) {
					$(this).css("display","none");
					hdcol = "display:none;";
				}
				firstr += "<td role='gridcell' style='height:0px;width:"+w+"px;"+hdcol+"'></td>";
				//grid.headers.push({ width: w, el: this });
				grid.headers[j] = { width: w, el: this };
				sort = options.colModel[j].sortable;
				if( typeof sort !== 'boolean') {options.colModel[j].sortable =  true; sort=true;}
				var nm = options.colModel[j].name;
				if( !(nm == 'cb' || nm=='subgrid' || nm=='rn') ) {
					if(options.viewsortcols[2]){
						$(">div",this).addClass('coral-grid-sortable');
					}
				}
				if(sort) {
					if(options.viewsortcols[0]) {$("div span.s-ico",this).show(); if(j==options.lastsort){ $("div span.coral-icon-"+options.sortorder,this).removeClass("coral-state-disabled");}}
					else if( j == options.lastsort) {$("div span.s-ico",this).show();$("div span.coral-icon-"+options.sortorder,this).removeClass("coral-state-disabled");}
				}
				if(options.footerrow) { tfoot += "<td role='gridcell' "+that._formatCol(j,0,'', null, '', false)+">&#160;</td>"; }
			}).mousedown(function(e) {
				if ($(e.target).closest("th>span.coral-grid-resize").length != 1) { return; }
				var ci = that._getColumnHeaderIndex(this);
				if(options.forceFit===true) {options.nv= that._nextVisible(ci);}//options.nv: the interval between current column to the next visible column
				grid.dragStart(ci, e, that._getOffset(ci));
				return false;
			}).click(function(e) {
				if (options.disableClick) {
					options.disableClick = false;
					return false;
				}
				var s = "th>div.coral-grid-sortable",r,d;
				if (!options.viewsortcols[2]) { s = "th>div>span>span.coral-grid-ico-sort"; }
				var t = $(e.target).closest(s);
				if (t.length != 1) { return; }
				var ci = that._getColumnHeaderIndex(this);
				if (!options.viewsortcols[2]) { r=true;d=t.attr("sort"); }
				that._sortData( $('div',this)[0].id, ci, r, d, this);
				return false;
			});
			if (that.options.onSortableColumns && $.fn.sortable) {
				try {
					$(that.element).grid("sortableColumns", thr);
				} catch (e){}
			}
			if(that.options.footerrow) { tfoot += "</tr></tbody></table>"; }
			firstr += "</tr>";
			var bTable = $("<table id='"+that.options.id+"_table' class='coral-grid-btable' role='grid' cellspacing='0' cellpadding='0' border='0'></table>").append(firstr);
			that.gridRows.find(".coral-grid-rows-view").append(bTable);
			this.rows = that.gridRows.find(".coral-grid-btable")[0].rows;
			this.element.prepend("<div class='coral-grid-view'></div>");
			var hb;
			if(that.options.footerrow) {
				grid.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0];
				hb = $("<div class='ui-jqgrid-hbox'></div>");
				$(grid.sDiv).append(hb).width(grid.width).insertAfter(that.gridColumns);
				$(hb).append(tfoot);
				grid.footers = $(".ui-jqgrid-ftable",grid.sDiv)[0].rows[0].cells;
				if(that.options.rownumbers) { grid.footers[0].className = 'ui-state-default jqgrid-rownum'; }
				//if(hg) {$(grid.sDiv).hide();}
			}
			hb = null;
			if(that.options.caption.length>0){
				grid.caption = document.createElement("div");
				grid.caption.className = "coral-grid-caption";
				$(grid.caption).html(that.options.caption);
				this.element.prepend(grid.caption);
			}
			$(grid.columnsView).add(grid.rowsView).parent().appendTo(this.element.find(".coral-grid-view"));
			//if(options.width===true) {
			
			if(options.shrinkToFit===true && options.forceFit===true) {
				$('table:first',grid.rowsView).css("width",that.grid.width+"px");//设置表格行宽度
				$('table:first',grid.columnsView).css("width",that.grid.width+"px");//设置表格列宽度
			}
			else if(options.shrinkToFit===false){
				$('table:first',grid.rowsView).css("width",that.options.tblwidth+"px");//设置表格行宽度
				$('table:first',grid.columnsView).css("width",that.options.tblwidth+"px");//设置表格列宽度
			}
			that._setOption('width',ww);
			this.grid.cols = this.rows[0].cells;
			/*if(options.groupHeaders) {
				this.setGroupHeaders(options.groupHeaders);
			}*/
			/*设置表头分组，如果为true则解析表头，如果为false则需要手动分组*/
			if(options.groupHeader){
				this.setGroupHeaders({
					useColSpanStyle :  true,
					groupHeaders:options.groupHeaders
				});
				//分组内部的排序
				var thrThird = $("tr.jqg-third-row-header",thead);
				if (that.options.sortable && $.fn.sortable) {
					try {
						$(that.element).grid("sortableColumns", thrThird);
					} catch (e){}
				}
			}
			
			thead = null;
			hTable = null;
			bTable = null;
		},
		_sortkeys: ["shiftKey","altKey","ctrlKey"],
		_getColumnHeaderIndex: function (th) {
			var that = this;
			var i, headers = that.grid.headers, ci = $.grid.getCellIndex(th);
			if (this.grid.rightfhDiv) {
				ci = headers.length - ci - 1;
			}
			for (i = 0; i < headers.length; i++) {
				if (th === headers[i].el) {
					ci = i;
					break;
				}
			}
			return ci;
		},
		/*解析grid的colModel和colNames*/
		_analyzeColumns:function(columns) {
			var that = this,
				i = 0,
				options = this.options;
			if (this.options.colModel.length <= 0) {
				//解析colModel和colNames
				columns.children().each(function(i){
					var opts = $.parser.parseOptions(this,null,["data"]);
					if(typeof(opts.name)!="undefined"){
						options.colModel.push(opts);
						options.colNames.push(opts.label||$(this).html());
					}else if(typeof(opts.header)!="undefined"){
						var len = 0;
						var inOption;
						$(this).children().each(function(i){
							var opts = $.parser.parseOptions(this,null,["data"]);
							options.colModel.push(opts);
							options.colNames.push(opts.label||$(this).html());
							len++;
							i==0&&(inOption = opts);
						});
						options.groupHeaders.push({startColumnName: inOption.name, numberOfColumns: len, titleText: opts.header});
					}
				});
			}
			for (i=0;i<this.options.colModel.length;i++){
				var model = this.options.colModel[i];
				// 处理formatter
				if ( model.formatter == "combobox" ||
						model.formatter == "combotree" || model.formatter == "combogrid") {
					( model.formatter == "combotree" ) && ( model.formatoptions.dataStructure = "tree" );
					if ( model.revertCode != false ) {//默认设置为true
						model.revertCode = true;
					}
				}
				
				//model.postMode = model.postMode || "value";
				// 处理edit
				if ( model.edittype == "combobox" || 
						model.edittype == "combotree" || 
						model.edittype == "autocomplete" || model.edittype == "combogrid" ) {
					( model.edittype == "combotree" ) && ( model.editoptions.dataStructure = "tree" );
					model.formatter = model.formatter || "convertCode";
					
				}
				this.transTempData(model);
			}
			if ( this.options.colNames.length === 0 ) {
				for (i=0;i<this.options.colModel.length;i++){
					this.options.colNames[i] = this.options.colModel[i].label || this.options.colModel[i].name;
				}
			}
			if ( this.options.colNames.length !== this.options.colModel.length ) {
				alert("errors! colNames not equals to colModel!");
				return;
			}
			/*清除初始化时候的div列模型*/
			columns.children().not(".coral-grid-columns-view").remove();
		},
		_updateMultiSelectIndexsOption: function (options) {
			var min_index = options.minIndex,
				max_index = options.maxIndex,
				pre_index = options.preIndex,
				cur_index = options.curIndex;
			if (null == min_index) {
				min_index = max_index = pre_index = (null == pre_index ? cur_index : pre_index);
			}
		 	if (cur_index <= min_index) {
			   	min_index = cur_index;
			   	max_index = pre_index;
		 	} else if (cur_index > min_index && cur_index < max_index) {
		 		min_index = Math.min (cur_index, pre_index);
		    	max_index = Math.max (cur_index, pre_index);   			
		     } else if (cur_index > max_index) {
				max_index = cur_index;
				min_index = pre_index;
		     }
		 	return {
		 		minIndex: min_index,
		 		maxIndex: max_index,
		 		preIndex: pre_index
		 		
		 	};
		},
		// 添加 shift 多选支持功能
		_addShiftKeySelect: function (e, ui) {
			var that = this,
				opts = that.options;
			// 平稳退化，及变量定义		
			if (!ui.rowId) {
				return ;
			}                                                          
			var $this = $(that.element), 
				isShift = false,
				rows = $this.find(".coral-grid-btable")[0].rows,
				curIndex = rows.namedItem (ui.rowId).rowIndex;	
			// shiftKey 处理代码
			if (e.shiftKey) {
				var indexsOption = that._updateMultiSelectIndexsOption({
					maxIndex:opts.maxIndex, 
					minIndex:opts.minIndex, 
					preIndex:opts.preIndex, 
					curIndex:curIndex});
				opts.minIndex = indexsOption.minIndex;
				opts.maxIndex = indexsOption.maxIndex;
				opts.preIndex = indexsOption.preIndex;
		    	$this.grid('resetSelection');
			    for (var i = opts.minIndex; i <= opts.maxIndex; i++) {
			    	var select = false;
			    	if (i == opts.maxIndex) {
			    		select = true;
			    	}
		            $this.grid('setSelection', rows[i].id, select);
			    }
			    if (document.selection && document.selection.empty) {
			        document.selection.empty();
			    } else if (window.getSelection) {
			        window.getSelection().removeAllRanges();
		   		}
			    isShift = true;
			} else {
				// 其他 Key 处理代码
				opts.minIndex = opts.maxIndex = null;	
				opts.preIndex = curIndex;
			}	
			
			// 非 ctrlKey 并且非 shiftKey 处理代码
			/*if (!e.ctrlKey && !e.shiftKey) {
				$this.grid('resetSelection');
			}	*/
			return isShift;
		},
		_setUpEvent: function(){
			var that = this,
				grid = this.grid,
				options = this.options;
			var ri,ci, tdHtml, td,  ptr;
			if( that.options.cellEdit === false && that.options.hoverrows === true) {
				$(that.element).bind('mouseover',function(e) {
					var isPicgrid = !!(that.options.model == "card");
					if(isPicgrid){
						ptr = $(e.target,that.pic).closest("li.gridPanel").find(".rowgrid");
						if($(ptr).attr("class") !== "coral-subgrid") {
							$(ptr).addClass("coral-state-hover");
						}
					}else{
						ptr = $(e.target,that.rows).closest("tr.jqgrow");
						if($(ptr).attr("class") !== "coral-subgrid" ) {
							$(ptr).addClass("coral-state-hover");
						}
					}
				}).bind('mouseout',function(e) {
					var isPicgrid = !!(that.options.model == "card");
					if(isPicgrid){
						ptr = $(e.target,that.pic).closest("li.gridPanel ").find(".rowgrid");
					}else{
						ptr = $(e.target,that.rows).closest("tr.jqgrow");
					}
					$(ptr).removeClass("coral-state-hover");
				});
			}
			/*监听grid表格内滚动条横向拖动时，滚动表头*/
			$(grid.rowsView).scroll(function(e){
				if(options.scroll) {
					var scrollTop = $(grid.rowsView)[0].scrollTop;
					if(grid.scrollTop === undefined) { grid.scrollTop = 0; }
					if (scrollTop != grid.scrollTop) {
						grid.scrollTop = scrollTop;
						if (grid.timer) { clearTimeout(grid.timer); }
						grid.timer = setTimeout(grid.populateVisible, options.scrollTimeout);
					}
				}
				$(grid.columnsView)[0].scrollLeft = $(grid.rowsView)[0].scrollLeft;
				var top = $(grid.rowsView)[0].scrollTop;
				
				$(".coral-grid-btable-frozen").css(
					'left',-$(grid.rowsView)[0].scrollLeft+"px"
				);
				var b = $( ".row-editable", that.element ),
					editRow = $(that.element).grid("getInd",that.editRowIndex,true);
				
				if (b.length > 0) {
					that.editButtonsPos(that.editRowIndex,b);
				}
				
				if(options.footerrow) {
					grid.sDiv.scrollLeft = $(grid.rowsView)[0].scrollLeft;
				}
			//	if( e ) { e.stopPropagation(); }
			});
			//表格上的单击事件处理
			$(".coral-grid-btable", that.element).add(that.pic).click(function(e) {
				var isPicgrid = !!(that.options.model == "card");
				var rowId;
				td = e.target;
				if(isPicgrid){
					ptr = $(td,that.pic).closest("li.gridPanel");
				}else{
					ptr = $(td,that.rows).closest("tr.jqgrow");
				}
				if(that.options.allowCellSelect){
					for(var i = 0;i<this.rows.length;i++){
						if($(this.rows[i]).find("td").hasClass('coral-grid-cell-focus')) {
							$(this.rows[i]).find("td").removeClass("coral-grid-cell-focus");
						}
					}
					if(td.tagName == 'TD'){
						$(td).addClass("coral-grid-cell-focus");
					} else {
						$(td).closest("td").addClass("coral-grid-cell-focus");
					}
				}
				/*此处需要处理冻结列（行）的情况*/
				if($(ptr).length === 0 || ptr[0].className.indexOf( 'coral-state-disabled' ) > -1 ||
						$(td,that.element).closest("table.coral-grid-btable").length < 0 ) {
					return this;
				}
				var scb = $(td).hasClass("cbox"),
				cSel = $(that.element).triggerHandler("gridBeforeSelectRow", [ptr[0].id, e]);
				cSel = that._trigger("beforeSelectRow", e, [{"rowId":ptr[0].id}]);
				cSel = (cSel === false || cSel === 'stop') ? false : true;

				//if(cSel && $.isFunction(that.options.beforeSelectRow)) { cSel = that.options.beforeSelectRow.call(that.element,ptr[0].id, e); }
				if (td.tagName == 'A' || ((td.tagName == 'INPUT' || td.tagName == 'TEXTAREA' || td.tagName == 'OPTION' || td.tagName == 'SELECT' ) && !scb) ) { return; }
				if(cSel === true) {
					rowId = ptr[0].id;
					tdHtml = $(td).closest("td,th").html();
					if(!isPicgrid){
						ci = $.grid.getCellIndex(td);
						if (that._addShiftKeySelect(e, {"rowId":ptr[0].id})) {
							return;
						}
						that._trigger("onSelectCell",e , [{"rowId":rowId,"rowIndex":ptr[0].rowIndex,"cellIndex":ci,"cellHtml":tdHtml}]);
					}
					if( that.options.editableRows && that.options.clicksToEdit == 1 &&
						options.editrow != rowId ){
						//that.restoreRow(options.editrow);
						that.restoreRow(options.editrow);
						if ( that.rowEditButtons  ) {
							that.rowEditButtons.remove();
						}
					}
					
					if( that.options.editableRows && that.options.clicksToEdit == 1 && !scb ){
						options.editrow = ptr[0].id;
						that.editRow(ptr[0].id, true);
					}
					if( that.options.cellEdit === true && that.options.clicksToEdit == 1 ) {
						
						//如果是多选并且选的是checkbox的情况则触发'setSelection'方法
						//列不可编辑，并且multikey为false时，应该选中；否则，不选中
						var editable = that.options.colModel[ci].editable;
						var mul = that.options.multiselect || that.options.singleselect;
						if( ( mul && scb && that.options.clickRowToSelect) || ( mul && !editable && !that.options.multikey ) ) {
							$(that.element).grid("setSelection", rowId ,true,e);
						} else {
						//	ri = ptr[0].rowIndex;
							if(!isPicgrid){
								try {$(that.element).grid("editCell",ptr[0].rowIndex,ci,true);} catch (_) {}
							}
						}
					} else if ( !that.options.multikey ) {
						that.selectMultikey(that,e,rowId);
					} else { 
						if ( e[ that.options.multikey ] ) {
							$(that.element).grid("setSelection",rowId,true,e);
						} else if( ( that.options.multiselect || that.options.singleselect ) && scb ) {
							/*scb = $("#jqg_"+$.grid.coralID(that.options.id)+"_"+ri).is(":checked");
							$("#jqg_"+$.grid.coralID(that.options.id)+"_"+ri)[that.options.useProp ? 'prop' : 'attr']("checked", scb);*/
							$(that.element).grid("setSelection",rowId,true,e);
							// 如取消选中的选框，则将全选框也取消
							if (!scb) {
								that._cancelCheckAll();
							}
						} else {
							that.options.multiboxonly = true;
							that.selectMultikey(that,e,rowId);
						}
					}
				}
			});
			this._on({
				"keydown": function(e) {
					var keyCode = $.coral.keyCode,pre,next,pt,nextTd,preTd,ci,focusedTd,li;
					var options = that.options;
					if (options.filterToolbar) return;
					switch (e.keyCode) {
						case keyCode.UP:
							e.preventDefault();
							td = $(e.target);
							ptr = $(td,that.rows).closest("tr.jqgrow");
							pt = this.rows.namedItem(ptr[0].id + "");
							if(options.allowCellSelect){
								for(var i = 0; i<$(pt).find("td").length; i++){
									var tdObj = $(pt).find("td")[i];
									if($(tdObj).hasClass("coral-grid-cell-focus")){
										ci = $.grid.getCellIndex(tdObj);
										focusedTd = $(tdObj);
									}
								}
								this.options.iColFocus = ci;
								preTd = $(pt).prevAll(":visible:eq(0)").find("td")[ci];
								pre = $(pt).prevAll(":visible:eq(0):not(.jqgfirstrow)");
								this.options.focusrow = pre[0].id;
								this.options.iRowFocus = pre[0].rowIndex;
								if (pre && pre.length != 0) {
									focusedTd.removeClass("coral-grid-cell-focus");
									$(preTd).addClass("coral-grid-cell-focus");
									pre.focus();
								} else {
									return;
								}
							}
							
							break;
						case keyCode.DOWN:
							e.preventDefault();
							td = $(e.target);
							ptr = $(td,that.rows).closest("tr.jqgrow");
							pt = this.rows.namedItem(ptr[0].id + "");
							if(options.allowCellSelect){
								for(var i = 0; i<$(pt).find("td").length; i++){
									var tdObj = $(pt).find("td")[i];
									if($(tdObj).hasClass("coral-grid-cell-focus")){
										ci = $.grid.getCellIndex(tdObj);
										focusedTd = $(tdObj);
									}
								}
								this.options.iColFocus = ci;
								nextTd = $(pt).nextAll(":visible:eq(0)").find("td")[ci];
								next = $(pt).nextAll(":visible:eq(0)");
								this.options.focusrow = next[0].id;
								this.options.iRowFocus = next[0].rowIndex;
								if (next && next.length != 0) {
									focusedTd.removeClass("coral-grid-cell-focus");
									$(nextTd).addClass("coral-grid-cell-focus");
									next.focus();
								} else {
									return;
								}
							}
							break;
						case keyCode.RIGHT:
							e.preventDefault();
							td = $(e.target);
							ptr = $(td,that.rows).closest("tr.jqgrow");
							pt = this.rows.namedItem(ptr[0].id + "");
							for(var i = 0; i<$(pt).find("td").length; i++){
								var tdObj = $(pt).find("td")[i];
								if($(tdObj).hasClass("coral-grid-cell-focus")){
									li = $.grid.getCellIndex(tdObj);
									focusedTd = $(tdObj);
								}
							}
							nextTd = $(pt).find("td")[li+1];
							this.options.focusrow = ptr[0].id;
							this.options.iRowFocus = ptr[0].rowIndex;
							if ($(nextTd) && $(nextTd).length != 0) {
								while(!$(nextTd).is(":visible") && (li<$(pt).find("td").length)){
									li++;
									nextTd = $(pt).find("td")[li+1];
								}
								this.options.iColFocus = li+1;
								focusedTd.removeClass("coral-grid-cell-focus");
								$(nextTd).addClass("coral-grid-cell-focus");
								$(nextTd).focus();
							} else {
								return;
							}
							break;
						case keyCode.LEFT:
							e.preventDefault();
							td = $(e.target);
							ptr = $(td,that.rows).closest("tr.jqgrow");
							pt = this.rows.namedItem(ptr[0].id + "");
							for(var i = 0; i<$(pt).find("td").length; i++){
								var tdObj = $(pt).find("td")[i];
								if($(tdObj).hasClass("coral-grid-cell-focus")){
									ci = $.grid.getCellIndex(tdObj);
									focusedTd = $(tdObj);
								}
							}
							preTd = $(pt).find("td")[ci-1];
							this.options.focusrow = ptr[0].id;
							this.options.iRowFocus = ptr[0].rowIndex;
							if ($(preTd) && $(preTd).length != 0) {
								while(!$(preTd).is(":visible")){
									if(ci==0) {
										return;
									} else {
										ci--;
										preTd = $(pt).find("td")[ci-1];
									}
								}
								this.options.iColFocus = ci-1;
								focusedTd.removeClass("coral-grid-cell-focus");
								$(preTd).addClass("coral-grid-cell-focus");
								$(preTd).focus();
							} else {
								return;
							}
							break;
					}
					if(that.options.shortCut){
						$.coral.callFunction(options.shortCut,event,this);
					}
				}
			});
			$(that.element)
			// 列表上双击事件
			.dblclick(function(e) {
				td = e.target;
				ptr = $(td,that.rows).closest("tr.jqgrow");
				if( $(ptr).length === 0 ){return;}
				if( that.options.editableRows && options.editrow != ptr[0].id ){
					that.restoreRow(options.editrow);
					if ( that.rowEditButtons ) {
						that.rowEditButtons.remove();
					}
				}
				var ri = ptr[0].rowIndex;
				var ci = $.grid.getCellIndex(td);
				if( that.options.editableRows && that.options.clicksToEdit == 2 ){
					options.editrow = ptr[0].id;
					that.editRow(ptr[0].id, true);
				}
				if( that.options.cellEdit === true && that.options.clicksToEdit == 2 ) {
					ri = ptr[0].rowIndex;
					try {$(that.element).grid("editCell",ri,ci,true);} catch (_) {}
				} 
				that._trigger( "onDblClickRow", null, [{"rowId":ptr[0].id,"rowIndex":ri,"cellIndex":ci}]);
			})
			// 列表上右键菜单
			.bind('contextmenu', function(e) {
				td = e.target;
				ptr = $(td,that.rows).closest("tr.jqgrow");
				if($(ptr).length === 0 ){return;}
				if(!that.options.multiselect) {	$(that.element).grid("setSelection",ptr[0].id,true,e);	}
				ri = ptr[0].rowIndex;
				ci = $.grid.getCellIndex(td);
				that._trigger("onRightClickRow",null,[{"rowId":ptr[0].id,"rowIndex":ri,"cellIndex":ci}]);
				//$(that).triggerHandler("gridRightClickRow", [$(ptr).attr("id"),ri,ci,e]);
				//if ($.isFunction(this.options.onRightClickRow)) { that.options.onRightClickRow.call(ts,$(ptr).attr("id"),ri,ci, e); }
			});
			// 监听鼠标移动
			$(grid.columnsView).mousemove(function (e) {
				// 如果grid列被鼠标按下，则resizing为true，当鼠标移动时调用grid的dragMove方法
				if(grid.resizing){grid.dragMove(e);return false;}
			});
			$(".coral-grid-labels",grid.columnsView).bind("selectstart", function () { return false; });
			// 监听鼠标释放
			$(document).mouseup(function () {
				// 如果grid列被鼠标按下，则resizing为true，当鼠标释放时调用grid的dragEnd方法
				if(grid.resizing) {	grid.dragEnd(); return false;}
				return true;
			});
			// 自定义分页条事件
			this._off($(".coral-paginator-page"));
			this._on({
				"click.coral-paginator-page" : function(e) {
					var cp = that._intNum($(e.target).html(),1);
					that.options.page= cp;
					if(!that._clearVals(this.id)) { return false; }
					that._populate();
					return false;
				}
			});
		},
		selectMultikey:function(that,e,rowId){
			var td = e.target;
			var	scb = $(td).hasClass("cbox");
			if(that.options.multiselect && that.options.multiboxonly) {
				if(scb){$(that.element).grid("setSelection",rowId,true,e);}
				else {
					var frz = that.options.frozenColumns ? that.options.id+"_frozen" : "";
					if(that.options.clickRowToSelect){
						$(that.options.selarrrow).each(function(i,n){
							var ind = that.rows.namedItem(n);
							$(ind).removeClass("coral-state-highlight");
							$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(n))[that.options.useProp ? 'prop': 'attr']("checked", false);
							if(frz) {
								$("#"+$.grid.coralID(n), "#"+$.grid.coralID(frz)).removeClass("coral-state-highlight");
								$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(n), "#"+$.grid.coralID(frz))[that.options.useProp ? 'prop': 'attr']("checked", false);
							}
						});
						that.options.selarrrow = [];
						$(that.element).grid("setSelection",rowId,true,e);
					}
				}
			} else {
				//点击复选框的时候触发选中事件
				if (scb || that.options.clickRowToSelect) {
					$(that.element).grid("setSelection",rowId,true,e);
				}
			}
		},
		restoreAll: function(){
			if ( this.options.editableRows ) {
				this.restoreRow( this.options.editrow );
				if ( this.rowEditButtons ) {
					this.rowEditButtons.remove();
				}
			}
			if ( this.options.savedRow.length > 0 ) {
				// save the cell
				// TODO: 遍历还原
				if( !$(this.element).grid("saveCell",this.options.savedRow[0].id,this.options.savedRow[0].ic) ){
					return;
				}
			}
		},
		setSelectAll: function(checked){
			var that = this,pt,intNumber,
				isPicgrid = (this.options.model === "card");
			if(isPicgrid){
				pt = that.element.find(".coral-pic>li");
			}else{
				pt = that.rows;
			}
			if(this.options.multiselect){
				var emp=[], chk;
				var froz = that.options.frozenColumns === true ? that.options.id + "_frozen" : "";
				if (checked) {
					$(pt).each(function(i) {
						intNumber = isPicgrid ? i >= 0 : i>0;
						if (intNumber > 0) {
							if(!$(this).hasClass("coral-subgrid") && !$(this).hasClass("jqgroup") && !$(this).hasClass('coral-state-disabled')){
								// 全选后已经选中的行不再处理。
								var ia = $.inArray(this.id, that.options.selarrrow);
								if (ia === -1) {
									if(isPicgrid){
										$(pt).find("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked",true);
										$(pt).find(".rowgrid").addClass("coral-state-highlight").attr("aria-selected","true")
									}else{
										$(pt).find("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked",true);
										that._setHeadCheckBox( true );
										$(this).addClass("coral-state-highlight").attr("aria-selected","true");  
										if (froz) {
											$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
											$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).addClass("coral-state-highlight");
											if (that.grid.fhDiv) {
												$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
												$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).addClass("coral-state-highlight");
											} else if (that.grid.rightfhDiv) {
												$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv )[that.options.useProp ? 'prop': 'attr']("checked",true);
												$("#"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv).addClass("coral-state-highlight");
											}								
										}
									}
									that.options.selarrrow.push(this.id);
									that.options.selrow = this.id;
								}
							}
						}
					});
					chk=true;
					emp=[];
				}
				else {
					that.options.selarrrow = [];
					$(pt).each(function(i) {
						intNumber = isPicgrid ? i >= 0 : i>0;
						if(intNumber) {
							if(!$(this).hasClass("coral-subgrid") && !$(this).hasClass('coral-state-disabled')){
								if(isPicgrid){ 
									$(pt).find("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked",false);
									$(pt).find(".rowgrid").removeClass("coral-state-highlight").attr("aria-selected","false")
								}else{
									$(pt).find("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(this.id) )[that.options.useProp ? 'prop': 'attr']("checked", false);
									that._setHeadCheckBox( false );
									$(this).removeClass("coral-state-highlight").attr("aria-selected","false");
									if(froz) {
										if (that.grid.fhDiv) {
											$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv )[that.options.useProp ? 'prop': 'attr']("checked",false);
											$("#"+$.grid.coralID(that.rows[i].id), that.grid.fbDiv).removeClass("coral-state-highlight");
										} else if (that.grid.rightfhDiv) {
											$("#jqg_"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv )[that.options.useProp ? 'prop': 'attr']("checked",false);
											$("#"+$.grid.coralID(that.rows[i].id), that.grid.rightfbDiv).removeClass("coral-state-highlight");
										}
									}
								}
								emp.push(this.id);
							}
						}
					});
					that.options.selrow = null;
					chk=false;
				}
				that._trigger("onSelectAll",null,[{'aRowIds':chk ? that.options.selarrrow :emp, 'status':chk}]);
			}
		},
		_setMultiselect: function(){
			var that = this;
			if(this.options.multiselect) {
				var emp=[], chk;
				$('#cb_'+$.grid.coralID(that.options.id),this.grid.columnsView).bind('click',function(e){
					// 冻结列
					that.setSelectAll(this.checked);
					//$(that).triggerHandler("gridSelectAll", [chk ? that.options.selarrrow : emp, chk]);
					//if($.isFunction(that.options.onSelectAll)) {that.options.onSelectAll.call(that, chk ? that.options.selarrrow : emp,chk);}
				});
			}
		},
		_refresh: function( key, value ){
			
		},
		reload: function(url){
			
			var that = this,
				grid = this.grid,
				opts = {},
		        isUrl = false,
		        data = [];
			
			if (typeof(url) === "undefined") {
				url = this.options.orgdatatype === "json"?this.options.url:this.options.data;
			}
			if (!url && !this.options.url) {
				url = [];
			} else if (!url && this.options.url) {
				url = this.options.url;
			}
			if ( typeof( url ) !== "string" ) {
				opts = url;
				if ( opts.data ) {
					data = opts.data;
				} else if ( opts.url ) {
					url = opts.url;
					isUrl = true;
				} else if ( url instanceof Array ) {
					data = url;
				} else if ( !opts.url && !opts.data && !this.options.url ) {
			    	data = this.options.data;
			    } else if ( !opts.url && !opts.data && this.options.url ) {
			    	url = this.options.url ;
			    	isUrl = true;
			    }
			} else {
				isUrl = true;
			}
			
			if(that.options.treeGrid ===true) {	that.options.datatype = that.options.treedatatype;}
			if (opts && opts.current) {
				that.grid.selectionPreserver(that);
			}
			if (that.options.datatype=="local") {
				$(that.element).grid("resetSelection");  
				if (that.options.data.length) { 
					that.normalizeData();
					that.refreshIndex();
				} 
			} else if(!that.options.treeGrid) {
				that.options.selrow=null;
				if(that.options.multiselect) {that.options.selarrrow =[];that._setHeadCheckBox(false);}
				that.options.savedRow = [];
			}
			if(that.options.scroll) {emptyRows(that.grid.rowsView,true, false);}
			
			if (opts && opts.page) {
				var page = opts.page;
				if (page > that.options.lastpage) { page = that.options.lastpage; }
				if (page < 1) { page = 1; }
				that.options.page = page;
				if (that.grid.prevRowHeight) {
					that.grid.rowsView.scrollTop = (page - 1) * that.grid.prevRowHeight * that.options.rowNum;
				} else {
					that.grid.rowsView.scrollTop = 0;
				}
			}
			if (that.grid.prevRowHeight && that.options.scroll) {
				delete that.options.lastpage;
				that._populateVisible();
			} else {
				var search = that.options.search;
				// 本地搜索的时候
				if (that.options.localonce == true) {
					that.options.search = true;
				} else {
					//后台排序的时候不进行filter过滤
					//that.options.search = false;
					if (!isUrl) {
						that.options.datatype = "local";
						delete that.options.orgdatatype;
						that.options.data = data;
					} else {
						that.options.datatype = "json";
						delete that.options.orgdatatype;
						that.options.url = url;
					}
				}
				// 如果是data模式的reload，则设置localonce为true，临时改变datatype。
				that._populate();
				that.options.search = search;
				that.options.localonce = false;
			}
			return false;
		},
		/**
		 * 如果有右浮动列，重置窗体或者重置表格宽度的时候都需要调用此方法来判断是否需要显示右浮动
		 */
		resetFrozen: function(){
			if ( !this._hasHorizontalScrollBar() ) {
				$(this.grid.rightfbDiv).hide();
				$(this.grid.rightfhDiv).hide();
			} else {
				$(this.grid.rightfbDiv).show();
				$(this.grid.rightfhDiv).show();
			}
		},
		refresh: function(opts){	
			var maxHeight,
				that = this,
				options = this.options,
				fitStyle = options.fitStyle,
				parent = this.element.parent();
				maxHeight = parent.height();
			
			that.resetFrozen();
			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});
			//setTimeout(function(){
			// 某些动画情况下，grid可能已经被销毁，
			// 但是还是调用了grid的refresh方法，或者去掉延时解决问题；
			// 不能直接用element，因为内存中有此对象，但是dom中没有，所以需要根据id去重新查找；
			if ( !$("#"+that.element[0].id).length ) return;
			if ( fitStyle === "fill" ) {
				$.coral.fitParent(this.component(), true);
				$(that.element).grid("option", "height", maxHeight);
				$(that.element).grid("option", "width", that.element.innerWidth()>0?that.element.innerWidth(): 0);
			} else if ( fitStyle === "width" ) {
				$(that.element).grid("option", "width", that.element.innerWidth()>0?that.element.innerWidth(): 0);
				$(that.element).grid("option", "height", that.options.height);
			} else if ( fitStyle === "height" ) {
				$.coral.fitParent(this.component(), true);
				$(that.element).grid("option", "height", maxHeight);
			} else if ( fitStyle === "auto" ) {
				//TODO: so far no extension
				$(that.element).grid("option", "height", that.options.height);
			}
			that.refreshPager();
			that._noRecordsTipsPositon();
			if ( that.options.frozenColumns === true ) {
				that.resizeFrozen();
			}
			if ( this.element.find(".loading-overlay").length ) {
				switch(this.options.loadui) {
				case "disable":
					break;
				case "enable":
				case "block":
					$(this.element).loading("refresh");
					break;
				}
			}
			//$.coral.refreshAllComponent(this.element);
		},
		refreshPager: function(){
			var that = this;
			if(this.pagers){
				this.pagers.each(function(i){
					var pagerleftwidth = $( ".paginator-left", that.element ).outerWidth() + 5;//padding 5px;
					var pagerwidth = $("#"+that.pagers[i].id ).width();
					$( ".toolbarpanel", that.element ).css({
						left: pagerleftwidth+"px",
						position: "absolute",
						top: 0,
						width: ( pagerwidth - pagerleftwidth ) + "px"
					});
				});
				that.options.pager = "."+that.id;
				if ( $( ".ctrl-init-toolbar", that.element ).length ) {
					$( ".ctrl-init-toolbar", that.element ).toolbar("refresh");
				}
			}
		},
		setSelectionAll: function() {
			if ( !$( "#cb_"+this.options.id ).prop("checked") ) {
				$( "#cb_"+this.options.id ).trigger('click');
			}
		},
		setSelection: function(selection,onsr, e) {
			var that = this, stat,//行选中状态值 true 或 false
				isPicgrid = (this.options.model === "card"),
				pt, ner, ia, tpsr, fid;
			if(selection === undefined) { return; }
			onsr = onsr === false ? false : true;
			if(isPicgrid){
				pt = this.element.find(".coral-pic #" + selection)[0];
			}else{
				pt = this.rows.namedItem(selection + "");
			}
			if(!pt || !pt.className || pt.className.indexOf( 'coral-state-disabled' ) > -1 ) { return; }
			// scroll grid
			function scrGrid(iR){
				var ch = $(that.grid.rowsView)[0].clientHeight,
					st = $(that.grid.rowsView)[0].scrollTop,
					rpos = that.rows[iR].offsetTop,
					rh = that.rows[iR].clientHeight;
				if(rpos+rh >= ch+st) { $(that.grid.rowsView)[0].scrollTop = rpos-(ch+st)+rh+st; }
				else if(rpos < ch+st) {
					if(rpos < st) {
						$(that.grid.rowsView)[0].scrollTop = rpos;
					}
				}
			}
			if(this.options.scrollrows === true) {//处理滚动刷新
				ner = this.rows.namedItem(selection).rowIndex;
				if(ner >= 0 ){
					scrGrid(ner);
				}
			}
			if(this.options.frozenColumns === true ) {
				fid = this.options.id+"_frozen";
			}
			if(!this.options.multiselect) {	
				if(pt.className !== "coral-subgrid") {
					if( this.options.selrow != pt.id) {//是否二次点击
						if(isPicgrid){
							this.element.find("#"+this.options.selrow+">ul").removeClass("coral-state-highlight").attr({"aria-selected":"false", "tabindex" : "-1"});
							$(pt).find(".rowgrid").addClass("coral-state-highlight").attr({"aria-selected":"true", "tabindex" : "0"});//.focus();
							if(fid) {
								$("#"+$.grid.coralID(this.options.selrow), "#"+$.grid.coralID(fid)).find(".rowgrid").removeClass("coral-state-highlight");
								$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").addClass("coral-state-highlight");
							}
						}else{
							$(this.rows.namedItem(this.options.selrow)).removeClass("coral-state-highlight ").attr({"aria-selected":"false", "tabindex" : "-1"});
							$(pt).addClass("coral-state-highlight").attr({"aria-selected":"true", "tabindex" : "0"});//.focus();
							if(fid) {
								$("#"+$.grid.coralID(this.options.selrow), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight");
								$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).addClass("coral-state-highlight ");
							}
						}
						
						stat = true;
						$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(pt.id),$(pt))[this.options.useProp ? 'prop': 'attr']("checked",stat);
						if(fid) {
							$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(selection), "#"+$.grid.coralID(fid))[this.options.useProp ? 'prop': 'attr']("checked",stat);
						}
					} else {
						stat = false;
					}
					this.options.selrow = pt.id;

					//如果onsr为true则触发回调函数
					if(onsr)this._trigger("onSelectRow", e, [{'rowId':pt.id, 'status':stat}]);
					/*$(that).triggerHandler("gridSelectRow", [pt.id, stat, e]);
					if( that.options.onselectrow && onsr) { that.options.onselectrow.call(that, pt.id, stat, e); }*/
				}
			} else {
				//unselect selectall checkbox when deselecting a specific row
				this._setHeadCheckBox( false );
				this.options.selrow = pt.id;
				ia = $.inArray(this.options.selrow,this.options.selarrrow);
				if (  ia === -1 ){
					if(isPicgrid) {
						if(pt.className !== "coral-subgrid") { $(pt).find(".rowgrid").addClass("coral-state-highlight").attr("aria-selected","true");}
					}else {
						if(pt.className !== "coral-subgrid") { $(pt).addClass("coral-state-highlight").attr("aria-selected","true");}
					}
					stat = true;
					this.options.selarrrow.push(this.options.selrow);
				} else {
					if(isPicgrid){
						if(pt.className !== "coral-subgrid") { $(pt).find(".rowgrid").removeClass("coral-state-highlight").attr("aria-selected","false");}
					}else{
						if(pt.className !== "coral-subgrid") { $(pt).removeClass("coral-state-highlight").attr("aria-selected","false");}
					}
					stat = false;
					this.options.selarrrow.splice(ia,1);
					tpsr = this.options.selarrrow[0];
					this.options.selrow = (tpsr === undefined) ? null : tpsr;
				}
				// 如果选中所有行，则设置head checkbox 选中。
				if ( this.rows.length - 1 === this.options.selarrrow.length ) {
					this._setHeadCheckBox( true );
				}
				//此处修改 在$(pt)下寻找checkbox，因为大图列表和table列表中checkbox的id相同
				$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(pt.id),$(pt))[this.options.useProp ? 'prop': 'attr']("checked",stat);
				if(fid) {
					if(isPicgrid){
						if(ia === -1) {
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").addClass("coral-state-highlight");
						} else {
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).find(".rowgrid").removeClass("coral-state-highlight");
						}
					}else{
						if(ia === -1) {
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).addClass("coral-state-highlight");
						} else {
							$("#"+$.grid.coralID(selection), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight");
						}
					}
					
					$("#jqg_"+$.grid.coralID(this.options.id)+"_"+$.grid.coralID(selection), "#"+$.grid.coralID(fid))[this.options.useProp ? 'prop': 'attr']("checked",stat);
				}			
				if( onsr) { 
					this._trigger("onSelectRow", e, [{'rowId':pt.id, 'status':stat}]);
				}
			}
		},
		_setHeadCheckBox: function ( checked ) {
			var that = this;
			$('#cb_'+$.grid.coralID(that.options.id),that.grid.columnsView)[that.options.useProp ? 'prop': 'attr']("checked", checked);
			var fid = that.options.frozenColumns ? that.options.id+"_frozen" : "";
			if(fid) {
				$('#cb_'+$.grid.coralID(that.options.id),that.grid.fhDiv)[that.options.useProp ? 'prop': 'attr']("checked", checked);
			}
		},
		setFrozenRows: function(rowNum){
			var that = this,
				grid = that.grid;
			that.destroyFrozenRows();
			that.rowsView2=$(grid.rowsView);
			if(!that.rowsView2.children("table.coral-grid-btable-frozen").length){
				//that.rowsView1.add(that.rowsView2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
				$(that.rowsView2).prepend("<table class=\"coral-grid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
				that.rowsView2.children("table.coral-grid-btable-frozen").css({
					position: "absolute",
					left: 0,
					top: $(grid.columnsView).height()+"px"
				});
			}
			var vh = that.element.find(".coral-grid-rows-view").height();
			//doWithFrozen(true);
			doWithFirstRow(false);
			doWithFrozen(false);
			var fh = that.rowsView2.find("table.coral-grid-btable-frozen").outerHeight();
			that.rowsView2.css({
				"margin-top": fh+"px",
				"height": (vh - fh)+"px"
			});
			//初始化横向
			that.rowsView2.find(".coral-grid-btable-frozen").css({
				'left':-$(grid.rowsView)[0].scrollLeft+"px",
				'width':that.rowsView2.find(".coral-grid-btable").width()+"px",
				'table-layout':'fixed'//处理safari and chrome浏览器的bug问题
			});
			function doWithFirstRow(isFirst){
				var tr=that.rowsView2.find(".coral-grid-btable")[0].rows[0];
				(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").append($(tr).clone());
			}
			function doWithFrozen(isFirst){
				var trs=that.rowsView2.find(".coral-grid-btable tr").filter(function(i){
					if(i==0){
						return false;
					}
					if(i<=rowNum) return true;
				});
				var tr=that.rowsView2.find(".coral-grid-btable")[0].rows[1];
				(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").append(trs);
			}
		},
		destroyFrozenRows: function(){
			var that = this,
				grid = that.grid;
			
			that.rowsView2=$(grid.rowsView);
			if(!that.rowsView2.children("table.coral-grid-btable-frozen").length){
				//that.rowsView1.add(that.rowsView2).prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
				$(that.rowsView2).prepend("<table class=\"coral-grid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
				that.rowsView2.children("table.coral-grid-btable-frozen").css({
					position: "absolute",
					left: 0,
					top: 0
				});
			}
			var vh = that.element.find(".coral-grid-rows-view").height();
			var fh = that.rowsView2.find("table.coral-grid-btable-frozen").outerHeight();
			//doWidthFrozen(true);
			doWidthFrozen(false);
			doWidthFirstRow(false);
			that.rowsView2.css({
				"margin-top": 0,
				"height": (vh+fh)+"px"
			});
			//_21(_43);
			function doWidthFrozen(isFirst){
				var rows = that.rowsView2.find("table.coral-grid-btable-frozen tr").filter(function(i){
					if(i==0){
						return false;
					}
					return true;
				});
				var row1 = (isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen")[0].rows[1];
				$(that.rowsView2.find(".coral-grid-btable tbody:first tr:first")[0]).after(rows);
			}
			function doWidthFirstRow(isFirst){
				(isFirst?that.rowsView1:that.rowsView2).children("table.coral-grid-btable-frozen").remove();
			}
			
		},
		showHideCol : function(colname,show) {
			var that = this, fndh=false, brd=$.support.boxSizing? 0: this._intNum(this.options.cellLayout,0), cw;
			if (!that.grid ) {return;}
			if( typeof colname === 'string') {colname=[colname];}
			show = show != "none" ? "" : "none";
			var sw = show === "" ? true :false,
			gh = that.options.groupHeader && (typeof that.options.groupHeader === 'object' || $.isFunction(that.options.groupHeader) );
			if(gh) { $(that.element).grid('destroyGroupHeader', false); }
			$(this.options.colModel).each(function(i) {
				if ($.inArray(this.name,colname) !== -1 && this.hidden === sw) {
					if(that.options.frozenColumns === true && this.frozen === true) {
						//return true;
					}
					$("tr",that.grid.columnsView).each(function(){
						$(this.cells[i]).css("display", show);
					});
					$(that.rows).each(function(){
						if (!$(this).hasClass("jqgroup")) {
							$(this.cells[i]).css("display", show);
						}
					});
					if(that.options.footerrow) { $("tr.footrow td:eq("+i+")", that.grid.sDiv).css("display", show); }
					cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
					if ( show === "none" ) {
						that.options.tblwidth -= cw+brd;
					} else {
						that.options.tblwidth += cw+brd;
					}
					this.hidden = !sw;
					fndh=true;
					that._trigger("onShowHideCol", null,[{"show":sw,"name":this.name,"index":i}]);
				}
			});
			if(fndh===true) {
				if ( that.options.shrinkToFit === true && !isNaN( that.options.height ) ) { 
					that.options.tblwidth += parseInt( that.options.scrollOffset, 10 );
				}
				that._setGridWidth(that.options.shrinkToFit === true ? that.options.tblwidth : that.options.width );
			}
			if( gh )  {
				$(that.element).grid('setGroupHeaders',that.options.groupHeader);
			}
		},
		hideCol : function (colname) {
			return $(this.element).grid("showHideCol",colname,"none");
		},
		showCol : function(colname) {
			return $(this.element).grid("showHideCol",colname,"");
		},
		remapColumns : function(permutation, updateCells, keepHeader){
			function resortArray(a) {
				var ac;
				if (a.length) {
					ac = $.makeArray(a);
				} else {
					ac = $.extend({}, a);
				}
				$.each(permutation, function(i) {
					a[i] = ac[this];
				});
			}
			var that = this;
			function resortRows(parent, clobj) {
				$(">tr"+(clobj||""), parent).each(function() {
					var row = this;
					var elems = $.makeArray(row.cells);
					$.each(permutation, function() {
						var e = elems[this];
						if (e) {
							row.appendChild(e);
						}
					});
				});
			}
			resortArray(that.options.colModel);
			resortArray(that.options.colNames);
			resortArray(that.grid.headers);
			resortRows($("thead:first", that.grid.columnsView), keepHeader && ":not(.coral-grid-labels)");
			if (updateCells) {
				resortRows($("#"+$.grid.coralID(that.options.id)+" tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
			}
			if (that.options.footerrow) {
				resortRows($("tbody:first", that.grid.sDiv));
			}
			if (that.options.remapColumns) {
				if (!that.options.remapColumns.length){
					that.options.remapColumns = $.makeArray(permutation);
				} else {
					resortArray(that.options.remapColumns);
				}
			}
			that.options.lastsort = $.inArray(that.options.lastsort, permutation);
			if(that.options.treeGrid) { that.options.expColInd = $.inArray(that.options.expColInd, permutation); }
			//$(that).triggerHandler("gridRemapColumns", [permutation, updateCells, keepHeader]);
		},
		sortableColumns : function (tblrow){

			var that = this, tid= $.grid.coralID( that.options.id );
			function start() {that.options.disableClick = true;}
			var sortable_opts = {
				"tolerance" : "pointer",
				"axis" : "x",
				"cancel" : ".coral-columnSortable-disabled",
				"scrollSensitivity": "1",
				/*"helper":"clone",*/
				helper: function(event, currentItem) {
	                return currentItem.clone();
	            },
				"items": '>th:not(:has(#jqgh_'+tid+'_cb'+',#jqgh_'+tid+'_rn'+',#jqgh_'+tid+'_subgrid),:hidden, .coral-columnSortable-disabled)',
				"placeholder": {
					element: function(item) {
						var rowspan = typeof(item.attr("rowspan"))=="undefined"?"1":"2",
							colspan = typeof(item.attr("colspan"))=="undefined"?"1":"2";
						var el = $(document.createElement(item[0].nodeName))
						.addClass(item[0].className+" coral-sortable-placeholder coral-state-highlight")
						.removeClass("coral-sortable-helper").attr("rowspan",rowspan).attr("colspan",colspan)[0];
						return el;
					},
					update: function(self, options) {
						options.height(self.currentItem.innerHeight() - parseInt(self.currentItem.css('paddingTop')||0, 10) - parseInt(self.currentItem.css('paddingBottom')||0, 10));
						//options.height($(self.currentItem).outerHeight());
						options.width(self.currentItem.innerWidth() - parseInt(self.currentItem.css('paddingLeft')||0, 10) - parseInt(self.currentItem.css('paddingRight')||0, 10));
					}
				},
				"update": function(event, ui) {
					var p = $(ui.item).parent(),
					th = $(">th", p),
					colModel = that.options.colModel,
					cmMap = {}, tid= that.options.id+"_";
					ui.itemId = [];
					$.each(colModel, function(i) { cmMap[this.name]=i; });
					var permutation = [];//需要置换的数组
					var permutationId = [];
					// 分组之后暂时无法处理
					th.each(function() {
						var id = $(">div", this).get(0).id.replace(/^jqgh_/, "").replace(tid,"");
							if (id in cmMap) {
								permutation.push(cmMap[id]);
								permutationId.push(id);
							}
					});
					$.each(ui.item, function(i){
						ui.itemId.push(ui.item[i].id.replace(/^jqgh_/, "").replace(tid,""));
					});
					ui.prevItemId = $(ui.item[0]).prev("th").attr("id").replace(/^jqgh_/, "").replace(tid,"");
					ui.nextItemId = $(ui.item[0]).next("th").attr("id").replace(/^jqgh_/, "").replace(tid,"");
					ui.targetId = ui.position.left>ui.originalPosition.left?ui.prevItemId:ui.nextItemId;
					
					$(that.element).grid("remapColumns",permutation, true, true);
					ui.permutation = permutation;
					ui.permutationOfId = permutationId;
					that._trigger("onSortableColumns",event,[ui]);
					setTimeout(function(){that.options.disableClick=false;}, 50);
				}
			};
			/*if (that.options.sortableColumns.options) {
				$.extend(sortable_opts, that.options.sortableColumns.options);
			} else if ($.isFunction(that.options.sortableColumns)) {
				that.options.sortableColumns = { "update" : that.options.sortableColumns };
			}*/
			$.extend(sortable_opts, that.options.sortableColumnsOptions);
			if (sortable_opts.beforesortablecolumns) {
				var s = sortable_opts.beforesortablecolumns;
				sortable_opts.start = function(e,ui) {
					start();
					s.call(this,e,ui);
				};
			} else {
				sortable_opts.start = start;
			}
			if (that.options.sortableColumnsOptions.exclude) {
				sortable_opts.items += ":not("+that.options.sortableColumnsOptions.exclude+")";
			}
			tblrow.sortable(sortable_opts).data("sortable").floating = true;
			/*});*/
		},
		setCaption : function (newcap){
			this.options.caption=newcap;
			$("span.coral-grid-title, span.coral-grid-title-rtl",this.grid.caption).html(newcap);
			$(this.grid.cDiv).show();
		},
		setLabel : function(colname, nData, prop, attrp ){
			var that = this, pos=-1;
			if(!that.grid) {return;}
			if(typeof(colname) != "undefined") {
				$(that.options.colModel).each(function(i){
					if (this.name == colname) {
						pos = i;return false;
					}
				});
			} else { return; }
			if(pos>=0) {
				var thecol = $("tr.coral-grid-labels th:eq("+pos+")",that.grid.columnsViews);
				if (nData){
					var ico = $(".s-ico",thecol);
					$("[id^=jqgh_]",thecol).empty().html(nData).append(ico);
					that.options.colNames[pos] = nData;
				}
				if (prop) {
					if(typeof prop === 'string') {$(thecol).addClass(prop);} else {$(thecol).css(prop);}
				}
				if(typeof attrp === 'object') {$(thecol).attr(attrp);}
			}
		},
		setCell: function(rowid,colname,nData,cssp,attrp, forceupd) {
			var that = this, pos =-1,v, title;
			if(!that.grid) {return;}
			if(isNaN(colname)) {
				$(that.options.colModel).each(function(i){
					if (this.name == colname) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(colname,10);}
			if (pos >= 0) {
				var ind = that.rows.namedItem(rowid);
				var rwd = $(that.element).grid("getRowData",rowid);
				if (ind){
					var tcell = $("td:eq("+pos+")",ind);
					if(nData !== "" || forceupd === true) {
						v = that._formatter(rowid, nData, pos,rwd,'edit');
						title = that.options.colModel[pos].title ? {"title":$.grid.stripHtml(v)} : {};
						if(that.options.treeGrid && $(".tree-wrap",$(tcell)).length>0) {
							$("span",$(tcell)).html(v).attr(title);
						} else {
							$(tcell).html(v).attr(title);
						}
						$.fn.afterFmatter.call(that);
						if(that.options.datatype == "local") {
							var cm = that.options.colModel[pos], index;
							/*var _fn = $.coral.toFunction(cm.formatter);
							if($.isFunction(_fn)){
								nData = _fn.apply( this.element[0]);
							}else{
								//nData = cm.formatter && typeof(cm.formatter) === 'string' && cm.formatter == 'date' ? $.unformat.date.call(that,nData,cm) : nData;
								nData = nData;
							}*/
							index = that.options._index[rowid];
							if(typeof index  != "undefined") {
								that.options.data[index][cm.name] = nData;
							}
						}
					}
					if(typeof cssp === 'string'){
						$(tcell).addClass(cssp);
					} else if(cssp) {
						$(tcell).css(cssp);
					}
					if(typeof attrp === 'object') {$(tcell).attr(attrp);}
				}
			}
		},
		sortableDisable : function(){
			$("tbody:first",this.grid.rowsView).sortable("disable");
		},
		sortableEnable : function(){
			$("tbody:first",this.grid.rowsView).sortable("enable");
		},
		getCell : function(rowid,col) {
			var ret = false;
			var $t=this, pos=-1;
			if(!$t.grid) {return;}
			if(isNaN(col)) {
				$($t.options.colModel).each(function(i){
					if (this.name === col) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(col,10);}
			if(pos>=0) {
				var ind = $t.rows.namedItem(rowid);
				if(ind) {
					try {
						if($t.options.enableHighlight == true) {
							ret = $.unformat.call($t,$("td:eq("+pos+")",ind),{rowId:ind.id, colModel:$t.options.colModel[pos]},pos,true);
						} else {
							ret = $.unformat.call($t,$("td:eq("+pos+")",ind),{rowId:ind.id, colModel:$t.options.colModel[pos]},pos);
						}
					} catch (e){
						ret = $.grid.htmlDecode($("td:eq("+pos+")",ind).html());
					}
				}
			}
			return ret;
		},
		getCol : function (col, obj, mathopr) {
			var ret = [], val, sum=0, min, max, v;
			obj = typeof (obj) != 'boolean' ? false : obj;
			if(typeof mathopr == 'undefined') { mathopr = false; }
			var $t=this, pos=-1;
			if(!$t.grid) {return;}
			if(isNaN(col)) {
				$($t.options.colModel).each(function(i){
					if ($t.options.colModel[i].name === col) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(col,10);}
			if(pos>=0) {
				var ln = $t.rows.length, i =0;
				if (ln && ln>0){
					while(i<ln){
						if($($t.rows[i]).hasClass('jqgrow')) {
							try {
								if($t.options.enableHighlight == true){
									val = $.unformat.call($t,$($t.rows[i].cells[pos]),{rowId:$t.rows[i].id, colModel:$t.options.colModel[pos]},pos,true);
								}else{
									val = $.unformat.call($t,$($t.rows[i].cells[pos]),{rowId:$t.rows[i].id, colModel:$t.options.colModel[pos]},pos);
								}
							} catch (e) {
								val = $.grid.htmlDecode($t.rows[i].cells[pos].innerHTML);
							}
							if(mathopr) {
								v = parseFloat(val);
								sum += v;
								if(i===0) {
									min = v;
									max = v;
								} else {
									min = Math.min(min, v);
									max = Math.max(max, v);
								}
							}
							else if(obj) { ret.push( {id:$t.rows[i].id,value:val} ); }
							else { ret.push( val ); }
						}
						i++;
					}
					if(mathopr) {
						switch(mathopr.toLowerCase()){
							case 'sum': ret =sum; break;
							case 'avg': ret = sum/ln; break;
							case 'count': ret = ln; break;
							case 'min': ret = min; break;
							case 'max': ret = max; break;
						}
					}
				}
			}
			return ret;
		},
		getCellComponent : function(rowid,colname,nData,cssp,attrp, forceupd) {
			var that = this, pos =-1,v, title;
			if(!that.grid) {return;}
			/*if(isNaN(colname)) {
				$(that.options.colModel).each(function(i){
					if (this.name == colname) {
						pos = i;return false;
					}
				});
			} else {pos = parseInt(colname,10);}
			if(pos>=0) {
				var ind = that.rows.namedItem(rowid);
				if (ind){
					var tcell = $("td:eq("+pos+")",ind);
					return tcell.find(".ctrl-init");
				}
			}*/
			return this.element.find("#"+rowid).find('[aria-describedby$='+colname+']').find('.ctrl-init');
		},
		_formatter: function (rowId, _cellVal , colpos, rwdat, _act){
			var cm = this.options.colModel[colpos],v;
			if(typeof cm.formatter !== 'undefined') {
				var opts= {rowId: rowId, colModel:cm, gid:this.options.id, pos:colpos ,model:this.options.model};
				var _fn = $.coral.toFunction(cm.formatter);
				if($.isFunction(_fn)){
					v = _fn.apply( this.element[0], [_cellVal,opts,rwdat,_act]);
				} else if($.fmatter){
					v = $.fn.fmatter.call(this,cm.formatter,_cellVal,opts,rwdat,_act);
				} else {
					v = this._cellVal(_cellVal);
				}
			} else {
				v = this._cellVal(_cellVal);
			}
			return v;
		},
		_getOffset: function (iCol) {
			var that = this;
		//	var i, ret = {}, brd1 = isSafari ? 0 : that.options.cellLayout;
			var i, ret = {}, brd1 = $.support.boxSizing ? 0 : that.options.cellLayout;
			ret[0] =  ret[1] = ret[2] = 0;
			for(i=0;i<=iCol;i++){
				if(that.options.colModel[i].hidden === false||typeof(that.options.colModel[i].hidden)== 'undefined' ) {
					ret[0] += that.options.colModel[i].width+brd1;
				}
			}
			//if(that.options.direction=="rtl") { ret[0] = that.options.width - ret[0]; }
			ret[0] = ret[0] - that.grid.rowsView.scrollLeft;
			//if($(that.grid.cDiv).is(":visible")) {ret[1] += $(that.grid.cDiv).height() +parseInt($(that.grid.cDiv).css("padding-top"),10)+parseInt($(that.grid.cDiv).css("padding-bottom"),10);}
			//if(that.options.toolbar[0]===true && (that.options.toolbar[1]=='top' || that.options.toolbar[1]=='both')) {ret[1] += $(that.grid.uDiv).height()+parseInt($(that.grid.uDiv).css("border-top-width"),10)+parseInt($(that.grid.uDiv).css("border-bottom-width"),10);}
			//if(that.options.toppager) {ret[1] += $(that.grid.topDiv).height()+parseInt($(that.grid.topDiv).css("border-bottom-width"),10);}
			ret[2] += $(that.grid.rowsView).height() + $(that.grid.columnsView).height();
			return ret;
		},
		_sortData: function (index, idxcol,reload,sor,obj){
			var that = this;
			if(!this.options.colModel[idxcol].sortable) { return; }
			that.options.b_sortdata = true; // modify for custom sort
			var so;
			if(this.options.savedRow.length > 0) {return;}
			if(!reload) {
				if( this.options.lastsort == idxcol ) {
					if( this.options.sortorder == 'asc') {
						this.options.sortorder = 'desc';
					} else if(this.options.sortorder == 'desc') { this.options.sortorder = 'asc';}
				} else { this.options.sortorder = this.options.colModel[idxcol].firstsortorder || 'asc'; }
				this.options.page = 1;
			}
			if(sor) {
				if(this.options.lastsort == idxcol && this.options.sortorder == sor && !reload) { return; }
				else { that.options.sortorder = sor; }
			}
			var previousSelectedTh = this.grid.headers[this.options.lastsort].el, newSelectedTh = this.options.frozenColumns ? obj : this.grid.headers[idxcol].el;

			$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
			$(previousSelectedTh).attr("aria-selected","false");
			if(this.options.frozenColumns) {
				if (this.grid.fhDiv) {
					this.grid.fhDiv.find("span.coral-grid-ico-sort").addClass('coral-state-disabled');
					this.grid.fhDiv.find("th").attr("aria-selected","false");
				} else if (this.grid.rightfhDiv) {
					this.grid.rightfhDiv.find("span.coral-grid-ico-sort").addClass('coral-state-disabled');
					this.grid.rightfhDiv.find("th").attr("aria-selected","false");
				}
			}
			$("span.coral-icon-"+this.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
			$(newSelectedTh).attr("aria-selected","true");
			if(!this.options.viewsortcols[0]) {
				if(this.options.lastsort != idxcol) {
					if(this.options.frozenColumns){
						if (this.grid.fhDiv) {
							this.grid.fhDiv.find("span.s-ico").hide();
						} else if (this.grid.rightfhDiv) {
							this.grid.rightfhDiv.find("span.s-ico").hide();
						}
					}
					$("span.s-ico",previousSelectedTh).hide();
					$("span.s-ico",newSelectedTh).show();
				}else if (this.options.sortname === "") { // if this.options.lastsort === idxcol but this.options.sortname === ""
					$("span.s-ico",newSelectedTh).show();
				}
			}
			index = index.substring(5 + this.options.id.length + 1); // bad to be changed!?!
			this.options.sortname = this.options.colModel[idxcol].index || index;
			so = this.options.sortorder;
			/*if ($(this).triggerHandler("gridSortCol", [index, idxcol, so]) === 'stop') {
				this.options.lastsort = idxcol;
				return;
			}*/
			if (that._trigger("onSortCol", null, [{"id": index, "colIndex":idxcol, "sortorder":so}]) === 'stop') {
				this.options.lastsort = idxcol;
				return;
			}
			//if($.isFunction(this.options.onSortCol)) {if (this.options.onSortCol.call(this,index,idxcol,so)=='stop') {this.options.lastsort = idxcol; return;}}
			if(this.options.datatype == "local") {
				if(this.options.deselectAfterSort) {$(this.element).grid("resetSelection");}
			} else {
				this.options.selrow = null;
				if(this.options.multiselect){that._setHeadCheckBox( false );}
				this.options.selarrrow =[];
				this.options.savedRow =[];
			}
			if(this.options.scroll) {
				var sscroll = this.grid.rowsView.scrollLeft;
				emptyRows(this.grid.rowsView,true, false);
				this.grid.columnsView.scrollLeft = sscroll;
			}
			if(this.options.subGrid && this.options.datatype=='local') {
				$("td.sgexpanded","#"+$.grid.coralID(this.options.id)).each(function(){
					$(this).trigger("click");
				});
			}
			this._populate();
			this.options.lastsort = idxcol;
			if(this.options.sortname != index && idxcol) {this.options.lastsort = idxcol;}
			that.options.b_sortdata = false; // modify for custom sort
		},
		
		_intNum: function(val,defval) {
			val = parseInt(val,10);
			if (isNaN(val)) { return defval ? defval : 0;}
			else {return val;}
		},
		_beginReq: function() {
			// before load or request url 
			var tipsDom = $("#noRecordsTips_"+$.grid.coralID(this.options.id));
			if ( tipsDom.is(":visible") ) {
				tipsDom.hide();
			}
			this.refresh();
			this.grid.columnsView.loading = true;
			if(this.options.hiddengrid) { return;}
			switch(this.options.loadui) {
				case "disable":
					break;
				case "enable":
					$(this.element).loading({
						position:   "overlay",
						text:       this.options.loadtext
					});
					break;
				case "block":
					$("#lui_"+$.grid.coralID(this.options.id)).show();
					$(this.element).loading({
						position:   "overlay",
						text:       this.options.loadtext
					});
					break;
			}
		},
		_endReq: function() {
			var that = this;
			this._delay(function(){
				that.refreshPager();
			},300);
			this.grid.columnsView.loading = false;
			switch(this.options.loadui) {
				case "disable":
					break;
				case "enable":
					$(this.element).loading("hide");
					break;
				case "block":
					$("#lui_"+$.grid.coralID(this.options.id)).hide();
					$(this.element).loading("hide");
					break;
			}
			//this.element.find(".coral-grid-htable,.coral-grid-btable").css("table-layout","fixed");
			// grid 初始化时，如果列太多，而行数据的单元格太长，则列头挤在一起的问题，与下面的单元格错位的问题。
			this.element.find(".coral-grid-htable,.coral-grid-btable").css({
				"table-layout":"fixed"
			});
			if ( $(that.grid.rowsView).find(".jqgrow").length == 0 ){
				that._noRecordsTipsPositon();
				$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css("display","inline-block");
				$(that.grid.fhDiv).css("display","none");
				$(that.grid.fhDiv).css("display","none");
			} else {
				$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css("display","none");
				$(that.grid.fhDiv).css("display","block");
				$(that.grid.fhDiv).css("display","block");
			}
		},
		_noRecordsTipsPositon:function(){
			var that = this;
			var gridWidth = this.element.width(), // 无数据显示时，计算其定位，居中。
			gridHeight = this.gridRows.height(),
			tipsWidth = $("#noRecordsTips_"+$.grid.coralID(that.options.id)).width(),
			tipsHeight = $("#noRecordsTips_"+$.grid.coralID(that.options.id)).height();
			$("#noRecordsTips_"+$.grid.coralID(that.options.id)).css({
				"margin-top": (gridHeight-tipsHeight)/2 +"px",
				"margin-left": gridWidth/2 + "px"
			});
		},
		_setColWidth: function () {
			var that = this;
			var grid = this.grid;
			
			//var initwidth = 0, brd=isSafari? 0: _intNum(this.options.cellLayout,0), vc=0, lvc, scw=_intNum(this.options.scrollOffset,0),cw,hs=false,aw,gw=0,
			var initwidth = 0, brd=$.support.boxSizing? 0: this._intNum(this.options.cellLayout,0), 
				vc=0, // the number of visible column 
				lvc, // the last number of visible column
				scw=this._intNum(this.options.scrollOffset,0), // scrollbar width
				cw, // column width
				hs=false, // height is scroll
				aw,// actual width
				gw=0,// grid width
				cl = 0, // the length of column (include the checkbox column and rownumber column)
				cr;
			$.each(this.options.colModel, function() {
				//if(typeof this.hidden === 'undefined') {this.hidden=false;}
				if(that.options.grouping && that.options.autowidth) {
					var ind = $.inArray(this.name, that.options.groupingView.groupField);
					if(ind >= 0 && that.options.groupingView.groupColumnShow.length > ind) {
						this.hidden = !that.options.groupingView.groupColumnShow[ind];
					}
				}
				this.widthOrg = cw = that._intNum(this.width,0);
				if((this.hidden === false||typeof(this.hidden) == 'undefined')){
					initwidth += cw+brd;
					if(this.fixed) {
						gw += cw+brd;
					} else {
						vc++;
					}
					cl++;
				}
			});
			if(isNaN(that.options.width)) {that.options.width = grid.width = initwidth;}
			else { grid.width = that.options.width;}
			that.options.tblwidth = initwidth;
			if(that.options.shrinkToFit ===false && that.options.forceFit === true) {that.options.forceFit=false;}
			if(that.options.shrinkToFit===true && vc > 0) {
				aw = grid.width-brd*vc-gw;
				if(!isNaN(this.options.height)) {//如果grid设置高度，则减去滚动条宽度
					aw -= scw;
					hs = true;
				}
				initwidth =0;
				$.each(that.options.colModel, function(i) {
					if((this.hidden === false||typeof(this.hidden)== 'undefined') && !this.fixed){
						cw = Math.round(aw*this.width/(that.options.tblwidth-brd*vc-gw));
						this.width =cw;
						initwidth += cw;
						lvc = i;
					}
				});
				cr =0;//如果grid实际宽度和算出来宽度有差别则将这个差加到最后一列
				if (hs) {
					if(grid.width-gw-(initwidth+brd*vc) !== scw){
						cr = grid.width-gw-(initwidth+brd*vc)-scw;
					}
				} else if(!hs && Math.abs(grid.width-gw-(initwidth+brd*vc)) !== 1) {
					cr = grid.width-gw-(initwidth+brd*vc) -1;//add for chrome
				}
				that.options.colModel[lvc].width += cr;
				that.options.tblwidth = initwidth+cr+brd*vc+gw;
				if(that.options.tblwidth > that.options.width) {
					that.options.colModel[lvc].width -= (that.options.tblwidth - parseInt(that.options.width,10));
					that.options.tblwidth = that.options.width;
				}
				that.options.tblwidth;
			}
		},
		_nextVisible: function(iCol) {
			var ret = iCol, j=iCol, i;
			for (i = iCol+1;i<this.options.colModel.length;i++){
				if(this.options.colModel[i].hidden !== true ) {
					j=i; break;
				}
			}
			return j-ret;
		},
		_formatCol: function (pos, rowInd, tv, rawObject, rowId, rdata){
			var that = this;
			if(that.options.model == "card")return "";
			var grid = that.grid;
			var cm = that.options.colModel[pos],
			ral = cm.align, result="style=\"", clas = cm.cls, nm = cm.name, celp, acp=[], dataOrg = "";
			if(ral) { result += "text-align:"+ral+";"; }
			if(cm.hidden===true) { result += "display:none;"; }
			var _fn = $.coral.toFunction(cm.cellattr);
			if(rowInd===0) {
				result += "width: "+grid.headers[pos].width+"px;";
			} else if ($.isFunction(_fn))
			{
				celp = _fn.apply( that.element[0], [{"rowId":rowId,"value":tv,"rawObject":rawObject,"colModel":cm,"rowData":rdata}]);
				//celp = cm.cellattr.call(that, rowId, tv, rawObject, cm, rdata);
				if(celp && typeof(celp) === "string") {
					celp = celp.replace(/style/i,'style').replace(/title/i,'title');
					if(celp.indexOf('title') > -1) { cm.title=false;}
					if(celp.indexOf('class') > -1) { clas = undefined;}
					acp = celp.split("style");
					if(acp.length === 2 ) {
						acp[1] =  $.trim(acp[1].replace("=",""));
						if(acp[1].indexOf("'") === 0 || acp[1].indexOf('"') === 0) {
							acp[1] = acp[1].substring(1);
						}
						result += acp[1].replace(/'/gi,'"');
					} else {
						result += "\"";
					}
				}
			}
			// 将original value存储在td上，注意动态维护此属性
			if ( rawObject ){
				var rawObjectV = (rawObject[nm] == undefined) ? "" : rawObject[nm];
				rawObjectV = $.grid.htmlEncode(rawObjectV);//需要编码，，不然列上面的属性解析错误
				/*if ( cm.edittype == "combobox" ) { 
					var v = that.findTextByValue(rawObjectV, {"colModel":cm});
					v = $.grid.htmlEncode(v);
					dataOrg += "data-org='"+v+"'"; 
				} else {
					dataOrg += "data-org='"+rawObjectV+"'"; 
				}*/
				
				dataOrg += "data-org='"+rawObjectV+"'"; 
			}
			if ( !acp.length ) { 
				acp[0] = ""; result += "\"";
			} 
			result += (clas !== undefined ? (" class=\""+clas+"\"") :"") + ((cm.title && tv) ? (" title=\""+$.grid.stripHtml(tv)+"\"") :"");
			result += " aria-describedby=\""+that.options.id+"_"+nm+"\"";
			return result + acp[0] + dataOrg;
		},
		/** 根据text找到value*/
		findTextByValue: function(cval, opts) {
			var code = opts.colModel.editoptions.data;
			if ( !code ) return cval;
			for ( var i=0; i<code.length; i++ ){
				if ( code[i].text == cval) {
					return code[i].value;
				} else {
				}
			}
			return cval;
		},
		_cellVal:  function (val) {
			return val === undefined || val === null || val === "" ? "" : (this.options.autoencode ? $.grid.htmlEncode(val) : val+"");
		},
		/* rowId: 行号
		 * cell: 单元格内容
		 * pos: 位置
		 * irow: 当前行
		 * srvr: 当前行数据
		 * */
		_addCell: function(rowId,cell,pos,irow, srvr, rdata) {
			if(this.options.model == "card"){
				var v,prp;
				v = this._formatter(rowId,cell,pos,srvr,'add');
				prp = this._formatCol( pos,irow, v, srvr, rowId, rdata);
				return "<div role=\"gridcell\" "+prp+">"+v+"</div>";
			}
			var v,prp,re;
			v = this._formatter(rowId,cell,pos,srvr,'add');
			prp = this._formatCol( pos,irow, v, srvr, rowId, rdata);
			if(this.options.enableHighlight && this.options.postData.filters){
				var keywordArr =  $.grid.parse(this.options.postData.filters).rules;
				for (var n = 0; n < keywordArr.length; n ++) {
					re = new RegExp("" + keywordArr[n].data + "","gmi");
					if(keywordArr[n].data != ""){
						v = v.replace(re,'<span class="coral-keyword-highlight">' + keywordArr[n].data + '</span>');
					}
				}
			}
			return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
		},
		_orderedCols: function (offset) {
			var that = this;
			var order = that.options.remapColumns;
			if (!order || !order.length) {
				order = $.map(that.options.colModel, function(v,i) { return i; });
			}
			if (offset) {
				order = $.map(order, function(v) { return v<offset?null:v-offset; });
			}
			return order;
		},
		emptyRows: function (parent, scroll, locdata) {
			var that = this,
				isPicgrid = !!(that.options.model == "card");
			if(isPicgrid){
				$("#"+$.grid.coralID(that.options.id)+" .coral-pic").children().remove();
			}else{
				if(that.options.deepempty) {$("#"+$.grid.coralID(that.options.id)+" tbody:first tr:gt(0)").remove();}
				else {
					if (that.options.filterToolbar){
						var trf = that.gridRows.find(".coral-grid-btable")[0].rows.length > 0 ? that.gridRows.find(".coral-grid-btable")[0].rows[0] : null;
						$( "#"+$.grid.coralID(that.options.id+"_table")+" tbody:first").empty().append(trf);
					} else {
					var trf = $("#"+$.grid.coralID(that.options.id)+" tbody:first tr:first")[0];
					$("#"+$.grid.coralID(that.options.id)+" tbody:first").empty().append(trf);
					}
				}
				if (scroll && that.options.scroll) {
					$(">div:first", parent).css({height:"auto"}).children("div:first").css({height:0,display:"none"});
					parent.scrollTop = 0;
				}
				if(locdata === true) {
					if(that.options.treeGrid === true ) {
						that.options.data = []; that.options._index = {};
					}
				}
			}
		},
		normalizeData : function() {
			var p = this.options, data = p.data, dataLength = data.length, i, j, cur, idn, idr, ccur, v, rd,
			localReader = p.localReader,
			colModel = p.colModel,
			cellName = localReader.cell,
			iOffset = (p.multiselect === true ? 1 : 0) + (p.subGrid === true ? 1 : 0) + (p.rownumbers === true ? 1 : 0),
			br = p.scroll ? $.jgrid.randId() : 1,
			arrayReader, objectReader, rowReader;

			if (p.datatype !== "local" || localReader.repeatitems !== true) {
				return; // nothing to do
			}

			arrayReader = this._orderedCols(iOffset);
			objectReader = this._reader("local");
			// read ALL input items and convert items to be read by
			// $.jgrid.getAccessor with column name as the second parameter
			idn = p.keyName === false ?
				($.isFunction(localReader.id) ? localReader.id.call(ts, data) : localReader.id) :
				p.keyName;
			for (i = 0; i < dataLength; i++) {
				cur = data[i];
				// read id in the same way like addJSONData do
				// probably it would be better to start with "if (cellName) {...}"
				// but the goal of the current implementation was just have THE SAME
				// id values like in addJSONData ...
				idr = $.grid.getAccessor(cur, idn);
				if (idr === undefined) {
					if (typeof idn === "number" && colModel[idn + iOffset] != null) {
						// reread id by name
						idr = $.grid.getAccessor(cur, colModel[idn + iOffset].name);
					}
					if (idr === undefined) {
						idr = br + i;
						if (cellName) {
							ccur = $.grid.getAccessor(cur, cellName) || cur;
							idr = ccur != null && ccur[idn] !== undefined ? ccur[idn] : idr;
							ccur = null;
						}
					}
				}
				rd = { };
				rd[localReader.id] = idr;
				if (cellName) {
					cur = $.grid.getAccessor(cur, cellName) || cur;
				}
				rowReader = $.isArray(cur) ? arrayReader : objectReader;
				for (j = 0; j < rowReader.length; j++) {
					v = $.grid.getAccessor(cur, rowReader[j]);
					rd[colModel[j + iOffset].name] = v;
				}
				$.extend(true, data[i], rd);
			}
		},
		refreshIndex: function() {
			var that = this;
			var datalen = that.options.data.length, idname, i, val;

			if(that.options.keyName === false || that.options.loadonce === true) {
				idname = that.options.localReader.id;
			} else {
				idname = that.options.keyName;
			}
			for(i =0;i < datalen; i++) {
				val = $.grid.getAccessor(that.options.data[i],idname);
				that.options._index[val] = i;
			}
		},
		constructPanel: function(id, hide, altClass, rd, cur) {
			var tabindex = '-1', restAttr = '', attrName, style = hide ? 'display:none;' : '',
				classes = 'gridPanel coral-row-' + this.options.direction + altClass;
			//	rowAttrObj = $.isFunction(this.options.rowattr) ? this.options.rowattr.call(that, rd, cur) : {};
			/*if(!$.isEmptyObject( rowAttrObj )) {
				if (rowAttrObj.hasOwnProperty("id")) {
					id = rowAttrObj.id;
					delete rowAttrObj.id;
				}
				if (rowAttrObj.hasOwnProperty("tabindex")) {
					tabindex = rowAttrObj.tabindex;
					delete rowAttrObj.tabindex;
				}
				if (rowAttrObj.hasOwnProperty("style")) {
					style += rowAttrObj.style;
					delete rowAttrObj.style;
				}
				if (rowAttrObj.hasOwnProperty("class")) {
					classes += ' ' + rowAttrObj['class'];
					delete rowAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete rowAttrObj.role; } catch(ra){}
				for (attrName in rowAttrObj) {
					if (rowAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
					}
				}
			}*/
			return '<li role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
				(style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
		},
		constructTr: function(id, hide, altClass, rd, cur, selected) {
			var tabindex = '-1', restAttr = '', attrName, style = hide ? 'display:none;' : '',
				rowAttrObj,
				classes = 'coral-component-content jqgrow coral-row-' + this.options.direction + altClass+ (selected ? ' coral-state-highlight' : '');
			if(this.options.treeGrid){
				var parent_id = this.options.treeReader.parent_id_field;
				if(cur[parent_id] !== null && String(cur[parent_id]).toLowerCase() != "null"){
					classes += ' treeGridRow ';
				}
			}
			var rowattrFun = $.coral.toFunction(this.options.rowattr);
		//	rowAttrObj = $.isFunction(rowattrFun) ? this.options.rowattr.call(that, rd, cur) : {};
			rowAttrObj = $.isFunction(rowattrFun) ? rowattrFun.apply( this.element[0], [{
				"rowId":id, "rowData":rd, "currentObj":cur
				}]) : {};
			if(!$.isEmptyObject( rowAttrObj )) {
				if (rowAttrObj.hasOwnProperty("id")) {
					id = rowAttrObj.id;
					delete rowAttrObj.id;
				}
				if (rowAttrObj.hasOwnProperty("tabindex")) {
					tabindex = rowAttrObj.tabindex;
					delete rowAttrObj.tabindex;
				}
				if (rowAttrObj.hasOwnProperty("style")) {
					style += rowAttrObj.style;
					delete rowAttrObj.style;
				}
				if (rowAttrObj.hasOwnProperty("class")) {
					classes += ' ' + rowAttrObj['class'];
					delete rowAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete rowAttrObj.role; } catch(ra){}
				for (attrName in rowAttrObj) {
					if (rowAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + rowAttrObj[attrName];
					}
				}
			}
			return '<tr role="row" id="' + id + '" tabindex="' + tabindex + '" class="' + classes + '"' +
				(style === '' ? '' : ' style="' + style + '"') + restAttr + '>';
		},
		_clearVals: function(onPaging){
			var that = this, ret;
			//if ($.isFunction(that.options.onPaging) ) { ret = that.options.onPaging.call(that,onPaging); }
			ret = that._trigger("onPaging",null,[{pgButton: onPaging}]);
			if (!ret) {return false;}
			that.options.selrow = null;
			that.options.editrow = null;
			if(that.options.multiselect) {that.options.selarrrow =[]; that._setHeadCheckBox( false );}
			that.options.savedRow = [];
			return true;
		},
		_getPagination: function(){
			
		},
		/**
		 * 通过模板模式进行渲染自定义分页条，同时组件库提供两种默认的模板。
		 * TODO: 模板渲染，自定义分页条上面的各个位置
		 */
		_setPager: function (pgid, tp){
			var that = this,
				pagerTemplate1 = "<span class='paginator-left'>{viewrecords}</span><span class='paginator-center'>{prev}{links}{next}{pginput}{navbar}{description}</span><span class='paginator-right'><em>每页</em>{rninput}<em>条</em></span>",
				pagerTemplate2 = "<div class='paginator-left'>{viewrecords}{rowlist}{first}{prev}{pginput}{next}{last}{navbar}{description}</div><div class='toolbarpanel'>{toolbar}</div>";
			tp += "_" + pgid;
		var pagerTemplate = false;
			if ($.isFunction(that.options.pagerTemplate)) { 
				pagerTemplate = that.options.pagerTemplate.call(that);
			}

			var dir= this.options.direction;
			// TBD - consider escaping pgid with pgid = $.grid.coralID(pgid);
			var po=["first"+tp,"prev"+tp, "next"+tp,"last"+tp]; if(dir=="rtl") { po.reverse(); }
			var pginp = "", 
				str="", 
				rninput="", 
				rowlist="",
				viewrecords="", 
				totalPage = "",
				pagers = "",
				pagination="", 
				links = "<span class='coral-paginator-pages'></span>",
				pginput = "<em class='page-item'>第</em><input type='text' class='coral-pg-input'/><em class='page-item'>页</em>",
				reload = "<button class='reload-button' id='_reloadGrid' type='button' " +
						"data-options='customData:{gridId:\""+that.options.id+"\"}," +
						"label:\"刷新\",text: false,icons: \"cui-icon-loop3\",onClick: function( e, ui ){" +
						"$( \"#"+that.options.id+"\" ).grid( \"reload\" );" +
					"}'>reload</button>",
				first = "<span id='"+po[0]+"' class='page-item coral-paginator-first coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-first2' title='第一页'></span></span>",
				last = "<span id='"+po[3]+"' class='page-item coral-paginator-last coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-last2' title='最后一页'></span></span>",
				next = "<span id='"+po[2]+"' class='page-item coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3' title='下一页'></span></span>",
				prev = "<span id='"+po[1]+"' class='page-item coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3' title='前一页'></span></span>",
				sep = "<span>|</span>",
				navbar = "<span class='page-item pager-navbar'></span>",
				toolbar = "<span class='pager-toolbar'></span>",
				description="<span class='pager-description'></span>", paginator, lft, cent, rgt, twd, tdw, i;
			paginator = "pg_"+pgid;
			
			lft = pgid+"_left"; cent = pgid+"_center"; rgt = pgid+"_right";

			rninput +="<input type='text' class='coral-rn-input' val=''/>";
			if( !that.options.rninput ){
			} else if( that.options.rowList.length > 0 ){
				//rowlist = rninput;
			}
			rowlist +="<select class='coral-pg-selbox' role='listbox'>";
			for(i=0;i<that.options.rowList.length;i++){
				rowlist +="<option role=\"option\" value=\""+that.options.rowList[i]+"\""+((that.options.rowNum == that.options.rowList[i])?" selected=\"selected\"":"")+">"+that.options.rowList[i]+"</option>";
			}
			rowlist +="</select>";
			if(that.options.viewrecords){
				viewrecords +="<span class='page-item coral-paging-info'></span>";
				totalPage +="<span class='page-item coral-paging-totalpage'></span>";
			}
			
			if(that.options.pginput===true) { pginp= "<td dir='"+dir+"'>"+$.grid.format(that.options.pgtext || "","<input class='coral-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>","<span id='sp_1_"+$.grid.coralID(pgid)+"'></span>")+"</td>";}
			if ( that.options.pagerStyle == "flex" ){
				if ( pagerTemplate ) {
					pagerTemplate1 = pagerTemplate;
				}
				pagination = "<span id='"+po[1]+"' class='page-item coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3'>p</span></span>" +
					"<span class='coral-paginator-pages'></span>" +
					"<span id='"+po[2]+"' class='page-item coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3'>p</span></span>" +
					"<em class='page-item'>第</em><input type='text' class='coral-pg-input'/><em class='page-item'>页</em>" ;
				pagers = pagerTemplate1.replace( /\{viewrecords\}/g, viewrecords)
					//.replace( /\{pagination\}/g, pagination)
					.replace( /\{navbar\}/g, navbar)
					.replace( /\{reload\}/g, reload)
					.replace( /\{-\}/g, sep)
					.replace( /\{first\}/g, first)
					.replace( /\{last\}/g, last)
					.replace( /\{next\}/g, next)
					.replace( /\{totalPage\}/g, totalPage)
					.replace( /\{prev\}/g, prev)
					.replace( /\{links\}/g, links)
					.replace( /\{pginput\}/g, pginput)
					.replace( /\{toolbar\}/g, toolbar)
					.replace( /\{description\}/g, description)
					.replace( /\{rowlist\}/g, rowlist)
					.replace( /\{rninput\}/g, rninput);
				 
				$("#"+$.grid.coralID(pgid) ).addClass("coral-pager-flex");
				$("#"+$.grid.coralID(pgid) )
				.append("<div id='" + paginator + "' class='coral-paginator' role='group'>" +
							pagers +
						"</div>");
				that._bindpager( pgid, tp );
			} else if ( that.options.pagerStyle == "tradition" ){
				if ( pagerTemplate ) {
					pagerTemplate2 = pagerTemplate;
				}
				pagination = "<span id='"+po[0]+"' class='page-item coral-paginator-first coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-first2'></span></span>" +
					"<span id='"+po[1]+"' class='page-item coral-paginator-prev coral-corner-all' tabindex='0'><span class='cui-icon-arrow-left3'></span></span>" +
					"<em class='page-item'>第</em><input type='text' class='coral-pg-input'/><em class='page-item'>页</em>" +
					"<span id='"+po[2]+"' class='page-item coral-paginator-next coral-corner-all' tabindex='0'><span class='cui-icon-arrow-right3'></span></span>" +
					"<span id='"+po[3]+"' class='page-item coral-paginator-last coral-state-default coral-corner-all' tabindex='0'><span class='cui-icon-last2'></span></span>" ;
				pagers = pagerTemplate2.replace( /\{viewrecords\}/g, viewrecords)
					//.replace( /\{pagination\}/g, pagination)
					.replace( /\{navbar\}/g, navbar)
					.replace( /\{reload\}/g, reload)
					.replace( /\{-\}/g, sep)
					.replace( /\{first\}/g, first)
					.replace( /\{last\}/g, last)
					.replace( /\{next\}/g, next)
					.replace( /\{prev\}/g, prev)
					.replace( /\{links\}/g, links)
					.replace( /\{totalPage\}/g, totalPage)
					.replace( /\{pginput\}/g, pginput)
					.replace( /\{toolbar\}/g, toolbar)
					.replace( /\{description\}/g, description)
					.replace( /\{rowlist\}/g, rowlist)
					.replace( /\{rninput\}/g, rninput);
				
				$("#"+$.grid.coralID(pgid) ).addClass("coral-pager-tradition");
				$("#"+$.grid.coralID(pgid) )
				.append("<div id='" + paginator + "' class='coral-paginator' role='group'>" +
							pagers +
						"</div>");
				that._bindpagerTradition( pgid, tp );
			} else {
				//TODO: 自定义pager，自定义事件绑定
			}
			
			var pagerOpts = $.parser.parseOptions( $( "#"+$.grid.coralID(pgid) )[0], null);
			that.options.toolbarOptions = pagerOpts.toolbarOptions;
			that.options.description = pagerOpts.description;
			var navbarOptions = that.options.navbarOptions || {};
			pagerOpts.toolbarOptions = pagerOpts.toolbarOptions || {};
			$(".reload-button", that.element ).button({componentCls: "page-item pg"});
			if ( $( ".pager-toolbar", that.element ).length ) {
				$( ".pager-toolbar", that.element ).toolbar( pagerOpts.toolbarOptions );
			}
			if( that.options.description ){
				$( ".pager-description", that.element ).html( that.options.description );
			}
			
		},
		_bindpagerTradition: function( pgid, tp ){
			var that = this;
			// init page input icon
			$( "input.coral-pg-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
				componentCls: "page-item pg",
				onKeyPress: function(e,ui){
					var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
					if (key == 13) {
						var last = that._intNum(that.options.lastpage,1);
						var cp = that._intNum(ui.text,1);					
						if (cp > last) {
							that.options.page = last;
							$(this).textbox("setValue", that.options.page);
						}else{
							that.options.page = (ui.text > 0) ? ui.text : that.options.page;
						}
						if(!that._clearVals('user')) { return false; }
						that._populate();
						return false;
					}
					return this;
				},
				onBlur:function(){
					// 如果输入页数大于总页数，则返回 @lhb @20150507
					var last = that._intNum(that.options.lastpage,1);
					var cp = $(this).textbox("getValue");				
					if (cp !== that.options.page) {
						$(this).textbox("setValue", that.options.page);
					}
				}
			});
			//if( !that.options.rninput ){
				// init rownum input icon
				$( "input.coral-rn-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
					componentCls: "page-item rn",
					onKeyPress: function(e,ui){
						var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
						if(key == 13) {
							that.options.rowNum = (ui.text>0) ? (ui.text < that.options.rowNumMax? ui.text:that.options.rowNumMax):that.options.rowNum;
							if(!that._clearVals('records')) { return false; }
							that._populate();
							return false;
						}
						return this;
					}/*,
					texticons: [{
						icon: "条",
						click: function (e,ui) { 
							that.options.rowNum = (ui.value>0) ? (ui.value<that.options.rowNumMax? ui.value:that.options.rowNumMax):that.options.rowNum;
							if(!that._clearVals('user')) { return false; }
							that._populate();
							return false;
						}
					}]*/
				});
			//} else if ( that.options.rowList.length > 0 ) {
				// init rowlist
				$( ".coral-pg-selbox", $( "#"+$.grid.coralID(pgid) ) ).combobox({
					componentCls: "page-item rn",
					panelHeight:'auto',
					showClose: false,
					panelRenderOnShow: false,//如果全局配panelRenderOnShow为true，selected无效
					onChange:function(event,ui){
						that.options.page = Math.round(that.options.rowNum*(that.options.page-1)/ui.value-0.5)+1;
						that.options.rowNum = ui.value;
						//if(that.options.pager) { $('.coral-pg-selbox',that.options.pager).val(ui.newValue); }
						//if(that.options.toppager) { $('.coral-pg-selbox',that.options.toppager).val(ui.newValue); }
						if(!that._clearVals('records')) { return false; }
						that._populate();
						return false;
					}
				});
			//}
			
			$("#first"+$.grid.coralID(tp)+", #prev"+$.grid.coralID(tp)+", #next"+$.grid.coralID(tp)+", #last"+$.grid.coralID(tp)).click( function() {
				var cp = that._intNum(that.options.page,1),
				last = that._intNum(that.options.lastpage,1), selclick = false,
				fp=true, pp=true, np=true,lp=true;
				if(last ===0 || last===1) {fp=false;pp=false;np=false;lp=false; }
				else if( last>1 && cp >=1) {
					if( cp === 1) { fp=false; pp=false; }
					//else if( cp>1 && cp <last){ }
					else if( cp===last){ np=false;lp=false; }
				} else if( last>1 && cp===0 ) { np=false;lp=false; cp=last-1;}
				if( this.id === 'first'+tp && fp ) { that.options.page=1; selclick=true;}
				if( this.id === 'prev'+tp && pp) { that.options.page=(cp-1); selclick=true;}
				if( this.id === 'next'+tp && np) { that.options.page=(cp+1); selclick=true;}
				if( this.id === 'last'+tp && lp) { that.options.page=last; selclick=true;}
				if(selclick) {
					if(!that._clearVals(this.id)) { return false; }
					that._populate();
				}
				return false;
			});
		},
		_bindpager: function( pgid, tp ){
			var that = this;
			// init page input icon
			$( "input.coral-pg-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
				componentCls: "page-item pg",
				onKeyPress: function(e,ui){
					var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
					if(key == 13) {
						// 如果输入页数大于总页数，则返回 @lhb @20150507
						var last = that._intNum(that.options.lastpage,1);
						var cp = that._intNum(ui.text,1);					
						if (cp > last) {
							that.options.page = last;
							$(this).textbox("setValue", that.options.page);
						}else{
							that.options.page = (ui.text > 0) ? ui.text : that.options.page;
						}
						if(!that._clearVals('user')) { return false; }
						that._populate();
						return false;
					}
					return this;
				},
				onBlur:function(){
					// 如果输入页数大于总页数，则返回 @lhb @20150507
					var last = that._intNum(that.options.lastpage,1);
					var cp = $(this).textbox("getValue");				
					if (cp !== that.options.page) {
						$(this).textbox("setValue", that.options.page);
					}
				}
			/*,
				icons: [{
					icon: "icon-enter4",
					click: function (e,ui) { 
						// 如果输入页数大于总页数，则返回 @lhb @20150507
						var last = that._intNum(that.options.lastpage,1);
						var cp = that._intNum(ui.value,1);					
						if (cp > last) return;
						//
						that.options.page = (ui.value>0) ? ui.value:that.options.page;
						if(!that._clearVals('user')) { return false; }
						that._populate();
						return false;
					}
				}]*/
			});
			//if( !that.options.rninput ){
				// init rownum input icon
				$( "input.coral-rn-input", $( "#"+$.grid.coralID(pgid) ) ).textbox({
					componentCls: "page-item rn",
					onKeyPress: function(e,ui){
						var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
						if(key == 13) {
							that.options.rowNum = (ui.text >0) ? (ui.text < that.options.rowNumMax? ui.text:that.options.rowNumMax):that.options.rowNum;
							if(!that._clearVals('records')) { return false; }
							that._populate();
							return false;
						}
						return this;
					}/*,
					texticons: [{
						icon: "条",
						click: function (e,ui) { 
							that.options.rowNum = (ui.value>0) ? ui.value:that.options.rowNum;
							if(!that._clearVals('user')) { return false; }
							that._populate();
							return false;
						}
					}]*/
				});
			//} else if ( that.options.rowList.length > 0 ) {
				// init rowlist
				$( ".coral-pg-selbox", $( "#"+$.grid.coralID(pgid) ) ).combobox({
					componentCls: "page-item rn",
					panelHeight:'auto',
					showClose: false,
					panelRenderOnShow: false,
					onChange:function(event,ui){
						that.options.page = Math.round(that.options.rowNum*(that.options.page-1)/ui.newValue-0.5)+1;
						that.options.rowNum = ui.newValue;
						//if(that.options.pager) { $('.coral-pg-selbox',that.options.pager).val(ui.newValue); }
						//if(that.options.toppager) { $('.coral-pg-selbox',that.options.toppager).val(ui.newValue); }
						if(!that._clearVals('records')) { return false; }
						that._populate();
						return false;
					}
				});
			//}
			
			// init page input keypress
			$( ".coral-textbox-btn-ico-search", $("#"+$.grid.coralID(pgid)) ).click( function(e) {
				that.options.page = ($(this).prev().val()>0) ? $(this).prev().val():that.options.page;
				if(!that._clearVals('user')) { return false; }
				that._populate();
				return false;
			});
			
			this._off($(".coral-paginator-page"));
			this._on({
				"click.coral-paginator-page" : function(e) {
					var _this = e.target;
					if($(_this).hasClass('coral-state-disabled')) {
						_this.style.cursor='default';
					} else {
						$(_this).addClass('coral-state-hover');
						_this.style.cursor='pointer';
					}
				}
			});
			//this._off($(".coral-paginator-page"));
			this._on({
				"mouseenter.coral-paginator-page" : function(e) {
					var _this = e.target;
					if($(_this).hasClass('coral-state-disabled')) {
						_this.style.cursor='default';
					} else {
						$(_this).addClass('coral-state-hover');
						_this.style.cursor='pointer';
					}
				},
				"mouseleave.coral-paginator-page" : function(e) {
					var _this = e.target;
					if(!$(_this).hasClass('coral-state-disabled')) {
						$(_this).removeClass('coral-state-hover');
						_this.style.cursor= "default";
					}
				}
			});
			
			$("#first"+$.grid.coralID(tp)+", #prev"+$.grid.coralID(tp)+", #next"+$.grid.coralID(tp)+", #last"+$.grid.coralID(tp)).click( function() {
				var cp = that._intNum(that.options.page,1),
				last = that._intNum(that.options.lastpage,1), selclick = false,
				fp=true, pp=true, np=true,lp=true;
				if(last ===0 || last===1) {fp=false;pp=false;np=false;lp=false; }
				else if( last>1 && cp >=1) {
					if( cp === 1) { fp=false; pp=false; }
					//else if( cp>1 && cp <last){ }
					else if( cp===last){ np=false;lp=false; }
				} else if( last>1 && cp===0 ) { np=false;lp=false; cp=last-1;}
				if( this.id === 'first'+tp && fp ) { that.options.page=1; selclick=true;}
				if( this.id === 'prev'+tp && pp) { that.options.page=(cp-1); selclick=true;}
				if( this.id === 'next'+tp && np) { that.options.page=(cp+1); selclick=true;}
				if( this.id === 'last'+tp && lp) { that.options.page=last; selclick=true;}
				if(selclick) {
					if(!that._clearVals(this.id)) { return false; }
					that._populate();
				}
				return false;
			});
		},
		_updatepager: function(rn, dnd) {
			var that = this;
			var cp, last, base, from,to,tot,fmt, pgboxes = "", sppg, topa, totalp,
			tspg = that.options.pager ? "_"+$.grid.coralID(that.options.pager.substr(1)) : "",
			tspg_t = that.options.toppager ? "_"+that.options.toppager.substr(1) : "";
			base = parseInt(that.options.page,10)-1;
			if(base < 0) { base = 0; }
			base = base*parseInt(that.options.rowNum,10);
			to = base + that.options.reccount;
			if ( that.options.scroll ) {
				var rows = $("tbody:first > tr:gt(0)", that.grid.rowsView);
				base = to - rows.length;
				that.options.reccount = rows.length;
				var rh = rows.outerHeight() || that.grid.prevRowHeight;
				if (rh) {
					var top = base * rh;
					var height = parseInt(that.options.records,10) * rh;
					$(">div:first",that.grid.rowsView).css({height : height}).children("div:first").css({height:top,display:top?"":"none"});
				}
				that.grid.rowsView.scrollLeft = that.grid.columnsView.scrollLeft;
			}
			if (that.options.treeGrid) {
				var rows = $("tbody:first > tr:not(.treeGridRow,.jqgfirstrow)", that.grid.rowsView);
				that.options.reccount = rows.length;
				to = base + that.options.reccount;
			}
			//pgboxes = that.options.pager ? that.options.pager : "";
			//pgboxes += that.options.toppager ?  (pgboxes ? "," + that.options.toppager : that.options.toppager) : "";
			pgboxes = $(that.element).find(".coral-grid-pager");
			if( pgboxes.length > 0 ) {
				fmt = $.grid.formatter.integer || {};
				cp = that._intNum(that.options.page);
				last = that._intNum(that.options.lastpage);
				$(".selbox",pgboxes)[ this.options.useProp ? 'prop' : 'attr' ]("disabled",false);
				if ( $('.coral-pg-input',pgboxes).length>0 ) {
					$( '.coral-pg-input',pgboxes ).val(that.options.page);
					sppg = that.options.toppager ? '#sp_1'+tspg+",#sp_1"+tspg_t : '#sp_1'+tspg;
					$(sppg).html($.fmatter ? $.fmatter.util.NumberFormat(that.options.lastpage,fmt):that.options.lastpage);
				}
				if(that.options.rninput===true) {
					$('.coral-rn-input',pgboxes).val(that.options.rowNum);
				}
				/*
				//
				if(that.options.reccount === 0) {
					$(".coral-grid-noRecordsTips").show();
				}			
				//
	*/			if (that.options.viewrecords){
					if(that.options.reccount === 0) {
						$(".coral-paging-info",pgboxes).html("");
						$(".coral-paging-totalpage",pgboxes).html("");
					} else {
						from = base+1;
						tot = that.options.records;
						topa = that.options.reccount;
						if (tot % topa == 0){
							totalp = parseInt(tot/topa);
						} else {
							totalp = parseInt(tot/topa) + 1;
						}
						if ($.fmatter) {
							from = $.fmatter.util.NumberFormat(from,fmt);
							to = $.fmatter.util.NumberFormat(to,fmt);
							tot = $.fmatter.util.NumberFormat(tot,fmt);// 总记录数
							topa = $.fmatter.util.NumberFormat(topa,fmt);// 每页条数
							totalp = $.fmatter.util.NumberFormat(totalp,fmt);
						}
						$(".coral-paging-info",pgboxes).html($.grid.format(that.options.recordtext,from,to,tot));
						$(".coral-paging-totalpage",pgboxes).html($.grid.format(that.options.pagetext,totalp));
					}
				}
				if(that.options.pgbuttons===true ) {
					var pre = [], next = [];
					that.pagers.each(function(){
						pre.push("#first_"+this.id);
						pre.push("#prev_"+this.id);
						next.push("#next_"+this.id);
						next.push("#last_"+this.id);
					});
					if(cp<=0) {cp = last = 0;}
					if(cp==1 || cp === 0) {
						//$("#first"+tspg+", #prev"+tspg).addClass('coral-state-disabled').removeClass('coral-state-hover');
						$(pre.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
						if(that.options.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).addClass('coral-state-disabled').removeClass('coral-state-hover'); }
					} else {
						$(pre.join(",")).removeClass('coral-state-disabled');
						if(that.options.toppager) { $("#first_t"+tspg_t+", #prev_t"+tspg_t).removeClass('coral-state-disabled'); }
					}
					if(cp==last || cp === 0) {
						$(next.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
						if(that.options.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).addClass('coral-state-disabled').removeClass('coral-state-hover'); }
					} else {
						$(next.join(",")).removeClass('coral-state-disabled');
						if(that.options.toppager) { $("#next_t"+tspg_t+", #last_t"+tspg_t).removeClass('coral-state-disabled'); }
					}
					// 如果无数据，则将分页条向右的箭头也禁用
					if (0 == last) {
						$(next.join(",")).addClass('coral-state-disabled').removeClass('coral-state-hover');
					}
				}
				that._paginators();
			}
			if(rn===true && that.options.rownumbers === true) {
				$("td.grid-rownum",that.rows).each(function(i){
					$(this).html(base+1+i);
				});
			}
			if(dnd && that.options.jqgdnd) { $(that.element).grid('gridDnD','updateDnD');}
		//	$( ".pager-toolbar", that.element ).toolbar( "option", "disabled", false );
			that._trigger("onComplete", null, []);
			that._trigger("afterComplete", null, []);
		},
		_paginators: function(){
			var that = this;
			var cp = that._intNum(that.options.page,1), last = that._intNum(that.options.lastpage,1), selclick = false;
			var le = 3, begin = cp>2?cp+2-le:1, end, pages="";
			
			end = le+begin>last?last+1:le+begin;
			if(begin>3&&end<=last+2)begin = end -le;
			
			if(cp>2&&last>le){
				if(begin>=2)
					pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>1</span>";
				if(begin>=3)
					pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>2</span>";
				if(begin!=3&&begin!=1&&begin!=2)
					pages += "<span class='coral-page-pointer'>...</span>";
			}
			
			for(var i=begin;i<end;i++){
				if(cp==i)
					pages += "<span class='coral-paginator-page coral-state-default coral-state-active coral-corner-all'  tabindex='0'>"+i+"</span>";
				else
					pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'  tabindex='0'>"+i+"</span>";
			}
			if(end==last)
				pages += "<span class='coral-paginator-page coral-state-default coral-corner-all'>"+last+"</span>";
			else if(end<=last)
				pages += "<span class='coral-page-pointer'>...</span><span class='coral-paginator-page coral-state-default coral-corner-all'>"+last+"</span>";
			$( ".coral-paginator-pages", that.element ).html( pages );
		},
		_populate: function (npage) {
			var that = this,
				isPicgrid = !!(that.options.model == "card");
			var grid = that.grid;
			if(true) {//上次请求未完成则不能继续
				var pvis = that.options.scroll && npage === false,
				prm = {}, dt, dstr, pN = that.options.prmNames;
				if(that.options.page <=0) { that.options.page = 1; }
				if(pN.search !== null) {prm[pN.search] = that.options.search;} if(pN.nd !== null) {prm[pN.nd] = new Date().getTime();}
				if(pN.rows !== null) {prm[pN.rows]= that.options.rowNum;} if(pN.page !== null) {prm[pN.page]= that.options.page;}
				if(pN.sort !== null) {prm[pN.sort]= that.options.sortname;} if(pN.order !== null) {prm[pN.order]= that.options.sortorder;}
				if(that.options.rowTotal !== null && pN.totalrows !== null) { prm[pN.totalrows]= that.options.rowTotal; }
				//var lcf = $.isFunction(that.options.onload), lc = lcf ? that.options.onload : null;
				var lc = function(req){
					that._trigger("onLoad", null, [ req ]);
					if (that.options.afterSortableRows && $.fn.sortable) {
						try {
							$(that.element).grid("sortableRows");
						} catch (e){}
					}
					if (that.options.onSortableLoad && $.fn.sortable) {
						try {
							var connectItem = [];
							if( that.options.connectGridId == null) {
								connectItem = ("#"+that.element[0].id+" tbody:first");
							} else {
								var connectGridId = that.options.connectGridId.split(",");
								for(var i=0;i<connectGridId.length;i++) {
									var id = connectGridId[i];
									connectItem.push("#"+id+" tbody:first");
								}
								connectItem = connectItem.join(", ");
							}
							$("#" + that.element[0].id).grid("sortableGrid",{connectWith:connectItem});
						} catch (e){}
					}
				};
				var adjust = 0;
				npage = npage || 1;
				if (npage > 1) {
					if(pN.npage !== null) {
						prm[pN.npage] = npage;
						adjust = npage - 1;
						npage = 1;
					} else {
						lc = function(req) {
							that.options.page++;
							grid.columnsView.loading = false;
							/*if (lcf) {
								that.options.onload.call(that,req);
							}*/
							that._trigger("onLoad", null, [ req ]);
							that._populate(npage-1);
						};
					}
				} else if (pN.npage !== null) {
					delete that.options.postData[pN.npage];
				}
				if(that.options.grouping) {
					this.groupingSetup();
					var grp = that.options.groupingView, gi, gs="";
					for(gi=0;gi<grp.groupField.length;gi++) {
						var index = grp.groupField[gi];
						$.each(that.options.colModel, function(cmIndex, cmValue) {
							if (cmValue.name === index && cmValue.index){
								index = cmValue.index;
							}
						} );
						gs += index +" "+grp.groupOrder[gi]+", ";
					}
					prm[pN.sort] = gs + prm[pN.sort];
				}
				// TODO: 如果是多列的时候，需要把sortSeparator拓展进去。
				if ( that.options.containSortOrder && prm[pN.sort] && prm[pN.order]) {
					prm[pN.sort] = prm[pN.sort] + that.options.sortSeparator + prm[pN.order]
				}
				$.extend(that.options.postData,prm);
				var rcnt = !that.options.scroll ? 1 : that.rows.length-1;
				var bfr = that._trigger("beforeRequest", null, [ ]);
				if (bfr === false || bfr === 'stop') { return; }
				if ($.isFunction(that.options.datatype)) { that.options.datatype.call(that,that.options.postData,"load_"+that.options.id); return;}
				/*else if($.isFunction(that.options.beforeRequest)) {
					bfr = that.options.beforeRequest.call(that);
					if(bfr === undefined) { bfr = true; }
					if ( bfr === false ) { return; }
				}*/
				dt = that.options.datatype.toLowerCase();
				if (!(that.options.b_sortdata && that.options.b_sortdata === true) && that.options.orgdatatype) {//modify for custom sort
					dt = that.options.orgdatatype;
					that.options.datatype = dt;
				}
				if (!that.options.remoteFilter && that.isFilterAction) {
					dt = "local";
				}
				if (that.options.localonce) {
					dt = "local";
				}
				if ( that.options.initData ) {
					dt = "initinlocal";
				}
				var success = function ( content, st, xhr ){
					
					//if( that.options.loadonce) {that.options.orgdatatype = dt;}// modify for custom sort
					that.options.orgdatatype = dt;// modify for custom sort
					var dReader, drows;
					if(that.options.orgdatatype == "local") {
						dReader =  that.options.localReader;
					} else {
						dReader =  that.options.jsonReader;
					}
					drows = $.grid.getAccessor(content,dReader.root);
					if( that.options.generalLevel === true || that.options.generalLevel == "true") {
						var data1 = that.transformToTreeFormat(drows);
						that.options.data = that.recurrenceNode(data1);
						that.options.data = that.transformToArrayFormat(that.options.data);
						drows = that.options.data;
					}
					// when initInLocal then st and xhr are undefined
					// 如果当前页没有数据，则刷新到前一页
					if ( !that._trigger("beforeProcessing", null, [{content: content, state: st, xhr: xhr}]) ) {
						that._endReq();
						return;
					} else {
						that._addJSONData(content,grid.rowsView,rcnt,npage>1,adjust);
					}
					if( that.options.loadonce || that.options.treeGrid) {
						that.options.datatype = "local";
						that.options.orgpage = that.options.page; // modify for custom sort
					}
					//$(that.element).loading("refresh");
					if( !isPicgrid ) { that._hasScrollOffset(); }
					if( lc ) { lc.call( that,content ); }
					that._trigger("afterLoad", null, [{content:content}]);
					if ( pvis ) { grid.populateVisible(); }
					if (npage === 1) { that._endReq(); }
					
					if ( drows.length == 0 && 
						parseInt(that.options.page) != 1 &&
						parseInt(that.options.lastpage) < parseInt(that.options.page) ) {
						$(that.element).grid("reload",{page:that.options.lastpage});
					}
					content=null;
					that.refresh();
				}
				/*if ( $( ".pager-toolbar", that.element ).length > 0 ) {
					$( ".pager-toolbar", that.element ).toolbar( "option", "disabled", true );
				}*/
				switch(dt)
				{
				case "initinlocal":
					dt = "json";
					success( that.options.initData, null, null );
					this.options.initData = false;
					break;
				case "json":
				case "jsonp":
					if ( this.xhr ){
						this.xhr.abort();
					}
					this.xhr = $.ajax(this._ajaxSettings( ));
					this.xhr
						.success(function(content, st, xhr) {
							success( content, st, xhr );
						}).error(function(xhr,st,err) {						
							that._trigger ("onLoadError", null, [{xhr:xhr,st:st,err:err}]);
							if (npage === 1) { that._endReq(); }
							xhr=null;
							that.refresh();
						}).complete(function( jqXHR, status ) {
							if ( jqXHR === that.xhr ) {
							    that.xhr = null;
							}
						});
				break;
				case "local":
				case "clientside":
					that._beginReq();
					that.options.datatype = "local";
					var req = that._addLocalData();
					this._addJSONData(req,grid.rowsView,rcnt,npage>1,adjust);
					if(!that.options.b_sortdata){
						that.refresh();
						if(lc) { lc.call(that,req); }
						that._trigger("AfterLoad", null,[req]);
						if (pvis) { grid.populateVisible(); }
					}
					that._endReq();
					if (that.options.frozenColumns) {
						that._setFrozenHeight();
					}
				break;
				}
			}
		},
		_setFrozenHeight : function () {
			var that = this,
			    rowId = "",
			    headHeight = 0,
			    frozenHeight = 0,
			    normalHeight = 0;
			if (this.grid.fhDiv){
				headHeight = this.grid.fhDiv.height();
				this.grid.fbDiv.css("top",headHeight);
				$("tr",that.grid.fbDiv).slice(1).each(function(){
					rowId = $(this).attr("id");
					frozenHeight = parseFloat($('td:first', this).height());
					normalHeight = parseFloat($("#"+rowId,that.gridRows).find('td:first').height());
					if (frozenHeight < normalHeight) {
						$("td",this).each(function(){
							$(this).height(normalHeight);
						})
					}else if (frozenHeight > normalHeight) {
						$("td",$("#"+rowId,that.gridRows)).each(function(){
							$(this).height(frozenHeight);
						})
					}
				})  
			}
			if (this.grid.rightfhDiv){
				headHeight = this.grid.rightfhDiv.height();
				this.grid.rightfbDiv.css("top",headHeight);
				$("tr",that.grid.rightfbDiv).slice(1).each(function(){
					rowId = $(this).attr("id");
					frozenHeight = parseFloat($('td:first', this).height());
					normalHeight = parseFloat($("#"+rowId,that.gridRows).find('td:first').height());
					if (frozenHeight < normalHeight) {
						$("td",this).each(function(){
							$(this).height(normalHeight);
						})
					}else if (frozenHeight > normalHeight) {
						$("td",$("#"+rowId,that.gridRows)).each(function(){
							$(this).height(frozenHeight);
						})
					}
				})
			}
		},
		_ajaxSettings :function(){
			var that = this,
				opts = this.options;
			return $.extend({
				url: opts.url,
				type: opts.asyncType,
				beforeSend: function(xhr, settings ){
					var gotoreq = true;
					gotoreq = that._trigger("beforeSend", null, {xhr:xhr, settings:settings});
					if(gotoreq === undefined) { gotoreq = true; }
					if(gotoreq === false) {
						return false;
					} else {
						that._beginReq();
					}
				},
				data: $.isFunction(opts.serializeGridData)? opts.serializeGridData.call(this,opts.postData) : opts.postData,
				dataType: "json"
			}, $.grid.ajaxOptions, opts.ajaxGridOptions);
		},
		_reader: function (datatype) {
			var that = this;
			var field, f=[], j=0, i;
			for(i =0; i<this.options.colModel.length; i++){
				field = this.options.colModel[i];
				if (field.name !== 'cb' && field.name !=='subgrid' && field.name !=='rn') {
					f[j]= datatype == "local" ?
					field.name :
					( (datatype=="xml" || datatype === "xmlstring") ? field.xmlmap || field.name : field.jsonmap || field.name );
					if(that.options.keyName !== false && field.key===true ) {
						that.options.keyName = f[j];
					}
					j++;
				}
			}
			return f;
		},
		_addMulti: function(rowid,pos,irow,checked){
			var that = this,
				isPicgrid = !!(that.options.model == "card"),
				v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+that.options.id+"_"+rowid+"\" class=\"cbox\" name=\"jqg_"+that.options.id+"_"+rowid+"\"" + (checked ? "checked=\"checked\"" : "")+"/>",
				prp = that._formatCol( pos,irow,'',null, rowid, true);
			if(isPicgrid)return v;
			return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
		},
		_addSingle: function(rowid,pos,irow){
			var that = this,
				isPicgrid = !!(that.options.model == "card"),
				v = "<input role=\"radio\" type=\"radio\""+" id=\"jqg_"+that.options.id+"_"+rowid+"\" class=\"cbox\" name=\"jqg_"+that.options.id+"\"/>",
				prp = that._formatCol( pos,irow,'',null, rowid, true);
			if(isPicgrid)return v;
			return "<td role=\"gridcell\" "+prp+">"+v+"</td>";
		},
		_addRowNum: function (pos,irow,pG,rN) {
			var v =  (parseInt(pG,10)-1)*parseInt(rN,10)+1+irow,
			prp = this._formatCol( pos,irow,v, null, irow, true);
			return "<td role=\"gridcell\" class=\"coral-state-default grid-rownum\" "+prp+">"+v+"</td>";
		},
		_customPanel: function(rd,ni,muti){
			var that = this,
				itemJson = {},
				coreData = "",
				itemData = "",
				toolbarsData = "",
				buttonsData = "";
			
//			if ( typeof( that.options.gridItem ) === "string" ) {
//				that.options.gridItem = window[that.options.gridItem];
//			}
//			if($.isFunction( that.options.gridItem )) {
//				itemJson = that.options.gridItem.call(this, rd);
//			}
			
			//var fun = $.coral.toFunction( that.options.picTemplate );
			
			itemJson = $.coralApply($.coral.toFunction(that.options.picTemplate), that.element[0], [{"rowData":rd,"ni":ni,"muti":muti,"getData":true}]);
			/*if($.isFunction(fun)){
				itemJson = fun.apply(that.element[0],[{"rowData":rd,"ni":ni,"muti":muti,"getData":true}]);
			}*/
			if(typeof(itemJson)=='undefined')return "";
			
			var src = itemJson['src'];
			if(!src)src = "src";
			coreData = itemJson['coreData']||(rd.src ? "<img src='"+rd['src']+"'/>" : "");
			itemData = itemJson['itemData']||"";
			toolbarsData = itemJson['toolbarsData']||"";
			buttonsData = itemJson['buttonsData']||"";
			var ui = []; 
			//ui.push("<div class='rowgridWraper'>");
			ui.push("<ul class='rowgrid coral-component-content coral-corner-all'>");
			if(coreData != ""){
				ui.push("<li class='gridModel1 gridModel'>");
				ui.push(coreData);
				ui.push("<div class='valigh-fix'></div>");
				if(toolbarsData.length>0){
					ui.push("<div class='gridtoolbars'><div class='bgopacity'>&#160;</div>"+toolbarsData+"</div>");
					}
				ui.push("</li>");
			}
			if(itemData.length>0){
				ui.push("<li class='gridModel2 gridModel'>");
				ui.push("<div class='griditem'>"+itemData+"</div>");
				ui.push("</li>");
			}
			if(itemJson.muti && muti.length>0||buttonsData.length>0){
				ui.push("<li class='gridModel3 gridModel'>");
				if(itemData.length>0||buttonsData.length>0){
					ui.push("<ul class='griditem'>");
					if(muti.length>0 && itemJson.muti){
						ui.push("<li class='gridCheckbox'>"+muti+"</li>");
					}
					if(buttonsData.length>0){
						ui.push("<li class='gridbuttons'>"+buttonsData+"</li>");
					}
				ui.push("</ul>");
				}
			ui.push("</li>");
			}
			ui.push("</ul>");
			//ui.push("</div>");
			
			return ui.join("");
			
		},
		_addJSONData: function(data,t, rcnt, more, adjust) {
			var that = this,
				isPicgrid = !!(that.options.model == "card");
			var startReq = new Date();
			if(data) {
				if(that.options.treeANode === -1 && !that.options.scroll) {
					that.emptyRows(t,false, true);
					rcnt=1;
				} else { rcnt = rcnt > 1 ? rcnt :1; }
			} else { return; }

			var dReader, locid = "_id_", frd,
			locdata = (that.options.datatype != "local" && that.options.loadonce) || that.options.datatype == "jsonstring";
			if(locdata) { that.options.data = []; that.options._index = {}; that.options.localReader.id = locid;}
			that.options.reccount = 0;
			if(that.options.datatype == "local") {
				dReader =  that.options.localReader;
				frd= 'local';
			} else {
				dReader =  that.options.jsonReader;
				frd='json';
			}
			var self = this,ir=0,v,i,j,f=[],F,cur,gi=that.options.multiselect?1:0,si=that.options.subGrid?1:0,
				ni=that.options.rownumbers===true?1:0,len,drows,idn,rd={}, fpos, idr,
				rowData=[],orgRowData=[],buttonsData=[],
				cn=(that.options.altRows === true) ? " "+that.options.altclass:"",cn1,lp;
			if(gi==0){//multi 优先
				gi=that.options.singleselect?1:0;
			}
			that.options.page = $.grid.getAccessor(data,dReader.page) || 0;
			lp = $.grid.getAccessor(data,dReader.total);
			that.options.lastpage = lp === undefined ? 1 : lp;
			that.options.records = $.grid.getAccessor(data,dReader.records) || 0;
			that.options.total = $.grid.getAccessor(data,dReader.total) || 0;
			that.options.userData = $.grid.getAccessor(data,dReader.userData) || {};
			if(!dReader.repeatitems) {
				F = f = that._reader(frd);
			}
			if( that.options.keyName===false ) {
				idn = $.isFunction(dReader.id) ? dReader.id.call(that, data) : dReader.id; 
			} else {
				idn = that.options.keyName;
			}
			if(f.length>0 && !isNaN(idn)) {
				if (that.options.remapColumns && that.options.remapColumns.length) {
					idn = $.inArray(idn, that.options.remapColumns);
				}
				idn=f[idn];
			}
			drows = $.grid.getAccessor(data,dReader.root);
			if (!drows) { drows = []; }
			len = drows.length; i=0;
			if (len > 0 && that.options.page <= 0) { that.options.page = 1; }
			var rn = parseInt(that.options.rowNum,10),br=that.options.scroll?$.grid.randId():1, altr, selected=false, selr;
			if (adjust) { rn *= adjust+1; }
			if(that.options.datatype === "local" && !that.options.deselectAfterSort) {
				selected = true;
			}
			var afterInsRow = $.isFunction(that.options.afterInsertRow), grpdata=[], hiderow=false,groupingPrepare;
			if(that.options.grouping)  {
				hiderow = that.options.groupingView.groupCollapse === true;
				//groupingPrepare = $.grid.getMethod("groupingPrepare");
				groupingPrepare = this.groupingPrepare;
			}
			while (i<len) {
				cur = drows[i];
				idr = $.grid.getAccessor(cur,idn);// 行id
				if(idr === undefined) {
					idr = br+i;
					if(f.length===0){
						if(dReader.cell){
							var ccur = $.grid.getAccessor(cur,dReader.cell);
							idr = ccur !== undefined ? ccur[idn] || idr : idr;
							ccur=null;
						}
					}
				}
				idr  = that.options.idPrefix + idr;
				altr = rcnt === 1 ? 0 : rcnt;
				cn1 = (altr+i)%2 == 1 ? cn : '';
				if (selected) {
					if (that.options.multiselect) {
						selr = ($.inArray(idr, that.options.selarrrow) !== -1);
					} else {
						selr = (idr === that.options.selrow);
					}
				}
				var iStartTrTag = rowData.length;
				var iStartPicTag = orgRowData.length;
				
				rowData.push("");
				if( ni ) {// ni为行号
					rowData.push( that._addRowNum(0,i,that.options.page,that.options.rowNum) );
				//	orgRowData.push("rowNum");
				}
				if( gi ){//如果是多选
					if(that.options.singleselect){
						rowData.push( that._addSingle(idr,ni,i,selr) );
						buttonsData.push( that._addSingle(idr,ni,i,selr) );
					}else{
						rowData.push( that._addMulti(idr,ni,i,selr) );
						buttonsData.push( that._addMulti(idr,ni,i,selr) );
					}
				}
				if( si ) {
					rowData.push( $(that.element).grid("addSubGridCell",gi+ni,i+rcnt) );
					//orgRowData.push("SubGrid");
				}
				if (dReader.repeatitems) {
					if(dReader.cell) {cur = $.grid.getAccessor(cur,dReader.cell);}
					if (!F) { F=this._orderedCols(gi+si+ni); }
				}
				for (j=0;j<F.length;j++) {
					v = $.grid.getAccessor(cur,F[j]);
					rd[that.options.colModel[j+gi+si+ni].name] = v;
					rowData.push( this._addCell(idr,v,j+gi+si+ni,i+rcnt,cur, rd) );
				}
				if(that.options.model == "card"){
					orgRowData[iStartTrTag] = that.constructPanel(idr, hiderow, cn1, rd, cur);
					orgRowData.push(that._customPanel(rd,ni,buttonsData));
					orgRowData.push( "</li>" );
				}else{
					rowData[iStartTrTag] = that.constructTr(idr, hiderow, cn1, rd, cur, selr);
					rowData.push( "</tr>" );
				}
				
				if(that.options.grouping) {
					grpdata.push( rowData );
					if(!that.options.groupingView._locgr) {
						groupingPrepare.call(self, rd, i);
					}
					rowData = [];
				}
				if(locdata || that.options.treeGrid===true) {
					rd[locid] = idr;
					that.options.data.push(rd);
					that.options._index[idr] = that.options.data.length-1;
				}
				if(that.options.gridview === false ) {//一次构造一行
					//var customRowData = [];
					if(isPicgrid){
					//	$("#"+$.grid.coralID(that.options.id)+" .coral-pic").append(rowData.join(''));
						$("#"+$.grid.coralID(that.options.id)+" .coral-pic").append(orgRowData.join(''));
					}else{
						$("#"+$.grid.coralID(that.options.id)+" .coral-grid-btable tbody:first").append(rowData.join(''));
					}
					$(that).triggerHandler("gridAfterInsertRow", [idr, rd, cur]);
					if(afterInsRow) {that.options.afterInsertRow.call(that,idr,rd,cur);}
					rowData=[];//ari=0;
					orgRowData=[];
					buttonsData=[];
				}
				rd={};
				ir++;
				i++;
				if(ir==rn) { break; }
			}
			if(that.options.gridview === true ) {//一次全部构造
				fpos = that.options.treeANode > -1 ? that.options.treeANode: 0;
				if(that.options.grouping) {
					if(!locdata) {
						this.groupingRender(grpdata, that.options.colModel.length, that.options.page, rn);
						grpdata = null;
					}f
				} else if(that.options.treeGrid === true && fpos > 0) {
					$(that.rows[fpos]).after(rowData.join(''));
				} else if (that.options.filterToolbar) {
					$("#"+$.grid.coralID(that.options.id+"_table")+" tbody:first").append(rowData.join(''));
				} else {
					$("#"+$.grid.coralID(that.options.id)+" tbody:first").append(rowData.join(''));
				}
			}
			$.fn.afterFmatter.call(that);
			if(that.options.subGrid === true ) {
				try { $(that.element).grid("addSubGrid",gi+ni);} catch (_){}
			}
			that.options.totaltime = new Date() - startReq;
			if(ir>0) {
				if(that.options.records===0) { that.options.records=len; }
			}
			rowData = null;
			if( that.options.treeGrid === true) {
				try {$(that.element).grid("setTreeNode", fpos+1, ir+fpos+1);} catch (e) {}
			}
			if(!that.options.treeGrid && !that.options.scroll&&!isPicgrid) {that.grid.rowsView.scrollTop = 0;}
			that.options.reccount=ir;
			that.options.treeANode = -1;
			if(that.options.userDataOnFooter) { $(that.element).grid("footerData", that.options.userData,true); }
			if(locdata && !that.options.orgdatatype){//modify for custom sort
				that.options.records = len;
				that.options.lastpage = Math.ceil(len/ rn);
			}
			if (!more) { that._updatepager(false,true); }
			if(locdata) {
				while (ir<len && drows[ir]) {
					cur = drows[ir];
					idr = $.grid.getAccessor(cur,idn);
					if(idr === undefined) {
						idr = br+ir;
						if(f.length===0){
							if(dReader.cell){
								var ccur2 = $.grid.getAccessor(cur,dReader.cell);
								idr = ccur2[idn] || idr;
								ccur2=null;
							}
						}
					}
					if(cur) {
						idr  = that.options.idPrefix + idr;
						if (dReader.repeatitems) {
							if(dReader.cell) {cur = $.grid.getAccessor(cur,dReader.cell);}
							if (!F) { F=that._orderedCols(gi+si+ni); }
						}

						for (j=0;j<F.length;j++) {
							v = $.grid.getAccessor(cur,F[j]);
							rd[that.options.colModel[j+gi+si+ni].name] = v;
						}
						rd[locid] = idr;
						if(that.options.grouping) {
							groupingPrepare.call(self, rd, ir );
						}
						that.options.data.push(rd);
						that.options._index[idr] = that.options.data.length-1;
						rd = {};
					}
					ir++;
				}
				if(that.options.grouping) {
					//that.options.groupingView._locgr = true;
					this.groupingRender(grpdata, that.options.colModel.length, that.options.page, rn);
					grpdata = null;
				}
			}
		},
		_addLocalData: function() {
			var that = this;
			var st, fndsort=false, cmtypes={}, grtypes=[], grindexes=[], srcformat, sorttype, newformat;
			if(!$.isArray(that.options.data)) {
				return;
			}
			var grpview = that.options.grouping ? that.options.groupingView : false,lengrp, gin;
			$.each(that.options.colModel,function(){
				sorttype = this.sorttype || "text";
				if(sorttype == "date" || sorttype == "datetime") {
					if(this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date') {
						if(this.formatoptions && this.formatoptions.srcformat) {
							srcformat = this.formatoptions.srcformat;
						} else {
							srcformat = $.grid.formatter.date.srcformat;
						}
						if(this.formatoptions && this.formatoptions.newformat) {
							newformat = this.formatoptions.newformat;
						} else {
							newformat = $.grid.formatter.date.newformat;
						}
					} else {
						srcformat = newformat = this.datefmt || "Y-m-d";
					}
					cmtypes[this.name] = {"stype": sorttype, "srcfmt": srcformat,"newfmt":newformat};
				} else {
					cmtypes[this.name] = {"stype": sorttype, "srcfmt":'',"newfmt":''};
				}
				if(that.options.grouping) {
					for(gin =0, lengrp = grpview.groupField.length; gin< lengrp; gin++) {
						if( this.name === grpview.groupField[gin]) {
							var grindex = this.name;
							if (this.index) {
								grindex = this.index;
							}
							grtypes[gin] = cmtypes[grindex];
							grindexes[gin]= grindex;
						}
					}
				}
				if(!fndsort && (this.index == that.options.sortname || this.name == that.options.sortname)){
					st = this.name; // ???
					fndsort = true;
				}
			});
			if(that.options.treeGrid) {
				$(that.element).grid("sortTree", st, that.options.sortorder, cmtypes[st].stype, cmtypes[st].srcfmt);
				return;
			}
			var compareFnMap = {
				'eq':function(queryObj) {return queryObj.equals;},
				'ne':function(queryObj) {return queryObj.notEquals;},
				'lt':function(queryObj) {return queryObj.less;},
				'le':function(queryObj) {return queryObj.lessOrEquals;},
				'gt':function(queryObj) {return queryObj.greater;},
				'ge':function(queryObj) {return queryObj.greaterOrEquals;},
				'cn':function(queryObj) {return queryObj.contains;},
				'nc':function(queryObj,op) {return op === "OR" ? queryObj.orNot().contains : queryObj.andNot().contains;},
				'bw':function(queryObj) {return queryObj.startsWith;},
				'bn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().startsWith : queryObj.andNot().startsWith;},
				'en':function(queryObj,op) {return op === "OR" ? queryObj.orNot().endsWith : queryObj.andNot().endsWith;},
				'ew':function(queryObj) {return queryObj.endsWith;},
				'ni':function(queryObj,op) {return op === "OR" ? queryObj.orNot().equals : queryObj.andNot().equals;},
				'in':function(queryObj) {return queryObj.equals;},
				'nu':function(queryObj) {return queryObj.isNull;},
				'nn':function(queryObj,op) {return op === "OR" ? queryObj.orNot().isNull : queryObj.andNot().isNull;}

			},
			query = $.grid.from(that.options.data);
			if (that.options.ignoreCase) { query = query.ignoreCase(); }
			function tojLinq ( group ) {
				var s = 0, index, gor, ror, opr, rule;
				if (group.groups !== undefined) {
					gor = group.groups.length && group.groupOp.toString().toUpperCase() === "OR";
					if (gor) {
						query.orBegin();
					}
					for (index = 0; index < group.groups.length; index++) {
						if (s > 0 && gor) {
							query.or();
						}
						try {
							tojLinq(group.groups[index]);
						} catch (e) {alert(e);}
						s++;
					}
					if (gor) {
						query.orEnd();
					}
				}
				if (group.rules !== undefined) {
					if(s>0) {
						var result = query.select();
						query = $.grid.from( result);
						if (that.options.ignoreCase) { query = query.ignoreCase(); } 
					}
					try{
						ror = group.rules.length && group.groupOp.toString().toUpperCase() === "OR";
						if (ror) {
							query.orBegin();
						}
						for (index = 0; index < group.rules.length; index++) {
							rule = group.rules[index];
							opr = group.groupOp.toString().toUpperCase();
							if (compareFnMap[rule.op] && rule.field ) {
								if(s > 0 && opr && opr === "OR") {
									query = query.or();
								}
								query = compareFnMap[rule.op](query, opr)(rule.field, rule.data, cmtypes[rule.field]);
							}
							s++;
						}
						if (ror) {
							query.orEnd();
						}
					} catch (g) {alert(g);}
				}
			}

			if (that.options.search === true) {
				var srules = that.options.postData.filters;
				if(srules) {
					if(typeof srules == "string") { srules = $.grid.parse(srules);}
					tojLinq( srules );
				} else {
					try {
						query = compareFnMap[that.options.postData.searchOper](query)(that.options.postData.searchField, that.options.postData.searchString,cmtypes[that.options.postData.searchField]);
					} catch (se){}
				}
			}
			if(that.options.grouping) {
				for(gin=0; gin<lengrp;gin++) {
					query.orderBy(grindexes[gin],grpview.groupOrder[gin],grtypes[gin].stype, grtypes[gin].srcfmt);
				}
			}
			if (st && that.options.sortorder && fndsort && that.options.sortname) {//如果没有指定sortname，使用默认的顺序
				if(that.options.sortorder.toUpperCase() == "DESC") {
					query.orderBy(that.options.sortname, "d", cmtypes[st].stype, cmtypes[st].srcfmt);
				} else {
					query.orderBy(that.options.sortname, "a", cmtypes[st].stype, cmtypes[st].srcfmt);
				}
			}
			
			var queryResults = query.select(), 
				ret = that._trigger("afterFilter",null,[{"queryResults":query.select(),"getData":true}])['result'];
			
			
			if(ret)queryResults = ret;
			var recordsperpage = parseInt(that.options.rowNum,10),
			total = queryResults.length,
			page = parseInt(that.options.page,10),
			totalpages = Math.ceil(total / recordsperpage),
			retresult = {};
			if((that.options.search || that.options.resetsearch) && that.options.grouping && that.options.groupingView._locgr) {
				that.options.groupingView.groups =[];
				var j, grPrepare = that.groupingPrepare, key, udc;
				if(that.options.footerrow && that.options.userDataOnFooter) {
					for (key in that.options.userData) {
						if(that.options.userData.hasOwnProperty(key)) {
							that.options.userData[key] = 0;
						}
					}
					udc = true;
				}
				for(j=0; j<total; j++) {
					if(udc) {
						for(key in that.options.userData){
							that.options.userData[key] += parseFloat(queryResults[j][key] || 0);
						}
					}
					grPrepare.call($(this),queryResults[j],j, recordsperpage );
				}
			}
			if ( that.options.rowNum == -1) {
				queryResults = queryResults.slice( (page-1)*recordsperpage , page*total );
			} else {
				queryResults = queryResults.slice( (page-1)*recordsperpage , page*recordsperpage );
			}
			query = null;
			cmtypes = null;
			if (that.options.orgdatatype) {//modify for custom sort
				retresult[that.options.localReader.total] = that.options.lastpage;
				retresult[that.options.localReader.page] = that.options.orgpage;
				retresult[that.options.localReader.records] = that.options.records;
			} else {
				retresult[that.options.localReader.total] = totalpages;
				retresult[that.options.localReader.page] = page;
				retresult[that.options.localReader.records] = total;
			}
			retresult[that.options.localReader.root] = queryResults;
			retresult[that.options.localReader.userData] = that.options.userData;
			queryResults = null;
			return  retresult;
		},
		getColProp : function(colname){
			var ret ={}, that = this;
			if ( !that.grid ) { return false; }
			var cM = that.options.colModel;
			for ( var i =0;i<cM.length;i++ ) {
				if ( cM[i].name == colname ) {
					ret = cM[i];
					break;
				}
			}
			return ret;
		},
		transTempData: function(obj) {
			var textField,
				valueField;
			function convtree(node, opts){
				for ( var j=0; j<node.length; j++ ) {
					if ( node[j].children ) {
						convtree(node[j].children, opts);
					}
					opts.tempData[node[j].id] = node[j];
				}
			}
			
			if (obj.editoptions && obj.editoptions.data && obj.editoptions.dataStructure === "tree") {
				obj.editoptions.tempData = {};
				textField = obj.editoptions.textField || "name";
				valueField = obj.editoptions.valueField || "id";
				convtree(obj.editoptions.data, obj.editoptions);
			}
			if (obj.formatoptions && obj.formatoptions.data && obj.formatoptions.dataStructure === "tree") {
				obj.formatoptions.tempData = {};
				textField = obj.formatoptions.textField || "name";
				valueField = obj.formatoptions.valueField || "id";
				convtree(obj.formatoptions.data, obj.formatoptions);
			} 
			if (obj.formatoptions && obj.formatoptions.data && obj.formatoptions.dataStructure !== "tree") {
				obj.formatoptions.tempData = {};
				textField = obj.formatoptions.textField || "text";
				valueField = obj.formatoptions.valueField || "value";
				for(var k =0; k< obj.formatoptions.data.length;k++){
					obj.formatoptions.tempData[obj.formatoptions.data[k][valueField]] = obj.formatoptions.data[k];
				}
			}
			if (obj.editoptions && obj.editoptions.data && obj.editoptions.dataStructure !== "tree") {
				obj.editoptions.tempData = {};
				textField = obj.editoptions.textField || "text";
				valueField = obj.editoptions.valueField || "value";
				for(var k =0; k< obj.editoptions.data.length;k++){
					obj.editoptions.tempData[obj.editoptions.data[k][valueField]] = obj.editoptions.data[k];
				}
			}
			return obj;
		},
		setColProp : function(colname, obj){
			//do not set width will not work
			obj = this.transTempData(obj);
			if ( this.grid ) {
				if ( obj ) {
					var cM = this.options.colModel;
					for ( var i =0;i<cM.length;i++ ) {
						if ( cM[i].name == colname ) {
							$.extend(this.options.colModel[i],obj);
							break;
						}
					}
				}
			}
		},
		destroyGroupHeader: function(nullHeader){
			if(typeof(nullHeader) == 'undefined') {
				nullHeader = true;
			}
			var that = this, $tr, i, l, headers, $th, $resizing, grid = that.grid,
			thead = $("table.coral-grid-htable thead", grid.columnsView), cm = that.options.colModel, hc;
			if(!grid) { return; }

			$(this.element).unbind('.setGroupHeaders');
			$tr = $("<tr>", {role: "rowheader"}).addClass("coral-grid-labels");
			headers = grid.headers;
			for (i = 0, l = headers.length; i < l; i++) {
				hc = cm[i].hidden ? "none" : "";
				$th = $(headers[i].el)
					.width(headers[i].width)
					.css('display',hc);
				try {
					$th.removeAttr("rowSpan");
				} catch (rs) {
					//IE 6/7
					$th.attr("rowSpan",1);
				}
				$tr.append($th);
				$resizing = $th.children("span.coral-grid-resize");
				if ($resizing.length>0) {// resizable column
					$resizing[0].style.height = "";
				}
				$th.children("div")[0].style.top = "";
			}
			$(thead).children('tr.coral-grid-labels').remove();
			$(thead).prepend($tr);

			if(nullHeader === true) {
				$(that.element).grid('option',{ 'groupHeader': null});
			}
		},
		setGroupHeaders: function ( o ) {
			o = $.extend({
				useColSpanStyle :  false,
				groupHeaders: []
			},o  || {});
			/*return this.each(function(){*/
			this.options.groupHeader = o;
			var that = this,
			i, cmi, skip = 0, $tr, $colHeader, th, $th, thStyle,
			iCol,
			cghi,
			//startColumnName,
			numberOfColumns,
			titleText,
			cVisibleColumns,
			colModel = that.options.colModel,
			cml = colModel.length,
			ths = that.grid.headers,
			$htable = $("table.coral-grid-htable", that.grid.columnsView),
			$trLabels = $htable.children("thead").children("tr.coral-grid-labels:last").addClass("jqg-second-row-header"),
			$thead = $htable.children("thead"),
			$theadInTable,
			$firstHeaderRow = $htable.find(".jqg-first-row-header");
			if($firstHeaderRow[0] === undefined) {
				$firstHeaderRow = $('<tr>', {role: "row", "aria-hidden": "true"}).addClass("jqg-first-row-header").css("height", "auto");
			} else {
				$firstHeaderRow.empty();
			}
			var $firstRow,
			inColumnHeader = function (text, columnHeaders) {
				var i = 0, length = columnHeaders.length;
				for (; i < length; i++) {
					if (columnHeaders[i].startColumnName === text) {
						return i;
					}
				}
				return -1;
			};
			
			that.element.find(".coral-grid-columns-view>table").prepend($thead);
			$tr = $('<tr>', {role: "rowheader"}).addClass("coral-gird-labels jqg-third-row-header");
			for (i = 0; i < cml; i++) {
				th = ths[i].el;
				$th = $(th);
				cmi = colModel[i];
				// build the next cell for the first header row
				thStyle = { height: '0px', width: ths[i].width + 'px', display: (cmi.hidden ? 'none' : '')};
				$("<th>", {role: 'gridcell'}).css(thStyle).addClass("coral-first-th-"+that.options.direction).appendTo($firstHeaderRow);

				th.style.width = ""; // remove unneeded style
				iCol = inColumnHeader(cmi.name, o.groupHeaders);
				if (iCol >= 0) {
					cghi = o.groupHeaders[iCol];
					numberOfColumns = cghi.numberOfColumns;
					titleText = cghi.titleText;

					// caclulate the number of visible columns from the next numberOfColumns columns
					for (cVisibleColumns = 0, iCol = 0; iCol < numberOfColumns && (i + iCol < cml); iCol++) {
						if (!colModel[i + iCol].hidden) {
							cVisibleColumns++;
						}
					}

					// The next numberOfColumns headers will be moved in the next row
					// in the current row will be placed the new column header with the titleText.
					// The text will be over the cVisibleColumns columns
					$colHeader = $('<th>').attr({role: "columnheader"})
						.addClass("coral-state-default coral-th-column-header coral-th-"+that.options.direction)
						.css({/*'height':'22px', */'border-top': '0px none'})
						.html(titleText);
					if(cVisibleColumns > 0) {
						$colHeader.attr("colspan", String(cVisibleColumns));
					}
					if (that.options.headertitles) {
						$colHeader.attr("title", $colHeader.text());
					}
					// hide if not a visible cols
					if( cVisibleColumns === 0) {
						$colHeader.hide();
					}

					$th.before($colHeader); // insert new column header before the current
					$tr.append(th);         // move the current header in the next row

					// set the coumter of headers which will be moved in the next row
					skip = numberOfColumns - 1;
				} else {
					if (skip === 0) {
						if (o.useColSpanStyle) {
							// expand the header height to two rows
							$th.attr("rowspan", "2");
						} else {
							$('<th>', {role: "columnheader"})
								.addClass("coral-state-default coral-th-column-header coral-th-"+that.options.direction)
								.css({"display": cmi.hidden ? 'none' : '', 'border-top': '0px none'})
								.insertBefore($th);
							$tr.append(th);
						}
					} else {
						// move the header to the next row
						//$th.css({"padding-top": "2px", height: "19px"});
						$tr.append(th);
						skip--;
					}
				}
			}
			$theadInTable = $(that.element).find(".coral-grid-htable").children("thead");
			$theadInTable.prepend($firstHeaderRow);
			$tr.insertAfter($trLabels);
			$htable.append($theadInTable);

			if (o.useColSpanStyle) {
				// Increase the height of resizing span of visible headers
				$htable.find("span.coral-gird-resize").each(function () {
					var $parent = $(this).parent();
					if ($parent.is(":visible")) {
						this.style.cssText = 'height: ' + $parent.height() + 'px !important; cursor: col-resize;';
					}
				});

				// Set position of the sortable div (the main lable)
				// with the column header text to the middle of the cell.
				// One should not do this for hidden headers.
				$htable.find("div.coral-gird-sortable").each(function () {
					var $that = $(this), $parent = $that.parent();
					if ($parent.is(":visible") && $parent.is(":has(span.coral-gird-resize)")) {
						$that.css('top', ($parent.height() - $that.outerHeight()) / 2 + 'px');
					}
				});
			}

			$firstRow = $theadInTable.find("tr.jqg-first-row-header");
			$(that.element).bind('gridonresizestop.setGroupHeaders', function (e, nw, idx) {
				$firstRow.find('th').eq(idx).width(nw);
			});
			/*});	*/
		},
		getGridParam : function(pName) {
			var that = this;
			if (!that || !that.grid) {return;}
			if (!pName) { return that.p; }
			else {return typeof(that.options[pName]) != "undefined" ? that.options[pName] : null;}
		},
		setGridParam : function (newParams){
			//return this.each(function(){
				if (this.grid && typeof(newParams) === 'object') {$.extend(true,this.options,newParams);}
			//});
		},
		_setOption: function(key, value) {
			var that = this,
				options = this.options;
			if (this.grid) {$.extend(true,options[key],value);}
			if(key=="height"){
				that._setGridHeight(value);
				that._hasScrollOffset();
			}
			
			if(key=="width"){
				that._setGridWidth(value);
				that._hasScrollOffset();
			}
			if(key=="model"){
				if(value == "grid"){
					that.pic.hide();
					that.gridRows.show();
					that.gridColumns.show();
				}else if(value == "card"){
					that.gridRows.hide();
					that.gridColumns.hide();
					that.pic.show();
				}
			}
			if (key=="datatype") {
				this.options.orgdatatype = value;
			}
			
			this._super(key, value );
		},
		// 改变列表高度的时候判断是否应该为滚动条留出位置
		_hasScrollOffset: function(){
			var that = this,
				grid = this.grid;
			if(grid.rowsView.style.overflow!="hidden"&&grid.rowsView.scroll!="no"&&
					grid.rowsView.scrollHeight>grid.rowsView.offsetHeight){
				$(grid.columnsView).css("padding-right", that.options.scrollOffset+"px");
				return true;
			}else { 
				$(grid.columnsView).css("padding-right","");
				$(grid.rowsView).css("padding-right","");
				return false;
			}
		},
		_hasHorizontalScrollBar: function(){
			var that = this,
				grid = this.grid;
			var fw = that.rightFrozenWidth;
			if(grid.rowsView.style.overflow!="hidden"&&grid.rowsView.scroll!="no"&&
					(grid.rowsView.scrollWidth - grid.rowsView.clientWidth)>0){
				return true;
			}else { 
				return false;
			}
		},
		_setGridWidth : function(nwidth, shrink) {
			// 如果在beforePopulate里面设置了显示隐藏列，那么this.rows还没有生成，宽度统一由grid初始化后去处理。
			if ( !this.grid || nwidth == 0 || !this.rows ) {return;}
			var that = this, 
				grid = this.grid,
				cw,// column width
				initwidth = 0, 
				brd=$.support.boxSizing? 0: that.options.cellLayout, 
				//brd=$.browser.webkit||$.browser.safari? 0: that.options.cellLayout, 
				lvc, // the last number of visible column
				vc=0, // the number of visible column
				hs=false, // has scroll
				scw=that.options.scrollOffset,  // scrollbar width
				aw, // actual width
				gw=0,// grid width
				cl = 0,// the length of column (include the checkbox column and rownumber column)
				cr;
			if(typeof shrink != 'boolean') {
				shrink=that.options.shrinkToFit;
			}
			if(isNaN(nwidth)) {return;}
			else { nwidth = parseInt(nwidth,10); that.grid.width = that.options.width = nwidth;}
			/*if(that.options.pager ) {$(that.options.pager).css("width",nwidth+"px");}
			if(that.options.toppager ) {$(that.options.toppager).css("width",nwidth+"px");}
			if(that.options.toolbar[0] === true){
				$(that.grid.uDiv).css("width",nwidth+"px");
				if(that.options.toolbar[1]=="both") {$(that.grid.ubDiv).css("width",nwidth+"px");}
			}*/
			if(that.options.footerrow) { $(that.grid.sDiv).css("width",nwidth+"px"); }
			if(shrink ===false && that.options.forceFit === true) {that.options.forceFit=false;}
			$.each(that.options.colModel, function() {
				if((this.hidden === false||typeof(this.hidden)=='undefined')){
					cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
					initwidth += cw+brd;
					if(this.fixed) {
						gw += cw+brd;
					} else {
						vc++;
					}
					cl++;
				}
			});
			var useMinWidth = false;
			if ( that.options.minWidth && initwidth > $(that.element).width() ) {
				useMinWidth = true;
			}
			if(shrink===true || useMinWidth) {
				//if ( useMinWidth ) {
					if(vc  === 0) { return; }
					that.options.tblwidth = initwidth;
					aw = nwidth-brd*vc-gw;
					if(!isNaN(that.options.height)) {
						if($(that.grid.rowsView)[0].clientHeight < $(that.grid.rowsView)[0].scrollHeight || that.rows.length === 1){
							hs = true;
							aw -= scw;
						}
					}
					initwidth =0;
					var cle = that.grid.cols.length >0;
					$.each(that.options.colModel, function(i) {
						if((this.hidden === false||typeof(this.hidden)=='undefined') && !this.fixed){
							cw = this.widthOrg? this.widthOrg: parseInt(this.width,10);
							// 如果设置了最小宽度后，则不进行缩放，cw 按照widthOrg来计算
							if ( !useMinWidth ) {
								// 缩放计算公式
								cw = Math.round(aw*cw/(that.options.tblwidth-brd*vc-gw));
							}
							if (cw < 0) { return; }
							this.width =cw;
							initwidth += cw;
							that.grid.headers[i].width=cw;
							that.grid.headers[i].el.style.width=cw+"px";
							//处理分组的时候列头的宽度
							var groupHeader = $("tr.jqg-first-row-header>th:eq("+i+")", $('table:first',that.grid.columnsView));
							if(groupHeader.length>0){groupHeader[0].style.width = cw+"px";}
							
							if(that.options.footerrow) { that.grid.footers[i].style.width = cw+"px"; }
							if(cle) { that.grid.cols[i].style.width = (cw)+"px"; }
							lvc = i;
						}
					});
					
					if (!lvc) { return; }
					
					cr =0;
					// 设置最后一列的列模型宽度
					if ( !useMinWidth ) {
						if (hs) {
							if(nwidth-gw-(initwidth+brd*vc) !== scw){
								cr = nwidth-gw-(initwidth+brd*vc)-scw;
							}
						} else if( Math.abs(nwidth-gw-(initwidth+brd*vc)) !== 1) {
							cr = nwidth-gw-(initwidth+brd*vc);
						}
						that.options.colModel[lvc].width += (cr - 1);//add for chrome
					} else {
						cr = that.options.colModel[lvc].width;
					}
					that.options.tblwidth = initwidth+cr+brd*vc+gw;
					if(that.options.tblwidth > nwidth) {
						var delta = that.options.tblwidth - parseInt(nwidth,10);
						that.options.tblwidth = nwidth;
						cw = that.options.colModel[lvc].width = that.options.colModel[lvc].width-delta;
					} else {
						cw= that.options.colModel[lvc].width;
					}
					that.grid.headers[lvc].width = cw;
					that.grid.headers[lvc].el.style.width=cw+"px";
					if(cle) { that.grid.cols[lvc].style.width = cw+"px"; }
					if(that.options.footerrow) {
						that.grid.footers[lvc].style.width = cw+"px";
					}
				//}
			}
			$(grid.rowsView).width(nwidth);
			$(grid.columnsView).width(nwidth);
			if(that.options.tblwidth) {
				$('table:first',grid.rowsView).css("width",that.options.tblwidth+"px");//设置表格行宽度
				$('table:first',grid.columnsView).css("width",that.options.tblwidth+"px");//设置表格列宽度
				that.grid.columnsView.scrollLeft = that.grid.rowsView.scrollLeft;
				if(that.options.footerrow) {
					$('table:first',that.grid.sDiv).css("width",that.options.tblwidth+"px");
				}
			}
		},
		_setGridHeight : function (nh) {
			var that = this,
				grid= that.grid,
				isPicgrid = !!(that.options.model == "card");
			if(!that.grid) {return;}
			var rowsView = $(that.grid.rowsView);
			//rowsView.css({height: nh+(isNaN(nh)?"":"px")});
			if(that.options.frozenColumns === true){
				//follow the original set height to use 16, better scrollbar width detection
				$('#'+$.grid.coralID(that.options.id)+"_frozen").parent().height(rowsView.height() - 16);
			}
			// 设置表格高度
			var tblHeight = "auto";
			if(String(nh).toLowerCase() === "auto") { 
				nh = "auto";
				tblHeight = "auto";
				
				that.pic.css({ height: "auto"});//设置大图列表行高度
				rowsView.css({ height: "auto"});//设置表格行高度
			}else{//$(grid.columnsView).height() 隐藏的时候为0
				tblHeight = nh - that.element.find(".coral-grid-pager").height() 
					- $(grid.caption).height();
				that.pic.css({ height: tblHeight+(isNaN(tblHeight)?"":"px")});//设置大图列表行高度
				tblHeight = nh - $(grid.columnsView).outerHeight(true) 
					- that.element.find(".coral-grid-pager").outerHeight(true)
					- $(grid.caption).height();
				rowsView.css({ height: tblHeight+(isNaN(tblHeight)?"":"px")});//设置表格行高度
			}
			
			that.options.height = nh;
			if (that.options.scroll) { that.grid.populateVisible(); }
		},
		getDataIDs : function () {
			var ids=[], i=0, len, j=0;
			var isPicgrid = !!(this.options.model == "card");
			if (isPicgrid) {
				var pic = this.element.find("ul.coral-pic").children("li.gridPanel");
				len = pic.length;
				if (len && len>0) {
					while (i<len) {
						ids[i] = pic[i].id;
						i++;
					}
				}
			}else {
				len = this.rows.length;
				if(len && len>0){
					while(i<len) {
						if($(this.rows[i]).hasClass('jqgrow')) {
							ids[j] = this.rows[i].id;
							j++;
						}
						i++;
					}
				}
			}
			return ids;
		},
		setRowData : function(rowid, data, cssp) {
			var that = this, nm, success=true, title;
			
			if(!this.grid) {return false;}
			var t = this, vl, ind, cp = typeof cssp, lcdata={};
			ind = t.rows.namedItem(rowid);
			if(!ind) { return false; }
			if( data ) {
				try {
					$(this.options.colModel).each(function(i){
						nm = this.name;
						if( data[nm] !== undefined) {
							/*var _fn = $.coral.toFunction(this.formatter);
							if($.isFunction(_fn)){
								lcdata[nm] = _fn.apply( that.element[0]);
							}else{}*/
							lcdata[nm] = this.formatter && typeof(this.formatter) === 'string' && this.formatter == 'date' ? $.unformat.date.call(t,data[nm],this) : data[nm];
							vl = t._formatter( rowid, data[nm], i, data, 'edit');
							title = this.title ? {"title":$.grid.stripHtml(vl)} : {};
							if(t.options.treeGrid===true && nm == t.options.expandColumn) {
								$("td:eq("+i+") > span:first",ind).html(vl).attr(title);
							} else {
								$("td:eq("+i+")",ind).html(vl).attr(title);
							}
							$.fn.afterFmatter.call(that);
						}
					});
					if(t.options.datatype == 'local') {
						var id = $.grid.stripPref(t.options.idPrefix, rowid),
						pos = t.options._index[id];
						if(t.options.treeGrid) {
							for(var key in t.options.treeReader ){
								if(lcdata.hasOwnProperty(t.options.treeReader[key])) {
									delete lcdata[t.options.treeReader[key]];
								}
							}
						}
						if(typeof(pos) != 'undefined') {
							t.options.data[pos] = $.extend(true, t.options.data[pos], lcdata);
						}
						lcdata = null;
					}
				} catch (e) {
					success = false;
				}
			}
			if(success) {
				if(cp === 'string') {$(ind).addClass(cssp);} else if(cp === 'object') {$(ind).css(cssp);}
				t._trigger("aftercomplete");
			}
			
			return success;
		},
		delRowData : function(rowid) {
			var success = false, rowInd, ia, ri;
			var that = this;
			var isPicgrid = !!(that.options.model == "card");
			if ( isPicgrid ) {
				rowInd = that.pic.children("#"+ rowid)[0];
				if(!rowInd) {return false;}
				else {
					//ri = rowInd.rowIndex;
					$(rowInd).remove();
					that.options.records--;
					that.options.reccount--;
					that._updatepager(true,false);
					success = true;
					if(that.options.multiselect) {
						ia = $.inArray(rowid,that.options.selarrrow);
						if(ia != -1) { that.options.selarrrow.splice(ia,1);}
					}
					if(rowid == that.options.selrow) {that.options.selrow=null;}
				}
				if(that.options.datatype == 'local') {
					var id = $.grid.stripPref(that.options.idPrefix, rowid),
					pos = that.options._index[id];
					if(typeof(pos) != 'undefined') {
						that.options.data.splice(pos,1);
						that.refreshIndex();
					}
				}
			} else {
				rowInd = that.rows.namedItem(rowid);
				if(!rowInd) {return false;}
				else {
					ri = rowInd.rowIndex;
					$(rowInd).remove();
					that.options.records--;
					that.options.reccount--;
					that._updatepager(true,false);
					success=true;
					if(that.options.multiselect) {
						ia = $.inArray(rowid,that.options.selarrrow);
						if(ia != -1) { that.options.selarrrow.splice(ia,1);}
					}
					if(rowid == that.options.selrow) {that.options.selrow=null;}
					if(rowid == that.options.editrow) {
						that.options.editrow=null;
						if (that.rowEditButtons) {
							that.rowEditButtons.remove();
						}
					}
					var sRowArr = $.each( that.options.savedRow, function( i, sRow ) {
						// TODO: 是否有错误？本地和远程数据的判断
						if( sRow.id == ri ) {
							ia = i;
							return true;
						}
					});
					if(sRowArr.length) {
						if(ia != -1) { that.options.savedRow.splice(ia,1);}
					}
				}
				if(that.options.datatype == 'local') {
					var id = $.grid.stripPref(that.options.idPrefix, rowid),
					pos = that.options._index[id];
					if(typeof(pos) != 'undefined') {
						that.options.data.splice(pos,1);
						that.refreshIndex();
					}
				}
				if( that.options.altRows === true && success ) {
					var cn = that.options.altclass;
					$(that.rows).each(function(i){
						if(i % 2 ==1) { $(this).addClass(cn); }
						else { $(this).removeClass(cn); }
					});
				}
				// 如果已经删除完则取消全选框
				if (!that.getDataIDs().length) {
					that._cancelCheckAll();
				}
				if (this.options.frozenColumns) {
					this._setFrozenHeight();
				}
				return success;
			}		
		},
		/**
		 * 若存在选框，则将之取消选中
		 */
		_cancelCheckAll: function() {
			var that = this;
			
			if (that.options.multiselect) {
				$('#cb_'+$.grid.coralID(that.options.id),that.grid.columnsView)[that.options.useProp ? 'prop' : 'attr']("checked", false);
			}
		},
		resetSelection : function( rowid ){
			var t = this, ind, sr, fid;
			if( t.options.frozenColumns === true ) {
				fid = t.options.id+"_frozen";
			}
			if(typeof(rowid) !== "undefined" ) {
				sr = rowid === t.options.selrow ? t.options.selrow : rowid;
				$("#"+$.grid.coralID(t.options.id)+" tbody:first tr#"+$.grid.coralID(sr)).removeClass("coral-state-highlight").attr("aria-selected","false");
				if (fid) { $("#"+$.grid.coralID(sr), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); }
				if(t.options.multiselect) {
					$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(sr), "#"+$.grid.coralID(t.options.id))[t.options.useProp ? 'prop': 'attr']("checked",false);
					if(fid) { $("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(sr), "#"+$.grid.coralID(fid))[t.options.useProp ? 'prop': 'attr']("checked",false); }
					t._setHeadCheckBox( false);
				}
				sr = null;
			} else if(!t.options.multiselect) {
				if(t.options.selrow) {
					$("#"+$.grid.coralID(t.options.id)+" tbody:first tr#"+$.grid.coralID(t.options.selrow)).removeClass("coral-state-highlight").attr("aria-selected","false");
					if(fid) { $("#"+$.grid.coralID(t.options.selrow), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); }
					t.options.selrow = null;
				}
			} else {
				$(t.options.selarrrow).each(function(i,n){
					ind = t.rows.namedItem(n);
					$(ind).removeClass("coral-state-highlight").attr("aria-selected","false");
					$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(n))[t.options.useProp ? 'prop': 'attr']("checked",false);
					if(fid) { 
						$("#"+$.grid.coralID(n), "#"+$.grid.coralID(fid)).removeClass("coral-state-highlight"); 
						$("#jqg_"+$.grid.coralID(t.options.id)+"_"+$.grid.coralID(n), "#"+$.grid.coralID(fid))[t.options.useProp ? 'prop': 'attr']("checked",false);
					}
				});
				t._setHeadCheckBox( false );
				t.options.selarrrow = [];
			}
			if(t.options.cellEdit === true) {
				if(parseInt(t.options.iCol,10)>=0  && parseInt(t.options.iRow,10)>=0) {
					$("td:eq("+t.options.iCol+")",t.rows[t.options.iRow]).removeClass("edit-cell coral-state-highlight");
					$(t.rows[t.options.iRow]).removeClass("selected-row coral-state-hover");
				}
			}
			t.options.savedRow = [];
		},
		getRowData : function( rowid ) {
			var res = {}, resall, getall=false, len, j=0;
			var that = this,nm,ind;
			var isPicgrid = !!(that.options.model == "card");
			if( isPicgrid ) {
				if(typeof(rowid) == 'undefined') {
					getall = true;
					resall = [];
					len = that.pic.children("li").length;
				} else {
					ind = that.pic.children("#"+ rowid)[0];
					if(!ind) { return res; }
					len = 2;
				}
				var localKey = "_id_";
				while(j<len){
					if(getall) { ind = that.pic.children("li")[j]; }
					if( $(ind).hasClass('gridPanel') ) {
						for ( var k = 0; k < that.options.data.length; k++ ){
							if ( that.options.data[k][localKey] == ind.id ) {
								res = that.options.data[k];
							}
						}
						if(getall) { resall.push(res); res={}; }
					}
					j++;
				}
			} else {
				if(typeof(rowid) == 'undefined') {
					getall = true;
					resall = [];
					len = that.rows.length;
				} else {
					ind = that.rows.namedItem(rowid);
					if(!ind) { return res; }
					len = 2;
				}
				while(j<len){
					if(getall) { ind = that.rows[j]; }
					if( $(ind).hasClass('jqgrow') ) {
						$('td[role="gridcell"]',ind).each( function(i) {
							nm = that.options.colModel[i].name;
							if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
								if(that.options.treeGrid===true && nm == that.options.expandColumn) {
									res[nm] = $.grid.htmlDecode($("span:first",this).html());
								} else {
									try {
										if(that.options.enableHighlight == true){
											res[nm] = $.unformat.call(that,this,{rowId:ind.id, colModel:that.options.colModel[i]},i,true);	
										}else{
											res[nm] = $.unformat.call(that,this,{rowId:ind.id, colModel:that.options.colModel[i]},i,"get");								
										}
									} catch (e){
										res[nm] = $.grid.htmlDecode($(this).html());
									}
								}
							}
						});
						if(getall) { resall.push(res); res={}; }
					}
					j++;
				}
			}
			return resall ? resall: res;
		},
		/**
		 * rowid: 行号
		 * rdata: 行数据
		 * pos: 插入数据的位置
		 * src: pos为after的目标行id
		 * */
		addRowData: function(rowid,rdata,pos,src) {
			if(!pos) {pos = "last";}
			var success = false, nm, row, picRow, buttonsData, gi, si, ni,sind, i, v, prp="", aradd, cnm, cn, data, cm, id;
			if(rdata) {
				if($.isArray(rdata)) {
					aradd=true;
					//pos = "last";
					cnm = rowid;
				} else {
					rdata = [rdata];
					aradd = false;
				}
				//this.each(function() {
				var t = this, datalen = rdata.length;
				var isPicgrid = !!(t.options.model == "card");
				ni = t.options.rownumbers===true ? 1 :0;
				gi = t.options.multiselect ===true ? 1 :(t.options.singleselect === true ? 1 :0);
				si = t.options.subGrid===true ? 1 :0;
				/*if(gi == 0){
					gi = t.options.singleselect === true ? 1 :0;
				}*/
				if(!aradd) {
					if(typeof(rowid) != 'undefined') { rowid = rowid+"";}
					else {
						rowid = $.grid.randId();
						if(t.options.keyName !== false) {
							cnm = t.options.keyName;
							if(typeof rdata[0][cnm] != "undefined") { rowid = rdata[0][cnm]+""; }
						}
					}
				}
				cn = t.options.altclass;
				var k = 0, cna ="", lcdata = {},
				air = $.isFunction(t.options.afterInsertRow) ? true : false;
				while(k < datalen) {
					data = rdata[k];
					row=[];
					buttonsData = [];
					picRow = [];
					if(aradd) {
						try {rowid = data[cnm]+"";}
						catch (e) {rowid = $.grid.randId();}
						cna = t.options.altRows === true ?  (t.rows.length-1)%2 === 0 ? cn : "" : "";
					}
					cna += " new-row ";
					id = rowid;
					rowid  = t.options.idPrefix + rowid;
					if(ni){
						prp = t._formatCol(0,1,'',null,rowid, true);
						row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_rn\" class=\"coral-state-default grid-rownum\" "+prp+">0</td>";
					}
					if(gi) {
						if(this.options.singleselect){
							v = "<input role=\"radio\" type=\"radio\""+" id=\"jqg_"+t.options.id+"_"+rowid+"\" name=\"jqg_"+t.options.id+"\" class=\"cbox\"/>";
						}else{
							v = "<input role=\"checkbox\" type=\"checkbox\""+" id=\"jqg_"+t.options.id+"_"+rowid+"\" name=\"jqg_"+t.options.id+"_"+rowid+"\" class=\"cbox\"/>";
						}
						prp = t._formatCol(ni,1,'', null, rowid, true);
						row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_cb\" "+prp+">"+v+"</td>";
						buttonsData.push(v);
					}
					if(si) {
						row[row.length] = $(t).grid("addSubGridCell",gi+ni,1);
					}
					
					for(i = gi+si+ni; i < t.options.colModel.length;i++){
						cm = t.options.colModel[i];
						nm = cm.name;
						//lcdata[nm] = cm.formatter && typeof(cm.formatter) === 'string' && cm.formatter == 'date' ? $.unformat.date.call(t,data[nm],cm) : data[nm];
						lcdata[nm] = data[nm];
						v = t._formatter( rowid, $.grid.getAccessor(data,nm), i, data);
						prp = t._formatCol(i,1,v, data, rowid, true);
						row[row.length] = "<td role=\"gridcell\" aria-describedby=\""+t.options.id+"_"+nm+"\" "+prp+">"+v+"</td>";
					}
					if(isPicgrid){
						picRow.unshift( t.constructPanel( rowid, false, cna, lcdata, lcdata ) );
						picRow.push(t._customPanel(lcdata,ni,buttonsData));
						picRow.push( "</li>" );
					}else{
						row.unshift( t.constructTr( rowid, false, cna, lcdata, lcdata ,false) );
						row[row.length] = "</tr>";
					}
					if(isPicgrid){
						$("#"+$.grid.coralID(t.options.id)+" .coral-pic").append(picRow.join(''));
					}else{
						if(t.rows.length === 0){
							$("table:first",t.grid.rowsView).append(row.join(''));
						} else {
							switch (pos) {
							case 'last':
								$(t.rows[t.rows.length-1]).after(row.join(''));
								sind = t.rows.length-1;
								break;
							case 'first':
								$(t.rows[0]).after(row.join(''));
								sind = 1;
								break;
							case 'after':
								sind = t.rows.namedItem(src);
								if (sind) {
									if($(t.rows[sind.rowIndex+1]).hasClass("coral-subgrid")) { $(t.rows[sind.rowIndex+1]).after(row); }
									else { $(sind).after(row.join('')); }
								}
								sind++;
								break;
							case 'before':
								sind = t.rows.namedItem(src);
								if(sind) {$(sind).before(row.join(''));sind=sind.rowIndex;}
								sind--;
								break;
							}
						}
					}
					if(t.options.subGrid===true) {
						$(t).grid("addSubGrid",gi+ni, sind);
					}
					t.options.records++;
					t.options.reccount++;
					t._trigger("afterInsertRow", null,  [{"rowId":rowid,"data":data}]);
					if(air) { t.options.afterInsertRow.call(t,rowid,data,data); }
					k++;
					if(t.options.datatype == 'local') {
						lcdata[t.options.localReader.id] = id;
						t.options._index[id] = t.options.data.length;
						t.options.data.push(lcdata);
						lcdata = {};
					}
				}
				if( t.options.altRows === true && !aradd) {
					if (pos == "last") {
						if ((t.rows.length-1)%2 == 1)  {$(t.rows[t.rows.length-1]).addClass(cn);}
					} else {
						$(t.rows).each(function(i){
							if(i % 2 ==1) { $(this).addClass(cn); }
							else { $(this).removeClass(cn); }
						});
					}
				}
				t._updatepager(true,true);
				success = true;
				$("#noRecordsTips_"+$.grid.coralID(t.options.id)).hide();
				$.fn.afterFmatter.call(t);
				//});
			}
			if (this.options.frozenColumns) {
				this._setFrozenHeight();
			}
			return success;
		},
		footerData: function(data, format) {
			var nm, action = "set", success=false, res={}, title;
			function isEmpty(obj) {
				var i;
				for(i in obj) {
					if (obj.hasOwnProperty(i)) { return false; }
				}
				return true;
			}
			if(data == undefined) { action = "get"; }
			if(typeof format !== "boolean") { format  = true; }
			action = action.toLowerCase();
			//this.each(function(){
				var t = this, vl;
				if(!t.grid || !t.options.footerrow) {return false;}
				if(action === "set") { if(isEmpty(data)) { return false; } }
				success=true;
				$(this.options.colModel).each(function(i){
					nm = this.name;
					if(action === "set") {
						if( data[nm] !== undefined) {
							vl = format ? t._formatter( "", data[nm], i, data, 'edit') : data[nm];
							title = this.title ? {"title":$.grid.stripHtml(vl)} : {};
							$("tr.footrow td:eq("+i+")",t.grid.sDiv).html(vl).attr(title);
							success = true;
						}
					} else if(action === "get") {
						res[nm] = $("tr.footrow td:eq("+i+")",t.grid.sDiv).html();
					}
				});
				$.fn.afterFmatter.call(t);
			//});
			return action === "get" ? res : success;
		},
		clearGridData : function(clearfooter) {
			var that = this;
			var isPicgrid = !!(that.options.model == "card");
			if(!that.grid) {return;}
			if(typeof clearfooter != 'boolean') { clearfooter = false; }
			if(isPicgrid){
				$("#"+$.grid.coralID(that.options.id)+" .coral-pic").empty();
			}else{
				if(that.options.deepempty) {$("#"+$.grid.coralID(that.options.id)+" tbody:first tr:gt(0)").remove();}
				else {
					var trf = $(" tbody:first tr:first",that.element)[0];
					$(" tbody:first",that.element).empty().append(trf);
				}
			}
			
			if(that.options.footerrow && clearfooter) { $(".coral-grid-ftable td",that.grid.sDiv).html("&#160;"); }
			that.options.selrow = null; that.options.selarrrow= []; that.options.savedRow = [];
			that.options.records = 0;that.options.page=1;that.options.lastpage=0;that.options.reccount=0;
			that.options.data = []; that.options._index = {};
			that._updatepager(true,false);
			
			that._cancelCheckAll();
		},
		sortableRows : function () {
			var opts = {}, t = 0;
			if (opts.sortableRowsOptions) {
				$.extend(opts, opts.sortableRowsOptions);
			}
			// Can accept all sortable options and events
			var that = this;
			if(!that.grid) { return; }
			// Currently we disable a treeGrid sortable
			if(that.options.treeGrid) { return; }
			if($.fn.sortable) {
				opts = $.extend({
					"cursor":"move",
					"axis" : "y",
					"items": ".jqgrow"
					},
				opts || {});
				opts.change = function( e, ui ){
					ui.prevItemId = $(ui.placeholder[0]).prev("tr").attr("id");
					ui.nextItemId = $(ui.placeholder[0]).next("tr").attr("id");
					ui.targetId = ui.position.top>ui.originalPosition.top?ui.prevItemId:ui.nextItemId;
					$( "#"+that.id+" #"+ui.targetId ).siblings().removeClass( "coral-state-target" );
					$( "#"+that.id+" #"+ui.targetId ).addClass( "coral-state-target" );
					that._trigger("onSortableRows", e, [ui]);
				};
				opts.start = function(e,ui) {
					$(ui.item).css("border-width","0px");
					ui.originalPermutation = [];
					if ( ui.item.is("tr" )){
						$("td",ui.item).each(function(i){
							this.style.width = that.grid.cols[i].style.width;
						});
					} else {
						$("td",ui.item.find("tr:first")).each(function(i){
							this.style.width = that.grid.cols[i].style.width;
						});
					}
					if( that.options.subGrid ) {
						var subgid = $(ui.item).attr("id");
						try {
							$(that).grid('collapseSubGridRow',subgid);
						} catch (e) {}
					}	
					$("tr.jqgrow",that.element.find(".coral-grid-btable")).each(function(){
						this.id!==""&& ui.originalPermutation.push(this.id);
					});	
					that.sortableRowOriginalPermutation = ui.originalPermutation;
					that._trigger("beforeSortableRows", e, [ui]);
				};
				
				opts.update = function ( e, ui ) {
					$(ui.item).css("border-width","");
					ui.itemId = [];
					ui.permutation = [];
					ui.originalPermutation = that.sortableRowOriginalPermutation||[];

					if(that.options.rownumbers === true) {
						$("td.grid-rownum",that.rows).each(function(i){
							$(this).html( i+1+(parseInt(that.options.page,10)-1)*parseInt(that.options.rowNum,10) );
							ui.permutation.push(that.rows[i+1].id);
						});	
					}else{
						$("tr.jqgrow", that.grid.rowsView).each(function( i ){
							ui.permutation.push(this.id);
						});
					}
					$.each(ui.item, function(i){
						ui.itemId.push(ui.item[i].id);
					});
					ui.prevItemId = $(ui.item[0]).prev("tr").attr("id");
					ui.nextItemId = $(ui.item[0]).next("tr").attr("id");
					ui.targetId = ui.position.top>ui.originalPosition.top?ui.prevItemId:ui.nextItemId;
					var dr = $.data(that.element[0], "dns-ref");
					if ( dr ){
						var opts = $.data( dr,"dns" );
						if(opts.dragToSort){
							ui.item.remove();
							opts.dragToSort = false;
							var i=0;
							if(ui.targetId){
								for(;i<opts.dataItems.length;i++){
									$(dr).grid("delRowData", opts.dataItems[i].id);
								}
								that.element.grid("addRowData", opts.rowid, opts.dataItems, "after", ui.targetId);
								//$.message("添加到条目: "+ui.targetId)
							} 
						}
					}
					$( "#"+that.id+" #"+ui.targetId ).removeClass( "coral-state-target" );
					that._trigger("afterSortableRows", e, [ui]);
				};
				$("tbody:first",that.grid.rowsView).sortable(opts);
				//$("tbody:first",that.grid.rowsView).disableSelection();
			}
		},
		destroySortableRows : function (opts) {
			var that = this;
			if(!that.grid) { return; }
			if($.fn.sortable)
				$("tbody:first",that.grid.rowsView).sortable( 'destroy' );
		},
		
		sortableGrid: function(opts) {
			var	that = this;
			var firstGrid,  //被拖拽的grid
			selectData=[], selectDataId=[], 
			originalPermutationlInnerListId; //被拖拽的grid的初始list顺序
			$("tbody:first",that.element).sortable({
				appendTo: 'body',
				connectWith: opts.connectWith,
				//placeholder: 'coral-state-highlight',
				dropOnEmpty: true,
				helper: function(e ,ui) {
					var html = $("<div></div>");
					firstGrid = $(e.target).closest(".ctrl-init-grid ").attr("id");
					if (that.options.multiselect) {
						var ids = $("#"+firstGrid).grid("option","selarrrow").concat(),
							data =  $("#" + firstGrid).grid("getDataIDs");
						selectDataId = that._sortOrder(ids, data);
						if ($.inArray(ui.attr("id"), selectDataId)> -1) {
							for (var i=0;i<selectDataId.length;i++) {
								selectData[i] = $("#"+firstGrid).grid("getRowData", selectDataId[i]);
								html.append($("#"+selectDataId[i], $("#"+firstGrid)).clone());
							}
						} else {
							selectDataId = ui.attr("id").concat();
							selectData = $("#"+firstGrid).grid("getRowData", selectDataId);
							html.append(ui.clone());
						}
					} else {
						selectDataId = $(e.target).parent("tr").attr("id");
						selectData = $("#"+firstGrid).grid("getRowData", selectDataId);
						html.append($(e.target).parent("tr").clone());
					}
					originalPermutationlInnerListId = $("#" + firstGrid).grid("getDataIDs");
					return html;
				},
				//多行拖拽时隐藏grid里面被选中的所有行
				//receive针对的是目标grid,firstGrid、selectData在receive是获取不到的
				start: function(e, ui) {
					if(that.options.multiselect) {
						for (var i=0;i<selectDataId.length;i++) {
							$("#"+selectDataId[i], $("#"+firstGrid)).hide();
						}
					}
					that._trigger("onSortableStart", e, {originalPermutation:originalPermutationlInnerListId});
					var arr = opts.connectWith.split(",");
					//对目标grid为空表进行特殊处理
					for (var k=0;k<arr.length;k++) {
						var result = $(arr[k].replace(" tbody:first","")).grid("getDataIDs"); 
						if (!result.length) {
							var height = $(arr[k].replace(" tbody:first","")).grid("option", "height");
							var jqgfirstrow = $(".jqgfirstrow",$(arr[k]));
							jqgfirstrow.css('height', height+'px');
							jqgfirstrow.children("td").css("border-right","0px");
							$(arr[k]).sortable( "refreshPositions" );
						}
					}
				},
				//添加数据到目标grid
				//sortable会自动复制被选中的单条数据,addRowData同样,需要remove被sortable的数据
				stop: function(e ,ui) {
					var currentGrid = ui.item.closest(".ctrl-init-grid ").attr("id"),
						targetGrid = $(e.target).closest(".ctrl-init-grid ").attr("id"),
						prevItemId = ui.item.prev("tr").attr("id"),
						nextItemId = ui.item.next("tr").attr("id"),
						position = "first",
						prevItem, nextItem;
					if (prevItemId) {
						prevItem = $("#"+currentGrid).grid("getRowData", prevItemId);
					}
					if (nextItemId) {
						nextItem = $("#"+currentGrid).grid("getRowData", nextItemId);
					}
					if ( that.options.multiselect) {
						var selection = $("#"+firstGrid).grid("getDataIDs");
						if ( !selection.length) {
								that._setHeadCheckBox( false );
						}
						//同一个表格内拖拽和跨表拖拽情况不同,分开处理
						if(targetGrid != currentGrid) {
							$("#"+ui.item.attr("id"), $("#"+currentGrid)).remove();
							//跨表的数据删除在remove中被处理
							if ( !selectData.length) {
								if (prevItemId) {
									position = "after";
								}
								that._addSortData(currentGrid, selectDataId, selectData, position, prevItemId);
							} else {
								for (var j=selectData.length-1;j>=0;j--) {
									if (prevItemId) {
										position = "after";
									}
									that._addSortData(currentGrid, selectDataId[j], selectData[j], position, prevItemId);
									$("#"+currentGrid).grid("setSelection", selectDataId[j])
								} 
							}
						} else {
							//同一个表的data实际上并没有被删除,为了使插入顺序正确,需要先删除再增加
							for (var i=0;i<selectData.length;i++) {
								$("#" + firstGrid+ " tbody:first").append($("#"+selectDataId[i]).clone()); 
								$("#"+ firstGrid).grid("delRowData", selectDataId[i]);
								$("#"+selectDataId[i], $("#"+firstGrid)).remove();
								if (prevItemId == selectDataId[i]) {
									prevItemId = undefined;
								}
								if (nextItemId == selectDataId[i] || !nextItemId ) {
									nextItemId = undefined;
									position = "last";
								} else {
									position = "before";
								}
								that._addSortData(currentGrid, selectDataId[i], selectData[i], position, nextItemId);
								$("#"+currentGrid).grid("setSelection", selectDataId[i], true)
							}
						}
					} else {
						var itemId = ui.item.attr("id");
						if(targetGrid != currentGrid) {
							ui.item.remove();
							if (prevItemId) {
								position = "after";
							}
							that._addSortData(currentGrid, itemId, selectData, position, prevItemId);
						}
						$("#"+currentGrid).grid("setSelection", itemId, true)
					}
					var sel = $("#" + currentGrid).grid("getDataIDs");
					if ( that.options.multiselect && sel.length == selectDataId.length) {
						$("#" + currentGrid).grid("setSelectAll", true);
					}
					that._trigger("onSortableStop", e, {datafrom:targetGrid, currentGrid:currentGrid, itemId:selectDataId, prevItemId:prevItemId, nextItemId:nextItemId, originalPermutation:originalPermutationlInnerListId, permutation:sel, prevItem:prevItem, nextItem:nextItem});
					var arr = opts.connectWith.split(",");
					for (var k=0;k<arr.length;k++) {
						$(arr[k]).sortable( "refreshPositions" );
						var jqgfirstrow = $(".jqgfirstrow",$(arr[k]));
						jqgfirstrow.css('height', "auto");
						jqgfirstrow.children("td").css("border-right","1px");
					}
					firstGrid="";
					selectData=[]; selectDataId=[]; 
					originalPermutationlInnerListId=""; 
				},
				//删除原本grid里面被选中的数据
				//不remove的话getDataIDs时有问题
				remove: function(e, ui) {
					if (that.options.multiselect) {
						for (var i=0;i<selectDataId.length;i++) {
							$("#" + firstGrid+ " tbody:first").append($("#"+selectDataId[i]).clone()); 
							$("#"+ firstGrid).grid("delRowData", selectDataId[i]);
							$("#"+selectDataId[i], $("#"+firstGrid)).remove();
						}
					} else {
						var itemId = ui.item.attr("id");
						$("#"+ firstGrid + " tbody:first").append(ui.item.clone());
						$("#"+ firstGrid).grid("delRowData", itemId);
						$("#"+itemId, $("#"+firstGrid)).remove();
					}
				},
			});
		},
		_addSortData: function(gridID, dataID, data, position, sibling) {
			if (sibling) {
				$("#"+gridID).grid("addRowData", dataID, data, position,sibling);
			} else {
				$("#"+gridID).grid("addRowData", dataID, data, position);
			}
		},
		_sortOrder: function(ids, dataIds) {
			var array = [], orderArray=[];
			for (var i=0;i<ids.length;i++) {
				//array.push(dataIds.indexOf(ids[i]));
				array.push($.inArray(ids[i], dataIds));
			}
			array = array.sort();
			for(var i=0;i<array.length;i++) {
				var k=array[i];
				orderArray.push(dataIds[k]);
			}
			return orderArray;
		},
		gridDnS : function(opts) {
			var that = this,
				t = 0,
				items = [];
			if(!that.grid) { return; }
			// Currently we disable a treeGrid drag and drop
			if(that.options.treeGrid) { return; }
			if(!$.fn.draggable || !$.fn.droppable) { return; }
			var appender = "<table id='grid_dns' class='coral-grid-dns'></table>";
			if($("#grid_dns")[0] === undefined) {
				$('body').append(appender);
			}
			if(!opts.connectWith) { return; }
			opts.connectWith = opts.connectWith.split(",");
			opts.connectWith = $.map(opts.connectWith,function(n){return $.trim(n);});
			var connectToSortableOpts = opts.connectWith.join(" .coral-grid-btable>tbody, ")+" .coral-grid-btable>tbody";
			opts = $.extend({
				"onstart" : null,
				"onstop" : null,
				"beforedrop": null,
				"ondrop" : null,
				"dragcopy": false,
				"dropbyname" : false,
				"droppos" : "first",
				"autoid" : true,
				"rowid" : "id",
				"dataItems" : [],
				"autoidprefix" : "dns_"
			}, opts || {});
			
			$.data(that.element[0],"dns",opts);
			
			if(that.options.reccount != "0" && !that.options.jqgdns) {
				var datadns = $.data(that.element,"dns");
			    $("tr.jqgrow:not(.coral-sortable)",that.element).draggable({
			    	"revert": "invalid",
					"helper": function( e, ui ){
						 var tId = $(e.target).parent("tr")[0].id,
						 	 i = 0,
						 	 html = $("<div></div>"),
						 	 sel = that.element.grid("option", "selarrrow").concat();
						 $.data(that.element[0],"dns").dataItems = [];
						 if($.inArray(tId, sel)>-1){
							 for( i;i<sel.length;i++ ){
								 $.data(that.element[0],"dns").dataItems.push($( that.element ).grid("getRowData", sel[i]));
								 html.append($( ".coral-grid-btable>tbody #"+sel[i], that.element ).clone());
							 }
							 return html;
						 }else{
							 $.data(that.element[0],"dns").dataItems.push( that.element.grid("getRowData", tId) );
							 html.append($(e.target).parent("tr").clone());
							 return html;
						 }
					 },
					"connectToSortable": connectToSortableOpts,
					"cursor": "move",
					"appendTo" : "#grid_dns",
					"zIndex": 5000,
			    	"start" : function (ev, ui) {
						// if we are in subgrid mode try to collapse the node
						if(that.options.subGrid) {
							var subgid = $(ui.helper).attr("id");
							try {
								$(that.element).grid('collapseSubGridRow',subgid);
							} catch (e) {}
						}
						$.data(that.element[0],"dns").dragToSort = true;
						// hack
						// drag and drop does not insert tr in table, when the table has no rows
						// we try to insert new empty row on the target(s)
						for (var i=0;i<$.data(that.element[0],"dns").connectWith.length;i++){
							if($($.data(that.element[0],"dns").connectWith[i]).grid('option','reccount') == "0" ){
								$($.data(that.element[0],"dns").connectWith[i]).grid('addRowData','jqg_empty_row',{});
							}
						}
						ui.helper.addClass("coral-state-highlight");
						$("td",ui.helper.find("tr:first")).each(function(i) {
							this.style.width = that.grid.headers[i].width+"px";
						});
						if(opts.onstart && $.isFunction(opts.onstart) ) { opts.onstart.call($($t),ev,ui); }
					},
					"stop" :function(ev,ui) {
						if(ui.helper.dropped && !opts.dragcopy) {
							var ids = $(ui.helper).attr("id");
							if(ids === undefined) { ids = $(this).attr("id"); }
							$(that.element).grid('delRowData',ids );
						}
						// if we have a empty row inserted from start event try to delete it
						for (var i=0;i<$.data(that.element[0],"dns").connectWith.length;i++){
							$($.data(that.element[0],"dns").connectWith[i]).grid('delRowData','jqg_empty_row');
						}
						if(opts.onstop && $.isFunction(opts.onstop) ) { opts.onstop.call($($t),ev,ui); }
						
						
					}
			    });
			}
			that.options.jqgdns = true;
			for (var i=0;i<opts.connectWith.length;i++){
				var cn =opts.connectWith[i];
				$.data( $(cn)[0],"dns-ref", that.element[0] );
			}
		},
		gridDnD : function(opts) {
			var that = this;
			if(!that.grid) { return; }
			// Currently we disable a treeGrid drag and drop
			if(that.options.treeGrid) { return; }
			if(!$.fn.draggable || !$.fn.droppable) { return; }
			function updateDnD ()
			{
				var datadnd = $.data(that.element,"dnd");
			    $("tr.jqgrow:not(.coral-draggable)",that.element).draggable($.isFunction(datadnd.drag) ? datadnd.drag.call($(that.element),datadnd) : datadnd.drag);
			}
			var appender = "<table id='jqgrid_dnd' class='coral-grid-dnd'></table>";
			if($("#jqgrid_dnd")[0] === undefined) {
				$('body').append(appender);
			}

			if(typeof opts == 'string' && opts == 'updateDnD' && that.options.jqgdnd===true) {
				updateDnD();
				return;
			}
			if(!opts.connectWith) { return; }
			opts.connectWith = opts.connectWith.split(",");
			opts.connectWith = $.map(opts.connectWith,function(n){return $.trim(n);});
			var connectToSortableOpts = opts.connectWith.join(" .coral-grid-btable>tbody, ")+" .coral-grid-btable>tbody";
			
			opts = $.extend({
				"drag" : function (opts) {
					return $.extend({
						start : function (ev, ui) {
							// if we are in subgrid mode try to collapse the node
							if(that.options.subGrid) {
								var subgid = $(ui.helper).attr("id");
								try {
									$(that.element).grid('collapseSubGridRow',subgid);
								} catch (e) {}
							}
							// hack
							// drag and drop does not insert tr in table, when the table has no rows
							// we try to insert new empty row on the target(s)
							for (var i=0;i<$.data(that.element,"dnd").connectWith.length;i++){
								if($($.data(that.element,"dnd").connectWith[i]).grid('option','reccount') == "0" ){
									$($.data(that.element,"dnd").connectWith[i]).grid('addRowData','jqg_empty_row',{});
								}
							}
							ui.helper.addClass("coral-state-highlight");
							$("td",ui.helper).each(function(i) {
								this.style.width = that.grid.headers[i].width+"px";
							});
							if(opts.onstart && $.isFunction(opts.onstart) ) { opts.onstart.call($($t),ev,ui); }
						},
						stop :function(ev,ui) {
							if(ui.helper.dropped && !opts.dragcopy) {
								var ids = $(ui.helper).attr("id");
								if(ids === undefined) { ids = $(this).attr("id"); }
								$(that.element).grid('delRowData',ids );
							}
							// if we have a empty row inserted from start event try to delete it
							for (var i=0;i<$.data(that.element,"dnd").connectWith.length;i++){
								$($.data(that.element,"dnd").connectWith[i]).grid('delRowData','jqg_empty_row');
							}
							if(opts.onstop && $.isFunction(opts.onstop) ) { opts.onstop.call($($t),ev,ui); }
						}
					},opts.drag_opts || {});
				},
				"drop" : function (opts) {
					return $.extend({
						accept: function(d) {
							if (!$(d).hasClass('jqgrow')) { return d;}
							var tid = $(d).closest("table.coral-grid-btable");
							if(tid.length > 0 && $.data(that.element,"dnd") !== undefined) {
							    var cn = $.data(that.element,"dnd").connectWith;
							    return $.inArray('#'+$.grid.coralID(this.id),cn) != -1 ? true : false;
							}
							return false;
						},
						drop: function(ev, ui) {
							if (!$(ui.draggable).hasClass('jqgrow')) { return; }
							var accept = $(ui.draggable).attr("id");
							var getdata = ui.draggable.parents(".coral-grid").grid('getRowData',accept);
							if(!opts.dropbyname) {
								var j =0, tmpdata = {}, nm;
								var dropmodel = $("#"+$.grid.coralID(this.id)).grid('option','colModel');
								try {
									for (var key in getdata) {
										if (getdata.hasOwnProperty(key)) {
											nm = dropmodel[j].name;
											if( !(nm == 'cb' || nm =='rn' || nm == 'subgrid' )) {
												if(getdata.hasOwnProperty(key) && dropmodel[j]) {
													tmpdata[nm] = getdata[key];
												}
											}else{
												j++;
											}
											j++;
										}
									}
									getdata = tmpdata;
								} catch (e) {}
							}
							ui.helper.dropped = true;
							if(opts.beforedrop && $.isFunction(opts.beforedrop) ) {
								//parameters to this callback - event, element, data to be inserted, sender, reciever
								// should return object which will be inserted into the reciever
								var datatoinsert = opts.beforedrop.call(this,ev,ui,getdata,$('#'+$.grid.coralID(that.options.id)),$(this));
								if (typeof datatoinsert != "undefined" && datatoinsert !== null && typeof datatoinsert == "object") { getdata = datatoinsert; }
							}
							if(ui.helper.dropped) {
								var grid;
								if(opts.autoid) {
									if($.isFunction(opts.autoid)) {
										grid = opts.autoid.call(this,getdata);
									} else {
										grid = Math.ceil(Math.random()*1000);
										grid = opts.autoidprefix+grid;
									} 
								}
								// NULL is interpreted as undefined while null as object
								$("#"+$.grid.coralID(this.id)).grid('addRowData',grid,getdata,opts.droppos);
							}
							if(opts.ondrop && $.isFunction(opts.ondrop) ) { opts.ondrop.call(this,ev,ui, getdata); }
						}}, opts.drop_opts || {});
				},
				"onstart" : null,
				"onstop" : null,
				"beforedrop": null,
				"ondrop" : null,
				"drop_opts" : {
					"activeClass": "coral-state-active",
					"hoverClass": "coral-state-hover"
				},
				"drag_opts" : {
					"revert": "invalid",
					"helper": "clone",
					"connectToSortable": connectToSortableOpts,
					"cursor": "move",
					"appendTo" : "#jqgrid_dnd",
					"zIndex": 5000
				},
				"dragcopy": false,
				"dropbyname" : false,
				"droppos" : "first",
				"autoid" : true,
				"autoidprefix" : "dnd_"
			}, opts || {});
			
			$.data(that.element,"dnd",opts);
			
			if(that.options.reccount != "0" && !that.options.jqgdnd) {
				updateDnD();
			}
			that.options.jqgdnd = true;
			for (var i=0;i<opts.connectWith.length;i++){
				var cn =opts.connectWith[i];
				$(cn).droppable($.isFunction(opts.drop) ? opts.drop.call($(that),opts) : opts.drop);
			}
		},
		getInd : function(rowid,rc){
			var ret =false,rw;
			/*this.each(function(){*/
				rw = this.rows.namedItem(rowid);
				if(rw) {
					ret = rc===true ? rw: rw.rowIndex;
				}
			/*});*/
			return ret;
		}
});

/*grid的所有的通用方法，与对象无关*/
$.extend($.grid,{
	htmlDecode : function(value){
		if(value && (value=='&nbsp;' || value=='&#160;' || (value.length===1 && value.charCodeAt(0)===160))) { return "";}
		return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&").replace(/\'/g, "&acute;");		
	},
	htmlEncode : function (value){
		return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\'/g, "&acute;");
	},
	format : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1);
		if(format===undefined) { format = ""; }
		return format.replace(/\{(\d+)\}/g, function(m, i){
			return args[i];
		});
	},
	getCellIndex : function (cell) {
		var c = $(cell);
		if (c.is('tr')) { return -1; }
		c = (!c.is('td') && !c.is('th') ? c.closest("td,th") : c)[0];
		/*暂时注释，到时候再ie6、7下测试，找到解决办法*/
		//if ($.browser.msie) { return $.inArray(c, c.parentNode.cells); }
		return c.cellIndex;
	},
	stripHtml : function(v) {
		v = v+"";
		var regexp = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
		if (v) {
			v = v.replace(regexp,"");
			return (v && v !== '&nbsp;' && v !== '&#160;') ? v.replace(/\"/g,"'") : "";
		} else {
			return v;
		}
	},
	stripPref : function (pref, id) {
		var obj = $.type( pref );
		if( obj == "string" || obj =="number") {
			pref =  String(pref);
			id = pref !== "" ? String(id).replace(String(pref), "") : id;
		}
		return id;
	},
	stringToDoc : function (xmlString) {
		var xmlDoc;
		if(typeof xmlString !== 'string') { return xmlString; }
		try	{
			var parser = new DOMParser();
			xmlDoc = parser.parseFromString(xmlString,"text/xml");
		}
		catch(e) {
			xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async=false;
			xmlDoc.loadXML(xmlString);
		}
		return (xmlDoc && xmlDoc.documentElement && xmlDoc.documentElement.tagName != 'parsererror') ? xmlDoc : null;
	},
	parse : function(jsonString) {
		var js = jsonString;
		if (js.substr(0,9) == "while(1);") { js = js.substr(9); }
		if (js.substr(0,2) == "/*") { js = js.substr(2,js.length-4); }
		if(!js) { js = "{}"; }
		return ($.grid.useJSON===true && typeof (JSON) === 'object' && typeof (JSON.parse) === 'function') ?
			JSON.parse(js) :
			eval('(' + js + ')');
	},
	parseDate : function(format, date) {
		var tsp = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},k,hl,dM, regdate = /[\\\/:_;.,\t\T\s-]/;
		if(date && date !== null && date !== undefined){
			date = $.trim(date);
			date = date.split(regdate);
			if ($.grid.formatter.date.masks[format] !== undefined) {
				format = $.grid.formatter.date.masks[format];
			}
			format = format.split(regdate);
			var dfmt  = $.grid.formatter.date.monthNames;
			var afmt  = $.grid.formatter.date.AmPm;
			var h12to24 = function(ampm, h){
				if (ampm === 0){ if (h === 12) { h = 0;} }
				else { if (h !== 12) { h += 12; } }
				return h;
			};
			for(k=0,hl=format.length;k<hl;k++){
				if(format[k] == 'M') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM < 12){
						date[k] = dM+1;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'F') {
					dM = $.inArray(date[k],dfmt);
					if(dM !== -1 && dM > 11){
						date[k] = dM+1-12;
						tsp.m = date[k];
					}
				}
				if(format[k] == 'a') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM < 2 && date[k] == afmt[dM]){
						date[k] = dM;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(format[k] == 'A') {
					dM = $.inArray(date[k],afmt);
					if(dM !== -1 && dM > 1 && date[k] == afmt[dM]){
						date[k] = dM-2;
						tsp.h = h12to24(date[k], tsp.h);
					}
				}
				if(date[k] !== undefined) {
					tsp[format[k].toLowerCase()] = parseInt(date[k],10);
				}
			}
			tsp.m = parseInt(tsp.m,10)-1;
			var ty = tsp.y;
			if (ty >= 70 && ty <= 99) {tsp.y = 1900+tsp.y;}
			else if (ty >=0 && ty <=69) {tsp.y= 2000+tsp.y;}
			if(tsp.j !== undefined) { tsp.d = tsp.j; }
			if(tsp.n !== undefined) { tsp.m = parseInt(tsp.n,10)-1; }
		}
		return new Date(tsp.y, tsp.m, tsp.d, tsp.h, tsp.i, tsp.s, tsp.u);
	},
	coralID : function(sid){
		return String(sid).replace(/[!"#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g,"\\$&");
	},
	guid : 1,
	uidPref: 'coralg',
	randId : function( prefix )	{
		return (prefix? prefix: $.grid.uidPref) + ($.grid.guid++);
	},
	getAccessor : function(obj, expr) {
		var ret,p,prm = [], i;
		if( typeof expr === 'function') { return expr(obj); }
		ret = obj[expr];
		if(ret===undefined) {
			try {
				if ( typeof expr === 'string' ) {
					prm = expr.split('.');
				}
				i = prm.length;
				if( i ) {
					ret = obj;
					while (ret && i--) {
						p = prm.shift();
						ret = ret[p];
					}
				}
			} catch (e) {}
		}
		return ret;
	},
	ajaxOptions: {},
	from : function(source){
		// Original Author Hugo Bonacci
		// License MIT http://jlinq.codeplex.com/license
		var QueryObject=function(d,q){
		if(typeof(d)=="string"){
			d=$.data(d);
		}
		var self=this,
		_data=d,
		_usecase=true,
		_trim=false,
		_query=q,
		_stripNum = /[\$,%]/g,
		_lastCommand=null,
		_lastField=null,
		_orDepth=0,
		_negate=false,
		_queuedOperator="",
		_sorting=[],
		_useProperties=true,
		_usePinyin=true;
		if(typeof(d)=="object"&&d.push) {
			if(d.length>0){
				if(typeof(d[0])!="object"){
					_useProperties=false;
				}else{
					_useProperties=true;
				}
			}
		}else{
			throw "data provides is not an array";
		}
		this._hasData=function(){
			return _data===null?false:_data.length===0?false:true;
		};
		this._getStr=function(s){
			var phrase=[];
			if(_trim){
				phrase.push("jQuery.trim(");
			}
			phrase.push("String("+s+")");
			if(_trim){
				phrase.push(")");
			}
			if(!_usecase){
				phrase.push(".toLowerCase()");
			}
			return phrase.join("");
		};
		this._strComp=function(val){
			if(typeof(val)=="string"){
				return".toString()";
			}else{
				return"";
			}
		};
		this._group=function(f,u){
			return({field:f.toString(),unique:u,items:[]});
		};
		this._toStr=function(phrase){
			if(_trim){
				phrase=$.trim(phrase);
			}
			phrase=phrase.toString().replace(/\\/g,'\\\\').replace(/\"/g,'\\"');
			return _usecase ? phrase : phrase.toLowerCase();
		};
		this._funcLoop=function(func){
			var results=[];
			$.each(_data,function(i,v){
				results.push(func(v));
			});
			return results;
		};
		this._append=function(s){
			var i;
			if(_query===null){
				_query="";
			} else {
				_query+=_queuedOperator === "" ? " && " :_queuedOperator;
			}
			for (i=0;i<_orDepth;i++){
				_query+="(";
			}
			if(_negate){
				_query+="!";
			}
			_query+="("+s+")";
			_negate=false;
			_queuedOperator="";
			_orDepth=0;
		};
		this._setCommand=function(f,c){
			_lastCommand=f;
			_lastField=c;
		};
		this._resetNegate=function(){
			_negate=false;
		};
		this._repeatCommand=function(f,v){
			if(_lastCommand===null){
				return self;
			}
			if(f!==null&&v!==null){
				return _lastCommand(f,v);
			}
			if(_lastField===null){
				return _lastCommand(f);
			}
			if(!_useProperties){
				return _lastCommand(f);
			}
			return _lastCommand(_lastField,f);
		};
		this._equals=function(a,b){
			return(self._compare(a,b,1)===0);
		};
		this._compare=function(a,b,d){
			var toString = Object.prototype.toString;
			if( d === undefined) { d = 1; }
			if(a===undefined) { a = null; }
			if(b===undefined) { b = null; }
			if(a===null && b===null){
				return 0;
			}
			if(a===null&&b!==null){
				return 1;
			}
			if(a!==null&&b===null){
				return -1;
			}
			if (toString.call(a) === '[object Date]' && toString.call(b) === '[object Date]') {
				if (a < b) { return -d; }
				if (a > b) { return d; }
				return 0;
			}
			if(!_usecase && typeof(a) !== "number" && typeof(b) !== "number" ) {
				a=String(a).toLowerCase();
				b=String(b).toLowerCase();
			}
			if(a<b){return -d;}
			if(a>b){return d;}
			return 0;
		};
		this._performSort=function(){
			if(_sorting.length===0){return;}
			_data=self._doSort(_data,0);
		};
		this._doSort=function(d,q){
			var by=_sorting[q].by,
			dir=_sorting[q].dir,
			type = _sorting[q].type,
			dfmt = _sorting[q].datefmt;
			if(q==_sorting.length-1){
				return self._getOrder(d, by, dir, type, dfmt);
			}
			q++;
			var values=self._getGroup(d,by,dir,type,dfmt);
			var results=[];
			for(var i=0;i<values.length;i++){
				var sorted=self._doSort(values[i].items,q);
				for(var j=0;j<sorted.length;j++){
					results.push(sorted[j]);
				}
			}
			return results;
		};
		this._getOrder=function(data,by,dir,type, dfmt){
			var sortData=[],_sortData=[], newDir = dir=="a" ? 1 : -1, i,ab,j,
			findSortKey;

			if(type === undefined ) { type = "text"; }
			if (type == 'float' || type== 'number' || type== 'currency' || type== 'numeric') {
				findSortKey = function($cell) {
					var key = parseFloat( String($cell).replace(_stripNum, ''));
					return isNaN(key) ? 0.00 : key;
				};
			} else if (type=='int' || type=='integer') {
				findSortKey = function($cell) {
					return $cell ? parseFloat(String($cell).replace(_stripNum, '')) : 0;
				};
			} else if(type == 'date' || type == 'datetime') {
				findSortKey = function($cell) {
					return $.grid.parseDate(dfmt,$cell).getTime();
				};
			} else if($.isFunction(type)) {
				findSortKey = type;
			} else {
				findSortKey = function($cell) {
					if(!$cell) {$cell ="";}
					return $.trim(String($cell).toUpperCase());
				};
			}
			$.each(data,function(i,v){
				ab = by!=="" ? $.grid.getAccessor(v,by) : v;
				if(ab === undefined) { ab = ""; }
				ab = findSortKey(ab, v);
				_sortData.push({ 'vSort': ab,'index':i});
			});

			_sortData.sort(function(a,b){
				a = a.vSort;
				b = b.vSort;
				return self._compare(a,b,newDir);
			});
			j=0;
			var nrec= data.length;
			// overhead, but we do not change the original data.
			while(j<nrec) {
				i = _sortData[j].index;
				sortData.push(data[i]);
				j++;
			}
			return sortData;
		};
		this._getGroup=function(data,by,dir,type, dfmt){
			var results=[],
			group=null,
			last=null, val;
			$.each(self._getOrder(data,by,dir,type, dfmt),function(i,v){
				val = $.grid.getAccessor(v, by);
				if(val === undefined) { val = ""; }
				if(!self._equals(last,val)){
					last=val;
					if(group !== null){
						results.push(group);
					}
					group=self._group(by,val);
				}
				group.items.push(v);
			});
			if(group !== null){
				results.push(group);
			}
			return results;
		};
		this.ignoreCase=function(){
			_usecase=false;
			return self;
		};
		this.useCase=function(){
			_usecase=true;
			return self;
		};
		this.trim=function(){
			_trim=true;
			return self;
		};
		this.noTrim=function(){
			_trim=false;
			return self;
		};
		this.execute=function(){
			var match=_query, results=[];
			if(match === null){
				return self;
			}
			$.each(_data,function(){
				if(eval(match)){
					results.push(this);
				}
			});
			_data=results;
			return self;
		};
		this.data=function(){
			return _data;
		};
		this.select=function(f){
			self._performSort();
			if(!self._hasData()){ return[]; }
			self.execute();
			if($.isFunction(f)){
				var results=[];
				$.each(_data,function(i,v){
					results.push(f(v));
				});
				return results;
			}
			return _data;
		};
		this.hasMatch=function(){
			if(!self._hasData()) { return false; }
			self.execute();
			return _data.length>0;
		};
		this.andNot=function(f,v,x){
			_negate=!_negate;
			return self.and(f,v,x);
		};
		this.orNot=function(f,v,x){
			_negate=!_negate;
			return self.or(f,v,x);
		};
		this.not=function(f,v,x){
			return self.andNot(f,v,x);
		};
		this.and=function(f,v,x){
			_queuedOperator=" && ";
			if(f===undefined){
				return self;
			}
			return self._repeatCommand(f,v,x);
		};
		this.or=function(f,v,x){
			_queuedOperator=" || ";
			if(f===undefined) { return self; }
			return self._repeatCommand(f,v,x);
		};
		this.orBegin=function(){
			_orDepth++;
			return self;
		};
		this.orEnd=function(){
			if (_query !== null){
				_query+=")";
			}
			return self;
		};
		this.isNot=function(f){
			_negate=!_negate;
			return self.is(f);
		};
		this.is=function(f){
			self._append('this.'+f);
			self._resetNegate();
			return self;
		};
		this._compareValues=function(func,f,v,how,t){
			var fld;
			if(_useProperties){
				fld='jQuery.grid.getAccessor(this,\''+f+'\')';
			}else{
				fld='this';
			}
			if(v===undefined) { v = null; }
			//var val=v===null?f:v,
			var val =v,
			swst = t.stype === undefined ? "text" : t.stype;
			if(v !== null) {
			switch(swst) {
				case 'int':
				case 'integer':
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseInt('+fld+',10)';
					val = 'parseInt('+val+',10)';
					break;
				case 'float':
				case 'number':
				case 'numeric':
					val = String(val).replace(_stripNum, '');
					val = (isNaN(Number(val)) || val==="") ? '0' : val; // To be fixed with more inteligent code
					fld = 'parseFloat('+fld+')';
					val = 'parseFloat('+val+')';
					break;
				case 'date':
				case 'datetime':
					val = String($.grid.parseDate(t.newfmt || 'Y-m-d',val).getTime());
					fld = 'jQuery.grid.parseDate("'+t.srcfmt+'",'+fld+').getTime()';
					break;
				default :
					fld=self._getStr(fld);
					val=self._getStr('"'+self._toStr(val)+'"');
			}
			}
			//self._append(fld+' '+how+' '+val + ' || pinyinEngine.toPinyin('+fld+', false, "")' +' '+how+' '+val);
			self._append(fld+' '+how+' '+val);
			self._setCommand(func,f);
			self._resetNegate();
			return self;
		};
		this.equals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"==",t);
		};
		this.notEquals=function(f,v,t){
			return self._compareValues(self.equals,f,v,"!==",t);
		};
		this.isNull = function(f,v,t){
			return self._compareValues(self.equals,f,null,"===",t);
		};
		this.greater=function(f,v,t){
			return self._compareValues(self.greater,f,v,">",t);
		};
		this.less=function(f,v,t){
			return self._compareValues(self.less,f,v,"<",t);
		};
		this.greaterOrEquals=function(f,v,t){
			return self._compareValues(self.greaterOrEquals,f,v,">=",t);
		};
		this.lessOrEquals=function(f,v,t){
			return self._compareValues(self.lessOrEquals,f,v,"<=",t);
		};
		this.startsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length : val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(v)+'"'));
			}else{
				length=_trim?$.trim(v.toString()).length:v.toString().length;
				self._append(self._getStr('this')+'.substr(0,'+length+') == '+self._getStr('"'+self._toStr(f)+'"'));
			}
			self._setCommand(self.startsWith,f);
			self._resetNegate();
			return self;
		};
		this.endsWith=function(f,v){
			var val = (v===undefined || v===null) ? f: v,
			length=_trim ? $.trim(val.toString()).length:val.toString().length;
			if(_useProperties){
				self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.substr('+self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.length-'+length+','+length+') == "'+self._toStr(v)+'"');
			} else {
				self._append(self._getStr('this')+'.substr('+self._getStr('this')+'.length-"'+self._toStr(f)+'".length,"'+self._toStr(f)+'".length) == "'+self._toStr(f)+'"');
			}
			self._setCommand(self.endsWith,f);self._resetNegate();
			return self;
		};
		this.contains=function(f,v){
			if(_useProperties){
				if(_usePinyin){
					self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.indexOf("'+self._toStr(v)+'",0) > -1'
							+ ' || ' + self._getStr('pinyinEngine.toPinyin(jQuery.grid.getAccessor(this,\''+f+'\'), false, "")')+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}else{
					self._append(self._getStr('jQuery.grid.getAccessor(this,\''+f+'\')')+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}
				
			}else{
				if(_usePinyin){
					self._append(self._getStr('this')+'.indexOf("'+self._toStr(f)+'",0) > -1'
							+ ' || ' + pinyinEngine.toPinyin(self._getStr('this'), false, "")+'.indexOf("'+self._toStr(v)+'",0) > -1');
				}else{
					self._append(self._getStr('this')+'.indexOf("'+self._toStr(f)+'",0) > -1');
				}
			}
			self._setCommand(self.contains,f);
			self._resetNegate();
			return self;
		};
		this.groupBy=function(by,dir,type, datefmt){
			if(!self._hasData()){
				return null;
			}
			return self._getGroup(_data,by,dir,type, datefmt);
		};
		this.orderBy=function(by,dir,stype, dfmt){
			dir =  dir === undefined || dir === null ? "a" :$.trim(dir.toString().toLowerCase());
			if(stype === null || stype === undefined) { stype = "text"; }
			if(dfmt === null || dfmt === undefined) { dfmt = "Y-m-d"; }
			if(dir=="desc"||dir=="descending"){dir="d";}
			if(dir=="asc"||dir=="ascending"){dir="a";}
			_sorting.push({by:by,dir:dir,type:stype, datefmt: dfmt});
			return self;
		};
		return self;
		};
	return new QueryObject(source,null);
	},
	getMethod: function (name) {
        return this.getAccessor($.fn.grid, name);
	},
	extend : function(methods) {
		$.extend($.fn.grid,methods);
		if (!this.no_legacy_api) {
			$.fn.extend(methods);
		}
	}
});
grid = $.component( "coral.grid", $.coral.grid, {
	_isArray: function(arr) {
		return Object.prototype.toString.apply(arr) === "[object Array]";
	},
	transformToArrayFormat: function(sNodes) {
		var childKey = "children",
			r = [];
		if (this._isArray(sNodes)) {
			for (var i=0, l=sNodes.length; i<l; i++) {
				r.push(sNodes[i]);
				if (sNodes[i][childKey])
					r = r.concat(this.transformToArrayFormat(sNodes[i][childKey]));
			}
		}else{
			r.push(sNodes);
			if (sNodes[childKey])
				r = r.concat(this.transformToArrayFormat(sNodes[childKey]));
		}
		return r;
	},
	transformToTreeFormat: function(sNodes) {
		var i, l, level,
			key = "id",
			parentKey = this.options.treeReader.parent_id_field,
			childKey = "children";
		if (this._isArray(sNodes)) {
			var r = [],
			    tmpMap = [];
			for (i=0, l=sNodes.length; i<l; i++) {
				sNodes[i][this.options.treeReader.loaded] = true;
				tmpMap[sNodes[i][key]] = sNodes[i];
			}
			for (i=0, l=sNodes.length; i<l; i++) {
				if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
					if (!tmpMap[sNodes[i][parentKey]][childKey]) 
						tmpMap[sNodes[i][parentKey]][childKey] = [];
					tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
				} else {
					r.push(sNodes[i]);
				}
			}
			return r;
		} else {
			return [sNodes];
		}
	},
	setSonNodeLevel: function(node, level) {
		var that = this;
		if (node.children) {
			var length = node.children.length;
			for (var i = 0; i < length; i++) {
				var childlevel = level + 1;
				node.children[i].level = childlevel;
				that.setSonNodeLevel(node.children[i], childlevel);
			}
		}
	},
	getNodeLevel: function(node, level) {
		var that = this;
		for(var i=0; i<node.length; i++) {
			node[i].level = level;
			that.setSonNodeLevel(node[i], level)
		}
		return node;
	},
	recurrenceNode: function(data) {
		var that = this;
		var node = that.getNodeLevel(data, 0);
		return node;
	},
	setTreeNode : function(i, len){
		var that = this;
		if( !that.grid || !that.options.treeGrid ) {return;}
		var expCol = that.options.expColInd,
		expanded = that.options.treeReader.expanded_field,
		isLeaf = that.options.treeReader.leaf_field,
		level = that.options.treeReader.level_field,
		icon = that.options.treeReader.icon_field,
		loaded = that.options.treeReader.loaded,  lft, rgt, curLevel, ident,lftpos, twrap,
		ldat, lf;
		/*if( that.options.generalLevel === true || that.options.generalLevel == "true") {
			var data1 = that.transformToTreeFormat(that.options.data);
			that.options.data = that.recurrenceNode(data1);
			that.options.data = that.transformToArrayFormat(that.options.data);
		}*/
		while(i<len) {
			var ind = that.rows[i].id, dind = that.options._index[ind], expan;
			ldat = that.options.data[dind];
			//that.rows[i].level = ldat[level];
			if(that.options.treeGridModel == 'nested') {
				if(!ldat[isLeaf]) {
				lft = parseInt(ldat[that.options.treeReader.left_field],10);
				rgt = parseInt(ldat[that.options.treeReader.right_field],10);
				// NS Model
					ldat[isLeaf] = (rgt === lft+1) ? 'true' : 'false';
					that.rows[i].cells[that.options._treeleafpos].innerHTML = ldat[isLeaf];
				}
			}
			//else {
				//row.parent_id = rd[that.options.treeReader.parent_id_field];
			//}
			curLevel = parseInt(ldat[level], 10);
			if(that.options.tree_root_level === 0) {
				ident = curLevel+1;
				lftpos = curLevel;
			} else {
				ident = curLevel;
				lftpos = curLevel -1;
			}
			twrap = "<div class='tree-wrap tree-wrap-"+that.options.direction+"' style='width:"+(ident*18)+"px;'>";
			twrap += "<div style='"+(that.options.direction=="rtl" ? "right:" : "left:")+(lftpos*18)+"px;' class=' ";
			if(ldat[loaded] !== undefined) {
				if(ldat[loaded]=="true" || ldat[loaded]===true) {
					ldat[loaded] = true;
				} else {
					ldat[loaded] = false;
				}
			}
			if(ldat[isLeaf] == "true" || ldat[isLeaf] === true) {
				twrap += ((ldat[icon] !== undefined && ldat[icon] !== "") ? ldat[icon] : that.options.treeIcons.leaf)+" tree-leaf treeclick";
				ldat[isLeaf] = true;
				lf="leaf";
			} else {
				ldat[isLeaf] = false;
				lf="";
			}
			ldat[expanded] = ((ldat[expanded] == "true" || ldat[expanded] === true) ? true : false) && ldat[loaded];
			if(ldat[expanded] === false) {
				twrap += ((ldat[isLeaf] === true) ? "'" : that.options.treeIcons.plus+" tree-plus treeclick'");
			} else {
				twrap += ((ldat[isLeaf] === true) ? "'" : that.options.treeIcons.minus+" tree-minus treeclick'");
			}
			twrap += "></div></div>";
			$(that.rows[i].cells[expCol]).wrapInner("<span class='cell-wrapper"+lf+"'></span>").prepend(twrap);
			if(curLevel !== parseInt(that.options.tree_root_level,10)) {
				var pn = $(that.element).grid('getNodeParent',ldat);
				expan = pn && pn.hasOwnProperty(expanded) ? pn[expanded] : true;
				if( !expan ){
					$(that.rows[i]).css("display","none");
				}
			}
			$(that.rows[i].cells[expCol])
				.find("div.treeclick")
				.bind("click",function(e){
					var target = e.target || e.srcElement,
					ind2 =$(target,that.rows).closest("tr.jqgrow")[0].id,
					pos = that.options._index[ind2];
					if(!that.options.data[pos][isLeaf]){
						if(that.options.data[pos][expanded]){
							$(that.element).grid("collapseRow",that.options.data[pos]);
							$(that.element).grid("collapseNode",that.options.data[pos]);
						} else {
							$(that.element).grid("expandRow",that.options.data[pos]);
							$(that.element).grid("expandNode",that.options.data[pos]);
						}
					}
					return false;
				});
			if(that.options.ExpandColClick === true) {
				$(that.rows[i].cells[expCol])
					.find("span.cell-wrapper")
					.css("cursor","pointer")
					.bind("click",function(e) {
						var target = e.target || e.srcElement,
						ind2 =$(target,that.rows).closest("tr.jqgrow")[0].id,
						pos = that.options._index[ind2];
						if(!that.options.data[pos][isLeaf]){
							if(that.options.data[pos][expanded]){
								$(that.element).grid("collapseRow",that.options.data[pos]);
								$(that.element).grid("collapseNode",that.options.data[pos]);
							} else {
								$(that.element).grid("expandRow",that.options.data[pos]);
								$(that.element).grid("expandNode",that.options.data[pos]);
							}
						}
						$(that.element).grid("setSelection",ind2);
						return false;
					});
			}
			i++;
		}
	},
	setTreeGrid : function() {
		var that = this, i=0, pico, ecol = false, nm, key, dupcols=[];
		if(!that.options.treeGrid) {return;}
		if(!that.options.treedatatype ) {$.extend(that.options,{treedatatype: that.options.datatype});}
		that.options.subGrid = false;that.options.altRows =false;
		//that.options.pgbuttons = false;that.options.pginput = false;
		that.options.gridview =  true;
		if(that.options.rowTotal === null ) { that.options.rowNum = 10000; }
		that.options.multiselect = false;that.options.rowList = [];
		that.options.expColInd = 0;
		pico = 'coral-icon-triangle-1-' + (that.options.direction=="rtl" ? 'w' : 'e');
		that.options.treeIcons = $.extend({plus:"cui-icon-arrow-right3",minus:'cui-icon-arrow-down3',leaf:'cui-icon-file-empty2'},that.options.treeIcons || {});
		if(that.options.treeGridModel == 'nested') {
			that.options.treeReader = $.extend({
				level_field: "level",
				left_field:"lft",
				right_field: "rgt",
				leaf_field: "isLeaf",
				expanded_field: "expanded",
				loaded: "loaded",
				icon_field: "icon"
			},that.options.treeReader);
		} else if(that.options.treeGridModel == 'adjacency') {
			that.options.treeReader = $.extend({
					level_field: "level",
					parent_id_field: "parent",
					leaf_field: "isLeaf",
					expanded_field: "expanded",
					loaded: "loaded",
					icon_field: "icon"
			},that.options.treeReader );
		}
		for ( key in that.options.colModel){
			if(that.options.colModel.hasOwnProperty(key)) {
				nm = that.options.colModel[key].name;
				if( nm == that.options.expandColumn && !ecol ) {
					ecol = true;
					that.options.expColInd = i;
				}
				i++;
				//
				for(var tkey in that.options.treeReader) {
					if(that.options.treeReader[tkey] == nm) {
						dupcols.push(nm);
					}
				}
			}
		}
		$.each(that.options.treeReader,function(j,n){
			if(n && $.inArray(n, dupcols) === -1){
				if(j==='leaf_field') { that.options._treeleafpos= i; }
			i++;
				that.options.colNames.push(n);
				that.options.colModel.push({name:n,width:1,hidden:true,sortable:false,resizable:false,hidedlg:true,editable:true,search:false});
			}
		});			
	},
	expandRow: function (record){
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var childern = $(that.element).grid("getNodeChildren",record),
		//if ($(that.element).grid("isVisibleNode",record)) {
		expanded = that.options.treeReader.expanded_field,
		rows = that.rows;
		$(childern).each(function(){
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$(rows.namedItem(id)).css("display","");
			if(this[expanded]) {
				$(that.element).grid("expandRow",this);
			}
		});
	},
	collapseRow : function (record) {
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var childern = $(that.element).grid("getNodeChildren",record),
		expanded = that.options.treeReader.expanded_field,
		rows = that.rows;
		$(childern).each(function(){
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$(rows.namedItem(id)).css("display","none");
			if(this[expanded]){
				$(that.element).grid("collapseRow",this);
			}
		});
	},
	// NS ,adjacency models
	getRootNodes : function() {
		var result = [];
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var level = that.options.treeReader.level_field;
				$(that.options.data).each(function(){
					if(parseInt(this[level],10) === parseInt(that.options.tree_root_level,10)) {
						result.push(this);
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field;
				$(that.options.data).each(function(){
					if(this[parent_id] === null || String(this[parent_id]).toLowerCase() == "null") {
						result.push(this);
					}
				});
				break;
		}
		return result;
	},
	getNodeDepth : function(rc) {
		var ret = null;
		this.each(function(){
			if(!this.grid || !this.options.treeGrid) {return;}
			var $t = this;
			switch (that.options.treeGridModel) {
				case 'nested' :
					var level = that.options.treeReader.level_field;
					ret = parseInt(rc[level],10) - parseInt(that.options.tree_root_level,10);
					break;
				case 'adjacency' :
					ret = $($t).grid("getNodeAncestors",rc).length;
					break;
			}
		});
		return ret;
	},
	getNodeParent : function(rc) {
		var result = null;
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var lftc = that.options.treeReader.left_field,
				rgtc = that.options.treeReader.right_field,
				levelc = that.options.treeReader.level_field,
				lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
				$(that.options.data).each(function(){
					if(parseInt(this[levelc],10) === level-1 && parseInt(this[lftc],10) < lft && parseInt(this[rgtc],10) > rgt) {
						result = this;
						return false;
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field,
				dtid = that.options.localReader.id;
				$(that.options.data).each(function(){
					if(this[dtid] == rc[parent_id] ) {
						result = this;
						return false;
					}
				});
				break;
		}
		return result;
	},
	getNodeChildren : function(rc) {
		var result = [];
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		switch (that.options.treeGridModel) {
			case 'nested' :
				var lftc = that.options.treeReader.left_field,
				rgtc = that.options.treeReader.right_field,
				levelc = that.options.treeReader.level_field,
				lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
				$(this.options.data).each(function(){
					if(parseInt(this[levelc],10) === level+1 && parseInt(this[lftc],10) > lft && parseInt(this[rgtc],10) < rgt) {
						result.push(this);
					}
				});
				break;
			case 'adjacency' :
				var parent_id = that.options.treeReader.parent_id_field,
				dtid = that.options.localReader.id;
				$(this.options.data).each(function(){
					if(this[parent_id] == rc[dtid]) {
						result.push(this);
					}
				});
				break;
		}
		return result;
	},
	getFullTreeNode : function(rc) {
		var result = [];
		this.each(function(){
			var $t = this, len;
			if(!$t.grid || !that.options.treeGrid) {return;}
			switch (that.options.treeGridModel) {
				case 'nested' :
					var lftc = that.options.treeReader.left_field,
					rgtc = that.options.treeReader.right_field,
					levelc = that.options.treeReader.level_field,
					lft = parseInt(rc[lftc],10), rgt = parseInt(rc[rgtc],10), level = parseInt(rc[levelc],10);
					$(this.options.data).each(function(){
						if(parseInt(this[levelc],10) >= level && parseInt(this[lftc],10) >= lft && parseInt(this[lftc],10) <= rgt) {
							result.push(this);
						}
					});
					break;
				case 'adjacency' :
					if(rc) {
					result.push(rc);
					var parent_id = that.options.treeReader.parent_id_field,
					dtid = that.options.localReader.id;
					$(this.options.data).each(function(i){
						len = result.length;
						for (i = 0; i < len; i++) {
							if (result[i][dtid] == this[parent_id]) {
								result.push(this);
								break;
							}
						}
					});
					}
					break;
			}
		});
		return result;
	},	
	// End NS, adjacency Model
	getNodeAncestors : function(rc) {
		var ancestors = [];
		this.each(function(){
			if(!this.grid || !this.options.treeGrid) {return;}
			var parent = $(this).grid("getNodeParent",rc);
			while (parent) {
				ancestors.push(parent);
				parent = $(this).grid("getNodeParent",parent);	
			}
		});
		return ancestors;
	},
	isVisibleNode : function(rc) {
		var result = true;
		this.each(function(){
			var $t = this;
			if(!$t.grid || !that.options.treeGrid) {return;}
			var ancestors = $($t).grid("getNodeAncestors",rc),
			expanded = that.options.treeReader.expanded_field;
			$(ancestors).each(function(){
				result = result && this[expanded];
				if(!result) {return false;}
			});
		});
		return result;
	},
	isNodeLoaded : function(rc) {
		var result;
		var that = this;
		if(!that.grid || !that.options.treeGrid) {return;}
		var isLeaf = that.options.treeReader.leaf_field;
		if(rc !== undefined ) {
			if(rc.loaded !== undefined) {
				result = rc.loaded;
			} else if( rc[isLeaf] || $(that.element).grid("getNodeChildren",rc).length > 0){
				result = true;
			} else {
				result = false;
			}
		} else {
			result = false;
		}
		return result;
	},
	expandNode : function(rc) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var expanded = this.options.treeReader.expanded_field,
		parent = this.options.treeReader.parent_id_field,
		loaded = this.options.treeReader.loaded,
		level = this.options.treeReader.level_field,
		lft = this.options.treeReader.left_field,
		rgt = this.options.treeReader.right_field;

		if(!rc[expanded]) {
			var id = $.grid.getAccessor(rc,this.options.localReader.id);
			var rc1 = $("#"+$.grid.coralID(id),this.grid.rowsView)[0];
			var position = this.options._index[id];
			if( $(this.element).grid("isNodeLoaded",this.options.data[position]) ) {
				rc[expanded] = true;
				$("div.treeclick",rc1).removeClass(this.options.treeIcons.plus+" tree-plus").addClass(this.options.treeIcons.minus+" tree-minus");
			} else if (!this.grid.columnsView.loading) {
				rc[expanded] = true;
				$("div.treeclick",rc1).removeClass(this.options.treeIcons.plus+" tree-plus").addClass(this.options.treeIcons.minus+" tree-minus");
				this.options.treeANode = rc1.rowIndex;
				this.options.datatype = this.options.treedatatype;
				if(this.options.treeGridModel == 'nested') {
					$(this.element).grid("option",{postData:{nodeid:id,n_left:rc[lft],n_right:rc[rgt],n_level:rc[level]}});
				} else {
					$(this.element).grid("option",{postData:{nodeid:id,parentid:rc[parent],n_level:rc[level]}} );
				}
				$(this.element).grid("reload");
				rc[loaded] = true;
				if(this.options.treeGridModel == 'nested') {
					$(this.element).grid("option",{postData:{nodeid:'',n_left:'',n_right:'',n_level:''}});
				} else {
					$(this.element).grid("option",{postData:{nodeid:'',parentid:'',n_level:''}}); 
				}
			}
		}
	},
	collapseNode : function(rc) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var expanded = this.options.treeReader.expanded_field;
		if(rc[expanded]) {
			rc[expanded] = false;
			var id = $.grid.getAccessor(rc,this.options.localReader.id);
			var rc1 = $("#"+$.grid.coralID(id),this.grid.rowsView)[0];
			$("div.treeclick",rc1).removeClass(this.options.treeIcons.minus+" tree-minus").addClass(this.options.treeIcons.plus+" tree-plus");
		}
	},
	sortTree : function( sortname, newDir, st, datefmt) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var i, len,
		rec, records = [], that = this, query, roots,
		rt = $(that.element).grid("getRootNodes");
		// Sorting roots
		query = $.grid.from(rt);
		query.orderBy(sortname,newDir,st, datefmt);
		roots = query.select();

		// Sorting children
		for (i = 0, len = roots.length; i < len; i++) {
			rec = roots[i];
			records.push(rec);
			$(that.element).grid("collectChildrenSortTree",records, rec, sortname, newDir,st, datefmt);
		}
		$.each(records, function(index) {
			var id  = $.grid.getAccessor(this,that.options.localReader.id);
			$('#'+$.grid.coralID(that.options.id)+ ' tbody tr:eq('+index+')').after($('tr#'+$.grid.coralID(id),that.grid.rowsView));
		});
		query = null;roots=null;records=null;
	},
	collectChildrenSortTree : function(records, rec, sortname, newDir,st, datefmt) {
		if(!this.grid || !this.options.treeGrid) {return;}
		var i, len,
		child, ch, query, children;
		ch = $(this.element).grid("getNodeChildren",rec);
		query = $.grid.from(ch);
		query.orderBy(sortname, newDir, st, datefmt);
		children = query.select();
		for (i = 0, len = children.length; i < len; i++) {
			child = children[i];
			records.push(child);
			$(this.element).grid("collectChildrenSortTree",records, child, sortname, newDir, st, datefmt); 
		}
	},
	// experimental 
	setTreeRow : function(rowid, data) {
		var success=false;
		this.each(function(){
			var t = this;
			if(!t.grid || !t.options.treeGrid) {return;}
			success = $(t).grid("setRowData",rowid,data);
		});
		return success;
	},
	delTreeNode : function (rowid) {
		return this.each(function () {
			var $t = this, rid = that.options.localReader.id,
			left = that.options.treeReader.left_field,
			right = that.options.treeReader.right_field, myright, width, res, key;
			if(!$t.grid || !that.options.treeGrid) {return;}
			var rc = that.options._index[rowid];
			if (rc !== undefined) {
				// nested
				myright = parseInt(that.options.data[rc][right],10);
				width = myright -  parseInt(that.options.data[rc][left],10) + 1;
				var dr = $($t).grid("getFullTreeNode",that.options.data[rc]);
				if(dr.length>0){
					for (var i=0;i<dr.length;i++){
						$($t).grid("delRowData",dr[i][rid]);
					}
				}
				if( that.options.treeGridModel === "nested") {
					// ToDo - update grid data
					res = $.grid.from(that.options.data)
						.greater(left,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) - width ;
							}
						}
					}
					res = $.grid.from(that.options.data)
						.greater(right,myright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) - width ;
							}
						}
					}
				}
			}
		});
	},
	addChildNode : function( nodeid, parentid, data ) {
		//return this.each(function(){
		var $t = this[0];
		if(data) {
			// we suppose tha the id is autoincremet and
			var expanded = that.options.treeReader.expanded_field,
			isLeaf = that.options.treeReader.leaf_field,
			level = that.options.treeReader.level_field,
			//icon = that.options.treeReader.icon_field,
			parent = that.options.treeReader.parent_id_field,
			left = that.options.treeReader.left_field,
			right = that.options.treeReader.right_field,
			loaded = that.options.treeReader.loaded,
			method, parentindex, parentdata, parentlevel, i, len, max=0, rowind = parentid, leaf, maxright;

			if ( typeof nodeid === 'undefined' || nodeid === null ) {
				i = that.options.data.length-1;
				if(	i>= 0 ) {
					while(i>=0){max = Math.max(max, parseInt(that.options.data[i][that.options.localReader.id],10)); i--;}
				}
				nodeid = max+1;
			}
			var prow = $($t).grid('getInd', parentid);
				leaf = false;
				// if not a parent we assume root
				if ( parentid === undefined  || parentid === null || parentid==="") {
					parentid = null;
					rowind = null;
					method = 'last';
					parentlevel = that.options.tree_root_level;
					i = that.options.data.length+1;
				} else {
					method = 'after';
					parentindex = that.options._index[parentid];
					parentdata = that.options.data[parentindex];
					parentid = parentdata[that.options.localReader.id];
					parentlevel = parseInt(parentdata[level],10)+1;
					var childs = $($t).grid('getFullTreeNode', parentdata);
					// if there are child nodes get the last index of it
					if(childs.length) {
						i = childs[childs.length-1][that.options.localReader.id];
						rowind = i;
						i = $($t).grid('getInd',rowind)+1;
					} else {
						i = $($t).grid('getInd', parentid)+1;
					}
					// if the node is leaf
					if(parentdata[isLeaf]) {
						leaf = true;
						parentdata[expanded] = true;
						//var prow = $($t).grid('getInd', parentid);
						$($t.rows[prow])
							.find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper")
							.end()
							.find("div.tree-leaf").removeClass(that.options.treeIcons.leaf+" tree-leaf").addClass(that.options.treeIcons.minus+" tree-minus");
						that.options.data[parentindex][isLeaf] = false;
						parentdata[loaded] = true;
					}
				}
				len = i+1;

			data[expanded] = false;
			data[loaded] = true;
			data[level] = parentlevel;
			data[isLeaf] = true;
			if( that.options.treeGridModel === "adjacency") {
				data[parent] = parentid;
			}
			if( that.options.treeGridModel === "nested") {
				// this method requiere more attention
				var query, res, key;
				//maxright = parseInt(maxright,10);
				// ToDo - update grid data
				if(parentid !== null) {
					maxright = parseInt(parentdata[right],10);
					query = $.grid.from(that.options.data);
					query = query.greaterOrEquals(right,maxright,{stype:'integer'});
					res = query.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = res[key][left] > maxright ? parseInt(res[key][left],10) +2 : res[key][left];
								res[key][right] = res[key][right] >= maxright ? parseInt(res[key][right],10) +2 : res[key][right];
							}
						}
					}
					data[left] = maxright;
					data[right]= maxright+1;
				} else {
					maxright = parseInt( $($t).grid('getCol', right, false, 'max'), 10);
					res = $.grid.from(that.options.data)
						.greater(left,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][left] = parseInt(res[key][left],10) +2 ;
							}
						}
					}
					res = $.grid.from(that.options.data)
						.greater(right,maxright,{stype:'integer'})
						.select();
					if(res.length) {
						for( key in res) {
							if(res.hasOwnProperty(key)) {
								res[key][right] = parseInt(res[key][right],10) +2 ;
							}
						}
					}
					data[left] = maxright+1;
					data[right] = maxright + 2;
				}
			}
			if( parentid === null || $($t).grid("isNodeLoaded",parentdata) || leaf ) {
					if( that.options.generalLevel === true || that.options.generalLevel == "true") {
						var data1 = that.transformToTreeFormat(data);
						that.options.data = that.recurrenceNode(data1);
						that.options.data = that.transformToArrayFormat(that.options.data);
					}
					$($t).grid('addRowData', nodeid, data, method, rowind);
					$($t).grid('setTreeNode', i, len);
			}
			if(parentdata && !parentdata[expanded]) {
				$($t.rows[prow])
					.find("div.treeclick")
					.click();
			}
		}
		//});
	},
	refreshDescription: function( html ){
		if ( this.options.toolbarOptions ) {
			if( this.options.description ){
				$( ".pager-description", this.element ).html(html);
			}
		}
	},
	hideGridHeader: function(){
		this.element.find(".coral-grid-columns").hide();
	},
	showGridHeader: function(){
		this.element.find(".coral-grid-columns").show();
	},
	//grid校验模块
	// 校验模块 校验单元格内容，如果是编辑状态，则先要保存这一行。
	valid: function( rowid, colname ) {
		var res = {}, resall, getall=false, len, j=0;
		var that = this,nm,editable,ind;
		that.errorResults = [];
		var state;
		if(typeof(rowid) == 'undefined' || !rowid) {
			getall = true;
			resall = [];
			len = that.rows.length;
		} else {
			ind = that.rows.namedItem(rowid);
			if(!ind) { return res; }
			len = 2;//TODO: getRowData方法一直设置为2，，
		}
		while(j<len){
			if(getall) { ind = that.rows[j]; }
			if( $(ind).hasClass('jqgrow') ) {
				$('td[role="gridcell"]',ind).each( function(i) {
					var error;
					nm = that.options.colModel[i].name;
					editable = that.options.colModel[i].editable;
					if ( !colname || ( colname && nm == colname ) ) {
						if ( nm !== 'cb' && nm !== 'subgrid' && nm !== 'rn') {
							if(that.options.treeGrid===true && nm == that.options.expandColumn) {
								res[nm] = $.grid.htmlDecode($("span:first",this).html());
							} else {
								try {
									var sRowArr = $.grep( that.options.savedRow, function( sRow ) {
										// TODO: 是否有错误？本地和远程数据的判断
										return sRow.id == ind.id || that.rows[sRow.id].id == ind.id;
									});
									if ( that.options.savedRow.length && sRowArr.length && editable ) {
										state = "edittype";
									} else {
										state = null;
									}
									res[nm] = $.unformat.call(that,this,{rowId:ind.id, colModel:that.options.colModel[i]},i,"get",state);								
								} catch (e){
									res[nm] = $.grid.htmlDecode($(this).html());
								}
							}
							var validateopitons = $.extend( that.options.colModel[i].formatoptions||{},
								that.options.colModel[i].editoptions||{} );
							var event = $.Event();
							event.target = this;
							var isElement = $(this).find(".ctrl-form-element");
							if(isElement.length > 0){
								for(var i =0;i<isElement.length; i++){
									var data = {
										validoptions: validateopitons,
										notComponent: false,
										showRequiredMark: $.noop,
										hasTips: false,
										component: that.getCellComponent( ind.id, nm ),
										element: $(isElement[i]),
										value: res[nm]
									};
									error = $.validate.validateField( event, data );
								}
							} else{
								var data = {
									validoptions: validateopitons,
									notComponent: true,
									showRequiredMark: $.noop,
									hasTips: false,
									component: $(this),
									element: $(this),
									value: res[nm]
								};
								error = $.validate.validateField( event, data );
							}
							if ( error.length ) {
								if ( that.options.allowSaveOnError ) {
									$(this).addClass( "coral-gridcell-error" ).attr("data-errors", error);
								} else {
									$(this).addClass( "coral-gridcell-error" );
								}
								// 会有添加两遍的bug
								that.errorResults.push({"rowId":ind.id,"rowIndex":j,"cellIndex":i,"errors": error});
							} else {
								$(this).removeClass( "coral-gridcell-error" )
								.removeAttr("data-errors");
							}
						}
					}
				});
				if(getall) { resall.push(res); res={}; }
			}
			j++;
		}
		this.options.isValid = !(this.errorResults.length>0);
		return this.options.isValid;
	},
	clearErrors: function( rowid, colname ) {
		var res = {}, resall, getall=false, len, j=0;
		var that = this,nm,editable,ind;
		this.errorResults = this.errorResults || [];
		if(typeof(rowid) == 'undefined' || !rowid) {
			getall = true;
			resall = [];
			len = that.rows.length;
			that.errorResults = [];
		} else {
			ind = that.rows.namedItem(rowid);
			if(!ind) { return res; }
			len = 2;
			var k = that.errorResults.length;
			for(k ; k>0; k--) {
				if ( that.errorResults[k-1].rowId == ind.id ) {
					that.errorResults.splice(k-1, 1);
				}
			}
		}
		while(j<len){
			if(getall) { ind = that.rows[j]; }
			if( $(ind).hasClass('jqgrow') ) {
				$('td[role="gridcell"]',ind).each( function(i) {
					$(this).removeClass( "coral-gridcell-error coral-validate-error" )
					.removeAttr("data-errors");
				});
			}
			j++;
		}
		this.options.isValid = !(this.errorResults.length>0);
	},
	getCellErrors: function(){
		return that.errorResults;
	},
	resizeFrozen: function(){
		var top = this.options.caption ? $(this.grid.cDiv).outerHeight() : 0,
			hth = $(".coral-grid-htable","#"+$.grid.coralID(this.options.id)).outerHeight();
			//headers
			if(this.options.toppager) {
				top = top + $($t.grid.topDiv).outerHeight();
			}
			if(this.options.toolbar[0] === true) {
				if(this.options.toolbar[1] != "bottom") {
					top = top + $(this.grid.uDiv).outerHeight();
				}
			}
			if( this.grid.fhDiv ) {
				var columsHeight = $("th",this.grid.columnsView).height();
				$(this.grid.fhDiv).css({"top": top}); 
				$("th",this.grid.fhDiv).each(function(){
					$(this).height(columsHeight);
				});
				$(this.grid.fbDiv).css({"top": (parseInt(top,10)+parseInt(hth,10))}); 
				$(this.grid.fbDiv).height( $(this.grid.rowsView).height()-this.getScrollBarWidth()+2);
			}
			if( this.grid.rightfhDiv ) {
				var columsHeight = $("th",this.grid.columnsView).height();
				$("th",this.grid.rightfhDiv).each(function(){
					$(this).height(columsHeight);
				});
				$(this.grid.rightfhDiv).css({"top": top}); 
				$(this.grid.rightfbDiv).css({"top": (parseInt(top,10)+parseInt(hth,10))}); 
				$(this.grid.rightfbDiv).height( $(this.grid.rowsView).height()-this.getScrollBarWidth()+2);
			}
	},
	setFrozenColumns : function () {
		if ( !this.grid ) {return;}
		var $t = this, cm = $t.options.colModel,i=0, len = cm.length, j = len - 1, rightmaxfrozen = -1, maxfrozen = -1, frozen= false;
		// TODO treeGrid and grouping  Support
		if($t.options.subGrid === true || $t.options.treeGrid === true || $t.options.cellEdit === true || $t.options.sortable || $t.options.scroll || $t.options.grouping )
		{
			return;
		}
		if($t.options.rownumbers) { i++; }
		if($t.options.multiselect||$t.options.singleselect) { i++; }
		
		// get the max index of frozen col
		while(i<len)
		{
			// from left, no breaking frozen
			if(cm[i].frozen === true)
			{
				frozen = true;
				maxfrozen = i;
			} else {
				break;
			}
			i++;
		}
		while( j > 0 )
		{
			// from left, no breaking frozen
			if(cm[j].frozen === true)
			{
				frozen = true;
				rightmaxfrozen = j;
			} else {
				break;
			}
			j--;
		}
		
		if (rightmaxfrozen>0){
			maxfrozen = -1;
		}
		if( frozen) {
			var top = $t.options.caption ? $($t.grid.cDiv).outerHeight() : 0,
			hth = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).outerHeight();
			//headers
			if($t.options.toppager) {
				top = top + $($t.grid.topDiv).outerHeight();
			}
			if($t.options.toolbar[0] === true) {
				if($t.options.toolbar[1] != "bottom") {
					top = top + $($t.grid.uDiv).outerHeight();
				}
			}
			if( maxfrozen>=0 ) {
				$t.grid.fhDiv = $('<div style="position:absolute;left:0px;top:'+top+'px;" class="frozen-div-left coral-state-default coral-grid-columns coral-grid-columns-view"></div>');
				$t.grid.fbDiv = $('<div style="position:absolute;left:0px;top:'+(parseInt(top,10)+parseInt(hth,10))+'px;overflow-y:hidden" class="frozen-bdiv coral-grid-rows coral-grid-rows-view"></div>');
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.fhDiv);
			}
			if( rightmaxfrozen>=0 ) {
				$t.grid.rightfhDiv = $('<div style="position:absolute;right:0;top:'+top+'px;" class="frozen-div-right coral-state-default coral-grid-columns coral-grid-columns-view"></div>');
				$t.grid.rightfbDiv = $('<div style="position:absolute;right:0;top:'+(parseInt(top,10)+parseInt(hth,10))+'px;overflow-y:hidden" class="frozen-bdiv coral-grid-rows coral-grid-rows-view"></div>');
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.rightfhDiv);
			}
			var htbl = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).clone(true);
			var righthtbl = $(".coral-grid-htable","#"+$.grid.coralID($t.options.id)).clone(true);
			// groupheader support - only if useColSpanstyle is false
			$t.rightFrozenWidth = 0;
			if($t.options.groupHeader) {
				//TODO: group frozen on right col
				if( maxfrozen>=0 ) {
					$("tr.jqg-first-row-header, tr.jqg-third-row-header", htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
				}
				if( rightmaxfrozen>=0 ) {
					$("tr.jqg-first-row-header, tr.jqg-third-row-header", righthtbl).each(function(){
						/*$("th:gt("+ (rightmaxfrozen-1) +")",this).each(function(){
							$t.rightFrozenWidth = $t.rightFrozenWidth + $(this).width();
						});*/
						$("th:lt("+ rightmaxfrozen +")",this).remove();
					});
				}
				var swapfroz = -1, fdel = -1;
				$("tr.jqg-second-row-header th", htbl).each(function(){
					var cs= parseInt($(this).attr("colspan"),10);
					if(cs) {
						swapfroz = swapfroz+cs;
						fdel++;
					}
					if(swapfroz === maxfrozen) {
						return false;
					}
				});
				if(swapfroz !== maxfrozen) {
					fdel = maxfrozen;
				}
				$("tr.jqg-second-row-header", htbl).each(function(){
					$("th:gt("+fdel+")",this).remove();
				});
			} else {
				if( maxfrozen>=0 ) {
					$("tr",htbl).each(function(){
						$("th:gt("+maxfrozen+")",this).remove();
					});
				}
				if( rightmaxfrozen>=0 ) {
					$("tr",righthtbl).each(function(){
						/*$("th:gt("+ (rightmaxfrozen-1) +")",this).each(function(){
							$t.rightFrozenWidth = $t.rightFrozenWidth + $(this).width();
						});*/
						$("th:lt("+ rightmaxfrozen +")",this).remove();
						var scrollWidth = $t.getScrollBarWidth() -2;
						$(this).append("<th style='width:"+ scrollWidth +"px;' class='coral-state-default'>&nbsp;</th>");
					});
				}
			}
			$(htbl).width(1);
			$(righthtbl).width(1);
			// resizing stuff
			if( maxfrozen>=0 ) {
				$($t.grid.fhDiv).append(htbl).mousemove(function (e) {
					if($t.grid.resizing){ $t.grid.dragMove(e);return false; }
				});
			}
			if( rightmaxfrozen>=0 ) {
				$($t.grid.rightfhDiv).append(righthtbl).mousemove(function (e) {
					if($t.grid.resizing){ $t.grid.dragMove(e);return false; }
				});
			}
			$($t.element).bind('gridonresizestop.setFrozenColumns', function (e, ui) {
				var index = ui.index,
					w = ui.newWidth;
				if( maxfrozen>=0 ) {
					var rhth = $(".coral-grid-htable",$t.grid.fhDiv);
					$("th:eq("+index+")",rhth).width( w ); 
					var btd = $(".coral-grid-btable",$t.grid.fbDiv);
					$("tr:first td:eq("+index+")",btd).width( w ); 
				}
				if( rightmaxfrozen>=0 ) {
					var rhth = $(".coral-grid-htable",$t.grid.rightfhDiv);
					$("th:eq("+(len-index - 1)+")",rhth).width( w ); 
					var btd = $(".coral-grid-btable",$t.grid.rightfbDiv);
					$("tr:first td:eq("+(len-index - 1)+")",btd).width( w ); 
					$t.resetFrozen();
				}
			});
			// sorting stuff
			$($t.element).bind('gridonsortcol.setFrozenColumns', function (event, ui) {
				var index = ui.id, idxcol = ui.colIndex;
				if( maxfrozen>=0 ) {
					var previousSelectedTh = $("tr.coral-grid-labels:last th:eq("+$t.options.lastsort+")",$t.grid.fhDiv), newSelectedTh = $("tr.coral-grid-labels:last th:eq("+idxcol+")",$t.grid.fhDiv); 
					$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
					$(previousSelectedTh).attr("aria-selected","false");
					$("span.coral-icon-"+$t.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
					$(newSelectedTh).attr("aria-selected","true");
					if(!$t.options.viewsortcols[0]) {
						if($t.options.lastsort != idxcol) {
							$("span.s-ico",previousSelectedTh).hide();
							$("span.s-ico",newSelectedTh).show();
						}
					}
				}
				if( rightmaxfrozen>=0 ) {
					idxcol =  $t.grid.headers.length - idxcol - 1;
					var previousSelectedTh = $("tr.coral-grid-labels:last th:eq("+$t.options.lastsort+")",$t.grid.rightfhDiv), newSelectedTh = $("tr.coral-grid-labels:last th:eq("+idxcol+")",$t.grid.rightfhDiv);

					$("span.coral-grid-ico-sort",previousSelectedTh).addClass('coral-state-disabled');
					$(previousSelectedTh).attr("aria-selected","false");
					$("span.coral-icon-"+$t.options.sortorder,newSelectedTh).removeClass('coral-state-disabled');
					$(newSelectedTh).attr("aria-selected","true");
					if(!$t.options.viewsortcols[0]) {
						if($t.options.lastsort != idxcol) {
							$("span.s-ico",previousSelectedTh).hide();
							$("span.s-ico",newSelectedTh).show();
						}
					}
				}
				
			});
			
			// data stuff
			// TODO support for setRowData
			if( maxfrozen>=0 ) {
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.fbDiv);
			}
			if( rightmaxfrozen>=0 ) {
				$("#"+$.grid.coralID($t.options.id)).append($t.grid.rightfbDiv);
			}
			
			jQuery($t.grid.rowsView).scroll(function () {
				if( maxfrozen>=0 ) {
					jQuery($t.grid.fbDiv).scrollTop(jQuery(this).scrollTop());
				}
				if( rightmaxfrozen>=0 ) {
					jQuery($t.grid.rightfbDiv).scrollTop(jQuery(this).scrollTop());
				}
				
			});
			var tlength = 0,//总的滚轮滚动距离
			    bscrolltop = 0,//滚动之前的grid.rowsView滚轮距离顶端的距离
			    ascrolltop = 0;//滚动之后的grid.rowsView滚轮距离顶端的距离
			if (maxfrozen>=0) {
				$($t.grid.fbDiv).mousewheel(function (event,delta) {
					var length = -(event.deltaY * event.deltaFactor);
					bscrolltop = $($t.grid.rowsView).scrollTop();
					tlength = bscrolltop;
					tlength = tlength + length;
                    $($t.grid.rowsView).scrollTop(tlength);	
                    ascrolltop = $($t.grid.rowsView).scrollTop();
                    if (ascrolltop == bscrolltop) {
                    	tlength = tlength - length;
                    } else event.preventDefault();
				})
			} 
			if (rightmaxfrozen>=0) {
				$($t.grid.rightfbDiv).mousewheel(function (event,delta) {
					var length = -(event.deltaY * event.deltaFactor);
					bscrolltop = $($t.grid.rowsView).scrollTop();
					tlength = bscrolltop;
					tlength = tlength + length;
                    $($t.grid.rowsView).scrollTop(tlength);	
                    ascrolltop = $($t.grid.rowsView).scrollTop();
                    if (ascrolltop == bscrolltop) {
                    	tlength = tlength - length;
                    } else event.preventDefault();
				})
			}
			if($t.options.hoverrows === true) {
				$("#"+$.grid.coralID($t.options.id)).unbind('mouseover').unbind('mouseout');
			}
			$($t.element).bind('gridaftercomplete.setFrozenColumns', function () {
				$("#"+$.grid.coralID($t.options.id)+"_frozen").remove();
				var btbl, rightbtbl;
				if( maxfrozen>=0 ) {
					btbl = $("#"+$.grid.coralID($t.options.id)+"_table").clone(true);
					jQuery($t.grid.fbDiv).height( jQuery($t.grid.rowsView).height()-$t.getScrollBarWidth()+2);
					$("tr",btbl).each(function(){
						$("td:gt("+maxfrozen+")",this).remove();
						// when singleselect, the name of radio in frozen table can not be same as the original radio
						!$t.options.singleselect||$("td:eq(0)>input",this).attr("name",$("td:eq(0)>input",this).attr("name")+"_forzen");
					});
					$(btbl).width(1).attr("id",$t.options.id+"_frozen");
					$($t.grid.fbDiv).append(btbl);
					if($t.options.hoverrows === true) {
						$("tr.jqgrow", btbl).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).addClass("coral-state-hover"); },
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).removeClass("coral-state-hover"); }
						);
						$("tr.jqgrow", "#"+$.grid.coralID($t.options.id)).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").addClass("coral-state-hover");},
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").removeClass("coral-state-hover"); }
						);
					}
					btbl=null;
				}
				
				if( rightmaxfrozen>=0 ) {
					if( ( $($t.grid.rowsView)[0].scrollHeight - $($t.grid.rowsView)[0].clientHeight ) > 0 ) {
						//$t.grid.rightfhDiv.css({"right": ($t.getScrollBarWidth() -2) + "px"});
						$t.grid.rightfbDiv.css({"right": ($t.getScrollBarWidth() -2) + "px"});
					}
					rightbtbl = $("#"+$.grid.coralID($t.options.id)+"_table").clone(true);
					jQuery($t.grid.rightfbDiv).height( jQuery($t.grid.rowsView).height()-$t.getScrollBarWidth()+2);
					$("tr",rightbtbl).each(function(){
						$("td:lt("+ rightmaxfrozen +")",this).remove();
						// when singleselect, the name of radio in frozen table can not be same as the original radio
						!$t.options.singleselect||$("td:eq(0)>input",this).attr("name",$("td:eq(0)>input",this).attr("name")+"_forzen");
					});
					$(rightbtbl).width(1).attr("id",$t.options.id+"_frozen");
					$($t.grid.rightfbDiv).append(rightbtbl);
					if($t.options.hoverrows === true) {
						$("tr.jqgrow", rightbtbl).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).addClass("coral-state-hover"); },
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)).removeClass("coral-state-hover"); }
						);
						$("tr.jqgrow", "#"+$.grid.coralID($t.options.id)).hover(
							function(){ $(this).addClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").addClass("coral-state-hover");},
							function(){ $(this).removeClass("coral-state-hover"); $("#"+$.grid.coralID(this.id), "#"+$.grid.coralID($t.options.id)+"_frozen").removeClass("coral-state-hover"); }
						);
					}
					rightbtbl=null;
				}
				
				
			});
			$t.options.frozenColumns = true;
		}
	},
	destroyFrozenColumns :  function() {
		if ( !this.grid ) {return;}
		if(this.options.frozenColumns === true) {
			var $t = this;
			$($t.grid.fhDiv).remove();
			$($t.grid.fbDiv).remove();
			$($t.grid.rightfhDiv).remove();
			$($t.grid.rightfbDiv).remove();
			$t.grid.fhDiv = null; $t.grid.fbDiv=null;
			$t.grid.rightfhDiv = null; $t.grid.rightfbDiv=null;
			$(this.element).unbind('.setFrozenColumns');
			if($t.options.hoverrows === true) {
				var ptr;
				$("#"+$.grid.coralID($t.options.id)).bind('mouseover',function(e) {
					ptr = $(e.target).closest("tr.jqgrow");
					if($(ptr).attr("class") !== "coral-subgrid") {
					$(ptr).addClass("coral-state-hover");
				}
				}).bind('mouseout',function(e) {
					ptr = $(e.target).closest("tr.jqgrow");
					$(ptr).removeClass("coral-state-hover");
				});
			}
			this.options.frozenColumns = false;
		}
	}
});

/**
 * jquery.coral.grouping.js
 */
$.extend($.grid,{
	template : function(format){ //jqgformat
		var args = $.makeArray(arguments).slice(1), j, al = args.length;
		if(format==null) { format = ""; }
		return format.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function(m,i){
			if(!isNaN(parseInt(i,10))) {
				return args[parseInt(i,10)];
			}
			for(j=0; j < al;j++) {
				if($.isArray(args[j])) {
					var nmarr = args[ j ],
					k = nmarr.length;
					while(k--) {
						if(i===nmarr[k].nm) {
							return nmarr[k].v;
						}
					}
				}
			}
		});
	}
});
grid = $.component( "coral.grid", $.coral.grid, {
	groupingSetup : function () {
		var that = this, i, j, cml, cm = that.options.colModel, grp = that.options.groupingView;
		if(grp !== null && ( (typeof grp === 'object') || $.isFunction(grp) ) ) {
			if(!grp.groupField.length) {
				that.options.grouping = false;
			} else {
				if (grp.visibiltyOnNextGrouping === undefined) {
					grp.visibiltyOnNextGrouping = [];
				}

				grp.lastvalues=[];
				if(!grp._locgr) {
					grp.groups =[];
				}
				grp.counters =[];
				for(i=0;i<grp.groupField.length;i++) {
					if(!grp.groupOrder[i]) {
						grp.groupOrder[i] = 'asc';
					}
					if(!grp.groupText[i]) {
						grp.groupText[i] = '{0}';
					}
					if( typeof grp.groupColumnShow[i] !== 'boolean') {
						grp.groupColumnShow[i] = true;
					}
					if( typeof grp.groupSummary[i] !== 'boolean') {
						grp.groupSummary[i] = false;
					}
					if( !grp.groupSummaryPos[i]) {
						grp.groupSummaryPos[i] = 'footer';
					}
					if(grp.groupColumnShow[i] === true) {
						grp.visibiltyOnNextGrouping[i] = true;
						$(this.element).grid('showCol',grp.groupField[i]);
					} else {
						grp.visibiltyOnNextGrouping[i] = $("#"+$.grid.coralID(that.options.id+"_"+grp.groupField[i])).is(":visible");
						$(this.element).grid('hideCol',grp.groupField[i]);
					}
				}
				grp.summary =[];
				if(grp.hideFirstGroupCol) {
					grp.formatDisplayField[0] = function (v) { return v;};
				}
				for(j=0, cml = cm.length; j < cml; j++) {
					if(grp.hideFirstGroupCol) {
						if(!cm[j].hidden && grp.groupField[0] === cm[j].name) {
							cm[j].formatter = function(){return '';};
						}
					}
					if(cm[j].summaryType ) {
						if(cm[j].summaryDivider) {
							grp.summary.push({nm:cm[j].name,st:cm[j].summaryType, v: '', sd:cm[j].summaryDivider, vd:'', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round'});
						} else {
							grp.summary.push({nm:cm[j].name,st:cm[j].summaryType, v: '', sr: cm[j].summaryRound, srt: cm[j].summaryRoundType || 'round'});
						}
					}
				}
			}
		} else {
			this.options.grouping = false;
		}
	},
	groupingPrepare : function ( record, irow ) {
		var that = this,
			grp = this.options.groupingView, i,
			grlen = grp.groupField.length, 
			fieldName,
			v,
			displayName,
			displayValue,
			changed = 0;
		for(i=0;i<grlen;i++) {
			fieldName = grp.groupField[i];
			displayName = grp.displayField[i];
			v = record[fieldName];
			displayValue = displayName == null ? null : record[displayName];

			if( displayValue == null ) {
				displayValue = v;
			}
			if( v !== undefined ) {
				if(irow === 0 ) {
					// First record always starts a new group
					grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
					grp.lastvalues[i] = v;
					grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
					$.each(grp.counters[i].summary,function() {
						if ($.isFunction(this.st)) {
							this.v = this.st.call(this, this.v, this.nm, record);
						} else {
							this.v = that.groupingCalculations.handler(this.st, this.v, this.nm, this.sr, this.srt, record);
							if(this.st.toLowerCase() === 'avg' && this.sd) {
								this.vd = that.groupingCalculations.handler(this.st, this.vd, this.sd, this.sr, this.srt, record);
							}
						}
					});
					grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
				} else {
					if (typeof v !== "object" && ($.isArray(grp.isInTheSameGroup) && $.isFunction(grp.isInTheSameGroup[i]) ? ! grp.isInTheSameGroup[i].call(this, grp.lastvalues[i], v, i, grp): grp.lastvalues[i] !== v)) {
						// This record is not in same group as previous one
						grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
						grp.lastvalues[i] = v;
						changed = 1;
						grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
						$.each(grp.counters[i].summary,function() {
							if ($.isFunction(this.st)) {
								this.v = this.st.call(this, this.v, this.nm, record);
							} else {
								this.v = that.groupingCalculations.handler(this.st, this.v, this.nm, this.sr, this.srt, record);
								if(this.st.toLowerCase() === 'avg' && this.sd) {
									this.vd = that.groupingCalculations.handler(this.st, this.vd, this.sd, this.sr, this.srt, record);
								}
							}
						});
						grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
					} else {
						if (changed === 1) {
							// This group has changed because an earlier group changed.
							grp.groups.push({idx:i,dataIndex:fieldName,value:v, displayValue: displayValue, startRow: irow, cnt:1, summary : [] } );
							grp.lastvalues[i] = v;
							grp.counters[i] = {cnt:1, pos:grp.groups.length-1, summary: $.extend(true,[],grp.summary)};
							$.each(grp.counters[i].summary,function() {
								if ($.isFunction(this.st)) {
									this.v = this.st.call(this, this.v, this.nm, record);
								} else {
									this.v = that.groupingCalculations.handler(this.st, this.v, this.nm, this.sr, this.srt, record);
									if(this.st.toLowerCase() === 'avg' && this.sd) {
										this.vd = that.groupingCalculations.handler(this.st, this.vd, this.sd, this.sr, this.srt, record);
									}
								}
							});
							grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
						} else {
							grp.counters[i].cnt += 1;
							grp.groups[grp.counters[i].pos].cnt = grp.counters[i].cnt;
							$.each(grp.counters[i].summary,function() {
								if ($.isFunction(this.st)) {
									this.v = this.st.call(this, this.v, this.nm, record);
								} else {
									this.v = that.groupingCalculations.handler(this.st, this.v, this.nm, this.sr, this.srt, record);
									if(this.st.toLowerCase() === 'avg' && this.sd) {
										this.vd = that.groupingCalculations.handler(this.st, this.vd, this.sd, this.sr, this.srt, record);
									}
								}
							});
							grp.groups[grp.counters[i].pos].summary = grp.counters[i].summary;
						}
					}
				}
			}
		}
		//gdata.push( rData );
		return this;
	},
	groupingToggle : function(hid){
		var that = this,
		grp = that.options.groupingView,
		strpos = hid.split('_'),
		num = parseInt(strpos[strpos.length-2], 10);
		strpos.splice(strpos.length-2,2);
		var uid = strpos.join("_"),
		minus = grp.minusicon,
		plus = grp.plusicon,
		tar = $("#"+$.grid.coralID(hid)),
		r = tar.length ? tar[0].nextSibling : null,
		tarspan = $("#"+$.grid.coralID(hid)+" span."+"tree-wrap-"+that.options.direction),
		getGroupingLevelFromClass = function (className) {
			var nums = $.map(className.split(" "), function (item) {
				if (item.substring(0, uid.length + 1) === uid + "_") {
					return parseInt(item.substring(uid.length + 1), 10);
				}
			});
			return nums.length > 0 ? nums[0] : undefined;
		},
		itemGroupingLevel,
		showData,
		collapsed = false,
		frz = that.options.frozenColumns ? that.options.id+"_frozen" : false,
		tar2 = frz ? $("#"+$.grid.coralID(hid), "#"+$.grid.coralID(frz) ) : false,
		r2 = (tar2 && tar2.length) ? tar2[0].nextSibling : null;
		if( tarspan.hasClass(minus) ) {
			if(grp.showSummaryOnHide) {
				if(r){
					while(r) {
						itemGroupingLevel = getGroupingLevelFromClass(r.className);
						if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) {
							break;
						}
						$(r).hide();
						r = r.nextSibling;
						if(frz) {
							$(r2).hide();
							r2 = r2.nextSibling;
						}
					}
				}
			} else  {
				if(r){
					while(r) {
						itemGroupingLevel = getGroupingLevelFromClass(r.className);
						if (itemGroupingLevel !== undefined && itemGroupingLevel <= num) {
							break;
						}
						$(r).hide();
						r = r.nextSibling;
						if(frz) {
							$(r2).hide();
							r2 = r2.nextSibling;
						}
					}
				}
			}
			tarspan.removeClass(minus).addClass(plus);
			collapsed = true;
		} else {
			if(r){
				showData = undefined;
				while(r) {
					itemGroupingLevel = getGroupingLevelFromClass(r.className);
					if (showData === undefined) {
						showData = itemGroupingLevel === undefined; // if the first row after the opening group is data row then show the data rows
					}
					if (itemGroupingLevel !== undefined) {
						if (itemGroupingLevel <= num) {
							break;// next item of the same lever are found
						}
						if (itemGroupingLevel === num + 1) {
							$(r).show().find(">td>span."+"tree-wrap-"+ that.options.direction).removeClass(minus).addClass(plus);
							if(frz) {
								$(r2).show().find(">td>span."+"tree-wrap-"+ that.options.direction).removeClass(minus).addClass(plus);
							}
						}
					} else if (showData) {
						$(r).show();
						if(frz) {
							$(r2).show();
						}
					}
					r = r.nextSibling;
					if(frz) {
						r2 = r2.nextSibling;
					}
				}
			}
			tarspan.removeClass(plus).addClass(minus);
		}
		this._trigger("onClickGroup", null, [{"headId":hid , "collapsed":collapsed}]);
		return false;
	},
	groupingRender : function (grdata, colspans, page, rn ) {
		var that = this,
		grp = that.options.groupingView,
		str = "", icon = "", hid, clid, pmrtl = grp.groupCollapse ? grp.plusicon : grp.minusicon, gv, cp=[], len =grp.groupField.length;
		pmrtl += " tree-wrap-"+that.options.direction; 
		$.each(that.options.colModel, function (i,n){
			var ii;
			for(ii=0;ii<len;ii++) {
				if(grp.groupField[ii] === n.name ) {
					cp[ii] = i;
					break;
				}
			}
		});
		var toEnd = 0;
		function findGroupIdx( ind , offset, grp) {
			var ret = false, i;
			if(offset===0) {
				ret = grp[ind];
			} else {
				var id = grp[ind].idx;
				if(id===0) { 
					ret = grp[ind]; 
				}  else {
					for(i=ind;i >= 0; i--) {
						if(grp[i].idx === id-offset) {
							ret = grp[i];
							break;
						}
					}
				}
			}
			return ret;
		}
		function buildSummaryTd(i, ik, grp, foffset) {
			var fdata = findGroupIdx(i, ik, grp),
			cm = that.options.colModel,
			vv, grlen = fdata.cnt, str="", k;
			for(k=foffset; k<colspans;k++) {
				var tmpdata = "<td "+ that._formatCol(k,1,'')+">&#160;</td>",
				tplfld = "{0}";
				$.each(fdata.summary,function(){
					if(this.nm === cm[k].name) {
						if(cm[k].summaryTpl)  {
							tplfld = cm[k].summaryTpl;
						}
						if(typeof this.st === 'string' && this.st.toLowerCase() === 'avg') {
							if(this.sd && this.vd) { 
								this.v = (this.v/this.vd);
							} else if(this.v && grlen > 0) {
								this.v = (this.v/grlen);
							}
						}
						try {
							this.groupCount = fdata.cnt;
							this.groupIndex = fdata.dataIndex;
							this.groupValue = fdata.value;
							vv = this.formatter('', this.v, k, this);
						} catch (ef) {
							vv = this.v;
						}
						tmpdata= "<td "+ that._formatCol(k,1,'')+">"+$.grid.format(tplfld,vv)+ "</td>";
						return false;
					}
				});
				str += tmpdata;
			}
			return str;
		}
		var sumreverse = $.makeArray(grp.groupSummary), mul;
		sumreverse.reverse();
		mul = that.options.multiselect ? " colspan=\"2\"" : "";
		$.each(grp.groups,function(i,n){
			if(grp._locgr) {
				if( !(n.startRow +n.cnt > (page-1)*rn && n.startRow < page*rn)) {
					return true;
				}
			}
			toEnd++;
			clid = that.options.id+"ghead_"+n.idx;
			hid = clid+"_"+i;
			icon = "<span style='cursor:pointer;' class='icon "+pmrtl+"' onclick=\"jQuery('#"+$.grid.coralID(that.options.id)+"').grid('groupingToggle','"+hid+"');return false;\"></span>";
			try {
				if ($.isArray(grp.formatDisplayField) && $.isFunction(grp.formatDisplayField[n.idx])) {
					n.displayValue = grp.formatDisplayField[n.idx].call(this, n.displayValue, n.value, that.options.colModel[cp[n.idx]], n.idx, grp);
					gv = n.displayValue;
				} else {
					gv = this.formatter(hid, n.displayValue, cp[n.idx], n.value );
				}
			} catch (egv) {
				gv = n.displayValue;
			}
			if(grp.groupSummaryPos[n.idx] === 'header')  {
				str += "<tr id=\""+hid+"\"" +(grp.groupCollapse && n.idx>0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"coral-component-content jqgroup coral-row-"+that.options.direction+" "+clid+"\"><td style=\"padding-left:"+(n.idx * 12) + "px;"+"\"" + mul +">"+icon+$.grid.template(grp.groupText[n.idx], gv, n.cnt, n.summary)+"</td>";
				str += buildSummaryTd(i, 0, grp.groups, grp.groupColumnShow[n.idx] === false ? (mul ==="" ? 2 : 3) : ((mul ==="") ? 1 : 2) );
				str += "</tr>";
			} else {
				str += "<tr id=\""+hid+"\"" +(grp.groupCollapse && n.idx>0 ? " style=\"display:none;\" " : " ") + "role=\"row\" class= \"coral-component-content jqgroup coral-row-"+that.options.direction+" "+clid+"\"><td style=\"padding-left:"+(n.idx * 12) + "px;"+"\" colspan=\""+(grp.groupColumnShow[n.idx] === false ? colspans-1 : colspans)+"\">"+icon+$.grid.template(grp.groupText[n.idx], gv, n.cnt, n.summary)+"</td></tr>";
			}
			var leaf = len-1 === n.idx; 
			if( leaf ) {
				var gg = grp.groups[i+1], kk, ik, offset = 0, sgr = n.startRow,
				end = gg !== undefined ?  gg.startRow : grp.groups[i].startRow + grp.groups[i].cnt;
				if(grp._locgr) {
					offset = (page-1)*rn;
					if(offset > n.startRow) {
						sgr = offset;
					}
				}
				for(kk=sgr;kk<end;kk++) {
					if(!grdata[kk - offset]) { break; }
					str += grdata[kk - offset].join('');
				}
				if(grp.groupSummaryPos[n.idx] !== 'header') {
					var jj;
					if (gg !== undefined) {
						for (jj = 0; jj < grp.groupField.length; jj++) {
							if (gg.dataIndex === grp.groupField[jj]) {
								break;
							}
						}
						toEnd = grp.groupField.length - jj;
					}
					for (ik = 0; ik < toEnd; ik++) {
						if(!sumreverse[ik]) { continue; }
						var hhdr = "";
						if(grp.groupCollapse && !grp.showSummaryOnHide) {
							hhdr = " style=\"display:none;\"";
						}
						str += "<tr"+hhdr+" jqfootlevel=\""+(n.idx-ik)+"\" role=\"row\" class=\"coral-component-content jqfoot coral-row-"+that.options.direction+"\">";
						str += buildSummaryTd(i, ik, grp.groups, 0);
						str += "</tr>";
					}
					toEnd = jj;
				}
			}
		});
		$("#"+$.grid.coralID(that.options.id)+" tbody:first").append(str);
		// free up memory
		str = null;
	},
	groupingGroupBy : function (name, options ) {
		var that = this;
		if(typeof name === "string") {
			name = [name];
		}
		var grp = that.options.groupingView;
		that.options.grouping = true;

		//Set default, in case visibilityOnNextGrouping is undefined 
		if (grp.visibiltyOnNextGrouping === undefined) {
			grp.visibiltyOnNextGrouping = [];
		}
		var i;
		// show previous hidden groups if they are hidden and weren't removed yet
		for(i=0;i<grp.groupField.length;i++) {
			if(!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
			$(this).grid('showCol',grp.groupField[i]);
			}
		}
		// set visibility status of current group columns on next grouping
		for(i=0;i<name.length;i++) {
			grp.visibiltyOnNextGrouping[i] = $("#"+$.grid.coralID(that.options.id)+"_"+$.grid.coralID(name[i])).is(":visible");
		}
		that.options.groupingView = $.extend(that.options.groupingView, options || {});
		grp.groupField = name;
		$(this).trigger("reloadGrid");
	},
	groupingRemove: function (current) {
		var that = this;
		if(current === undefined) {
			current = true;
		}
		that.options.grouping = false;
		if(current===true) {
			var grp = that.options.groupingView, i;
			// show previous hidden groups if they are hidden and weren't removed yet
			for(i=0;i<grp.groupField.length;i++) {
			if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
					$(this).grid('showCol', grp.groupField);
				}
			}
			$("tr.jqgroup, tr.jqfoot","#"+$.grid.coralID(that.options.id)+" tbody:first").remove();
			$("tr.jqgrow:hidden","#"+$.grid.coralID(that.options.id)+" tbody:first").show();
		} else {
			$(this).trigger("reloadGrid");
		}
	},
	groupingCalculations: {
		handler: function(fn, v, field, round, roundType, rc) {
			var funcs = {
				sum: function() {
					return parseFloat(v||0) + parseFloat((rc[field]||0));
				},
				min: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.min(parseFloat(v),parseFloat(rc[field]||0));
				},
				max: function() {
					if(v==="") {
						return parseFloat(rc[field]||0);
					}
					return Math.max(parseFloat(v),parseFloat(rc[field]||0));
				},

				count: function() {
					if(v==="") {v=0;}
					if(rc.hasOwnProperty(field)) {
						return v+1;
					}
					return 0;
				},
				avg: function() {
					// the same as sum, but at end we divide it
					// so use sum instead of duplicating the code (?)
					return funcs.sum();
				}
			};
			if(!funcs[fn]) {
				throw ("grid Grouping No such method: " + fn);
			}
			var res = funcs[fn]();
			if (round != null) {
				if (roundType === 'fixed') {
					res = res.toFixed(round);
				} else {
					var mul = Math.pow(10, round);
					res = Math.round(res * mul) / mul;
				}
			}
			return res;
		}	
	}
});
grid = $.component("coral.grid",$.coral.grid,{
	setSubGrid : function () {
		var that = this, cm, i,
		suboptions = {
			plusicon : "coral-icon-plus",
			minusicon : "coral-icon-minus",
			openicon: "coral-icon-carat-1-sw",
			expandOnLoad:  false,
			delayOnLoad : 50,
			selectOnExpand : false,
			selectOnCollapse : false,
			reloadOnExpand : true
		};
		that.options.subGridOptions = $.extend(suboptions, that.options.subGridOptions || {});
		that.options.colNames.unshift("");
		that.options.colModel.unshift({name:'subgrid',width: $.grid.cell_width ?  that.options.subGridWidth+$t.options.cellLayout :that.options.subGridWidth,sortable: false,resizable:false,hidedlg:true,search:false,fixed:true});
		cm = that.options.subGridModel;
		if(cm[0]) {
			cm[0].align = $.extend([],cm[0].align || []);
			for(i=0;i<cm[0].name.length;i++) { cm[0].align[i] = cm[0].align[i] || 'left';}
		}
	},
	addSubGridCell :function (pos,iRow) {
		var prp='',ic,sid;
			prp = this._formatCol(pos,iRow);
			sid= this.options.id;
			ic = this.options.subGridOptions.plusicon;
		return "<td role=\"gridcell\" aria-describedby=\""+sid+"_subgrid\" class=\"coral-sgcollapsed sgcollapsed\" "+prp+"><a style='cursor:pointer;'><span class='coral-icon "+ic+"'></span></a></td>";
	},
	addSubGrid : function( pos, sind ) {
		var ts = this;
		if (!ts.grid ) { return; }
		//-------------------------
		var subGridCell = function(trdiv,cell,pos)
		{
			var tddiv = $("<td align='"+ts.options.subGridModel[0].align[pos]+"'></td>").html(cell);
			$(trdiv).append(tddiv);
		};
		var subGridXml = function(sjxml, sbid){
			var tddiv, i,  sgmap,
			dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
			trdiv = $("<tr></tr>");
			for (i = 0; i<ts.options.subGridModel[0].name.length; i++) {
				tddiv = $("<th class='coral-state-default coral-th-subgrid coral-th-column coral-th-"+ts.options.direction+"'></th>");
				$(tddiv).html(ts.options.subGridModel[0].name[i]);
				$(tddiv).width( ts.options.subGridModel[0].width[i]);
				$(trdiv).append(tddiv);
			}
			$(dummy).append(trdiv);
			if (sjxml){
				sgmap = ts.options.xmlReader.subgrid;
				$(sgmap.root+" "+sgmap.row, sjxml).each( function(){
					trdiv = $("<tr class='coral-component-content coral-subtblcell'></tr>");
					if(sgmap.repeatitems === true) {
						$(sgmap.cell,this).each( function(i) {
							subGridCell(trdiv, $(this).text() || '&#160;',i);
						});
					} else {
						var f = ts.options.subGridModel[0].mapping || ts.options.subGridModel[0].name;
						if (f) {
							for (i=0;i<f.length;i++) {
								subGridCell(trdiv, $(f[i],this).text() || '&#160;',i);
							}
						}
					}
					$(dummy).append(trdiv);
				});
			}
			var pID = $("table:first",ts.grid.bDiv).attr("id")+"_";
			$("#"+$.grid.coralID(pID+sbid)).append(dummy);
			ts.grid.hDiv.loading = false;
			$("#load_"+$.grid.coralID(ts.options.id)).hide();
			return false;
		};
		var subGridJson = function(sjxml, sbid){
			var tddiv,result,i,cur, sgmap,j,
			dummy = $("<table cellspacing='0' cellpadding='0' border='0'><tbody></tbody></table>"),
			trdiv = $("<tr></tr>");
			for (i = 0; i<ts.options.subGridModel[0].name.length; i++) {
				tddiv = $("<th class='coral-state-default coral-th-subgrid coral-th-column coral-th-"+ts.options.direction+"'></th>");
				$(tddiv).html(ts.options.subGridModel[0].name[i]);
				$(tddiv).width( ts.options.subGridModel[0].width[i]);
				$(trdiv).append(tddiv);
			}
			$(dummy).append(trdiv);
			if (sjxml){
				sgmap = ts.options.jsonReader.subgrid;
				result = $.grid.getAccessor(sjxml, sgmap.root);
				if ( result !== undefined ) {
					for (i=0;i<result.length;i++) {
						cur = result[i];
						trdiv = $("<tr class='coral-component-content coral-subtblcell'></tr>");
						if(sgmap.repeatitems === true) {
							if(sgmap.cell) { cur=cur[sgmap.cell]; }
							for (j=0;j<cur.length;j++) {
								subGridCell(trdiv, cur[j] || '&#160;',j);
							}
						} else {
							var f = ts.options.subGridModel[0].mapping || ts.options.subGridModel[0].name;
							if(f.length) {
								for (j=0;j<f.length;j++) {
									subGridCell(trdiv, cur[f[j]] || '&#160;',j);
								}
							}
						}
						$(dummy).append(trdiv);
					}
				}
			}
			var pID = $("table:first",ts.grid.bDiv).attr("id")+"_";
			$("#"+$.grid.coralID(pID+sbid)).append(dummy);
			ts.grid.hDiv.loading = false;
			$("#load_"+$.grid.coralID(ts.options.id)).hide();
			return false;
		};
		var populatesubgrid = function( rd )
		{
			var sid,dp, i, j;
			sid = $(rd).attr("id");
			dp = {nd_: (new Date().getTime())};
			dp[ts.options.prmNames.subgridid]=sid;
			if(!ts.options.subGridModel[0]) { return false; }
			if(ts.options.subGridModel[0].params) {
				for(j=0; j < ts.options.subGridModel[0].params.length; j++) {
					for(i=0; i<ts.options.colModel.length; i++) {
						if(ts.options.colModel[i].name === ts.options.subGridModel[0].params[j]) {
							dp[ts.options.colModel[i].name]= $("td:eq("+i+")",rd).text().replace(/\&#160\;/ig,'');
						}
					}
				}
			}
			if(!ts.grid.hDiv.loading) {
				ts.grid.hDiv.loading = true;
				$("#load_"+$.grid.coralID(ts.options.id)).show();
				if(!ts.options.subgridtype) { ts.options.subgridtype = ts.options.datatype; }
				if($.isFunction(ts.options.subgridtype)) {
					ts.options.subgridtype.call(ts, dp);
				} else {
					ts.options.subgridtype = ts.options.subgridtype.toLowerCase();
				}
				switch(ts.options.subgridtype) {
					case "xml":
					case "json":
					$.ajax($.extend({
						type:ts.options.mtype,
						url: $.isFunction(ts.options.subGridUrl) ? ts.options.subGridUrl.call(ts, dp) : ts.options.subGridUrl,
						dataType:ts.options.subgridtype,
						data: $.isFunction(ts.options.serializeSubGridData)? ts.options.serializeSubGridData.call(ts, dp) : dp,
						complete: function(sxml) {
							if(ts.options.subgridtype === "xml") {
								subGridXml(sxml.responseXML, sid);
							} else {
								subGridJson($.grid.parse(sxml.responseText),sid);
							}
							sxml=null;
						}
					}, $.grid.ajaxOptions, ts.options.ajaxSubgridOptions || {}));
					break;
				}
			}
			return false;
		};
		var _id, pID,atd, nhc=0, bfsc, $r;
		$.each(ts.options.colModel,function(){
			if(this.hidden === true || this.name === 'rn' || this.name === 'cb') {
				nhc++;
			}
		});
		var len = ts.rows.length, i=1;
		if( sind !== undefined && sind > 0) {
			i = sind;
			len = sind+1;
		}
		while(i < len) {
			if($(ts.rows[i]).hasClass('jqgrow')) {
				if(ts.options.scroll) {
					$(ts.rows[i].cells[pos]).unbind('click');
				}
				$(ts.rows[i].cells[pos]).bind('click', function() {
					var tr = $(this).parent("tr")[0];
					pID = ts.options.id;
					_id = tr.id;
					$r = $("#" + pID + "_" + _id + "_expandedContent");
					if($(this).hasClass("sgcollapsed")) {
						bfsc = $(ts).triggerHandler("jqGridSubGridBeforeExpand", [pID + "_" + _id, _id]);
						bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
						if(bfsc && $.isFunction(ts.options.subGridBeforeExpand)) {
							bfsc = ts.options.subGridBeforeExpand.call(ts, pID+"_"+_id,_id);
						}
						if(bfsc === false) {return false;}

						if(ts.options.subGridOptions.reloadOnExpand === true || ( ts.options.subGridOptions.reloadOnExpand === false && !$r.hasClass('coral-subgrid') ) ) {
							atd = pos >=1 ? "<td colspan='"+pos+"'>&#160;</td>":"";
							$(tr).after( "<tr role='row' id='" + pID + "_" + _id + "_expandedContent" + "' class='coral-subgrid coral-sg-expanded'>"+atd+"<td class='coral-component-content subgrid-cell'><span class='coral-icon "+ts.options.subGridOptions.openicon+"'></span></td><td colspan='"+parseInt(ts.options.colNames.length-1-nhc,10)+"' class='coral-component-content subgrid-data'><div id="+pID+"_"+_id+" class='tablediv'></div></td></tr>" );
							$(ts).triggerHandler("jqGridSubGridRowExpanded", [pID + "_" + _id, _id]);
							if( $.isFunction(ts.options.subGridRowExpanded)) {
								ts.options.subGridRowExpanded.call(ts, pID+"_"+ _id,_id);
							} else {
								populatesubgrid(tr);
							}
						} else {
							$r.show().removeClass("coral-sg-collapsed").addClass("coral-sg-expanded");
						}
						$(this).html("<a style='cursor:pointer;'><span class='coral-icon "+ts.options.subGridOptions.minusicon+"'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");
						if(ts.options.subGridOptions.selectOnExpand) {
							$(ts).jqGrid('setSelection',_id);
						}
					} else if($(this).hasClass("sgexpanded")) {
						bfsc = $(ts).triggerHandler("jqGridSubGridRowColapsed", [pID + "_" + _id, _id]);
						bfsc = (bfsc === false || bfsc === 'stop') ? false : true;
						if( bfsc &&  $.isFunction(ts.options.subGridRowColapsed)) {
							bfsc = ts.options.subGridRowColapsed.call(ts, pID+"_"+_id,_id );
						}
						if(bfsc===false) {return false;}
						if(ts.options.subGridOptions.reloadOnExpand === true) {
							$r.remove(".coral-subgrid");
						} else if($r.hasClass('coral-subgrid')) { // incase of dynamic deleting
							$r.hide().addClass("coral-sg-collapsed").removeClass("coral-sg-expanded");;
						}
						$(this).html("<a style='cursor:pointer;'><span class='coral-icon "+ts.options.subGridOptions.plusicon+"'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed");
						if(ts.options.subGridOptions.selectOnCollapse) {
							$(ts).jqGrid('setSelection',_id);
						}
					}
					return false;
				});
			}
			i++;
		}
		if(ts.options.subGridOptions.expandOnLoad === true) {
			//先判断subgrid图标所在的是第几列
			var options = ts.options,
		    ni = options.rownumbers===true ? 1 :0,
		    gi = options.multiselect ===true ? 1 :(options.singleselect === true ? 1 :0),
		    subCell = ni + gi;
			$(ts.rows).filter('.jqgrow').each(function(index,row){
				$(row.cells[subCell]).click();
			});
		}
		ts.subGridXml = function(xml,sid) {subGridXml(xml,sid);};
		ts.subGridJson = function(json,sid) {subGridJson(json,sid);};
	},
	expandSubGridRow : function(rowid) {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.options.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgcollapsed",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				}
			}
		}
	},
	collapseSubGridRow : function(rowid) {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.options.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgexpanded",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				}
			}
		}
	},
	toggleSubGridRow : function(rowid) {
		var $t = this;
		if(!$t.grid && !rowid) {return;}
		if($t.options.subGrid===true) {
			var rc = $(this).jqGrid("getInd",rowid,true);
			if(rc) {
				var sgc = $("td.sgcollapsed",rc)[0];
				if(sgc) {
					$(sgc).trigger("click");
				} else {
					sgc = $("td.sgexpanded",rc)[0];
					if(sgc) {
						$(sgc).trigger("click");
					}
				}
			}
		}
	}
});
grid = $.component( "coral.grid", $.coral.grid, {
	filterToolbar : function(p){
		var regional =  $.grid.search;
		options = $.extend({
			autosearch: true,
			autosearchDelay: 500,
			searchOnEnter : true,
			beforeSearch: null,
			afterSearch: null,
			beforeClear: null,
			afterClear: null,
			searchurl : '',
			stringResult: false,
			groupOp: 'AND',
			defaultSearch : "bw",
			searchOperators : false,
			resetIcon : "x",
			operands : { "eq" :"==", "ne":"!","lt":"<","le":"<=","gt":">","ge":">=","bw":"^","bn":"!^","in":"=","ni":"!=","ew":"|","en":"!@","cn":"~","nc":"!~","nu":"#","nn":"!#"}
		}, regional , p  || {});
		var that = this;
		if(that.options.filterToolbar) { return; }
		if(!$(that).data('filterToolbar')) {
			$(that).data('filterToolbar', options);
		}
		if(that.options.force_regional) {
			options = $.extend(options, regional);
		}
		var triggerToolbar = function() {
			var sdata={}, j=0, v, nm, sopt={},so;
			$.each(that.options.colModel,function(){
				var type = this.stype == "text"?"textbox":this.stype;
				var $elem = $("#gsh_"+ that.options.idPrefix+ that.element[0].id+"_"+ $.grid.coralID(this.name)+" .ctrl-init", (this.frozen===true && that.options.frozenColumns === true) ?  that.grid.fhDiv : that.grid.columnsView);
				nm = this.index || this.name;
				if(options.searchOperators ) {
					so = $elem[type]("component").parent().prev().children("a").attr("soper") || options.defaultSearch;
				} else {
					so  = (this.searchoptions && this.searchoptions.sopt) ? this.searchoptions.sopt[0] : this.stype==='select'?  'eq' : options.defaultSearch;
				}
				v = this.stype === "custom" && $.isFunction(this.searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN" ?
					this.searchoptions.custom_value.call(that, $elem.children(".customelement:first"), "get") :
					$elem.hasClass("ctrl-init")? $elem[type]("getValue") : undefined;
				if(v || so==="nu" || so==="nn") {
					sdata[nm] = v;
					sopt[nm] = so;
					j++;
				} else {
					try {
						delete that.options.postData[nm];
					} catch (z) {}
				}
			});
			var sd =  j>0 ? true : false;
			if(options.stringResult === true || that.options.datatype === "local" || options.searchOperators === true) {
				var ruleGroup = "{\"groupOp\":\"" + options.groupOp + "\",\"rules\":[";
				var gi=0;
				$.each(sdata,function(i,n){
					if (gi > 0) {ruleGroup += ",";}
					ruleGroup += "{\"field\":\"" + i + "\",";
					ruleGroup += "\"op\":\"" + sopt[i] + "\",";
					n+="";
					ruleGroup += "\"data\":\"" + n.replace(/\\/g,'\\\\').replace(/\"/g,'\\"') + "\"}";
					gi++;
				});
				ruleGroup += "]}";
				$.extend(that.options.postData,{filters:ruleGroup});
				$.each(['searchField', 'searchString', 'searchOper'], function(i, n){
					if(that.options.postData.hasOwnProperty(n)) { delete that.options.postData[n];}
				});
			} else {
				$.extend(that.options.postData,sdata);
			}
			var saveurl;
			if(that.options.searchurl) {
				saveurl = that.options.url;
				$(that).grid("option",{url:that.options.searchurl});
			}
			var bsr = $(that).triggerHandler("jqGridToolbarBeforeSearch") === 'stop' ? true : false;
			if(!bsr && $.isFunction(options.beforeSearch)){bsr = options.beforeSearch.call(that);}
			if(!bsr) { 
				that.isFilterAction = that.isFilterAction === false ? false : true;
				$(that.element[0]).grid("option",{search:sd}).grid("reload"); 
				that.isFilterAction = false;
				}
			if(saveurl) {$(that.element[0]).grid("option",{url:saveurl});}
			//$(that).triggerHandler("jqGridToolbarAfterSearch");
			if($.isFunction(options.afterSearch)){options.afterSearch.call(that);}
		},
		clearToolbar = function (trigger) {
			var sdata={}, j=0, nm;
			trigger = (typeof trigger !== 'boolean') ? true : trigger;
			$.each(that.options.colModel,function(){
				var v, $elem = $("#gs_"+that.options.idPrefix+$.grid.coralID(this.name),(this.frozen===true && that.options.frozenColumns === true) ?  that.grid.fhDiv : that.grid.columnsView);
				if(this.searchoptions && this.searchoptions.defaultValue !== undefined) { v = this.searchoptions.defaultValue; }
				nm = this.index || this.name;
				switch (this.stype) {
					case 'select' :
						$elem.find("option").each(function (i){
							if(i===0) { this.selected = true; }
							if ($(this).val() === v) {
								this.selected = true;
								return false;
							}
						});
						if ( v !== undefined ) {
							// post the key and not the text
							sdata[nm] = v;
							j++;
						} else {
							try {
								delete that.options.postData[nm];
							} catch(e) {}
						}
						break;
					case 'text':
						$elem.val(v || "");
						if(v !== undefined) {
							sdata[nm] = v;
							j++;
						} else {
							try {
								delete that.options.postData[nm];
							} catch (y){}
						}
						break;
					case 'custom':
						if ($.isFunction(this.searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN") {
							this.searchoptions.custom_value.call(that, $elem.children(".customelement:first"), "set", v || "");
						}
						break;
				}
			});
			var sd =  j>0 ? true : false;
			that.options.resetsearch =  true;
			if(options.stringResult === true || that.options.datatype === "local") {
				var ruleGroup = "{\"groupOp\":\"" + options.groupOp + "\",\"rules\":[";
				var gi=0;
				$.each(sdata,function(i,n){
					if (gi > 0) {ruleGroup += ",";}
					ruleGroup += "{\"field\":\"" + i + "\",";
					ruleGroup += "\"op\":\"" + "eq" + "\",";
					n+="";
					ruleGroup += "\"data\":\"" + n.replace(/\\/g,'\\\\').replace(/\"/g,'\\"') + "\"}";
					gi++;
				});
				ruleGroup += "]}";
				$.extend(that.options.postData,{filters:ruleGroup});
				$.each(['searchField', 'searchString', 'searchOper'], function(i, n){
					if(that.options.postData.hasOwnProperty(n)) { delete that.options.postData[n];}
				});
			} else {
				$.extend(that.options.postData,sdata);
			}
			var saveurl;
			if(that.options.searchurl) {
				saveurl = that.options.url;
				$(that).grid("option",{url:that.options.searchurl});
			}
			var bcv = $(that).triggerHandler("jqGridToolbarBeforeClear") === 'stop' ? true : false;
			if(!bcv && $.isFunction(options.beforeClear)){bcv = options.beforeClear.call(that);}
			if(!bcv) {
				if(trigger) {
					$(that).grid("option",{search:sd}).trigger("reload",[{page:1}]);
				}
			}
			if(saveurl) {$(that).grid("option",{url:saveurl});}
			//$(that).triggerHandler("jqGridToolbarAfterClear");
			if($.isFunction(options.afterClear)){options.afterClear();}
		},
		toggleToolbar = function(){
			var trow = $("tr.coral-search-toolbar",that.grid.columnsView),
			trow2 = that.options.frozenColumns === true ?  $("tr.coral-search-toolbar",that.grid.fhDiv) : false;
			if(trow.css("display") === 'none') {
				trow.show(); 
				if(trow2) {
					trow2.show();
				}
			} else { 
				trow.hide(); 
				if(trow2) {
					trow2.hide();
				}
			}
		},
		buildRuleMenu = function( elem, left, top ){
			$("#sopt_menu").remove();

			left=parseInt(left,10);
			top=parseInt(top,10) + 18;

			var fs =  $('.coral-grid-view').css('font-size') || '11px';
			var str = '<ul id="sopt_menu" class="coral-search-menu" role="menu" tabindex="0" style="font-size:'+fs+';left:'+left+'px;top:'+top+'px; cursor:pointer;">',
			selected = $(elem).attr("soper"), selclass,
			aoprs = [], ina;
			var i=0, nm =$(elem).attr("colname"),len = that.options.colModel.length;
			while(i<len) {
				if(that.options.colModel[i].name === nm) {
					break;
				}
				i++;
			}
			var cm = that.options.colModel[i],
				opts = $.extend({}, cm.searchoptions);
			if(!opts.sopt) {
				opts.sopt = [];
				opts.sopt[0]= cm.stype==='select' ?  'eq' : options.defaultSearch;
			}
			$.each(options.odata, function() { aoprs.push(this.oper); });
			for ( i = 0 ; i < opts.sopt.length; i++) {
				ina = $.inArray(opts.sopt[i],aoprs);
				if(ina !== -1) {
					selclass = selected === options.odata[ina].oper ? "coral-state-highlight" : "";
					str += '<li class="coral-menu-item '+selclass+'" role="presentation"><a class="coral-corner-all coral-menu-item" tabindex="0" role="menuitem" value="'+options.odata[ina].oper+'" oper="'+options.operands[options.odata[ina].oper]+'"><table cellspacing="0" cellpadding="0" border="0"><tr><td width="25px">'+options.operands[options.odata[ina].oper]+'</td><td>'+ options.odata[ina].text+'</td></tr></table></a></li>';
				}
			}
			str += "</ul>";
			$('body').append(str);
			$("#sopt_menu").addClass("coral-menu coral-component coral-component-content coral-corner-all");
			$("#sopt_menu > li > a").hover(
				function(){ $(this).addClass("coral-state-hover"); },
				function(){ $(this).removeClass("coral-state-hover"); }
			).click(function() {
				var v = $(this).attr("value"),
				oper = $(this).attr("oper");
				//$(that).triggerHandler("jqGridToolbarSelectOper", [v, oper, elem]);
				$("#sopt_menu").hide();
				$(elem).text(oper).attr("soper",v);
				if(options.autosearch===true){
					var inpelm = $(elem).parent().next().children()[0].firstChild.firstChild;
					if( $(inpelm).val() || v==="nu" || v ==="nn") {
						triggerToolbar();
					}
				}
			});
		};
		// create the row
		var tr = $("<tr class='coral-search-toolbar' role='row'></tr>");
		var timeoutHnd;
		$.each(that.options.colModel,function(ci){
			var cm=this, soptions, select = "", sot="=", so, i, st, csv, df, elem,
			th = $("<th role='columnheader' class='coral-state-default coral-th-"+that.options.direction+"' id='gsh_" + that.options.id + "_" + cm.name + "' ></th>"),
			thd = $("<div></div>"),
			stbl = $("<table class='coral-search-table' cellspacing='0'><tr><td class='coral-search-oper' headers=''></td><td class='coral-search-input' headers=''></td><td class='coral-search-clear' headers=''></td></tr></table>");
			if(this.hidden===true) { $(th).css("display","none");}
			this.search = this.search === false ? false : true;
			if(this.stype === undefined) {this.stype='text';}
			soptions = $.extend({},this.searchoptions || {}, {name:cm.index || cm.name, id: "gs_"+that.options.idPrefix+cm.name, oper:'search'});
			if(this.search){
				if(options.searchOperators) {
					so  = (soptions.sopt) ? soptions.sopt[0] : cm.stype==='select' ?  'eq' : options.defaultSearch;
					for(i = 0;i<options.odata.length;i++) {
						if(options.odata[i].oper === so) {
							sot = options.operands[so] || "";
							break;
						}
					}
					st = soptions.searchtitle != null ? soptions.searchtitle : options.operandTitle;
					select = "<a title='"+st+"' style='padding-right: 0.5em;cursor:pointer;' soper='"+so+"' class='soptclass' colname='"+this.name+"'>"+sot+"</a>";
				}
				$("td:eq(0)",stbl).attr("colindex",ci).append(select);
				if(soptions.clearSearch === undefined) {
					soptions.clearSearch = true;
				}
				if(soptions.clearSearch) {
					csv = options.resetTitle || 'Clear Search Value';
					$("td:eq(2)",stbl).append("<a title='"+csv+"' style='padding-right: 0.3em;padding-left: 0.3em;cursor:pointer;' class='clearsearchclass'>"+options.resetIcon+"</a>");
				} else {
					$("td:eq(2)", stbl).hide();
				}
				if(this.surl) {
					soptions.dataUrl = this.surl;
				}
				df="";
				if(soptions.defaultValue ) {
					df = $.isFunction(soptions.defaultValue) ? soptions.defaultValue.call(that) : soptions.defaultValue;
				}
				elem = $.grid.createEl.call(that, cm.stype, soptions , df, false, $.extend({},$.grid.ajaxOptions, that.options.ajaxSelectOptions || {}));
				$(elem).css({width: "100%"}).addClass("coral-widget-content coral-corner-all");
				$("td:eq(1)",stbl).append(elem);
				$(thd).append(stbl);
				$.extend(options,{
					'onKeyPress': function(e, ui){
						var key = e.charCode || e.keyCode || 0;
						if(key === 13){
							triggerToolbar();
							return false;
						}
					},
					'onKeyDown': function(e, ui){
						var key = e.which;
						switch (key) {
							case 13:
								return false;
							case 9 :
							case 16:
							case 37:
							case 38:
							case 39:
							case 40:
							case 27:
								break;
							default :
								if(timeoutHnd) { clearTimeout(timeoutHnd); }
								timeoutHnd = setTimeout(function(){triggerToolbar();},500);
						}
					},
					'onChange': function() {
						triggerToolbar(this);
					}
				});
				switch (this.stype)
				{
				case "combobox":
					var data= this.searchoptions ,opts;
					opts = $.extend(options, data);
					$(elem)[ this.stype ](opts);
					var _onClick = options.onClick;
					options = $.extend({}, options, {"onClick":function(e, ui){
						_onClick&&_onClick.apply(elem, [e, ui]);
					}});
					break;
				case "text":
					options.valueChangedOnKeyUp = true;
					$(elem)[ "textbox" ](options);
				}
			}
			$(th).append(thd);
			$(tr).append(th);
			if(!options.searchOperators) {
				$("td:eq(0)",stbl).hide();
			}
		});
		$("table thead",that.grid.columnsView).append(tr);
		if(options.searchOperators) {
			$(".soptclass",tr).click(function(e){
				var offset = $(this).offset(),
				left = ( offset.left ),
				top = ( offset.top);
				buildRuleMenu(this, left, top );
				e.stopPropagation();
			});
			$("body").on('click', function(e){
				if(e.target.className !== "soptclass") {
					$("#sopt_menu").hide();
				}
			});
		}
		$(".clearsearchclass",tr).click(function() {
			var ptr = $(this).parents("tr:first"),
			coli = parseInt($("td.coral-search-oper", ptr).attr('colindex'),10),
			sval  = $.extend({},that.options.colModel[coli].searchoptions || {}),
			dval = sval.defaultValue ? sval.defaultValue : "";
			if(that.options.colModel[coli].stype === "select") {
				if(dval) {
					$("td.coral-search-input select", ptr).val( dval );
				} else {
					$("td.coral-search-input select", ptr)[0].selectedIndex = 0;
				}
			} else {
				$("td.coral-search-input input", ptr).val( dval );
			}
			// ToDo custom search type
			if(options.autosearch===true){
				triggerToolbar();
			}

		});
		this.options.filterToolbar = true;
		this.triggerToolbar = triggerToolbar;
		this.clearToolbar = clearToolbar;
		this.toggleToolbar = toggleToolbar;
	},
	destroyFilterToolbar: function () {
		if (!this.options.filterToolbar) {
			return;
		}
		this.triggerToolbar = null;
		this.clearToolbar = null;
		this.toggleToolbar = null;
		this.options.filterToolbar = false;
		$(this.grid.columnsView).find("table thead tr.coral-search-toolbar").remove();
	}
});
;

//jquery.grid.pivot.js
/*jshint eqeqeq:false */
/*global jQuery */
function _pivotfilter (fn, context) {
	var i,
		value,
		result = [],
		length;

	if (!this || typeof fn !== 'function' || (fn instanceof RegExp)) {
		throw new TypeError();
	}

	length = this.length;

	for (i = 0; i < length; i++) {
		if (this.hasOwnProperty(i)) {
			value = this[i];
			if (fn.call(context, value, i, this)) {
				result.push(value);
				// We need break in order to cancel loop 
				// in case the row is found
				break;
			}
		}
	}
	return result;
}
$.assocArraySize = function(obj) {
    // http://stackoverflow.com/a/6700/11236
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
        	size++;
        }
    }
    return size;
};
$.component( "coral.grid", $.coral.grid, {
	pivotSetup : function( data, options ){
		// data should come in json format
		// The function return the new colModel and the transformed data
		// again with group setup options which then will be passed to the grid
		var columns =[],that = this,
		pivotrows =[],
		summaries = [],
		member=[],
		labels=[],
		groupOptions = {
			grouping : true,
			groupingView :  {
				groupField : [],
				groupSummary: [],
				groupSummaryPos:[]
			}
		},
		headers = [],
		o = $.extend ( {
			rowTotals : false,
			rowTotalsText : 'Total',
			// summary columns
			colTotals : false,
			groupSummary : true,
			groupSummaryPos :  'header',
			frozenStaticCols : false
		}, options || {});
		this.element.each(function(){

			var 
				row,
				rowindex,
				i,
				
				rowlen = data.length,
				xlen, ylen, aggrlen,
				tmp,
				newObj,
				r=0;
			// utility funcs
			/* 
			 * Filter the data to a given criteria. Return the firt occurance
			 */
			function find(ar, fun, extra) {
				var res;
				res = _pivotfilter.call(ar, fun, extra);
				return res.length > 0 ? res[0] : null;
			}
			/*
			 * Check if the grouped row column exist (See find)
			 * If the row is not find in pivot rows retun null,
			 * otherviese the column
			 */
			function findGroup(item, index) {
				var j = 0, ret = true, i;
				for(i in item) {
					if(item[i] != that[j]) {
						ret =  false;
						break;
					}
					j++;
					if(j>=that.length) {
						break;
					}
				}
				if(ret) {
					rowindex =  index;
				}
				return ret;
			}
			/*
			 * Perform calculations of the pivot values.
			 */
			function calculation(oper, v, field, rc)  {
				var ret;
				switch (oper) {
					case  "sum" : 
						ret = parseFloat(v||0) + parseFloat((rc[field]||0));
						break;
					case "count" :
						if(v==="" || v == null) {
							v=0;
						}
						if(rc.hasOwnProperty(field)) {
							ret = v+1;
						} else {
							ret = 0;
						}
						break;
					case "min" : 
						if(v==="" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret =Math.min(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
					case "max" : 
						if(v==="" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret = Math.max(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
				}
				return ret;
			}
			/*
			 * The function agragates the values of the pivot grid.
			 * Return the current row with pivot summary values
			 */
			function agregateFunc ( row, aggr, value, curr) {
				// default is sum
				var arrln = aggr.length, i, label, j, jv, mainval="",swapvals=[];
				if($.isArray(value)) {
					jv = value.length;
					swapvals = value;
				} else {
					jv = 1;
					swapvals[0]=value;
				}
				member = [];
				labels = [];
				member.root = 0;
				for(j=0;j<jv;j++) {
					var  tmpmember = [], vl;
					for(i=0; i < arrln; i++) {
						if(value == null) {
							label = $.trim(aggr[i].member)+"_"+aggr[i].aggregator;
							vl = label;
							swapvals[0]= vl;
						} else {
							vl = value[j].replace(/\s+/g, '');
							try {
								label = (arrln === 1 ? mainval + vl : mainval + vl+"_"+aggr[i].aggregator+"_" + String(i));
							} catch(e) {}
						}
						label = !isNaN(parseInt(label,10)) ? label + " " : label;
						curr[label] =  tmpmember[label] = calculation( aggr[i].aggregator, curr[label], aggr[i].member, row);
						if(j<=1 && vl !==  '_r_Totals' && mainval === "") { // this does not fix full the problem
							mainval = vl;
						}
					}
					//vl = !isNaN(parseInt(vl,10)) ? vl + " " : vl;
					member[label] = tmpmember;
					labels[label] = swapvals[j];
				}
				return curr;
			}
			// Making the row totals without to add in yDimension
			if(o.rowTotals && o.yDimension.length > 0) {
				var dn = o.yDimension[0].dataName;
				o.yDimension.splice(0,0,{dataName:dn});
				o.yDimension[0].converter =  function(){ return '_r_Totals'; };
			}
			// build initial columns (colModel) from xDimension
			xlen = $.isArray(o.xDimension) ? o.xDimension.length : 0;
			ylen = o.yDimension.length;
			aggrlen  = $.isArray(o.aggregates) ? o.aggregates.length : 0;
			if(xlen === 0 || aggrlen === 0) {
				throw("xDimension or aggregates optiona are not set!");
			}
			var colc;
			for(i = 0; i< xlen; i++) {
				colc = {name:o.xDimension[i].dataName, frozen: o.frozenStaticCols};
				if(o.xDimension[i].isGroupField == null) {
					o.xDimension[i].isGroupField =  true;
				}
				colc = $.extend(true, colc, o.xDimension[i]);
				columns.push( colc );
			}
			var groupfields = xlen - 1, tree={};
			//tree = { text: 'root', leaf: false, children: [] };
			//loop over alll the source data
			while( r < rowlen ) {
				row = data[r];
				var xValue = [];
				var yValue = []; 
				tmp = {};
				i = 0;
				// build the data from xDimension
				do {
					xValue[i]  = $.trim(row[o.xDimension[i].dataName]);
					tmp[o.xDimension[i].dataName] = xValue[i];
					i++;
				} while( i < xlen );
				
				var k = 0;
				rowindex = -1;
				// check to see if the row is in our new pivotrow set
				newObj = find(pivotrows, findGroup, xValue);
				if(!newObj) {
					// if the row is not in our set
					k = 0;
					// if yDimension is set
					if(ylen>=1) {
						// build the cols set in yDimension
						for(k=0;k<ylen;k++) {
							yValue[k] = $.trim(row[o.yDimension[k].dataName]);
							// Check to see if we have user defined conditions
							if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
								yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
							}
						}
						// make the colums based on aggregates definition 
						// and return the members for late calculation
						tmp = agregateFunc( row, o.aggregates, yValue, tmp );
					} else  if( ylen === 0 ) {
						// if not set use direct the aggregates 
						tmp = agregateFunc( row, o.aggregates, null, tmp );
					}
					// add the result in pivot rows
					pivotrows.push( tmp );
				} else {
					// the pivot exists
					if( rowindex >= 0) {
						k = 0;
						// make the recalculations 
						if(ylen>=1) {
							for(k=0;k<ylen;k++) {
								yValue[k] = $.trim(row[o.yDimension[k].dataName]);
								if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
									yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
								}
							}
							newObj = agregateFunc( row, o.aggregates, yValue, newObj );
						} else  if( ylen === 0 ) {
							newObj = agregateFunc( row, o.aggregates, null, newObj );
						}
						// update the row
						pivotrows[rowindex] = newObj;
					}
				}
				var kj=0, current = null,existing = null, kk;
				// Build a JSON tree from the member (see aggregateFunc) 
				// to make later the columns 
				// 
				for (kk in member) {
					if(member.hasOwnProperty( kk )) {
						if(kj === 0) {
							if (!tree.children||tree.children === undefined){
								tree = { text: kk, level : 0, children: [], label: kk  };
							}
							current = tree.children;
						} else {
							existing = null;
							for (i=0; i < current.length; i++) {
								if (current[i].text === kk) {
								//current[i].fields=member[kk];
									existing = current[i];
									break;
								}
							}
							if (existing) {
								current = existing.children;
							} else {
								current.push({ children: [], text: kk, level: kj,  fields: member[kk], label: labels[kk] });
								current = current[current.length - 1].children;
							}
						}
						kj++;
					}
				}
				r++;
			}
			var  lastval=[], initColLen = columns.length, swaplen = initColLen;
			if(ylen>0) {
				headers[ylen-1] = {	useColSpanStyle: false,	groupHeaders: []};
			}
			/*
			 * Recursive function which uses the tree to build the 
			 * columns from the pivot values and set the group Headers
			 */
			function list(items) {
				var l, j, key, k, col;
				for (key in items) { // iterate
					if (items.hasOwnProperty(key)) {
					// write amount of spaces according to level
					// and write name and newline
						if(typeof items[key] !== "object") {
							// If not a object build the header of the appropriate level
							if( key === 'level') {
								if(lastval[items.level] === undefined) {
									lastval[items.level] ='';
									if(items.level>0 && items.text !== '_r_Totals') {
										headers[items.level-1] = {
											useColSpanStyle: false,
											groupHeaders: []
										};
									}
								}
								if(lastval[items.level] !== items.text && items.children.length && items.text !== '_r_Totals') {
									if(items.level>0) {
										headers[items.level-1].groupHeaders.push({
											titleText: items.label,
											numberOfColumns : 0
										});
										var collen = headers[items.level-1].groupHeaders.length-1,
										colpos = collen === 0 ? swaplen : initColLen+aggrlen;
										if(items.level-1=== (o.rowTotals ? 1 : 0)) {
											if(collen>0) {
												var l1 = headers[items.level-1].groupHeaders[collen-1].numberOfColumns;
												if(l1) {
													colpos = l1 + 1 + o.aggregates.length;
												}
											}
										}
										headers[items.level-1].groupHeaders[collen].startColumnName = columns[colpos].name;
										headers[items.level-1].groupHeaders[collen].numberOfColumns = columns.length - colpos;
										initColLen = columns.length;
									}
								}
								lastval[items.level] = items.text;
							}
							// This is in case when the member contain more than one summary item
							if(items.level === ylen  && key==='level' && ylen >0) {
								if( aggrlen > 1){
									var ll=1;
									for( l in items.fields) {
										if(ll===1) {
											headers[ylen-1].groupHeaders.push({startColumnName: l, numberOfColumns: 1, titleText: items.text});
										}
										ll++;
									}
									headers[ylen-1].groupHeaders[headers[ylen-1].groupHeaders.length-1].numberOfColumns = ll-1;
								} else {
									headers.splice(ylen-1,1);
								}
							}
						}
						// if object, call recursively
						if (items[key] != null && typeof items[key] === "object") {
							list(items[key]);
						}
						// Finally build the coulumns
						if( key === 'level') {
							if(items.level >0){
								j=0;
								for(l in items.fields) {
									if(items.fields.hasOwnProperty( l )) {
										col = {};
										for(k in o.aggregates[j]) {
											if(o.aggregates[j].hasOwnProperty(k)) {
												switch( k ) {
													case 'member':
													case 'label':
													case 'aggregator':
														break;
													default:
														col[k] = o.aggregates[j][k];
												}
											}
										}	
										if(aggrlen>1) {
											col.name = l;
											col.label = o.aggregates[j].label || items.label;
										} else {
											col.name = items.text;
											col.label = items.text==='_r_Totals' ? o.rowTotalsText : items.label;
										}
										columns.push (col);
										j++;
									}
								}
							}
						}
					}
				}
			}

			list( tree );
			var nm;
			// loop again trougth the pivot rows in order to build grand total 
			if(o.colTotals) {
				var plen = pivotrows.length;
				while(plen--) {
					for(i=xlen;i<columns.length;i++) {
						nm = columns[i].name;
						if(!summaries[nm]) {
							summaries[nm] = parseFloat(pivotrows[plen][nm] || 0);
						} else {
							summaries[nm] += parseFloat(pivotrows[plen][nm] || 0);
						}
					}
				}
				if(o.colTotalsText){
					for(var j = 0; j<o.colTotalsText.length; j++ ){
						summaries[o.colTotalsText[j].colName] = o.colTotalsText[j].text;
					}
				}
			}
			// based on xDimension  levels build grouping 
			if( groupfields > 0) {
				for(i=0;i<groupfields;i++) {
					if(columns[i].isGroupField) {
						groupOptions.groupingView.groupField.push(columns[i].name);
						groupOptions.groupingView.groupSummary.push(o.groupSummary);
						groupOptions.groupingView.groupSummaryPos.push(o.groupSummaryPos);
					}
				}
			} else {
				// no grouping is needed
				groupOptions.grouping = false;
			}
			groupOptions.sortname = columns[groupfields].name;
			groupOptions.groupingView.hideFirstGroupCol = true;
		});
		// return the final result.
		return { "colModel" : columns, "rows": pivotrows, "groupOptions" : groupOptions, "groupHeaders" :  headers, summary : summaries };
	},
	jqPivot : function( pivotData, pivotOption, gridOption, ajaxOption) {
		var that = this;
		function pivot( data) {
			var pivotGrid =that.pivotSetup(data, pivotOption),
			footerrow = $.assocArraySize(pivotGrid.summary) > 0 ? true : false,
			query= $.grid.from(pivotGrid.rows), i;
			for(i=0; i< pivotGrid.groupOptions.groupingView.groupField.length; i++) {
				query.orderBy(pivotGrid.groupOptions.groupingView.groupField[i], "a", 'text', '');
			}
			$.extend(true, that.options, {
				data: query.select(),
				userData: footerrow ? pivotGrid.summary : {},
				datatype: "local",
				footerrow : footerrow,
				userDataOnFooter: footerrow,
				colModel: pivotGrid.colModel,
				viewrecords: true,
				groupHeader:true,
				groupHeaders: pivotOption.rowTotals ?
						pivotGrid.groupHeaders[1] && pivotGrid.groupHeaders[1].groupHeaders:
							pivotGrid.groupHeaders[0] && pivotGrid.groupHeaders[0].groupHeaders,
				sortname: pivotOption.xDimension[0].dataName // ?????
			}, pivotGrid.groupOptions, gridOption || {});
			var gHead = pivotGrid.groupHeaders;
			/*if(gHead.length) {
				for( i = 0;i < gHead.length ; i++) {
					if(gHead[i] && gHead[i].groupHeaders.length) {
						//$(that.element).grid('setGroupHeaders',gHead[i]);
					}
				}
			}*/
			if(pivotOption.frozenStaticCols) {
				$(this.element).grid("setFrozenColumns");
			}
		}

		if(typeof pivotData === "string") {
			$.ajax($.extend({
				url : data,
				dataType: 'json',
				success : function(response) {
					pivot($.grid.getAccessor(response, ajaxOption && ajaxOption.reader ? ajaxOption.reader: 'rows') );
				}
			}, ajaxOpt || {}) );
		} else {
			pivot( pivotData );
		}
	}
});
;

/*
 * jqGrid common function
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
*/
/*global jQuery, $ */
$.grid = $.grid || {};
$.extend($.grid,{
// Modal functions
	showModal : function(h) {
		h.w.show();
	},
	closeModal : function(h) {
		h.w.hide().attr("aria-hidden","true");
		if(h.o) {h.o.remove();}
	},
	hideModal : function (selector,o) {
		o = $.extend({jqm : true, gb :''}, o || {});
		if(o.onClose) {
			var oncret =  o.onClose(selector);
			if (typeof oncret == 'boolean'  && !oncret ) { return; }
		}
		if ($.fn.jqm && o.jqm === true) {
			$(selector).attr("aria-hidden","true").jqmHide();
		} else {
			if(o.gb !== '') {
				try {$(".jqgrid-overlay:first",o.gb).hide();} catch (e){}
			}
			$(selector).hide().attr("aria-hidden","true");
		}
	},
//Helper functions
	findPos : function(obj) {
		var curleft = 0, curtop = 0;
		if (obj.offsetParent) {
			do {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			} while (obj = obj.offsetParent);
			//do not change obj == obj.offsetParent
		}
		return [curleft,curtop];
	},
	createModal : function(aIDs, content, p, insertSelector, posSelector, appendsel, css) {		
		var mw  = document.createElement('div'), rtlsup, self = this;
		css = $.extend({}, css || {});
		rtlsup = $(p.gbox).attr("dir") == "rtl" ? true : false;
		mw.className= "coral-component coral-component-content coral-corner-all coral-jqdialog";
		mw.id = aIDs.themodal;
		var mh = document.createElement('div');
		mh.className = "coral-jqdialog-titlebar coral-component-header coral-corner-all coral-helper-clearfix";
		mh.id = aIDs.modalhead;
		$(mh).append("<span class='coral-jqdialog-title'>"+p.caption+"</span>");
		var ahr= $("<a href='javascript:void(0)' class='coral-jqdialog-titlebar-close coral-corner-all'></a>")
		.hover(function(){ahr.addClass('coral-state-hover');},
			   function(){ahr.removeClass('coral-state-hover');})
		.append("<span class='coral-icon coral-icon-closethick'></span>");
		$(mh).append(ahr);
		if(rtlsup) {
			mw.dir = "rtl";
			$(".coral-jqdialog-title",mh).css("float","right");
			$(".coral-jqdialog-titlebar-close",mh).css("left",0.3+"em");
		} else {
			mw.dir = "ltr";
			$(".coral-jqdialog-title",mh).css("float","left");
			$(".coral-jqdialog-titlebar-close",mh).css("right",0.3+"em");
		}
		var mc = document.createElement('div');
		$(mc).addClass("coral-jqdialog-content coral-component-content").attr("id",aIDs.modalcontent);
		$(mc).append(content);
		mw.appendChild(mc);
		$(mw).prepend(mh);
		if(appendsel===true) { $('body').append(mw); } //append as first child in body -for alert dialog
		else if (typeof appendsel == "string")
			$(appendsel).append(mw);
		else {$(mw).insertBefore(insertSelector);}
		$(mw).css(css);
		if(typeof p.jqModal === 'undefined') {p.jqModal = true;} // internal use
		var coord = {};
		if ( $.fn.jqm && p.jqModal === true) {
			if(p.left ===0 && p.top===0 && p.overlay) {
				var pos = [];
				pos = this.findPos(posSelector);
				p.left = pos[0] + 4;
				p.top = pos[1] + 4;
			}
			coord.top = p.top+"px";
			coord.left = p.left;
		} else if(p.left !==0 || p.top!==0) {
			coord.left = p.left;
			coord.top = p.top+"px";
		}
		$("a.coral-jqdialog-titlebar-close",mh).click(function(){
			var oncm = $("#"+$.grid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
			var gboxclose = $("#"+$.grid.jqID(aIDs.themodal)).data("gbox") || p.gbox;
			self.hideModal("#"+$.grid.jqID(aIDs.themodal),{gb:gboxclose,jqm:p.jqModal,onClose:oncm});
			return false;
		});
		if (p.width === 0 || !p.width) {p.width = 300;}
		if(p.height === 0 || !p.height) {p.height =200;}
		if(!p.zIndex) {
			var parentZ = $(insertSelector).parents("*[role=dialog]").filter(':first').css("z-index");
			if(parentZ) {
				p.zIndex = parseInt(parentZ,10)+2;
			} else {
				p.zIndex = 950;
			}
		}
		var rtlt = 0;
		if( rtlsup && coord.left && !appendsel) {
			rtlt = $(p.gbox).width()- (!isNaN(p.width) ? parseInt(p.width,10) :0) - 8; // to do
		// just in case
			coord.left = parseInt(coord.left,10) + parseInt(rtlt,10);
		}
		if(coord.left) { coord.left += "px"; }
		$(mw).css($.extend({
			width: isNaN(p.width) ? "auto": p.width+"px",
			height:isNaN(p.height) ? "auto" : p.height + "px",
			zIndex:p.zIndex,
			overflow: 'hidden'
		},coord))
		.attr({tabIndex: "-1","role":"dialog","aria-labelledby":aIDs.modalhead,"aria-hidden":"true"});
		if(typeof p.drag == 'undefined') { p.drag=true;}
		if(typeof p.resize == 'undefined') {p.resize=true;}
		if (p.drag) {
			$(mh).css('cursor','move');
			if($.fn.jqDrag) {
				$(mw).jqDrag(mh);
			} else {
				try {
					$(mw).draggable({handle: $("#"+$.grid.jqID(mh.id))});
				} catch (e) {}
			}
		}
		if(p.resize) {
			if($.fn.jqResize) {
				$(mw).append("<div class='jqResize coral-resizable-handle coral-resizable-se coral-icon coral-icon-gripsmall-diagonal-se coral-icon-grip-diagonal-se'></div>");
				$("#"+$.grid.jqID(aIDs.themodal)).jqResize(".jqResize",aIDs.scrollelm ? "#"+$.grid.jqID(aIDs.scrollelm) : false);
			} else {
				try {
					$(mw).resizable({handles: 'se, sw',alsoResize: aIDs.scrollelm ? "#"+$.grid.jqID(aIDs.scrollelm) : false});
				} catch (r) {}
			}
		}
		if(p.closeOnEscape === true){
			$(mw).keydown( function( e ) {
				if( e.which == 27 ) {
					var cone = $("#"+$.grid.jqID(aIDs.themodal)).data("onClose") || p.onClose;
					self.hideModal(this,{gb:p.gbox,jqm:p.jqModal,onClose: cone});
				}
			});
		}
	},
	viewModal : function (selector,o){
		o = $.extend({
			toTop: true,
			overlay: 10,
			modal: false,
			overlayClass : 'coral-component-overlay',
			onShow: this.showModal,
			onHide: this.closeModal,
			gbox: '',
			jqm : true,
			jqM : true
		}, o || {});
		if ($.fn.jqm && o.jqm === true) {
			if(o.jqM) { $(selector).attr("aria-hidden","false").jqm(o).jqmShow(); }
			else {$(selector).attr("aria-hidden","false").jqmShow();}
		} else {
			if(o.gbox !== '') {
				$(".jqgrid-overlay:first",o.gbox).show();
				$(selector).data("gbox",o.gbox);
			}
			$(selector).show().attr("aria-hidden","false");
			try{$(':input:visible',selector)[0].focus();}catch(_){}
		}
	},

	info_dialog : function(caption, content,c_b, modalopt) {
		var mopt = {
			width:290,
			height:'auto',
			dataheight: 'auto',
			drag: true,
			resize: false,
			caption:"<b>"+caption+"</b>",
			left:250,
			top:170,
			zIndex : 1000,
			jqModal : true,
			modal : false,
			closeOnEscape : true,
			align: 'center',
			buttonalign : 'center',
			buttons : []
		// {text:'textbutt', id:"buttid", onClick : function(){...}}
		// if the id is not provided we set it like info_button_+ the index in the array - i.e info_button_0,info_button_1...
		};
		$.extend(mopt,modalopt || {});
		var jm = mopt.jqModal, self = this;
		if($.fn.jqm && !jm) { jm = false; }
		// in case there is no jqModal
		var buttstr ="";
		if(mopt.buttons.length > 0) {
			for(var i=0;i<mopt.buttons.length;i++) {
				if(typeof mopt.buttons[i].id == "undefined") { mopt.buttons[i].id = "info_button_"+i; }
				buttstr += "<a href='javascript:void(0)' id='"+mopt.buttons[i].id+"' class='fm-button coral-state-default coral-corner-all'>"+mopt.buttons[i].text+"</a>";
			}
		}
		var dh = isNaN(mopt.dataheight) ? mopt.dataheight : mopt.dataheight+"px",
		cn = "text-align:"+mopt.align+";";
		var cnt = "<div id='info_id'>";
		cnt += "<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:"+dh+";"+cn+"'>"+content+"</div>";
		cnt += c_b ? "<div class='coral-component-content coral-helper-clearfix' style='text-align:"+mopt.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a href='javascript:void(0)' id='closedialog' class='fm-button coral-state-default coral-corner-all'>"+c_b+"</a>"+buttstr+"</div>" :
			buttstr !== ""  ? "<div class='coral-component-content coral-helper-clearfix' style='text-align:"+mopt.buttonalign+";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>"+buttstr+"</div>" : "";
		cnt += "</div>";

		try {
			if($("#info_dialog").attr("aria-hidden") == "false") {
				this.hideModal("#info_dialog",{jqm:jm});
			}
			$("#info_dialog").remove();
		} catch (e){}
		this.createModal({
			themodal:'info_dialog',
			modalhead:'info_head',
			modalcontent:'info_content',
			scrollelm: 'infocnt'},
			cnt,
			mopt,
			'','',true
		);
		// attach onclick after inserting into the dom
		if(buttstr) {
			$.each(mopt.buttons,function(i){
				$("#"+$.grid.jqID(this.id),"#info_id").bind('click',function(){mopt.buttons[i].onClick.call($("#info_dialog")); return false;});
			});
		}
		$("#closedialog", "#info_id").click(function(){
			self.hideModal("#info_dialog",{jqm:jm});
			return false;
		});
		$(".fm-button","#info_dialog").hover(
			function(){$(this).addClass('coral-state-hover');},
			function(){$(this).removeClass('coral-state-hover');}
		);
		if($.isFunction(mopt.beforeOpen) ) { mopt.beforeOpen(); }
		this.viewModal("#info_dialog",{
			onHide: function(h) {
				h.w.hide().remove();
				if(h.o) { h.o.remove(); }
			},
			modal :mopt.modal,
			jqm:jm
		});
		if($.isFunction(mopt.afterOpen) ) { mopt.afterOpen(); }
		try{ $("#info_dialog").focus();} catch (m){}
	},
// Form Functions
	createEl : function(eltype,options,vl,autowidth, ajaxso) { 
		var elem = "", $t = this;
		function bindEv (el, opt) {
			if($.isFunction(opt.dataInit)) {
				opt.dataInit.call($t,el);
			}
			if(opt.dataEvents) {
				$.each(opt.dataEvents, function() {
					if (this.data !== undefined) {
						$(el).bind(this.type, this.data, this.fn);
					} else {
						$(el).bind(this.type, this.fn);
					}
				});
			}
			return opt;
		}
		function setAttributes(elm, atr, exl ) {
			/*var exclude = ['dataInit','dataEvents','dataUrl', 'buildSelect','sopt', 'searchhidden', 'defaultValue', 'attr'];
			if(typeof(exl) != "undefined" && $.isArray(exl)) {
				$.merge(exclude, exl);
			}
			$.each(atr, function(key, value){
				if($.inArray(key, exclude) === -1) {
					$(elm).attr(key,value);
				}
			});*/
			if(!atr.hasOwnProperty('id')) {
				$(elm).attr('id', $.grid.randId());
			}
		}
		switch (eltype)
		{
			case "textarea" :
				elem = document.createElement("textarea");
				if(autowidth) {
					if(!options.cols) { $(elem).css({width:"98%"});}
				} else if (!options.cols) { options.cols = 20; }
				if(!options.rows) { options.rows = 2; }
				if(vl=='&nbsp;' || vl=='&#160;' || (vl.length==1 && vl.charCodeAt(0)==160)) {vl="";}
				//elem.value = vl;
				elem.setAttribute("value", vl);
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				$(elem).attr({"role":"textbox","multiline":"true"});
			break;
			// lihaibo zs begin
			/*case "checkbox" : //what code for simple checkbox
				elem = document.createElement("input");
				elem.type = "checkbox";
				if( !options.value ) {
					var vl1 = vl.toLowerCase();
					if(vl1.search(/(false|0|no|off|undefined)/i)<0 && vl1!=="") {
						elem.checked=true;
						elem.defaultChecked=true;
						elem.value = vl;
					} else {
						elem.value = "on";
					}
					$(elem).attr("offval","off");
				} else {
					var cbval = options.value.split(":");
					if(vl === cbval[0]) {
						elem.checked=true;
						elem.defaultChecked=true;
					}
					elem.value = cbval[0];
					$(elem).attr("offval",cbval[1]);
				}
				setAttributes(elem, options, ['value']);
				options = bindEv(elem,options);
				$(elem).attr("role","checkbox");
			break;*/
			//lihaibo zs end
			case "select" :
				elem = document.createElement("select");
				elem.setAttribute("role","select");
				var msl, ovm = [];
				if(options.multiple===true) {
					msl = true;
					elem.multiple="multiple";
					$(elem).attr("aria-multiselectable","true");
				} else { msl = false; }
				if(typeof(options.dataUrl) != "undefined") {
					$.ajax($.extend({
						url: options.dataUrl,
						type : "GET",
						dataType: "html",
						context: {elem:elem, options:options, vl:vl},
						success: function(data){
							var a,	ovm = [], elem = this.elem, vl = this.vl,
							options = $.extend({},this.options),
							msl = options.multiple===true;
							if($.isFunction(options.buildSelect)) {
								var b = options.buildSelect.call($t,data);
								a = $(b).html();
							} else {
								a = $(data).html();
							}
							if(a) {
								$(elem).append(a);
								setAttributes(elem, options);
								//options = bindEv(elem,options);
								if(typeof options.size === 'undefined') { options.size =  msl ? 3 : 1;}
								if(msl) {
									ovm = vl.split(",");
									ovm = $.map(ovm,function(n){return $.trim(n);});
								} else {
									ovm[0] = $.trim(vl);
								}
								//$(elem).attr(options);
								setTimeout(function(){
									$("option",elem).each(function(i){
										//if(i===0) { this.selected = ""; }
										// fix IE8/IE7 problem with selecting of the first item on multiple=true
										if (i === 0 && elem.multiple) { this.selected = false; }
										$(this).attr("role","option");
										if($.inArray($.trim($(this).text()),ovm) > -1 || $.inArray($.trim($(this).val()),ovm) > -1 ) {
											this.selected= "selected";
										}
									});
								},0);
							}
						}
					},ajaxso || {}));
				} else if(options.value) {
					var i;
					if(typeof options.size === 'undefined') {
						options.size = msl ? 3 : 1;
					}
					if(msl) {
						ovm = vl.split(",");
						ovm = $.map(ovm,function(n){return $.trim(n);});
					}
					if(typeof options.value === 'function') { options.value = options.value(); }
					var so,sv, ov, 
					sep = options.separator === undefined ? ":" : options.separator,
					delim = options.delimiter === undefined ? ";" : options.delimiter;
					if(typeof options.value === 'string') {
						so = options.value.split(delim);
						for(i=0; i<so.length;i++){
							sv = so[i].split(sep);
							if(sv.length > 2 ) {
								sv[1] = $.map(sv,function(n,ii){if(ii>0) { return n;} }).join(sep);
							}
							ov = document.createElement("option");
							ov.setAttribute("role","option");
							ov.value = sv[0]; ov.innerHTML = sv[1];
							elem.appendChild(ov);
							if (!msl &&  ($.trim(sv[0]) == $.trim(vl) || $.trim(sv[1]) == $.trim(vl))) { ov.selected ="selected"; }
							if (msl && ($.inArray($.trim(sv[1]), ovm)>-1 || $.inArray($.trim(sv[0]), ovm)>-1)) {ov.selected ="selected";}
						}
					} else if (typeof options.value === 'object') {
						var oSv = options.value;
						for ( var key in oSv) {
							if (oSv.hasOwnProperty(key ) ){
								ov = document.createElement("option");
								ov.setAttribute("role","option");
								ov.value = key; ov.innerHTML = oSv[key];
								elem.appendChild(ov);
								if (!msl &&  ( $.trim(key) == $.trim(vl) || $.trim(oSv[key]) == $.trim(vl)) ) { ov.selected ="selected"; }
								if (msl && ($.inArray($.trim(oSv[key]),ovm)>-1 || $.inArray($.trim(key),ovm)>-1)) { ov.selected ="selected"; }
							}
						}
					}
					setAttributes(elem, options, ['value']);
					//options = bindEv(elem,options);
				}
			break;
			case "datepicker" :
			case "autocomplete" :
			case "autocompletetree" :
			case "text" :
			case "password" :
			case "button" :
				var role;
				if(eltype=="button") { role = "button"; }
				else { role = "textbox"; }
				elem = document.createElement("input");
				if(eltype=="datepicker") elem.type = "text";//日期控件初始化用input[type=text]
				else if(eltype=="autocomplete") elem.type = "text";//autocomplete控件初始化用input[type=text]
				else elem.type = eltype;
				//elem.value = vl;
				elem.setAttribute("value", vl);
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				if(eltype != "button"){
					if(autowidth) {
						if(!options.size) { $(elem).css({width:"98%"}); }
					} else if (!options.size) { options.size = 20; }
				}
				$(elem).attr("role",role);
			break;
			case "image" :
			case "file" :
				elem = document.createElement("input");
				elem.type = eltype;
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			case "custom" :
				elem = document.createElement("span");
				try {
					if($.isFunction(options.custom_element)) {
						var celm = options.custom_element.call($t,vl,options);
						if(celm) {
							celm = $(celm).addClass("customelement").attr({id:options.id,name:options.name});
							$(elem).empty().append(celm);
						} else {
							throw "e2";
						}
					} else {
						throw "e1";
					}
				} catch (e) {
					if (e=="e1") { this.info_dialog($.grid.errors.errcap,"function 'custom_element' "+$.grid.edit.msg.nodefined, $.grid.edit.bClose);}
					if (e=="e2") { this.info_dialog($.grid.errors.errcap,"function 'custom_element' "+$.grid.edit.msg.novalue,$.grid.edit.bClose);}
					else { this.info_dialog($.grid.errors.errcap,typeof(e)==="string"?e:e.message,$.grid.edit.bClose); }
				}
				break;
			//lihaibo add begin
			/*case "radio":
				elem = document.createElement("input");
				elem.type = eltype;
				setAttributes(elem, options);
				options = bindEv(elem,options);
				break;*/
			case "checkbox": 
				elem = document.createElement("input");
				elem.type = eltype;
				//elem.value = vl;
				elem.setAttribute("value", vl);
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			case "combobox":				
			case "combotree":
			case "combogrid":
				elem = document.createElement("input");
				elem.type = "text";
				//elem.value = vl;
				elem.setAttribute("value", vl);
				setAttributes(elem, options);
				//options = bindEv(elem,options);
				break;
			default:
				break;
			//lihaibo add end
		}
		return elem;
	},
// Date Validation Javascript
	checkDate : function (format, date) {
		var daysInFebruary = function(year){
		// February has 29 days in any year evenly divisible by four,
		// EXCEPT for centurial years which are not also divisible by 400.
			return (((year % 4 === 0) && ( year % 100 !== 0 || (year % 400 === 0))) ? 29 : 28 );
		},
		DaysArray = function(n) {
			for (var i = 1; i <= n; i++) {
				this[i] = 31;
				if (i==4 || i==6 || i==9 || i==11) {this[i] = 30;}
				if (i==2) {this[i] = 29;}
			}
			return this;
		};

		var tsp = {}, sep;
		format = format.toLowerCase();
		//we search for /,-,. for the date separator
		if(format.indexOf("/") != -1) {
			sep = "/";
		} else if(format.indexOf("-") != -1) {
			sep = "-";
		} else if(format.indexOf(".") != -1) {
			sep = ".";
		} else {
			sep = "/";
		}
		format = format.split(sep);
		date = date.split(sep);
		if (date.length != 3) { return false; }
		var j=-1,yln, dln=-1, mln=-1;
		for(var i=0;i<format.length;i++){
			var dv =  isNaN(date[i]) ? 0 : parseInt(date[i],10);
			tsp[format[i]] = dv;
			yln = format[i];
			if(yln.indexOf("y") != -1) { j=i; }
			if(yln.indexOf("m") != -1) { mln=i; }
			if(yln.indexOf("d") != -1) { dln=i; }
		}
		if (format[j] == "y" || format[j] == "yyyy") {
			yln=4;
		} else if(format[j] =="yy"){
			yln = 2;
		} else {
			yln = -1;
		}
		var daysInMonth = DaysArray(12),
		strDate;
		if (j === -1) {
			return false;
		} else {
			strDate = tsp[format[j]].toString();
			if(yln == 2 && strDate.length == 1) {yln = 1;}
			if (strDate.length != yln || (tsp[format[j]]===0 && date[j]!="00")){
				return false;
			}
		}
		if(mln === -1) {
			return false;
		} else {
			strDate = tsp[format[mln]].toString();
			if (strDate.length<1 || tsp[format[mln]]<1 || tsp[format[mln]]>12){
				return false;
			}
		}
		if(dln === -1) {
			return false;
		} else {
			strDate = tsp[format[dln]].toString();
			if (strDate.length<1 || tsp[format[dln]]<1 || tsp[format[dln]]>31 || (tsp[format[mln]]==2 && tsp[format[dln]]>daysInFebruary(tsp[format[j]])) || tsp[format[dln]] > daysInMonth[tsp[format[mln]]]){
				return false;
			}
		}
		return true;
	},
	isEmpty : function(val)
	{
		if (val.match(/^\s+$/) || val === "")	{
			return true;
		} else {
			return false;
		}
	},
	checkTime : function(time){
	// checks only hh:ss (and optional am/pm)
		var re = /^(\d{1,2}):(\d{2})([ap]m)?$/,regs;
		if(!this.isEmpty(time))
		{
			regs = time.match(re);
			if(regs) {
				if(regs[3]) {
					if(regs[1] < 1 || regs[1] > 12) { return false; }
				} else {
					if(regs[1] > 23) { return false; }
				}
				if(regs[2] > 59) {
					return false;
				}
			} else {
				return false;
			}
		}
		return true;
	},
	checkValues : function(val, valref,g, customobject, nam) {
		var edtrul,i, nm, dft, len;
		if(typeof(customobject) === "undefined") {
			if(typeof(valref)=='string'){
				for( i =0, len=g.options.colModel.length;i<len; i++){
					if(g.options.colModel[i].name==valref) {
						edtrul = g.options.colModel[i].editrules;
						valref = i;
						try { nm = g.options.colModel[i].formoptions.label; } catch (e) {}
						break;
					}
				}
			} else if(valref >=0) {
				edtrul = g.options.colModel[valref].editrules;
			}
		} else {
			edtrul = customobject;
			nm = nam===undefined ? "_" : nam;
		}
		if(edtrul) {
			if(!nm) { nm = g.options.colNames[valref]; }
			if(edtrul.required === true) {
				if( this.isEmpty(val) )  { return [false,nm+": "+$.grid.edit.msg.required,""]; }
			}
			// force required
			var rqfield = edtrul.required === false ? false : true;
			if(edtrul.number === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(isNaN(val)) { return [false,nm+": "+$.grid.edit.msg.number,""]; }
				}
			}
			if(typeof edtrul.minValue != 'undefined' && !isNaN(edtrul.minValue)) {
				if (parseFloat(val) < parseFloat(edtrul.minValue) ) { return [false,nm+": "+$.grid.edit.msg.minValue+" "+edtrul.minValue,""];}
			}
			if(typeof edtrul.maxValue != 'undefined' && !isNaN(edtrul.maxValue)) {
				if (parseFloat(val) > parseFloat(edtrul.maxValue) ) { return [false,nm+": "+$.grid.edit.msg.maxValue+" "+edtrul.maxValue,""];}
			}
			var filter;
			if(edtrul.email === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
				// taken from $ Validate plugin
					filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
					if(!filter.test(val)) {return [false,nm+": "+$.grid.edit.msg.email,""];}
				}
			}
			if(edtrul.integer === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(isNaN(val)) { return [false,nm+": "+$.grid.edit.msg.integer,""]; }
					if ((val % 1 !== 0) || (val.indexOf('.') != -1)) { return [false,nm+": "+$.grid.edit.msg.integer,""];}
				}
			}
			if(edtrul.date === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(g.options.colModel[valref].formatoptions && g.options.colModel[valref].formatoptions.newformat) {
						dft = g.options.colModel[valref].formatoptions.newformat;
					} else {
						dft = g.options.colModel[valref].datefmt || "Y-m-d";
					}
					if(!this.checkDate (dft, val)) { return [false,nm+": "+$.grid.edit.msg.date+" - "+dft,""]; }
				}
			}
			if(edtrul.time === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if(!this.checkTime (val)) { return [false,nm+": "+$.grid.edit.msg.date+" - hh:mm (am/pm)",""]; }
				}
			}
			if(edtrul.url === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
					if(!filter.test(val)) {return [false,nm+": "+$.grid.edit.msg.url,""];}
				}
			}
			if(edtrul.custom === true) {
				if( !(rqfield === false && this.isEmpty(val)) ) {
					if($.isFunction(edtrul.custom_func)) {
						var ret = edtrul.custom_func.call(g,val,nm);
						if($.isArray(ret)) {
							return ret;
						} else {
							return [false,$.grid.edit.msg.customarray,""];
						}
					} else {
						return [false,$.grid.edit.msg.customfcheck,""];
					}
				}
			}
		}
		return [true,"",""];
	}
});
;

$.component( "coral.grid", $.coral.grid, {
	editCell: function (iRow,iCol, ed){		
		var that = this, nm, tmp,cc, cm;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		iCol = parseInt(iCol,10);

		// select the row that can be used for other methods
	//	that.options.selrow = that.rows[iRow].id;
		if (!that.options.knv) {$(that.element).grid("GridNav");}
		// check to see if we have already edited cell
		if (that.options.savedRow.length>0) {
			// prevent second click on that field and enable selects
			if (ed===true ) {
				if(iRow == that.options.iRow && iCol == that.options.iCol){
					return;
				}
			}
			// save the cell
			if ( that.rows[that.options.savedRow[0].id] ) {
				if( !$(that.element).grid("saveCell",that.options.savedRow[0].id,that.options.savedRow[0].ic) ){
					return;
				}
			}
		} else {
			window.setTimeout(function () { $("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();},0);
		}
		cm = that.options.colModel[iCol];
		nm = cm.name;
		if (nm=='subgrid' || nm=='cb' || nm=='rn') {return;}
		cc = $("td:eq("+iCol+")",that.rows[iRow]);
		if (cm.editable===true && ed===true && !cc.hasClass("not-editable-cell")) {
			if(parseInt(that.options.iCol,10)>=0  && parseInt(that.options.iRow,10)>=0) {
				$("td:eq("+that.options.iCol+")",that.rows[that.options.iRow]).removeClass("edit-cell coral-state-highlight");
				$(that.rows[that.options.iRow]).removeClass("selected-row coral-state-hover");
			}
			$(cc).addClass("edit-cell coral-state-highlight");
			$(that.rows[iRow]).addClass("selected-row coral-state-hover");
			try {
				tmp =  $.unformat.call(that,cc,{rowId: that.rows[iRow].id, colModel:cm},iCol);
			} catch (_) {
				tmp = ( cm.edittype && cm.edittype == 'textarea' ) ? $(cc).text() : $(cc).html();
			}
			if(that.options.autoencode) { tmp = $.grid.htmlDecode(tmp); }
			if( !that._trigger("beforeEditCell",null,[{"rowId":that.rows[iRow].id,"name":nm,"cellValue":tmp,"rowIndex":iRow,"cellIndex":iCol}]) ) return;
			//if (!cm.edittype) {cm.edittype = "text";}
			that.options.savedRow.push({id:iRow,ic:iCol,name:nm,value:tmp});
			if(tmp === "&nbsp;" || tmp === "&#160;" || (tmp.length===1 && tmp.charCodeAt(0)===160) ) {tmp='';}
			if($.isFunction(that.options.formatCell)) {
				var tmp2 = that.options.formatCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
				if(tmp2 !== undefined ) {tmp = tmp2;}
			}
			var editoptions = cm.editoptions,
				attr = {
					id:iRow+"_"+nm,
					name:nm
				};
			//editoptions = $.extend({}, editoptions || {} ,{id:iRow+"_"+nm,name:nm});
			editoptions = $.extend({}, editoptions || {},attr);
			var elc = $.grid.createEl.call(that,cm.edittype,editoptions,tmp,true,$.extend({},$.grid.ajaxOptions,that.options.ajaxSelectOptions || {}));


			$(cc).html("").append(elc).attr("tabindex","0");
			var _keydown = function(e){
				if (e.keyCode === 27) {
					if($("input.hasDatepicker",cc).length >0) {
						if( $(".coral-datepicker").is(":hidden") )  { $(that.element).grid("restoreCell",iRow,iCol); }
						else { $("input.hasDatepicker",cc).datepicker('hide'); }
					} else {
						$(that.element).grid("restoreCell",iRow,iCol);
					}
				} //ESC
				if (e.keyCode === 13) {
					$(that.element).grid("saveCell",iRow,iCol);
					// Prevent default action
					return false;
				} //Enter
				if (e.keyCode === 9) {
					if(!that.grid.columnsView.loading ) {
						if (e.shiftKey) {$(that.element).grid("prevCell",iRow,iCol);} //Shift TAb
						else {$(that.element).grid("nextCell",iRow,iCol);} //Tab
					} else {
						return false;
					}
				}
				e.stopPropagation();
			};
			/*var _onValidSuccess = editoptions.onValidSuccess;
			editoptions = $.extend({}, editoptions, {"onValidSuccess":function(e, ui){
				$(e.target).parent("td").removeClass( "coral-gridcell-error" );
				_onValidSuccess&&_onValidSuccess.apply( $( this ), [e, ui] );
				e.stopPropagation();
			}});
			var _onValidError = editoptions.onValidError;
			editoptions = $.extend({}, editoptions, {"onValidError":function(e, ui){
				$(e.target).parent("td").removeClass( "coral-gridcell-error" );
				_onValidError&&_onValidError.apply( $( this ), [e, ui] );
				e.stopPropagation();
			}});*/
		//	var coralOption = {"onValidSuccess":_onValidSuccess,"onValidError":_onValidError,"onKeyDown":_keydown, "value":$(elc).val()};
			var coralOption = {"onKeyDown":_keydown, "value":$(elc).val()},
				type = cm.edittype,
				rwd = $(that.element).grid("getRowData",that.rows[iRow].id);
			switch ( cm.edittype ) {
				case "text":
				case "textarea":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).textbox(editoptions);					
					break;					
				case "datepicker":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).datepicker(editoptions);
					break;
				case "radio":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).radio(editoptions);
					if ( $(elc).val() == "Yes" ) {
						$(elc).radio("check");
					} else {
						$(elc).radio("uncheck");
					}
					break;
				case "checkbox":
					editoptions = $.extend({}, editoptions, coralOption);
					$(elc).checkbox(editoptions);	
					if ( $(elc).val() == "Yes" ) {
						$(elc).checkbox("check");
					} else {
						$(elc).checkbox("uncheck");
					}
					break;
				case "autocomplete":
					var value = $(elc).val();
					var isUrl = typeof ( editoptions.source ) == "string";
					editoptions = $.extend({}, editoptions, coralOption);
					var postMode = editoptions.postMode || "value";
					/*var _onChange = editoptions.onChange;
					editoptions = $.extend({}, editoptions, {"onChange":function(e, ui){
						$(elc).closest("td").attr( "data-org", isUrl?ui.value:ui.text );
						_onChange&&_onChange.apply(elc, [e, ui]);
					}});*/
					editoptions.postMode = postMode;
					editoptions = $.extend({}, editoptions, {"onKeyDown":_keydown});
					$(elc).autocomplete(editoptions);
					if ( isUrl ) {
						editoptions.postMode = "text";
						$(elc).autocomplete(editoptions);
						$( elc ).autocomplete( "setValue", value );
					} else {//data模式
						if ( postMode == "value" ) {
							$( elc ).autocomplete( "setValue", value );
						} else {
							/*var grepArr = $.grep( editoptions.source, function( _value ) {
								return _value[editoptions.textField||"text"] == value;
							});
							if ( grepArr.length ){
								//$( elc ).autocomplete( "setValue", grepArr[0][editoptions.valueField||"value"] );
							}*/
							$( elc ).autocomplete( "setValue", value );
							$( elc ).autocomplete( "setText", value );
						}
					}

					break;
				case "combobox":
				case "combotree":
				case "combogrid":
					editoptions = $.extend({}, editoptions, coralOption);
					if(cm.cellEditoptions){
						var cellOpt = that.getCellEditOptions(cm,$(elc).val(),editoptions,rwd,attr,coralOption);
					}
					type = cellOpt && cellOpt.type ? cellOpt.type : cm.edittype;
					editoptions = cellOpt && cellOpt.cOpts ? cellOpt.cOpts : editoptions ;
					type = type =="text"? "textbox" : type;
					$(elc)[type](editoptions);
					break;
			
			}
			window.setTimeout( function () { $(elc).focus();},0 );
			/*$("input, select, textarea",cc).bind("keydown",function(e) {
				if (e.keyCode === 27) {
					if($("input.hasDatepicker",cc).length >0) {
						if( $(".coral-datepicker").is(":hidden") )  { $(that.element).grid("restoreCell",iRow,iCol); }
						else { $("input.hasDatepicker",cc).datepicker('hide'); }
					} else {
						$(that.element).grid("restoreCell",iRow,iCol);
					}
				} //ESC
				if (e.keyCode === 13) {
					$(that.element).grid("saveCell",iRow,iCol);
					// Prevent default action
					return false;
				} //Enter
				if (e.keyCode === 9)  {
					if(!that.grid.columnsView.loading ) {
						if (e.shiftKey) {$(that.element).grid("prevCell",iRow,iCol);} //Shift TAb
						else {$(that.element).grid("nextCell",iRow,iCol);} //Tab
					} else {
						return false;
					}
				}
				e.stopPropagation();
			});*/
			/*$(that.element).triggerHandler("aftereditcell", [that.rows[iRow].id, nm, tmp, iRow, iCol]);
			if ($.isFunction(that.options.afterEditCell)) {
				that.options.afterEditCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
			}*/
			that._trigger("afterEditCell",null,[{"rowId":that.rows[iRow].id,"name":nm,"cellValue":tmp,"rowIndex":iRow,"celIndex":iCol}]);
		} else {
			if (parseInt(that.options.iCol,10)>=0  && parseInt(that.options.iRow,10)>=0) {
				$("td:eq("+that.options.iCol+")",that.rows[that.options.iRow]).removeClass("edit-cell coral-state-highlight");
				$(that.rows[that.options.iRow]).removeClass("selected-row coral-state-hover");
			}
			cc.addClass("edit-cell coral-state-highlight");
			$(that.rows[iRow]).addClass("selected-row coral-state-hover");
			tmp = cc.html().replace(/\&#160\;/ig,'');
			$(that.element).triggerHandler("jqGridSelectCell", [that.rows[iRow].id, nm, tmp, iRow, iCol]);
			if ($.isFunction(that.options.onSelectCell)) {
				that.options.onSelectCell.call(that, that.rows[iRow].id,nm,tmp,iRow,iCol);
			}
		}
		//$(cc).validate();
		that.options.iCol = iCol; that.options.iRow = iRow;
	},
	getCellEditOptions: function(cm,value,editoptions,rwd,attr,coralOption){
		var cOpts = $.coral.toFunction(cm.cellEditoptions).call(this, value, editoptions, rwd);
		var type = cOpts && cOpts.type ? cOpts.type : cm.edittype;
		cOpts = cOpts && cOpts.cellEditoptions ? $.extend({}, cOpts.cellEditoptions, attr, coralOption):editoptions;
		editoptions = cOpts || editoptions;
		return {
			cOpts:cOpts,
			type : type
		}
	},
	GridNav : function() {
		var  that = this;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		// trick to process keydown on non input elements
		that.options.knv = that.options.id + "_kn";
		var selection = $("<span style='width:0px;height:0px;background-color:black;' tabindex='0'><span tabindex='-1' style='width:0px;height:0px;background-color:grey' id='"+that.options.knv+"'></span></span>"),
		i, kdir;
		function scrollGrid(iR, iC, tp){
			if (tp.substr(0,1)=='v') {
				var ch = $(that.grid.rowsView)[0].clientHeight,
				st = $(that.grid.rowsView)[0].scrollTop,
				nROT = that.rows[iR].offsetTop+that.rows[iR].clientHeight,
				pROT = that.rows[iR].offsetTop;
				if(tp == 'vd') {
					if(nROT >= ch) {
						$(that.grid.rowsView)[0].scrollTop = $(that.grid.rowsView)[0].scrollTop + that.rows[iR].clientHeight;
					}
				}
				if(tp == 'vu'){
					if (pROT < st ) {
						$(that.grid.rowsView)[0].scrollTop = $(that.grid.rowsView)[0].scrollTop - that.rows[iR].clientHeight;
					}
				}
			}
			if(tp=='h') {
				var cw = $(that.grid.rowsView)[0].clientWidth,
				sl = $(that.grid.rowsView)[0].scrollLeft,
				nCOL = that.rows[iR].cells[iC].offsetLeft+that.rows[iR].cells[iC].clientWidth,
				pCOL = that.rows[iR].cells[iC].offsetLeft;
				if(nCOL >= cw+parseInt(sl,10)) {
					$(that.grid.rowsView)[0].scrollLeft = $(that.grid.rowsView)[0].scrollLeft + that.rows[iR].cells[iC].clientWidth;
				} else if (pCOL < sl) {
					$(that.grid.rowsView)[0].scrollLeft = $(that.grid.rowsView)[0].scrollLeft - that.rows[iR].cells[iC].clientWidth;
				}
			}
		}
		function findNextVisible(iC,act){
			var ind, i;
			if(act == 'lft') {
				ind = iC+1;
				for (i=iC;i>=0;i--){
					if (that.options.colModel[i].hidden !== true) {
						ind = i;
						break;
					}
				}
			}
			if(act == 'rgt') {
				ind = iC-1;
				for (i=iC; i<that.options.colModel.length;i++){
					if (that.options.colModel[i].hidden !== true) {
						ind = i;
						break;
					}						
				}
			}
			return ind;
		}

		//$(selection).insertBefore(that.grid.cDiv);//mark 暂时不考虑添加caption，先添加到columnsView前
		$(selection).insertBefore(that.grid.columnsView);
		$("#"+that.options.knv)
		.focus()
		.keydown(function (e){
			kdir = e.keyCode;
			if(that.options.direction == "rtl") {
				if(kdir===37) { kdir = 39;}
				else if (kdir===39) { kdir = 37; }
			}
			switch (kdir) {
				case 38:
					if (that.options.iRow-1 >0 ) {
						scrollGrid(that.options.iRow-1,that.options.iCol,'vu');
						$(that.element).grid("editCell",that.options.iRow-1,that.options.iCol,false);
					}
				break;
				case 40 :
					if (that.options.iRow+1 <=  that.rows.length-1) {
						scrollGrid(that.options.iRow+1,that.options.iCol,'vd');
						$(that.element).grid("editCell",that.options.iRow+1,that.options.iCol,false);
					}
				break;
				case 37 :
					if (that.options.iCol -1 >=  0) {
						i = findNextVisible(that.options.iCol-1,'lft');
						scrollGrid(that.options.iRow, i,'h');
						$(that.element).grid("editCell",that.options.iRow, i,false);
					}
				break;
				case 39 :
					if (that.options.iCol +1 <=  that.options.colModel.length-1) {
						i = findNextVisible(that.options.iCol+1,'rgt');
						scrollGrid(that.options.iRow,i,'h');
						$(that.element).grid("editCell",that.options.iRow,i,false);
					}
				break;
				case 13:
					if (parseInt(that.options.iCol,10)>=0 && parseInt(that.options.iRow,10)>=0) {
						$(that.element).grid("editCell",that.options.iRow,that.options.iCol,true);
					}
				break;
				default :
					return true;
			}
			return false;
		});
	},
	saveCell: function (iRow, iCol){
		var that= this, fr;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		if ( that.options.savedRow.length >= 1) {fr = 0;} else {fr=null;} 
		if(fr !== null) {
			var cc = $("td:eq("+iCol+")",that.rows[iRow]),v,v2,
			cm = that.options.colModel[iCol], nm = cm.name, nmjq = $.grid.coralID(nm) ;
			if ( this.options.autoValid ) {
				var isValid = this.valid( that.rows[iRow].id, cm.name );
				if ( !this.options.allowSaveOnError && !isValid ) {
					$.message("请确认是否输入正确！");return isValid;
				}
			}
			var edittype = cm.edittype;
			if (cm.cellEditoptions) {
				var rwd = $(that.element).grid("getRowData",that.rows[iRow].id),
					sel = $("#"+iRow+"_"+nmjq,that.rows[iRow]),
					cOpts = $.coral.toFunction(cm.cellEditoptions).call(this,$(sel)[$(sel).attr("component-role")]("getValue"),cm.editoptions,rwd);
				edittype = cOpts && cOpts.type ? cOpts.type: edittype;
			}
			switch (edittype) {
				case "select":
					if(!cm.editoptions.multiple) {
						v = $("#"+iRow+"_"+nmjq+" option:selected",that.rows[iRow]).val();
						v2 = $("#"+iRow+"_"+nmjq+" option:selected",that.rows[iRow]).text();
					} else {
						var sel = $("#"+iRow+"_"+nmjq,that.rows[iRow]), selectedText = [];
						v = $(sel).val();
						if(v) { v.join(",");} else { v=""; }
						$("option:selected",sel).each(
							function(i,selected){
								selectedText[i] = $(selected).text();
							}
						);
						v2 = selectedText.join(",");
					}
					if(cm.formatter) { v2 = v; }
					break;
				case "checkbox":
					var cbv  = ["Yes","No"];
					if(cm.editoptions){
						cbv = cm.editoptions.value.split(":");
					}
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).is(":checked") ? cbv[0] : cbv[1];
					v2=v;
					break;
				case "password":
				case "text":
				case "textarea":
					//lihaibo add begin
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2=v;
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					break;
					//lihaibo add end
				case "button" :
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2=v;
					break;
				case 'custom' :
					try {
						if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
							v = cm.editoptions.custom_value.call(that, $(".customelement",cc),'get');
							if (v===undefined) { throw "e2";} else { v2=v; }
						} else { throw "e1"; }
					} catch (e) {
						if (e=="e1") { $.grid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.nodefined,jQuery.jgrid.edit.bClose); }
						if (e=="e2") { $.grid.info_dialog(jQuery.jgrid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.novalue,jQuery.jgrid.edit.bClose); }
						else {$.grid.info_dialog(jQuery.jgrid.errors.errcap,e.message,jQuery.jgrid.edit.bClose); }
					}
					break;
				case "datepicker":
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow]).val();
					v2 = v;
					var $el = $("#"+iRow+"_"+nmjq,that.rows[iRow]);
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					break;
				case "combobox":
				case "combogrid":
				case "combotree":
					v = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getValues").toString();
					v2 = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getText");
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					if(cm.formatter) { v2 = v; }
					break;
				case "autocomplete":
					v2 = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getText");
					if ( typeof ( cm.editoptions.source ) == "string" ) {
						v = v2;
					} else {
						v = $("#"+iRow+"_"+nmjq,that.rows[iRow])[ edittype ]("getValue");
					}
					/*if ( !$(cc).validate( "valid" ) ) {
						cc.addClass( "coral-gridcell-error" );
						return false;
					} else {
						cc.removeClass( "coral-gridcell-error" );
					}*/
					if(cm.formatter&&cm.postMode=="value") { v2 = v; }
					break;
			}
			// The common approach is if nothing changed do not do anything
			if (v2 !== that.options.savedRow[fr].value){
				//that._trigger("beforeSaveCell", null, [{"rowId":that.rows[iRow].id,"name":nm,"cellValue":v,"rowIndex":iRow,"celIndex":iCol}]);
				var vvv = $(that).triggerHandler("jqGridBeforeSaveCell", [that.rows[iRow].id, nm, v, iRow, iCol]);
				if (vvv) {v = vvv; v2=vvv;}
				if ($.isFunction(that.options.beforeSaveCell)) {
					var vv = that.options.beforeSaveCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
					if (vv) {v = vv; v2=vv;}
				}
				var cv = $.grid.checkValues(v,iCol,that);
				if(cv[0] === true) {
					var addpost = $(that).triggerHandler("jqGridBeforeSubmitCell", [that.rows[iRow].id, nm, v, iRow, iCol]) || {};
					if ($.isFunction(that.options.beforeSubmitCell)) {
						addpost = that.options.beforeSubmitCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
						if (!addpost) {addpost={};}
					}
					if( $("input.hasDatepicker",cc).length >0) { $("input.hasDatepicker",cc).datepicker('hide'); }
					if (that.options.cellsubmit == 'remote') {
						if (that.options.cellurl) {
							var postdata = {};
							if(that.options.autoencode) { v = $.grid.htmlEncode(v); }
							postdata[nm] = v;
							var idname,oper, opers;
							opers = that.options.prmNames;
							idname = opers.id;
							oper = opers.oper;
							postdata[idname] = $.grid.stripPref(that.options.idPrefix, that.rows[iRow].id);
							postdata[oper] = opers.editoper;
							postdata = $.extend(addpost,postdata);
							$("#lui_"+$.grid.coralID(that.options.id)).show();
							that.grid.columnsView.loading = true;
							$.ajax( $.extend( {
								url: that.options.cellurl,
								data :$.isFunction(that.options.serializeCellData) ? that.options.serializeCellData.call(that, postdata) : postdata,
								type: "POST",
								complete: function (result, stat) {
									$("#lui_"+that.options.id).hide();
									that.grid.columnsView.loading = false;
									if (stat == 'success') {
										var ret = $(that).triggerHandler("jqGridAfterSubmitCell", [that, result, postdata.id, nm, v, iRow, iCol]) || [true, ''];
										if (ret[0] === true && $.isFunction(that.options.afterSubmitCell)) {
											ret = that.options.afterSubmitCell.call(that, result,postdata.id,nm,v,iRow,iCol);
										}
										if(ret[0] === true){
											$(cc).empty();
											$(that.element).grid("setCell",that.rows[iRow].id, iCol, v2, false, false, true);
											$(cc).addClass("dirty-cell");
											$(that.rows[iRow]).addClass("edited");
											$(that).triggerHandler("jqGridAfterSaveCell", [that.rows[iRow].id, nm, v, iRow, iCol]);
											if ($.isFunction(that.options.afterSaveCell)) {
												that.options.afterSaveCell.call(that, that.rows[iRow].id,nm, v, iRow,iCol);
											}
											that.options.savedRow.splice(0,1);
										} else {
											$.grid.info_dialog($.grid.errors.errcap,ret[1],$.grid.edit.bClose);
											$(that.element).grid("restoreCell",iRow,iCol);
										}
									}
								},
								error:function(res,stat,err) {
									$("#lui_"+$.grid.coralID(that.options.id)).hide();
									that.grid.columnsView.loading = false;
									$(that).triggerHandler("jqGridErrorCell", [res, stat, err]);
									if ($.isFunction(that.options.errorCell)) {
										that.options.errorCell.call(that, res,stat,err);
										$(that.element).grid("restoreCell",iRow,iCol);
									} else {
										$.grid.info_dialog($.grid.errors.errcap,res.status+" : "+res.statusText+"<br/>"+stat,$.grid.edit.bClose);
										$(that.element).grid("restoreCell",iRow,iCol);
									}
								}
							}, $.grid.ajaxOptions, that.options.ajaxCellOptions || {}));
						} else {
							try {
								$.grid.info_dialog($.grid.errors.errcap,$.grid.errors.nourl,$.grid.edit.bClose);
								$(that.element).grid("restoreCell",iRow,iCol);
							} catch (e) {}
						}
					}
					if (that.options.cellsubmit == 'clientArray') {
						$(cc).empty();
						$(that.element).grid("setCell",that.rows[iRow].id,iCol, v2, false, false, true);
						$(cc).addClass("dirty-cell");
						$(that.rows[iRow]).addClass("edited");
						that._trigger("afterSaveCell", null, [{"rowId":that.rows[iRow].id,"name":nm,"cellValue":v,"rowIndex":iRow,"celIndex":iCol}]);
						that.options.savedRow.splice(0,1);
					}
				} else {
					try {
						window.setTimeout(function(){$.grid.info_dialog($.grid.errors.errcap,v+" "+cv[1],$.grid.edit.bClose);},100);
						$(that.element).grid("restoreCell",iRow,iCol);
					} catch (e) {}
				}
			} else {
				$(that.element).grid("restoreCell",iRow,iCol);
			}
			/*if ( this.options.autoValid ) {
				this.valid( that.rows[iRow].id, cm.name );
			}*/
		}
		//if ($.browser.opera) {
		if (false) {
			$("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();
		} else {
			window.setTimeout(function () { $("#"+$.grid.coralID(that.options.knv)).attr("tabindex","-1").focus();},0);
		}
		//$(cc).validate("destroy");
	},
	restoreCell : function(iRow, iCol) {
		var that= this, fr;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		if ( that.options.savedRow.length >= 1) {fr = 0;} else {fr=null;}
		if(fr !== null) {
			var cc = $("td:eq("+iCol+")",that.rows[iRow]);
			// datepicker fix
			/*if($.isFunction($.fn.datepicker)) {
				try {
					$("input.hasDatepicker",cc).datepicker('hide');
				} catch (e) {}
			}*/
			$(cc).empty().attr("tabindex","-1");
			$(that.element).grid("setCell",that.rows[iRow].id, iCol, that.options.savedRow[fr].value, false, false, true);
			$(that).triggerHandler("jqGridAfterRestoreCell", [that.rows[iRow].id, that.options.savedRow[fr].value, iRow, iCol]);
			if ($.isFunction(that.options.afterRestoreCell)) {
				that.options.afterRestoreCell.call(that, that.rows[iRow].id, that.options.savedRow[fr].value, iRow, iCol);
			}				
			that.options.savedRow.splice(0,1);
		}
		window.setTimeout(function () { $("#"+that.options.knv).attr("tabindex","-1").focus();},0);
	},
	nextCell : function (iRow,iCol) {
		var that = this, nCol=false;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		// try to find next editable cell
		for (var i=iCol+1; i<that.options.colModel.length; i++) {
			if ( that.options.colModel[i].editable ===true) {
				nCol = i; break;
			}
		}
		if(nCol !== false) {
			$(that.element).grid("editCell",iRow,nCol,true);
		} else {
			if (that.options.savedRow.length >0) {
				$(that.element).grid("saveCell",iRow,iCol);
			}
		}
	},
	prevCell : function (iRow,iCol) {
		var that = this, nCol=false;
		if (!that.grid || that.options.cellEdit !== true) {return;}
		// try to find next editable cell
		for (var i=iCol-1; i>=0; i--) {
			if ( that.options.colModel[i].editable ===true) {
				nCol = i; break;
			}
		}
		if(nCol !== false) {
			$(that.element).grid("editCell",iRow,nCol,true);
		} else {
			if (that.options.savedRow.length >0) {
				$(that.element).grid("saveCell",iRow,iCol);
			}
		}
	},
	getChangedCells : function (mthd) {
		var ret=[];
		if (!mthd) {mthd='all';}
		var that= this, nm, success = true;
		if (!that.grid || that.options.cellEdit !== true ) {return;}
		$(that.rows).each(function(j){
			var res = {};
			if ($(this).hasClass("edited")) {
				$('td',this).each( function(i) {
					nm = that.options.colModel[i].name;
					if ( nm !== 'cb' && nm !== 'subgrid') {
						if ( $(this).hasClass( "coral-gridcell-error" ) ) {
							success = false;
							return false;
						}
						if (mthd=='dirty') {
							if ($(this).hasClass('dirty-cell')) {
								try {
									res[nm] = $.unformat.call(that,this,{rowId:that.rows[j].id, colModel:that.options.colModel[i]},i);
								} catch (e){
									res[nm] = $.jgrid.htmlDecode($(this).html());
								}
							}
						} else {
							try {
								res[nm] = $.unformat.call(that,this,{rowId:that.rows[j].id,colModel:that.options.colModel[i]},i);
							} catch (e) {
								res[nm] = $.jgrid.htmlDecode($(this).html());
							}
						}
					}
				});
				if(!success){
					return false;
				}
				res.id = this.id;
				ret.push(res);
			}
		});
		if(!success){
			ret = [];
		}
		return ret;
	}
});
;

/**
 * grid extension for manipulating Grid Data
 * Tony Tomov tony@trirand.com
 * http://trirand.com/blog/ 
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
**/ 
//jsHint options
/*global alert, $, jQuery */
"use strict";
$.coral.grid.inlineEdit = $.coral.grid.inlineEdit || {};
$.component( "coral.grid", $.coral.grid, {
//Editing
	editButtonsPos: function(rowid,inlineBtn){
		var $t = this,ids,ind,height,gridViewHeight;
		ids = $($t.element).grid("getDataIDs");
		ind = $($t.element).grid("getInd",rowid,true);
		gridViewHeight = $t.element.find(".coral-grid-rows-view").outerHeight();
		height = $t.element.find(".coral-grid-btable").outerHeight();
		if((height + $(ind).outerHeight() > gridViewHeight) && rowid == ids[ids.length-1]){
			inlineBtn.position({
				my: "left-"+(inlineBtn.outerWidth()/2)+" top-2",
				at: "right-"+($(ind).outerWidth()/2)+" top-"+($(inlineBtn).outerHeight()),
				collision: "fit",
				of: $(ind)
			});
		}else{
			inlineBtn.position({
				my: "left-"+(inlineBtn.outerWidth()/2)+" top-2",
				at: "right-"+($(ind).outerWidth()/2)+" top+"+($(ind).outerHeight()),
				collision: "fit",
				of: $(ind)
			});
		}
	},
	editRow : function(rowid,keys,oneditfunc,successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
		// Compatible mode old versions
		var o={}, args = $.makeArray(arguments).slice(1);

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if (typeof keys !== "undefined") { o.keys = keys; }
			if ($.isFunction(oneditfunc)) { o.oneditfunc = oneditfunc; }
			if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
			if (typeof url !== "undefined") { o.url = url; }
			if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
			if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
			if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
			// last two not as param, but as object (sorry)
			//if (typeof restoreAfterError !== "undefined") { o.restoreAfterError = restoreAfterError; }
			//if (typeof mtype !== "undefined") { o.mtype = mtype || "POST"; }			
		}
		o = $.extend(true, {
			keys : true,
			oneditfunc: null,
			successfunc: null,
			url: "clientArray",
			extraparam: {},
			aftersavefunc: null,
			errorfunc: null,
			afterrestorefunc: null,
			restoreAfterError: true,
			mtype: "POST"
		}, $.coral.grid.inlineEdit, o );

		// End compatible
		var $t = this, nm, tmp, editable, cnt=0, focus=null, svr={}, ind,cm;
		if (!$t.grid ) { return; }
		ind = $($t.element).grid("getInd",rowid,true);
		$t.options.editrow = rowid;
		$t.editRowIndex = rowid;// for editing
		if( ind === false ) {return;}
		editable = $(ind).attr("editable") || "0";
		if ( $t._trigger("beforeInlineEditRow",null,[{"rowId":rowid, "options":o}]) == false ) return;
		if (editable == "0" && !$(ind).hasClass("not-editable-row")) {
			if ( this.options.rowEditButtons ) {
				var inlineBtn = $("<div class='row-editable coral-grid-rows'><div class='row-editable-btns coral-state-highlight'>" +
						"<div class='grid_edit_toolbar'></div>" +
						"</div></div>");								
				var editBarData = [];

				var updateBtn = {
					"type": "button",
					"id": "update",
					"label": $.grid.edit.bUpdate,
					"name": "update",
					"onClick":function(){
					var status = $t.saveRow(ind.id, null, "clientArray");
					}
				}
				var cancelBtn = {
						"type": "button",
						"id": "cancel",
						"label": $.grid.edit.bCancel,
						"name": "cancel",
						'onClick': function(){
							$t.restoreRow(ind.id);
							inlineBtn.remove();
					        $t._trigger("afterInlineCancelRow", null, [{'rowId': ind.id, 'options': o, 'isUpdated': !$(ind.id).hasClass("new-row")}]);
						}	
				};
				if ( this.options.rowEditButtons.length === 0){
					this.options.rowEditButtons = ["update","cancel"];
				}
				for(var i=0;i<this.options.rowEditButtons.length;i++){
					if ( this.options.rowEditButtons[i]=='update' ) {
						
						editBarData.push(updateBtn);
					} else if (this.options.rowEditButtons[i]=='cancel' ) {
							editBarData.push(cancelBtn);
					} else {
						
						editBarData.push(this.options.rowEditButtons[i]);
					}
				}
				this.rowEditButtons = inlineBtn;

				$t.element.find(".row-editable").remove();
				$t.element.find(".coral-grid-view").prepend(inlineBtn[0]);
				$( '.grid_edit_toolbar', $t.element ).toolbar({
					data : editBarData
				})
				this._delay(function(){
					this.editButtonsPos(rowid,inlineBtn);
				});
			}
			cm = $t.options.colModel;
			$('td[role="gridcell"]',ind).each( function(i) {
				nm = cm[i].name;
				var treeg = $t.options.treeGrid===true && nm == $t.options.expandColumn;
				if(treeg) { tmp = $("span:first",this).html();}
				else {
					try {
						tmp = $.unformat.call($t,this,{rowId:rowid, colModel:cm[i]},i);
					} catch (_) {
						tmp =  ( cm[i].edittype && cm[i].edittype == 'textarea' ) ? $(this).text() : $(this).html();
					}
				}
				if ( nm != 'cb' && nm != 'subgrid' && nm != 'rn') {
					if($t.options.autoencode) { tmp = $.grid.htmlDecode(tmp); }
					svr[nm]=tmp;
					if(cm[i].editable===true) {
						if(focus===null) { focus = i; }
						if (treeg) { $("span:first",this).html(""); }
						else { $(this).html(""); }
						var opt = $.extend({},cm[i].editoptions || {},{id:rowid+"_"+nm,name:nm});
						if(!cm[i].edittype) { cm[i].edittype = "text"; }
						if(tmp == "&nbsp;" || tmp == "&#160;" || (tmp.length==1 && tmp.charCodeAt(0)==160) ) {tmp='';}
						var elc = $.grid.createEl.call($t,cm[i].edittype,opt,tmp,false,$.extend({},$.grid.ajaxOptions,$t.options.ajaxSelectOptions || {}));
						$(elc).addClass("editable");
						if(treeg) { $("span:first",this).append(elc); }
						else { $(this).append(elc); }

						var editoptions = cm[i].editoptions || {};
						var postMode = editoptions.postMode || "value";
						$.extend(editoptions,{
							'onValidError': function(e, ui){
								$(elc).parents("td").addClass("coral-gridcell-error");
								e.stopPropagation();
							},
							'onValidSuccess': function(e, ui){
								$(elc).parents("td").removeClass("coral-gridcell-error");
								e.stopPropagation();
							},
							'onKeyDown': function(e, ui){
								//e.stopPropagation();
							},
							'onClick': function(e, ui){
								e.stopPropagation();
							},
							dataCustom: {
								rowId: rowid,
								gridId: $t.options.id
							}
						});
						var edittype = cm[i].edittype;
						switch( edittype ){
							case 'autocomplete': 
								var value = $(elc).val();
								var isUrl = typeof ( editoptions.source ) == "string";
								
								var _onSelect = editoptions.onSelect;
								editoptions = $.extend({}, editoptions, {"onSelect":function(e, ui){
									$(elc).closest("td").attr("data-org", isUrl?ui.value:ui.text);
									_onSelect&&_onSelect.apply(elc, [e, ui]);
								}});
								// url模式
								if ( isUrl ) {
									editoptions.postMode = "text";
									$(elc).autocomplete(editoptions);
									$( elc ).autocomplete( "setValue", value );
								} else {//data模式
									$(elc).autocomplete(editoptions);
									if ( postMode == "value" ) {
										$( elc ).autocomplete( "setValue", value );
									} else {
										$( elc ).autocomplete( "setValue", value );
										$( elc ).autocomplete( "setText", value );
									}
								}
								break;
							case 'checkbox': 
								$(elc).checkbox(editoptions);	
								var cbv = ["Yes","No"];
								if( editoptions && editoptions.value) {
									cbv = editoptions.value.split(":");
								}
								if ( $(elc).val() == cbv[0] ) {
									$(elc).checkbox("check");
								} else {
									$(elc).checkbox("uncheck");
								}
								break;
							case 'combogrid':
							case 'combobox': 
							case 'combotree': 
								$(elc)[ edittype ](editoptions);
/*
								if ( postMode == "value" ) {
									$( elc )[ edittype ]( "setValues", $(elc).val().split(",") );
								} else {
									// TODO: combotree还未实现该方法，可能会报错
									$( elc )[ edittype ]( "setText", $(elc).val() );
								}
								editoptions = null;*/
								$( elc )[ edittype ]( "setValues", $(elc).val().split(",") );
								break;
							case 'text':
							case 'textarea':
								$( elc )[ "textbox" ]( editoptions );
								break;
							default:
								$( elc )[ edittype ]( editoptions );
								break;
						}
						cnt++;
					}
				}
			});
			if(cnt > 0) {
				svr.id = rowid; $t.options.savedRow.push(svr);
				$(ind).attr("editable","1");
				$("td:eq("+focus+") input",ind).focus();
				if(o.keys===true) {
					$(ind).bind("keydown",function(e) {
						if (e.keyCode === 27) {
							$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
							if($t.options._inlinenav) {
								try {
									$($t.element).grid('showAddEditButtons');
								} catch (eer1) {}
							}
							return false;
						}
						if (e.keyCode === 13) {
							var ta = e.target;
							if(ta.tagName == 'TEXTAREA') { return true; }
							if( $($t.element).grid("saveRow", rowid, o) ) {
								if($t.options._inlinenav) {
									try {
										$($t.element).grid('showAddEditButtons');
									} catch (eer2) {}
								}
							}
							return false;
						}
					});
				}
				/*$($t).triggerHandler("gridInlineEditRow", [rowid, o]);
				if( $.isFunction(o.oneditfunc)) { o.oneditfunc.call($t, rowid); }*/
				$t._trigger("onInlineEditRow",null,[{"rowId":rowid, "options":o}]);
			}
		}
		/*var validateCom = $.coral.findComponent( ".ctrl-init-validate", $( ind ).parent() );
		if( validateCom.length ){
			for( var i=0; i < validateCom.length; i++ ){
				validateCom[i].destroy();
			}
		}
		$( ind ).validate();*/
	},
	saveRow : function(rowid, successfunc, url, extraparam, aftersavefunc,errorfunc, afterrestorefunc) {
		// Compatible mode old versions
		var args = $.makeArray(arguments).slice(1), o = {};

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if ($.isFunction(successfunc)) { o.successfunc = successfunc; }
			if (typeof url !== "undefined") { o.url = url; }
			if (typeof extraparam !== "undefined") { o.extraparam = extraparam; }
			if ($.isFunction(aftersavefunc)) { o.aftersavefunc = aftersavefunc; }
			if ($.isFunction(errorfunc)) { o.errorfunc = errorfunc; }
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
		}
		o = $.extend(true, {
			successfunc: null,
			url: null,
			extraparam: {},
			aftersavefunc: null,
			errorfunc: null,
			afterrestorefunc: null,
			restoreAfterError: true,
			mtype: "POST"
		}, $.grid.inlineEdit, o );
		// End compatible

		var success = false;
		var $t = this, nm, tmp={}, tmp2={}, tmp3= {}, editable, fr, cv, ind;
		if (!$t.grid ) { return success; }
		ind = $($t.element).grid("getInd",rowid,true);
		// 进行错误校验 有错误则阻止保存
		//success = $.coral.valid( $( ind ), false );
		/*success = $( ind ).validate("valid");
		if( !success ){
			$.message("请确认是否输入正确！");return success;
		}*/
		if(ind === false) {return success;}
		if ( this.options.autoValid ) {
			var isValid = this.valid( ind.id );
			if ( !this.options.allowSaveOnError && !isValid ) {
				$.message("请确认是否输入正确！");return isValid;
			}
		}
		editable = $(ind).attr("editable");
		o.url = o.url ? o.url : $t.options.editurl;
		// 如果url为undefined 则默认设置为clientArray，因为大部分都是用客户端提交的方式
		o.url = o.url ? o.url : "clientArray";
		if (editable==="1") {
			var cm;
			$('td[role="gridcell"]',ind).each(function(i) {
				cm = $t.options.colModel[i];
				nm = cm.name;
				if ( nm != 'cb' && nm != 'subgrid' && cm.editable===true && nm != 'rn' && !$(this).hasClass('not-editable-cell')) {
					var edittype = cm.edittype;
					switch (edittype) {
						case "checkbox":
							var cbv = ["Yes","No"];
							if(cm.editoptions ) {
								cbv = cm.editoptions.value.split(":");
							}
							tmp[nm]=  $("input",this).is(":checked") ? cbv[0] : cbv[1]; 
							break;
						case 'datepicker':
							tmp[nm]=$("input[type='hidden']",this).val();
							break;
						case 'autocomplete':
							if ( typeof ( cm.editoptions.source ) == "string" ) {
								tmp[nm]=$(".ctrl-init-"+edittype,this)[ edittype ]( "getText" );
							} else {
								tmp[nm]=$(".ctrl-init-"+edittype,this)[ edittype ]( "getValue" );
							}
							break;
						case 'text':
						case 'password':
						case 'textarea':
						case "button" :
							tmp[nm]=$("input, textarea",this).val();
							break;
						case 'combogrid':
						case 'combobox':
						case 'combotree':
							/*if(!cm.editoptions) {
								tmp[nm] = $(".ctrl-init:first", this)[ edittype ]( "getValues" ).toString();
								tmp2[nm] = $(".ctrl-init:first", this)[ edittype ]( "getText" );
							} else {
								tmp[nm] = $(".ctrl-init:first", this)[ edittype ]( "getValues" ).toString();
								tmp2[nm] = $(".ctrl-init:first", this)[ edittype ]( "getText" );
							}*/
							tmp[nm] = $(".ctrl-init-"+edittype, this)[ edittype ]( "getValues" ).toString();
							tmp2[nm] = $(".ctrl-init-"+edittype, this)[ edittype ]( "getText" )
							if(cm.formatter && cm.formatter == edittype ) { tmp2={}; }
							break;
						case 'custom' :
							try {
								if(cm.editoptions && $.isFunction(cm.editoptions.custom_value)) {
									tmp[nm] = cm.editoptions.custom_value.call($t, $(".customelement",this),'get');
									if (tmp[nm] === undefined) { throw "e2"; }
								} else { throw "e1"; }
							} catch (e) {
								if (e=="e1") { $.grid.info_dialog($.grid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.nodefined,$.grid.edit.bClose); }
								if (e=="e2") { $.grid.info_dialog($.grid.errors.errcap,"function 'custom_value' "+$.grid.edit.msg.novalue,$.grid.edit.bClose); }
								else { $.grid.info_dialog($.grid.errors.errcap,e.message,$.grid.edit.bClose); }
							}
							break;
					}
					cv = $.grid.checkValues(tmp[nm],i,$t);
					if(cv[0] === false) {
						cv[1] = tmp[nm] + " " + cv[1];
						return false;
					}
					if($t.options.autoencode) { tmp[nm] = $.grid.htmlEncode(tmp[nm]); }
					if(o.url !== 'clientArray' && cm.editoptions /*&& cm.editoptions.NullIfEmpty === true*/) {
						if(tmp[nm] === "") {
							tmp3[nm] = 'null';
						}
					}
				}
			});
			if (cv[0] === false){
				try {
					var positions = $.grid.findPos($("#"+$.grid.coralID(rowid), $t.grid.bDiv)[0]);
					$.grid.info_dialog($.grid.errors.errcap,cv[1],$.grid.edit.bClose,{left:positions[0],top:positions[1]});
				} catch (e) {
					alert(cv[1]);
				}
				return success;
			}
			var idname, opers, oper;
			opers = $t.options.prmNames;
			oper = opers.oper;
			if ($t.options.keyName === false) {
				idname = opers.id;
			} else {
				idname = $t.options.keyName;
			}
			if(tmp) {
				tmp[oper] = opers.editoper;
				tmp[idname] = rowid;
				if(typeof($t.options.inlineData) == 'undefined') { $t.options.inlineData ={}; }
				tmp = $.extend({},tmp,$t.options.inlineData,o.extraparam);
			}
			if (o.url == 'clientArray') {
				//tmp = $.extend({},tmp, tmp2);
				if($t.options.autoencode) {
					$.each(tmp,function(n,v){
						tmp[n] = $.grid.htmlDecode(v);
					});
				}
				var resp = $($t.element).grid("setRowData",rowid,tmp);
				$(ind).attr("editable","0");
				for( var k=0;k<$t.options.savedRow.length;k++) {
					if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
				}
				if(fr >= 0) { $t.options.savedRow.splice(fr,1); }
				success = resp;
				if(success)$t.options.editrow = null;//成功后删除
				if ( $t.options.rowEditButtons  ) {
					$t.rowEditButtons.hide();
				}
				$t._trigger("afterInlineSaveRow", null, [{'rowId': rowid, 'options': o, 'status': resp}]);
				//$($t).triggerHandler("gridInlineAfterSaveRow", [rowid, resp, tmp, o]);
				if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,resp); }
				$(ind).unbind("keydown");
			} else {
				$("#lui_"+$.grid.coralID($t.options.id)).show();
				tmp3 = $.extend({},tmp,tmp3);
				tmp3[idname] = $.grid.stripPref($t.options.idPrefix, tmp3[idname]);
				$.ajax($.extend({
					url:o.url,
					data: $.isFunction($t.options.serializeRowData) ? $t.options.serializeRowData.call($t, tmp3) : tmp3,
					type: o.mtype,
					async : false, //?!?
					complete: function(res,stat){
						$("#lui_"+$.grid.coralID($t.options.id)).hide();
						if (stat === "success"){
							var ret = true, sucret;
							sucret = $t._trigger("inlineSuccessSaveRow", null, [{'res':res, 'rowId': rowid, 'options': o}]);
							if (!$.isArray(sucret)) {sucret = [true, tmp];}
							if (sucret[0] && $.isFunction(o.successfunc)) {sucret = o.successfunc.call($t, res);}							
							if($.isArray(sucret)) {
								// expect array - status, data, rowid
								ret = sucret[0];
								tmp = sucret[1] ? sucret[1] : tmp;
							} else {
								ret = sucret;
							}
							if (ret===true) {
								if($t.options.autoencode) {
									$.each(tmp,function(n,v){
										tmp[n] = $.grid.htmlDecode(v);
									});
								}
								tmp = $.extend({},tmp, tmp2);
								$($t.element).grid("setRowData",rowid,tmp);
								$(ind).attr("editable","0");
								for( var k=0;k<$t.options.savedRow.length;k++) {
									if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
								}
								if(fr >= 0) { $t.options.savedRow.splice(fr,1); }
								$($t).triggerHandler("gridInlineAfterSaveRow", [rowid, res, tmp, o]);
								if( $.isFunction(o.aftersavefunc) ) { o.aftersavefunc.call($t, rowid,res); }
								success = true;
								$t.options.editrow = null;//成功后删除
								if ( $t.rowEditButtons  ) {
									$t.rowEditButtons.hide();
								}
								$t._trigger("afterInlineSaveRow", null, [{'rowId': rowid, 'options': o, 'status': resp}]);
								$(ind).unbind("keydown");
							} else {
								$($t).triggerHandler("gridInlineErrorSaveRow", [rowid, res, stat, null, o]);
								if($.isFunction(o.errorfunc) ) {
									o.errorfunc.call($t, rowid, res, stat, null);
								}
								if(o.restoreAfterError === true) {
									$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
								}
							}
						}
					},
					error:function(res,stat,err){
						$("#lui_"+$.grid.coralID($t.options.id)).hide();
						$($t).triggerHandler("gridInlineErrorSaveRow", [rowid, res, stat, err, o]);
						if($.isFunction(o.errorfunc) ) {
							o.errorfunc.call($t, rowid, res, stat, err);
						} else {
							try {
								$.grid.info_dialog($.grid.errors.errcap,'<div class="coral-state-error">'+ res.responseText +'</div>', $.grid.edit.bClose,{buttonalign:'right'});
							} catch(e) {
								alert(res.responseText);
							}
						}
						if(o.restoreAfterError === true) {
							$($t.element).grid("restoreRow",rowid, o.afterrestorefunc);
						}
					}
				}, $.grid.ajaxOptions, $t.options.ajaxRowOptions || {}));
			}
		}
		if(success){
			//$( ind ).validate("destroy");
			$(ind).removeClass("new-row");
		}
		return success;
	},
	restoreRow : function(rowid, afterrestorefunc) {
		// Compatible mode old versions
		var args = $.makeArray(arguments).slice(1), o={};

		if( $.type(args[0]) === "object" ) {
			o = args[0];
		} else {
			if ($.isFunction(afterrestorefunc)) { o.afterrestorefunc = afterrestorefunc; }
		}
		o = $.extend(true, $.grid.inlineEdit, o );

		// End compatible

		//return this.each(function(){
		var $t= this, fr, ind, ares={};
		if (!$t.grid ) { return; }
		ind = $($t.element).grid("getInd",rowid,true);
		if( $t.options.editrow && rowid == $t.options.editrow ){
			$t.options.editrow = null;//如果重置的是当前编辑的id则删除
			$t.clearErrors(rowid);
		}
		//$(ind).children("td.coral-gridcell-error").removeClass("coral-gridcell-error");
		if(ind === false) {return;}
		for( var k=0;k<$t.options.savedRow.length;k++) {
			if( $t.options.savedRow[k].id == rowid) {fr = k; break;}
		}
		if(fr >= 0) {
			if($.isFunction($.fn.datepicker)) {
				try {
					$("input.hasDatepicker","#"+$.grid.coralID(ind.id)).datepicker('hide');
				} catch (e) {}
			}
			$.each($t.options.colModel, function(){
				if(this.editable === true && this.name in $t.options.savedRow[fr] ) {
					ares[this.name] = $t.options.savedRow[fr][this.name];
				}
			});
			$($t.element).grid("setRowData",rowid,ares);
			$(ind).attr("editable","0").unbind("keydown");
			$t.options.savedRow.splice(fr,1);
			if($("#"+$.grid.coralID(rowid), "#"+$.grid.coralID($t.options.id)).hasClass("grid-new-row")){
				setTimeout(function(){$($t.element).grid("delRowData",rowid);},0);
			}
		}
		$($t).triggerHandler("gridInlineAfterRestoreRow", [rowid]);
		if ($.isFunction(o.afterrestorefunc))
		{
			o.afterrestorefunc.call($t, rowid);
		}
		if ($t.options.rowEditButtons) {
			$t.rowEditButtons.hide();
		}
		//});
	},
	addRow : function ( p ) {
		p = $.extend(true, {
			rowID : "new_row",
			initdata : {},
			position :"first",
			useDefValues : true,
			useFormatter : false,
			addRowParams : {extraparam:{}}
		},p  || {});
		if (!this.grid ) { return; }
		var $t = this;
		if(p.useDefValues === true) {
			$($t.options.colModel).each(function(){
				if( this.editoptions && this.editoptions.defaultValue ) {
					var opt = this.editoptions.defaultValue,
					tmp = $.isFunction(opt) ? opt.call($t) : opt;
					p.initdata[this.name] = tmp;
				}
			});
		}
		$($t.element).grid('addRowData', p.rowID, p.initdata, p.position);
		$("#"+$.grid.coralID(p.rowID), "#"+$.grid.coralID($t.options.id)).addClass("grid-new-row");
		if(p.useFormatter) {
			$("#"+$.grid.coralID(p.rowID)+" .coral-inline-edit", "#"+$.grid.coralID($t.options.id)).click();
		} else {
			var opers = $t.options.prmNames,
			oper = opers.oper;
			p.addRowParams.extraparam[oper] = opers.addoper;
			$($t.element).grid('editRow', p.rowID, p.addRowParams);
			$($t.element).grid('setSelection', p.rowID);
		}
	},
	clearEdited: function(rowId){
		var $tr = $( this.getInd(rowId, true) );
		$tr.removeClass("edited");
		$tr.children("td").removeClass("dirty-cell");
	},
	inlineNav : function (elem, o) {
		o = $.extend({
			edit: true,
			editicon: "coral-icon-pencil",
			add: true,
			addicon:"coral-icon-plus",
			save: true,
			saveicon:"coral-icon-disk",
			cancel: true,
			cancelicon:"coral-icon-cancel",
			addParams : {useFormatter : false,rowID : "new_row"},
			editParams : {},
			restoreAfterSelect : true
		}, $.grid.nav, o ||{});
		return this.each(function(){
			if (!this.grid ) { return; }
			var $t = this, onSelect, gID = $.grid.coralID($t.options.id);
			$t.options._inlinenav = true;
			// detect the formatactions column
			if(o.addParams.useFormatter === true) {
				var cm = $t.options.colModel,i;
				for (i = 0; i<cm.length; i++) {
					if(cm[i].formatter && cm[i].formatter === "actions" ) {
						if(cm[i].formatoptions) {
							var defaults =  {
								keys:false,
								onEdit : null,
								onSuccess: null,
								afterSave:null,
								onError: null,
								afterRestore: null,
								extraparam: {},
								url: null
							},
							ap = $.extend( defaults, cm[i].formatoptions );
							o.addParams.addRowParams = {
								"keys" : ap.keys,
								"oneditfunc" : ap.onEdit,
								"successfunc" : ap.onSuccess,
								"url" : ap.url,
								"extraparam" : ap.extraparam,
								"aftersavefunc" : ap.afterSavef,
								"errorfunc": ap.onError,
								"afterrestorefunc" : ap.afterRestore
							};
						}
						break;
					}
				}
			}
			if(o.add) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.addtext,
					title : o.addtitle,
					buttonicon : o.addicon,
					id : $t.options.id+"_iladd",
					onClickButton : function () {
						$($t.element).grid('addRow', o.addParams);
						if(!o.addParams.useFormatter) {
							$("#"+gID+"_ilsave").removeClass('coral-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('coral-state-disabled');
							$("#"+gID+"_iladd").addClass('coral-state-disabled');
							$("#"+gID+"_iledit").addClass('coral-state-disabled');
						}
					}
				});
			}
			if(o.edit) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.edittext,
					title : o.edittitle,
					buttonicon : o.editicon,
					id : $t.options.id+"_iledit",
					onClickButton : function () {
						var sr = $($t.element).grid('getGridParam','selrow');
						if(sr) {
							$($t.element).grid('editRow', sr, o.editParams);
							$("#"+gID+"_ilsave").removeClass('coral-state-disabled');
							$("#"+gID+"_ilcancel").removeClass('coral-state-disabled');
							$("#"+gID+"_iladd").addClass('coral-state-disabled');
							$("#"+gID+"_iledit").addClass('coral-state-disabled');
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
			}
			if(o.save) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.savetext || '',
					title : o.savetitle || 'Save row',
					buttonicon : o.saveicon,
					id : $t.options.id+"_ilsave",
					onClickButton : function () {
						var sr = $t.options.savedRow[0].id;
						if(sr) {
							var opers = $t.options.prmNames,
							oper = opers.oper;
							if(!o.editParams.extraparam) {
								o.editParams.extraparam = {};
							}
							if($("#"+$.grid.coralID(sr), "#"+gID ).hasClass("grid-new-row")) {
								o.editParams.extraparam[oper] = opers.addoper;
							} else {
								o.editParams.extraparam[oper] = opers.editoper;
							}
							if( $($t.element).grid('saveRow', sr, o.editParams) ) {
								$($t.element).grid('showAddEditButtons');
							}
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
				$("#"+gID+"_ilsave").addClass('coral-state-disabled');
			}
			if(o.cancel) {
				$($t.element).grid('navButtonAdd', elem,{
					caption : o.canceltext || '',
					title : o.canceltitle || 'Cancel row editing',
					buttonicon : o.cancelicon,
					id : $t.options.id+"_ilcancel",
					onClickButton : function () {
						var sr = $t.options.savedRow[0].id;
						if(sr) {
							$($t.element).grid('restoreRow', sr, o.editParams);
							$($t.element).grid('showAddEditButtons');
						} else {
							$.grid.viewModal("#alertmod",{gbox:"#gbox_"+gID,jqm:true});$("#jqg_alrt").focus();							
						}
					}
				});
				$("#"+gID+"_ilcancel").addClass('coral-state-disabled');
			}
			if(o.restoreAfterSelect === true) {
				if($.isFunction($t.options.beforeSelectRow)) {
					onSelect = $t.options.beforeSelectRow;
				} else {
					onSelect =  false;
				}
				$t.options.beforeSelectRow = function(id, stat) {
					var ret = true;
					if($t.options.savedRow.length > 0 && $t.options._inlinenav===true && ( id !== $t.options.selrow && $t.options.selrow !==null) ) {
						if($t.options.selrow == o.addParams.rowID ) {
							$($t.element).grid('delRowData', $t.options.selrow);
						} else {
							$($t.element).grid('restoreRow', $t.options.selrow, o.editParams);
						}
						$($t.element).grid('showAddEditButtons');
					}
					if(onSelect) {
						ret = onSelect.call($t, id, stat);
					}
					return ret;
				};
			}

		});
	},
	showAddEditButtons : function()  {
		return this.each(function(){
			if (!this.grid ) { return; }
			var gID = $.grid.coralID(this.options.id);
			$("#"+gID+"_ilsave").addClass('coral-state-disabled');
			$("#"+gID+"_ilcancel").addClass('coral-state-disabled');
			$("#"+gID+"_iladd").removeClass('coral-state-disabled');
			$("#"+gID+"_iledit").removeClass('coral-state-disabled');
		});
	}
//end inline edit
});
;

/*
**
 * formatter for values but most of the values if for grid
 * Some of this was inspired and based on how YUI does the table datagrid but in jQuery fashion
 * we are trying to keep it as light as possible
 * Joshua Burnett josh@9ci.com	
 * http://www.greenbill.com
 *
 * Changes from Tony Tomov tony@trirand.com
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * 
**/

(function() {
"use strict";	
	$.fmatter = {};
	//opts can be id:row id for the row, rowdata:the data for the row, colmodel:the column model for this column
	//example {id:1234,}
	$.extend($.fmatter,{
		isBoolean : function(o) {
			return typeof o === 'boolean';
		},
		isObject : function(o) {
			return (o && (typeof o === 'object' || $.isFunction(o))) || false;
		},
		isString : function(o) {
			return typeof o === 'string';
		},
		isNumber : function(o) {
			return typeof o === 'number' && isFinite(o);
		},
		isNull : function(o) {
			return o === null;
		},
		isUndefined : function(o) {
			return typeof o === 'undefined';
		},
		isValue : function (o) {
			return (this.isObject(o) || this.isString(o) || this.isNumber(o) || this.isBoolean(o));
		},
		isEmpty : function(o) {
			if(!this.isString(o) && this.isValue(o)) {
				return false;
			}else if (!this.isValue(o)){
				return true;
			}
			o = $.trim(o).replace(/\&nbsp\;/ig,'').replace(/\&#160\;/ig,'');
			return o==="";	
		}
	});
	/**
	 * 为单元格设置值的时候会调用此方法，包括编辑和添加数据
	 * 如果是带隐藏域的组件，在编辑的情况下会将隐藏值传过来
	 * 转码功能：如果是revertCode为false，只有编辑的时候才需要转码
	 * 如果revertCode为true，则需要formatter里面进行转码
	 */
	$.fn.fmatter = function(formatType, cellval, opts, rwd, act) {
		// build main options before element iteration
		var v=cellval;
		opts = $.extend({}, $.grid.formatter, opts);
		//footer没有id
		// 兼容旧的项目的写法里面的id是数字不是字符串。
		if (act === "edit" && opts.rowId+"") {			
			$("#"+opts.rowId, this.element).children("td[aria-describedby$='"+opts.colModel.name+"']").attr("data-org",v); 
		}
		if (act === "edit" && opts.colModel.cellEditoptions){
			var cOpts = $.coral.toFunction(opts.colModel.cellEditoptions).call(this,v,opts,rwd);
			formatType = cOpts && cOpts.type ? cOpts.type : formatType;
			if (formatType === "combobox" || formatType === "combogrid" || formatType === "combotree" || formatType === "convertCode"){
				return $.fn.fmatter["convertCode"].call(this, cellval, opts, rwd, act);
			} else {
				return v;
			}
		} 
		try {
			v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
		} catch(fe){}
		return v;
	};
	$.fmatter.util = {
		// Taken from YAHOO utils
		NumberFormat : function(nData,opts) {
			if(!$.fmatter.isNumber(nData)) {
				nData *= 1;
			}
			if($.fmatter.isNumber(nData)) {
				var bNegative = (nData < 0);
				var sOutput = nData + "";
				var sDecimalSeparator = (opts.decimalSeparator) ? opts.decimalSeparator : ".";
				var nDotIndex;
				if($.fmatter.isNumber(opts.decimalPlaces)) {
					// Round to the correct decimal place
					var nDecimalPlaces = opts.decimalPlaces;
					var nDecimal = Math.pow(10, nDecimalPlaces);
					sOutput = Math.round(nData*nDecimal)/nDecimal + "";
					nDotIndex = sOutput.lastIndexOf(".");
					if(nDecimalPlaces > 0) {
					// Add the decimal separator
						if(nDotIndex < 0) {
							sOutput += sDecimalSeparator;
							nDotIndex = sOutput.length-1;
						}
						// Replace the "."
						else if(sDecimalSeparator !== "."){
							sOutput = sOutput.replace(".",sDecimalSeparator);
						}
					// Add missing zeros
						while((sOutput.length - 1 - nDotIndex) < nDecimalPlaces) {
							sOutput += "0";
						}
					}
				}
				if(opts.thousandsSeparator) {
					var sThousandsSeparator = opts.thousandsSeparator;
					nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
					nDotIndex = (nDotIndex > -1) ? nDotIndex : sOutput.length;
					var sNewOutput = sOutput.substring(nDotIndex);
					var nCount = -1;
					for (var i=nDotIndex; i>0; i--) {
						nCount++;
						if ((nCount%3 === 0) && (i !== nDotIndex) && (!bNegative || (i > 1))) {
							sNewOutput = sThousandsSeparator + sNewOutput;
						}
						sNewOutput = sOutput.charAt(i-1) + sNewOutput;
					}
					sOutput = sNewOutput;
				}
				// Prepend prefix
				sOutput = (opts.prefix) ? opts.prefix + sOutput : sOutput;
				// Append suffix
				sOutput = (opts.suffix) ? sOutput + opts.suffix : sOutput;
				return sOutput;
				
			} else {
				return nData;
			}
		},
		// Tony Tomov
		// PHP implementation. Sorry not all options are supported.
		// Feel free to add them if you want
		DateFormat : function (format, date, newformat, opts)  {
			var	token = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g,
			timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
			timezoneClip = /[^-+\dA-Z]/g,
			msDateRegExp = new RegExp("^\/Date\\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\\)\/$"),
			msMatch = ((typeof date === 'string') ? date.match(msDateRegExp): null),
			pad = function (value, length) {
				value = String(value);
				length = parseInt(length,10) || 2;
				while (value.length < length)  { value = '0' + value; }
				return value;
			},
			ts = {m : 1, d : 1, y : 1970, h : 0, i : 0, s : 0, u:0},
			timestamp=0, dM, k,hl,
			dateFormat=["i18n"];
			// Internationalization strings
			dateFormat.i18n = {
				dayNames: opts.dayNames,
				monthNames: opts.monthNames
			};
			if( format in opts.masks ) { format = opts.masks[format]; }
			if( !isNaN( date - 0 ) && String(format).toLowerCase() == "u") {
				//Unix timestamp
				timestamp = new Date( parseFloat(date)*1000 );
			} else if(date.constructor === Date) {
				timestamp = date;
				// Microsoft date format support
			} else if( msMatch !== null ) {
				timestamp = new Date(parseInt(msMatch[1], 10));
				if (msMatch[3]) {
					var offset = Number(msMatch[5]) * 60 + Number(msMatch[6]);
					offset *= ((msMatch[4] == '-') ? 1 : -1);
					offset -= timestamp.getTimezoneOffset();
					timestamp.setTime(Number(Number(timestamp) + (offset * 60 * 1000)));
				}
			} else {
				date = String(date).split(/[\\\/:_;.,\t\T\s-]/);
				format = format.split(/[\\\/:_;.,\t\T\s-]/);
				// parsing for month names
				for(k=0,hl=format.length;k<hl;k++){
					if(format[k] == 'M') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM < 12){date[k] = dM+1;}
					}
					if(format[k] == 'F') {
						dM = $.inArray(date[k],dateFormat.i18n.monthNames);
						if(dM !== -1 && dM > 11){date[k] = dM+1-12;}
					}
					if(date[k]) {
						ts[format[k].toLowerCase()] = parseInt(date[k],10);
					}
				}
				if(ts.f) {ts.m = ts.f;}
				if( ts.m === 0 && ts.y === 0 && ts.d === 0) {
					return "&#160;" ;
				}
				ts.m = parseInt(ts.m,10)-1;
				var ty = ts.y;
				if (ty >= 70 && ty <= 99) {ts.y = 1900+ts.y;}
				else if (ty >=0 && ty <=69) {ts.y= 2000+ts.y;}
				timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
			}
			
			if( newformat in opts.masks )  {
				newformat = opts.masks[newformat];
			} else if ( !newformat ) {
				newformat = 'Y-m-d';
			}
			var 
				G = timestamp.getHours(),
				i = timestamp.getMinutes(),
				j = timestamp.getDate(),
				n = timestamp.getMonth() + 1,
				o = timestamp.getTimezoneOffset(),
				s = timestamp.getSeconds(),
				u = timestamp.getMilliseconds(),
				w = timestamp.getDay(),
				Y = timestamp.getFullYear(),
				N = (w + 6) % 7 + 1,
				z = (new Date(Y, n - 1, j) - new Date(Y, 0, 1)) / 86400000,
				flags = {
					// Day
					d: pad(j),
					D: dateFormat.i18n.dayNames[w],
					j: j,
					l: dateFormat.i18n.dayNames[w + 7],
					N: N,
					S: opts.S(j),
					//j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th',
					w: w,
					z: z,
					// Week
					W: N < 5 ? Math.floor((z + N - 1) / 7) + 1 : Math.floor((z + N - 1) / 7) || ((new Date(Y - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52),
					// Month
					F: dateFormat.i18n.monthNames[n - 1 + 12],
					m: pad(n),
					M: dateFormat.i18n.monthNames[n - 1],
					n: n,
					t: '?',
					// Year
					L: '?',
					o: '?',
					Y: Y,
					y: String(Y).substring(2),
					// Time
					a: G < 12 ? opts.AmPm[0] : opts.AmPm[1],
					A: G < 12 ? opts.AmPm[2] : opts.AmPm[3],
					B: '?',
					g: G % 12 || 12,
					G: G,
					h: pad(G % 12 || 12),
					H: pad(G),
					i: pad(i),
					s: pad(s),
					u: u,
					// Timezone
					e: '?',
					I: '?',
					O: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
					P: '?',
					T: (String(timestamp).match(timezone) || [""]).pop().replace(timezoneClip, ""),
					Z: '?',
					// Full Date/Time
					c: '?',
					r: '?',
					U: Math.floor(timestamp / 1000)
				};	
			return newformat.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.substring(1);
			});			
		}
	};
	$.fn.fmatter.defaultFormat = function(cellval, opts, rwd, act) {
		return ($.fmatter.isValue(cellval) && cellval!=="" ) ?  cellval : opts.defaultValue ? opts.defaultValue : "&#160;";
	};
	$.fn.fmatter.email = function(cellval, opts, rwd, act) {
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a href=\"mailto:" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts );
		}
	};
	/*$.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = $.fn.fmatter.defaultFormat(cval,op);}
		cval=cval+"";cval=cval.toLowerCase();
		var bchk = cval.search(/(false|0|no|off)/i)<0 ? " checked='checked' " : "";
		return "<input type=\"checkbox\" " + bchk  + " value=\""+ cval+"\" offval=\"no\" "+ds+ "/>";
	};*/
	
	$.fn.fmatter.combobox =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combobox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		return "<input class=\"parseformatter\" data-formatter=\"combobox\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.combotree =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combotree), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"combotree\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.combogrid =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.combogrid), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"combogrid\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.autocomplete =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.autocomplete), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		return "<input class=\"parseformatter\" data-formatter=\"autocomplete\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.toolbar =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.toolbar), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<div class=\"parseformatter\" data-formatter=\"toolbar\" data-pos=\""+opts.pos+"\" "+ds+ "/>";
	};
	$.fn.fmatter.text =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.textbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"textbox\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.datepicker =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.datepicker), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"datepicker\" data-pos=\""+opts.pos+"\" type=\"text\" value=\""+ cval+"\" "+ds+ "/>";
	};
	$.fn.fmatter.textarea =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.textbox), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<textarea class=\"parseformatter\" data-formatter=\"textbox\" data-pos=\""+opts.pos+"\" "+ds+ "/>"+ cval+"</textarea>";
	};
	$.fn.fmatter.progressbar =function(cval, opts, rwd, act) {
		var op = $.extend({},opts.progressbar), ds;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<div class=\"parseformatter\" data-formatter=\"progressbar\" data-pos=\""+opts.pos+"\" "+ds+ "/>";
	};
	/**
	 * 默认会去code里面取编码，如果没有code将data作为编码进行取值赋值的转换
	 */
	$.fn.fmatter.convertCode =function(cval, opts, rwd, act) {
		var options = opts.colModel.formatoptions || opts.colModel.editoptions || {},
			postMode = options.postMode || "value";
		// 处理cellOptions
		var type = "convertCode";
		if(opts.colModel.cellEditoptions){
			var cOpts = $.coral.toFunction(opts.colModel.cellEditoptions).call(this,cval,options,rwd);
			options = cOpts && cOpts.cellEditoptions ? cOpts.cellEditoptions : options;
			type = cOpts && cOpts.type? cOpts.type:"convertCode";
		}
		if (type !=="convertCode" && type !=="combobox"&& type !=="combogrid" ) return cval;
		
		var code = options.data,
			dataStructure = options.dataStructure || "list",
			valueField,
			textField,
			separator = options.separator || ",";
		if (dataStructure == 'tree') {
			valueField = options.valueField || "id";
			textField = options.textField || "name";
		} else {
			valueField = opts.colModel.edittype == "combogrid" ? options.valueField || "id" : options.valueField || "value";
			textField = opts.colModel.edittype == "combogrid"?  options.textField || "name": options.textField || "text";
		}
		//formatter的时候，如果cellValue是空值，页面上可能会出现undefined
		if ( typeof ( cval ) === "undefined" || cval === null) return "";
		/**
		 * postMode为value的情况下才考虑转码
		 */
		if ( postMode != "value" ) {
			return cval;
		}
		// setCell会有问题，，此时有code了
		if ( opts.colModel.edittype == "combobox" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combotree" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combogrid" && options.code ){
			code = options.code;
		}
		if ( opts.colModel.edittype == "combotree" ){
			dataStructure = "tree";
		}
		if ( opts.colModel.edittype == "autocomplete" && typeof( options.code ) == "string" ) {
			code = options.code;
		}
		if ( opts.colModel.edittype == "autocomplete" && options.source ) {
			code = options.source;
		}
		var valArr = [],
			has = false,
			cArr = cval.toString().split( separator );
		if(opts.colModel.cellEditoptions){
			if ( dataStructure == "tree" ) {
				//code可能是tree或者普通array
				for( var i=0; i<cArr.length; i++) {
					convtree(code, cArr[i],valArr);
				}
				
			} else {// default dataStructure is list
				for ( var i=0; i<cArr.length; i++ ) {
					for ( var j=0; j<code.length; j++ ){
						if ( code[j][valueField] == cArr[i] ) {
							valArr.push( code[j][textField] );
							has = true;
						} 
					}
					if ( !has && !options.forceSelection ) {
						valArr.push( cArr[i] );
					}
					has = false;
				}			}
		} else {
			for ( var i=0; i<cArr.length; i++ ) {
				var t = options.tempData[cArr[i]];
				if (t) {
					valArr.push( options.tempData[cArr[i]][textField] );
					has = true;
				}
				if ( !has && !options.forceSelection ) {
					valArr.push( cArr[i] );
				}
				has = false;
			}
		}
		return valArr.join( separator );
		
	};
	function convtree(node,v,push){
		for ( var j=0; j<node.length; j++ ) {
			if ( node[j].id == v) {
				push.push(node[j].name);
			} else if ( node[j].children ) {
				convtree(node[j].children,v,push);
			} 
		}
	}
	$.fn.fmatter.checkbox =function(cval, opts) {
		var op = $.extend({},opts.checkbox), ds;
		var cbv = ["Yes","No"];
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
			if( opts.colModel.formatoptions && opts.colModel.formatoptions.value) {
				cbv = opts.colModel.formatoptions.value.split(":");
			}
		}
		if(op.disabled===true) {ds = "disabled=\"disabled\"";} else {ds="";}
		if($.fmatter.isEmpty(cval) || $.fmatter.isUndefined(cval) ) {cval = "";}
		cval=cval+"";
		//cval=cval.toLowerCase();
		return "<input class=\"parseformatter\" data-formatter=\"checkbox\" value='"+cval+"' data-pos=\""+opts.pos+"\" type=\"checkbox\" "+ds+ "/>";
	};
	
	$.fn.afterFmatter =function( colModel ) {
		var that = this;
		$(".parseformatter", that.element).each(function(){
			$(this).removeClass("parseformatter");
			var pos = $(this).attr("data-pos"),
				dataFormatter = $(this).attr("data-formatter"),
				//value是空格的话取""否则取value本身
				value = $.trim($( this ).val())===""?"":$( this ).val(),
				formatoptions = $.extend(
					{}, 
					that.options.colModel[pos].formatoptions, 
					{
						dataCustom: {
							rowId: $(this).closest("tr")[0].id,
							gridId: that.options.id
						}
					}
				);
			switch (dataFormatter) {
			case "combobox":
		    case "combotree":
		    case "combogrid":
		    case "textbox":	
		    	formatoptions.value = value;
		    	break;
		    case "toolbar":
		    case "progressbar":
		    	break;
		    case "checkbox":
		    	var cbv = ["Yes","No"];
				if( dataFormatter && that.options.colModel[pos].formatoptions.value) {
					cbv = that.options.colModel[pos].formatoptions.value.split(":");
				}
				if ( $(this).val() == cbv[0] ) {
					formatoptions.checked = true;
					//$(this)[dataFormatter]("check");
				} else {
					formatoptions.checked = false;
					//$(this)[dataFormatter]("uncheck");
				}
				break;
			}
			$(this)[dataFormatter](formatoptions);
		});
	};
	$.fn.fmatter.link = function(cellval, opts) {
		var op = {target:opts.target};
		var target = "";
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		if(!$.fmatter.isEmpty(cellval)) {
			return "<a "+target+" href=\"" + cellval + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.showlink = function(cellval, opts) {
		var op = {baseLinkUrl: opts.baseLinkUrl,showAction:opts.showAction, addParam: opts.addParam || "", target: opts.target, idName: opts.idName},
		target = "", idUrl;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if(op.target) {target = 'target=' + op.target;}
		idUrl = op.baseLinkUrl+op.showAction + '?'+ op.idName+'='+opts.rowId+op.addParam;
		if($.fmatter.isString(cellval) || $.fmatter.isNumber(cellval)) {	//add this one even if its blank string
			return "<a "+target+" href=\"" + idUrl + "\">" + cellval + "</a>";
		}else {
			return $.fn.fmatter.defaultFormat(cellval,opts);
		}
	};
	$.fn.fmatter.integer = function(cellval, opts) {
		var op = $.extend({},opts.integer);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.number = function (cellval, opts) {
		var op = $.extend({},opts.number);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.currency = function (cellval, opts) {
		var op = $.extend({},opts.currency);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		if($.fmatter.isEmpty(cellval)) {
			return op.defaultValue;
		}
		return $.fmatter.util.NumberFormat(cellval,op);
	};
	$.fn.fmatter.date = function (cellval, opts, rwd, act) {
		var op = $.extend({},opts.date);
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend({},op,opts.colModel.formatoptions);
		}
		var srcDateFormat = op.srcDateFormat || op.dateFormat;
		if (op.valueType == "long") {
			op.restrictConvert = (op.restrictConvert == undefined) ? true : op.restrictConvert;
			cellval = $.coral.longToStringDate(cellval, op);
		}
		var date = $.coral.parseDate(srcDateFormat, cellval||"",op);
		//if null retrun empty string
		return $.coral.formatDate(op.dateFormat, date, op)||"";
		/*if(!op.reformatAfterEdit && act=='edit'){
			return $.fn.fmatter.defaultFormat(cellval, opts);
		} else if(!$.fmatter.isEmpty(cellval)) {
			return  $.fmatter.util.DateFormat(op.srcformat,cellval,op.newformat,op);
		} else {
			return $.fn.fmatter.defaultFormat(cellval, opts);
		}*/
	};
	$.fn.fmatter.select = function (cellval,opts) {
		// grid specific
		cellval = cellval + "";
		var oSelect = false, ret=[], sep, delim;
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)){
			oSelect= opts.colModel.formatoptions.value;
			sep = opts.colModel.formatoptions.separator === undefined ? ":" : opts.colModel.formatoptions.separator;
			delim = opts.colModel.formatoptions.delimiter === undefined ? ";" : opts.colModel.formatoptions.delimiter;
		} else if(!$.fmatter.isUndefined(opts.colModel.editoptions)){
			oSelect= opts.colModel.editoptions.value;
			sep = opts.colModel.editoptions.separator === undefined ? ":" : opts.colModel.editoptions.separator;
			delim = opts.colModel.editoptions.delimiter === undefined ? ";" : opts.colModel.editoptions.delimiter;
		}
		if (oSelect) {
			var	msl =  opts.colModel.editoptions.multiple === true ? true : false,
			scell = [], sv;
			if(msl) {scell = cellval.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
			if ($.fmatter.isString(oSelect)) {
				// mybe here we can use some caching with care ????
				var so = oSelect.split(delim), j=0;
				for(var i=0; i<so.length;i++){
					sv = so[i].split(sep);
					if(sv.length > 2 ) {
						sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
					}
					if(msl) {
						if($.inArray(sv[0],scell)>-1) {
							ret[j] = sv[1];
							j++;
						}
					} else if($.trim(sv[0])==$.trim(cellval)) {
						ret[0] = sv[1];
						break;
					}
				}
			} else if($.fmatter.isObject(oSelect)) {
				// this is quicker
				if(msl) {
					ret = $.map(scell, function(n){
						return oSelect[n];
					});
				} else {
					ret[0] = oSelect[cellval] || "";
				}
			}
		}
		cellval = ret.join(", ");
		return  cellval === "" ? $.fn.fmatter.defaultFormat(cellval,opts) : cellval;
	};
	$.fn.fmatter.rowactions = function(rid,gid,act,pos) {
		var op ={
			keys:false,
			onEdit : null, 
			onSuccess: null, 
			afterSave:null,
			onError: null,
			afterRestore: null,
			extraparam: {},
			url: null,
			delOptions: {},
			editOptions : {}
		};
		rid = $.grid.coralID( rid );
		gid = $.grid.coralID( gid );
		var cm = $('#'+gid)[0].options.colModel[pos];
		if(!$.fmatter.isUndefined(cm.formatoptions)) {
			op = $.extend(op,cm.formatoptions);
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].options.editOptions) ) {
			op.editOptions = $('#'+gid)[0].options.editOptions;
		}
		if( !$.fmatter.isUndefined($('#'+gid)[0].options.delOptions) ) {
			op.delOptions = $('#'+gid)[0].options.delOptions;
		}
		var $t = $("#"+gid)[0];
		var saverow = function( rowid, res)	{
			if($.isFunction(op.afterSave)) { op.afterSave.call($t, rowid, res); }
			$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid + ".coral-grid-btable:first").show();
			$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
		},
		restorerow = function( rowid)	{
			if($.isFunction(op.afterRestore) ) { op.afterRestore.call($t, rowid); }
			$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
			$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
		};
		if( $("#"+rid,"#"+gid).hasClass("grid-new-row") ){
			var opers = $t.options.prmNames,
			oper = opers.oper;
			op.extraparam[oper] = opers.addoper;
		}
		switch(act)
		{
			case 'edit':
				$('#'+gid).grid('editRow',rid, op.keys, op.onEdit, op.onSuccess, op.url, op.extraparam, saverow, op.onError,restorerow);
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").hide();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").show();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'save':
				if ( $('#'+gid).grid('saveRow',rid,  op.onSuccess,op.url, op.extraparam, saverow, op.onError,restorerow) ) {
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				}
				break;
			case 'cancel' :
				$('#'+gid).grid('restoreRow',rid, restorerow);
				$("tr#"+rid+" div.coral-inline-edit, "+"tr#"+rid+" div.coral-inline-del","#"+gid+ ".coral-grid-btable:first").show();
				$("tr#"+rid+" div.coral-inline-save, "+"tr#"+rid+" div.coral-inline-cancel","#"+gid+ ".coral-grid-btable:first").hide();
				$($t).triggerHandler("jqGridAfterGridComplete");
				break;
			case 'del':
				$('#'+gid).grid('delGridRow',rid, op.delOptions);
				break;
			case 'formedit':
				$('#'+gid).grid('setSelection',rid);
				$('#'+gid).grid('editGridRow',rid, op.editOptions);
				break;
		}
	};
	$.fn.fmatter.actions = function(cellval,opts) {
		var op ={keys:false, editbutton:true, delbutton:true, editformbutton: false};
		if(!$.fmatter.isUndefined(opts.colModel.formatoptions)) {
			op = $.extend(op,opts.colModel.formatoptions);
		}
		var rowid = opts.rowId, str="",ocl;
		if(typeof(rowid) =='undefined' || $.fmatter.isEmpty(rowid)) {return "";}
		if(op.editformbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','formedit',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
			str =str+ "<div title='"+$.grid.nav.edittitle+"' style='float:left;cursor:pointer;' class='coral-pg-div coral-inline-edit' "+ocl+"><span class='coral-icon coral-icon-pencil'></span></div>";
		} else if(op.editbutton){
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','edit',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover') ";
			str =str+ "<div title='"+$.grid.nav.edittitle+"' style='float:left;cursor:pointer;' class='coral-pg-div coral-inline-edit' "+ocl+"><span class='coral-icon coral-icon-pencil'></span></div>";
		}
		if(op.delbutton) {
			ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','del',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
			str = str+"<div title='"+$.grid.nav.deltitle+"' style='float:left;margin-left:5px;' class='coral-pg-div coral-inline-del' "+ocl+"><span class='coral-icon coral-icon-trash'></span></div>";
		}
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','save',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
		str = str+"<div title='"+$.grid.edit.bSubmit+"' style='float:left;display:none' class='coral-pg-div coral-inline-save' "+ocl+"><span class='coral-icon coral-icon-disk'></span></div>";
		ocl = "onclick=jQuery.fn.fmatter.rowactions('"+rowid+"','"+opts.gid+"','cancel',"+opts.pos+"); onmouseover=jQuery(this).addClass('coral-state-hover'); onmouseout=jQuery(this).removeClass('coral-state-hover'); ";
		str = str+"<div title='"+$.grid.edit.bCancel+"' style='float:left;display:none;margin-left:5px;' class='coral-pg-div coral-inline-cancel' "+ocl+"><span class='coral-icon coral-icon-cancel'></span></div>";
		return "<div style='margin-left:8px;'>" + str + "</div>";
	};
	/**
	 * 
	 * grid特殊字符转码说明：
	 * 只针对textbox的情形，formattype=textbox的情形调用textbox本身的getValue方法，需要配置textbox的autoDecode为true才能转码，
	 * edittype为text的情形，特殊字符会自动转义
	 * 	
	 * edittype和formattype情形要都测试下面几种情况：
	 *	
	 *	1，初始化的时候data里面为特殊字符或者转义之后的特殊字符：
	 *	a：formattype情况下 data里面特殊字符，显示的是同样的特殊字符；data里面有转义之后的字符，显示的是对应的特殊字符
	 *	b：edittype情况下 data里面特殊字符，显示的是同样的特殊字符；data里面有转义之后的字符，显示的是对应的特殊字符
	 *	
	 *	2，addRowData的data里面为特殊字符或者转义之后的特殊字符：
	 *	a：formattype情况下 data里面有转义字符，显示的是对应的特殊字符；data里面有特殊字符，显示的仍然是特殊字符
	 *	b: editType情况下，data里面有转义字符，显示的是对应的特殊字符，data里面有特殊字符，显示的还是特殊字符
	 *	
	 *	3，setRowData的data里面为特殊字符或者转义之后的特殊字符：
	 *	a：formattype情况下 data里面有转义字符，显示的是对应的特殊字符；data里面有特殊字符，显示的仍然是特殊字符
	 *	b: edittype情况下 data里面有转义字符，显示的是对应的特殊字符，data里面有特殊字符，显示的仍是特殊字符
	 *	
	 *	4，setCell当set的为特殊字符或者转移之后的特殊字符
	 *	a:formattype情况下 set转义字符，显示其对应的特殊字符；set特殊字符，显示同样的特殊字符
	 *	b: edittype情况下set转义字符，显示的是对应的特殊字符，set特殊字符，显示同样的特殊字符
	 *	
	 *	5，getCell当get的单元格里面有特殊字符，或转义之后的特殊字符
	 *	a：formattype情况下 单元格里面有特殊字符，取出来的是对应的转义字符；单元格里面有转义字符，取出来的是转义字符转义之后的字符
	 *	b：edittype情况下 单元格里是特殊字符会得到转义字符
	 *	
	 *	6，getRowData当单元格有特殊字符或转义之后的特殊字符：
	 *	a: formattype情况下 输入特殊字符get到转义字符，输入转义字符get到转义字符转义之后的字符
	 *	b：edittype情况下 输入特殊字符得到转义字符
	 * 
	 * 
	 */
	// state: edittype or formatter
	$.unformat = function (cellval,options,pos,cnt,state) {
		// specific for grid only
		var ret, state = state|| "formatter", formatType = options.colModel[state],editType,
		op =options.colModel.formatoptions || {}, sep,
		re = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
		unformatFunc = options.colModel.unformat||($.fn.fmatter[formatType] && $.fn.fmatter[formatType].unformat);
		unformatFunc = $.coral.toFunction(unformatFunc);
		// 如果是编辑模式的下拉框是无法通过
		/*editType =  $.inArray(options.colModel.edittype,
				["combobox", "combotree", "combogrid", "datepicker", "autocomplete"]);
		if(editType > -1 && options.colModel.revertCode || options.colModel.revertCode){
			if($.inArray(formatType, ["autocomplete","datepicker","combobox","combotree","combogrid"]) === -1){
				formatType = "convertCode";
			}
		}*/
		if ( options.colModel.edittype == "combobox" && options.colModel.revertCode
				|| options.colModel.edittype == "combotree" && options.colModel.revertCode
				|| options.colModel.edittype == "combogrid" && options.colModel.revertCode
				|| options.colModel.edittype == "datepicker" && options.colModel.revertCode
				|| options.colModel.edittype == "autocomplete" && options.colModel.revertCode
				|| options.colModel.revertCode) {
			//如果revertCode为true，则必须保证隐藏值能够动态维护，或者这个隐藏值是不变的
			if (formatType == "autocomplete" || formatType == "datepicker" || formatType == "combobox" || formatType == "combotree" || formatType == "combogrid" ){
				//如果是formatter而不是edit，combobox有自己维护隐藏值的方式
			} else {
				formatType = "convertCode";
			}
		}
		if(typeof unformatFunc !== 'undefined' && $.isFunction(unformatFunc) ) {
			ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
		} else if(!$.fmatter.isUndefined(formatType) && $.fmatter.isString(formatType) ) {
			var opts = $.grid.formatter || {}, stripTag;
			switch(formatType) {
				case 'integer' :
					op = $.extend({},opts.integer,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,'');
					break;
				case 'number' :
					op = $.extend({},opts.number,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text().replace(stripTag,"").replace(op.decimalSeparator,'.');
					break;
				case 'currency':
					op = $.extend({},opts.currency,op);
					sep = op.thousandsSeparator.replace(re,"\\$1");
					stripTag = new RegExp(sep, "g");
					ret = $(cellval).text();
					if (op.prefix && op.prefix.length) {
						ret = ret.substr(op.prefix.length);
					}
					if (op.suffix && op.suffix.length) {
						ret = ret.substr(0, ret.length - op.suffix.length);
					}
					ret = ret.replace(stripTag,'').replace(op.decimalSeparator,'.');
					break;
				case 'checkbox':
					ret = $.unformat.checkbox(cellval,options,pos,cnt);
					break;
				case 'select' :
					ret = $.unformat.select(cellval,options,pos,cnt);
					break;
				case 'date' :
					ret = $.unformat.date(cellval,options,pos,cnt);
					break;
				case 'combobox' :
				case 'combogrid' :
				case 'combotree' :
					ret = $.unformat[ formatType ](cellval,options,pos,cnt);
					break;
				case 'datepicker' :
					ret = $.unformat.datepicker(cellval,options,pos,cnt);
					break;
				case 'autocomplete' :
					ret = $.unformat.autocomplete(cellval,options,pos,cnt);
					break;
				case 'text' :
				case 'textarea' :
					ret = $.unformat.textbox(cellval,options,pos,cnt);
					break;
				case 'convertCode' :
					if (options.colModel.postMode){
						if ( options.colModel.postMode == "value" ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}

					}else{
						if ( options.colModel.revertCode == true ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}

					}
/*					if ( cnt == "get" ) {
						if ( options.colModel.revertCode == true ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}
					} else {
						if ( options.colModel.postMode == "value" ){
							ret = $.unformat.convertCode(cellval,options,pos,cnt);
						} else {
							ret= $(cellval).text();
						}
					}*/
					
					break;
				case 'actions':
					return "";
				default:
					ret= $(cellval).text();
			}
		}
		//针对edittype为text的列进行转码，以后可能会扩充到所有类型的列
		if (options.colModel.edittype=="text"){
			return ret !== undefined ? ret : cnt===true ? $(cellval).text() : $.coral.decode($(cellval).html());
		}
		return ret !== undefined ? ret : cnt===true ? $(cellval).text() : $.grid.htmlDecode($(cellval).html());
	};
	$.unformat.autocomplete = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").autocomplete("getValue").toString();
		} else {
			return  $(cellval).find(".ctrl-init").autocomplete("getText");
		}
	};
	$.unformat.combobox = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combobox("getValue");
		} else {
			return  $(cellval).find(".ctrl-init").combobox("getText");
		}
	};
	$.unformat.combotree = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combotree("getValue").toString();
		} else {
			return  $(cellval).find(".ctrl-init").combotree("getText");
		}
	};
	$.unformat.combogrid = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		if ( options.colModel.revertCode ){
			return  $(cellval).find(".ctrl-init").combogrid("getValue");
		} else {
			return  $(cellval).find(".ctrl-init").combogrid("getText");
		}
	};
	$.unformat.textbox = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		return  $(cellval).find(".ctrl-init").textbox("getValue");
	};
	$.unformat.datepicker = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		return  $(cellval).find(".ctrl-init").datepicker("getValue");
	};
	$.unformat.convertCode = function (cellval,options,pos,cnt) {
		return $(cellval).attr("data-org");
	};
	$.unformat.select = function (cellval,options,pos,cnt) {
		// Spacial case when we have local data and perform a sort
		// cnt is set to true only in sortDataArray
		var ret = [];
		var cell = $(cellval).text();
		if(cnt===true) {return cell;}
		var op = $.extend({}, !$.fmatter.isUndefined(options.colModel.formatoptions) ? options.colModel.formatoptions: options.colModel.editoptions),
		sep = op.separator === undefined ? ":" : op.separator,
		delim = op.delimiter === undefined ? ";" : op.delimiter;
		
		if(op.value){
			var oSelect = op.value,
			msl =  op.multiple === true ? true : false,
			scell = [], sv;
			if(msl) {scell = cell.split(",");scell = $.map(scell,function(n){return $.trim(n);});}
			if ($.fmatter.isString(oSelect)) {
				var so = oSelect.split(delim), j=0;
				for(var i=0; i<so.length;i++){
					sv = so[i].split(sep);
					if(sv.length > 2 ) {
						sv[1] = $.map(sv,function(n,i){if(i>0) {return n;}}).join(sep);
					}					
					if(msl) {
						if($.inArray(sv[1],scell)>-1) {
							ret[j] = sv[0];
							j++;
						}
					} else if($.trim(sv[1])==$.trim(cell)) {
						ret[0] = sv[0];
						break;
					}
				}
			} else if($.fmatter.isObject(oSelect) || $.isArray(oSelect) ){
				if(!msl) {scell[0] =  cell;}
				ret = $.map(scell, function(n){
					var rv;
					$.each(oSelect, function(i,val){
						if (val == n) {
							rv = i;
							return false;
						}
					});
					if( typeof(rv) != 'undefined' ) {return rv;}
				});
			}
			return ret.join(", ");
		} else {
			return cell || "";
		}
	};
	$.unformat.date = function (cellval, opts) {
		//将长整型0强制转为1
		if (opts.colModel.formatoptions) {
			opts.colModel.formatoptions.restrictConvert = (opts.colModel.formatoptions.restrictConvert == undefined) ? true :opts.colModel.formatoptions.restrictConvert;
		}
		// TODO: 检查单元格值变化的时候，data-org的值是否跟着改变
		var op = $.extend({}, opts.formatoptions || opts.colModel.formatoptions);
		if ( op.revertCode ){
			if (op.valueType == "long") {
				var cellval = $(cellval).attr("data-org");
				return parseInt(cellval);
			} else {
				return $(cellval).attr("data-org");
			}
			
		} else {
			return $(cellval).text();
		}
		
		/*var op = $.grid.formatter.date || {};
		if(!$.fmatter.isUndefined(opts.formatoptions)) {
			op = $.extend({},op,opts.formatoptions);
		}		
		if(!$.fmatter.isEmpty(cellval)) {
			return  $.fmatter.util.DateFormat(op.newformat,cellval,op.srcformat,op);
		} else {
			return $.fn.fmatter.defaultFormat(cellval, opts);
		}*/
	};
	$.unformat.checkbox = function (cellval, opts) {
		var op = $.extend({}, !$.fmatter.isUndefined(opts.colModel.formatoptions) ? opts.colModel.formatoptions: opts.colModel.editoptions);

		var cbv = (op.value) ? op.value.split(":") : ["Yes","No"];
		
		return $('input',cellval).is(":checked") ? cbv[0] : cbv[1];
	};
})();
;

$.component ( "coral.textbox", $.coral.inputbase, {
	version: $.coral.version,
	castProperties : ["dataCustom","title","buttons", "buttonOptions","triggers","showRequiredMark","hideRequiredMark","formatterText","valid","onValidSuccess","onValidError"],
	options: {		
		swfPath: $.coral.contextPath + '/jquery-cui/resource/swfupload.swf',
		hasTips: false,
		showStar: true,
		showClose: false,
		dataCustom: null,
		autoDecode : false,
		value: "",
		//formatter: "simple",
		readonly: false,
		readonlyInput: false,
		disabled: false,
		required: false,
		isLabel: false,
		title: null, // title属性
		buttons: [],
		useHiddenInput: true,
		errMsg: null,
		errMsgPosition: "leftBottom",
		placeholder: "",
		type: "text",
		labelField: null,
		starBefore: false,
		valueChangedOnKeyUp: false,
		delSpace: false, //属性为true时,去空格
		onClick: null,
		onChange: null,
		onBlur: null,
		onFocus: null,
		onKeyDown: null,
		onKeyUp: null,
		onKeyPress: null,
		onEnter: null, 			// press enter event callback
		onMouseEnter: null,
		onMouseLeave: null,
		onCreate: null,			
		onValidSuccess: null,
		onValidError: null,
		onValidWarn: null,
		onUploadSuccess: null,	// file upload success event callback
		// add sub button options
		buttonOptions: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
	/**
	 * 获取textbox的button组件
	 */
	button: function () {
		if (null !== this.options.buttonOptions) {
			return this.$button;
		}
	},
	//获取组件外围元素
	component: function () {
		return this.textboxWrapper;
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		if (this.options.disabled || this.options.isLabel || this.options.readonly || this.options.readonlyInput ) return false;
		if ("hidden" == this.element.attr("type")) return ;
		var that = this;			
		this.element.focus();
		return true;
	},
	//创建组件
	_create: function() {
		var that = this;
		if(that.options.hasTips){
			that.options.title = true;
		}
		this._initElement();
		if (this.options.dataCustom) {
			this.element.attr("data-custom",this.options.dataCustom);
		}
		this.setValue(this.element.val(), false);
		this.originalValue = this.getValue();
		this._bindEvents();
		// add button code
		if (null !== this.options.buttonOptions) {
			this._outerButtons();
			/*this.$button = this._getButtonEl();
			this.component().append(this.$button).addClass("coral-textbox-hasButton");
			this.$button.button(this.options.buttonOptions);*/
		}
		that._trigger( "onCreate", null, [] );
	},
	/**
	 * 返回一个button基础element
	 */
	_getButtonEl: function () {
		return $("<button type='button'></button>").addClass("coral-textbox-button");
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	_initSimple: function(){
		var that = this,
		id = that.element.uniqueId().attr("id");
	},
	_initUpload: function(){
		var that = this,
			id = that.element.uniqueId().attr("id");
		that.select = [];
		$(this.element).wrap("<span class=\"coral-file-default\"></span>")
			.before("<span class='coral-file'>请选择...</span>")
			.before("<div id='"+id+"_upload'></div>")
			.before("<div id='"+id+"_queue'></div>")
			.hide();
		that.uploader = $("#"+id+"_upload");
		that.uploader.uploadify({
	        'swf'      :  this.options.swfPath,
	        'uploader' : that.options.uploadUrl,
	        'queueID'  : id+'_queue',
	        'height' : '28',
	        width: "800",
	        buttonText: "浏览",
	        'onDialogOpen' : function() {
	        	that.select = [];
	        },
	        'onDialogClose' : function() {
	        	
	        },
	        'onSelect' : function(file) {
	        	that.select.push(file.name);
	        	that.textboxWrapper.find(".coral-file").html(that.select.join(","));
	        	that.textboxWrapper.find("object").attr("title",that.select.join(","));
	        },
	        'onCancel' : function(file){
	        	//console.log("cancel:"+file.name);
	        },
	        'onQueueComplete' : function(queueData) {
	            //alert(queueData.uploadsSuccessful + ' files were successfully uploaded.');
	        //	$("#"+id+"_queue").html("上传成功！");
	        	setTimeout(function(){
	        		$("#"+id+"_queue").dialog("close");
	        		that.select = [];
	        	},3500);
	        },
	        // lihaibo add begin
	        'onUploadSuccess': function(file, data, response) {
		          that._trigger("onUploadSuccess", null, [{file:file, data:data, response:response}]);
		    },
		    // lihaibo add end
			'auto':false
	        // Put your options here
	    });
		$("#"+id+"_queue").dialog({
			autoOpen: false,
			modal: false,
			resizable: false,
			onOpen: function(){
				that.uploader.uploadify('upload','*');
			}
		});
	},
	upload: function(option){
		var that = this;
		var id = that.element[0].id;
		if(this.select.length === 0)
			return;
		$("#"+id+"_queue").dialog("open");
	},
	cancel: function(option){
		this.uploader.uploadify('cancel');
	},
	clear: function(option){
		this.select = [];
		this.textboxWrapper.find(".coral-file").html("请选择...");
		this.textboxWrapper.find("object").attr("title","请选择...");
		this.uploader.uploadify('cancel');
	},
	//获取icons的两个class
	_getIcon: function (icons) {
		var iconsJsonArray = []; // [{className: clickHandler}]
		
		if (typeof icons === "undefined" || icons == null || icons == "") {
			return [];
		}
		if (typeof icons == "object" ) {
			for (var i in icons) {
				var data = {};
				data[icons[i].icon] = icons[i].click;
				iconsJsonArray.push(data);
			}
		} else {
			var iconsArray = $.trim( icons).split( "," );
			for ( var i in iconsArray ) {
				var iconArray = iconsArray[i].split(" ");
				
				var data = {};
				data[iconArray[0]] = iconArray[1];					
				iconsJsonArray.push( data );
			}
		}
		return iconsJsonArray;
	},
	//callback click eventHandler
	_triggerClick: function (handler,event,data) {
		var that = this,
		    _fn = null,
		    opts = this.options;
		
		event = $.Event(event);
		if (opts.controllerName){
			var t = $.controller(opts.controllerName);
			_fn = t[handler];
			return _fn.apply(t,[event].concat(data));
		} else {
			_fn = $.coral.toFunction(handler);
			if ($.isFunction(_fn)) {
				return _fn.apply(that.element[0], [event].concat(data)); 
			}
		}
	},
	/**
	 * update label attribute
	 */
	//组件初始化
	_initElement: function () {
		var that = this,
			options = that.options;	
		this.className = "coral-textbox-default coral-validation-textbox tabbable "+this.element[0].className;
		this.compClass = "coral-textbox";
		this.hiddenClass = "";
		this.classBorder = "";
		if ( "hidden" == this.element.attr("type") ) {
			this.compClass = this.compClass + " hide";
		}
		if (this.element[0].tagName == "TEXTAREA"){
			this.compClass = "coral-textbox coral-textbox-textarea";
		}
		this.createInput();
		this.textboxWrapper = $(this.textboxWrapper);
		this.elementBorder = $(this.elementBorder);
		this.element = $(this.textboxInput);
		if (this.options.useHiddenInput) {
			this.textboxHidden = $(this.textboxWrapper[0].lastChild);
		} else {
			this.textboxHidden = this.element;
		}
		if ( this.options.buttons.length > 0 ) {
			this._createButtonPanel();
		}
		if (options.labelField) {
			/*this.uiLabel = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.elementBorder.before(this.uiLabel);
			this.textboxWrapper.addClass("coral-hasLabel");*/
			this._createLabel();
		}
		if("file" == that.element.attr("type")){
			if("uploadify"==that.options.formatter)
				that._initUpload();
			if("simple"==that.options.formatter || typeof that.options.formatter == "undefined")
				that._initSimple();
		}
		// 处理 icons || texticons
		if (that.options.icons) {
			var iconsJsonArray = [], isIcons = null;
			if ((iconsJsonArray = that._getIcon(that.options.icons)).length != 0) {
				isIcons = true;
			} else if ((iconsJsonArray = that._getIcon( that.options.texticons )).length != 0 ) {
				isIcons = false;
			}
			if (isIcons != null) {
				this.uiDialogButtonPanel = $("<span class=\"coral-textbox-btn-icons coral-corner-right\"></span>");
				that.elementBorder.append( this.uiDialogButtonPanel );
				
				for ( var i in iconsJsonArray ) {
					$.each ( iconsJsonArray[i], function ( classText, clickHandler ) {
						var $icon = $("<span class=\"coral-textbox-btn-ico icon\"></span>");
						
						if ( isIcons ) {
							$icon.addClass(classText);/*.height( that.element.outerHeight() ).width( that.element.outerHeight() );*/
							
						} else {
							$icon.addClass("coral-textbox-btn-textico").html(classText);
						}
						
						$icon.bind("click" + that.eventNamespace, function (e) {
							if ( that.options.disabled ) {
								return;
							}
							that._triggerClick(clickHandler,e,[{'value':that.element.val()}]);
							//e.stopPropagation();
						});
						that.uiDialogButtonPanel.append($icon);
					});
				}
				this.rightPos = this.uiDialogButtonPanel.outerWidth();
			}
		}
		
		if (typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name) {
    		this.element.attr("name", this.options.name);
    	}
		/*if (typeof this.element.attr("value") != "undefined") {
    		this.options.value = this.element.attr("value");
    	}*/
		if ("TEXTAREA" === this.element[0].tagName) {
			if ($.trim(this.element.text()) !== "") {
	    		this.options.value = this.element.text();
	    	} else if (this.options.value) {
	    		this.element.text( this.options.value );
	    	}
		} else {
			if ($.trim(this.element.val()) !== "") {
	    		this.options.value = this.element.val();
	    	} else if (this.options.value) {
	    		this.element.val(this.options.value);
	    	}
    	}
		if (options.width) {				
			this.textboxWrapper.css( "width", options.width );
		}	
		if (options.height) {				
			this._setOption("height", options.height );
		}
		if (options.readonlyInput) {
			this._setReadonlyInput();
		}
		if (options.readonly) {
			this._setReadonly();
		}

		if ( typeof options.isLabel == "boolean" && options.isLabel ) {
			this._setReadonly();
			this.options.readonly = true;
			this.component().addClass( "coral-isLabel" );
			return ;
		} 
		if ( typeof options.disabled === "boolean" && options.disabled  ) {
			this._setOption( "disabled", options.disabled );
		}
		// clear button
		if ( this.options.showClose ) {
			this.clearIcon.css( "right", this.rightPos ? this.rightPos: 0);
		}
		this.element.attr( "placeholder", options.placeholder );
		if ( options.placeholder && "" === this.element.val() ) {
			this._showPlaceholder();
		}
		this._updateTitle();
	},
	_setReadonlyInput: function() {
		if(typeof this.element.attr("readonly") != "undefined"){
			this.options.readonlyInput = this.element.prop("readonly");
		} else if (this.options.readonlyInput){
			this.element.prop("readonly", this.options.readonlyInput);
		}
		if (this.element.prop("readonly")) {
			this.component().addClass("coral-readonlyInput");
		}
	},
	_setReadonly: function() {
		this.options.readonlyInput = true;
		this._setReadonlyInput();
		this.component().removeClass("coral-readonlyInput").addClass("coral-readonly");
		this.element.removeClass("tabbable");
	},
	_updateTitle: function() {
		var that = this,
			opts = this.options;
		if (opts.title == true) {
			that.element.attr("title", that.element.val());
		} else if (opts.title == false) {
			that.element.attr("title", "");
		} else {
			that.element.attr("title", opts.title);
		}
	},
	/**
	 * 显示 placeholder
	 */
	_showPlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		var that = this,
			$placeholder = $("<span class='coral-textbox-placeholder-label'>" + that.options.placeholder  + "</span>");
		$(that.element).after( $placeholder );
	},
	/**
	 * 隐藏 placeholder
	 */
	_hidePlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		
		var that  = this;

		that.textboxWrapper.find( ".coral-textbox-placeholder-label" ).remove();
	},
	//组件绑定事件
	_bindEvents: function () {
		var that = this,
			options = this.options;
		var suppressBlurs;
		coral.eventsQueue.push({instance: this, args: [{
			"mouseenter.coral-textbox-border": function( event ) {
				if ( typeof options.isLabel == "boolean" && options.isLabel ) { 
					return;
				}
				if ( typeof options.readonly == "boolean" && options.readonly ) { 
					return;
				}
				/*if ( typeof options.readonlyInput == "boolean" && options.readonlyInput ) { 
					return;
				}*/
				
				that.component().addClass("coral-textbox-hover");
				this._trigger( "onMouseEnter", event, [] );
			},
			"mouseleave.coral-textbox-border": function( event ) {
				if ( typeof options.isLabel == "boolean" && options.isLabel ) { 
					return;
				}
				if ( typeof options.readonly == "boolean" && options.readonly  ) { 
					return;
				}					
				/*if ( typeof options.readonlyInput == "boolean" && options.readonlyInput ) { 
					return;
				}	*/
				that.component().removeClass( "coral-textbox-hover" );	
				this._trigger( "onMouseLeave", event, [] );
			},
			"click": function( event ) {
				that._hidePlaceholder();
				this._trigger( "onClick", event, [] );
			},
			"click.coral-textbox-placeholder-label": function( event ) {
				that._hidePlaceholder();
				that.element.focus();
			},
			"dblclick": function( event ) {
				this._trigger( "onDblClick", event, [] );
			},
			"blur": function( event ) {
				this.component().removeClass( "coral-state-focus" );
				if ( "" === this.element.val() ) {
					this._showPlaceholder();
				}
				if ( suppressBlurs ) {
					suppressBlurs = false;
					return;
				}
				this._setValue( this.element.val(), true );
				this._trigger( "onBlur", event, [] );
			},
			"focusin": function( event ) {
				if ( options.isLabel || options.readonly || options.readonlyInput ) {
					this._trigger( "onFocus", event, [{'value':this.textboxHidden.val(),'text':this.element.val()}] );
					return;
				}
				if(this.options.formatterText) {
					this.setText(this.getValue())
				}
				this.component().addClass( "coral-state-focus" );
				this._trigger( "onFocus", event, [{'value':this.textboxHidden.val(),'text':this.element.val()}] );
			},
			"keydown": function( event ) {
				if ( options.isLabel || options.readonly || options.readonlyInput ) { 
					return;
				}
				$.validate.restrictInput(this.element, event);
				if(options.shortCut){
					$.coral.callFunction(options.shortCut,event,this);
				}
				var r = this._trigger("onKeyDown", event, [{'value':this.textboxHidden.val(), 'text':this.element.val(), 'id': this.options.id }])
				//key enter and trigger event callback 
				if (event.keyCode == 13) {
					this._setValue(this.element.val(), true);
					this._trigger("onEnter", event, [{'value':this.textboxHidden.val(), 'text':this.element.val()}]);
				}
				this._hidePlaceholder();
				return r;
			},
			"keypress": function( event ) {
				if ( options.isLabel || options.readonly || options.readonlyInput ) { 
					return;
				}
				return this._trigger("onKeyPress", event, [{'value':this.textboxHidden.val(), 'text':this.element.val()}]);
			},
			"keyup": function( event ) {
				if ( options.isLabel || options.readonly || options.readonlyInput ) { 
					return;
				}
				if ( this.options.valueChangedOnKeyUp ) {
					this._setValue(this.element.val(), true, false);
				}
				$.validate.restrictInput(this.element, event);
				this._trigger("onKeyUp", event, [{
					'value':this.textboxHidden.val(), 
					'text':this.element.val(), 
					'id': this.options.id 
				}]);
			},
			"click.coral-input-clearIcon" : function(e) {
				e.preventDefault();
				this.setValue("", true);
				if (this.options.placeholder) {
					this._showPlaceholder();
				}
				this._trigger( "onCloseClick", event, [] );
			},
			"mousedown.coral-input-clearIcon" : function(e) {
				e.stopPropagation();
				suppressBlurs = true;
			}
		}]});
		if (!coral.eventsTimer) {
			coral.eventsTimer = setTimeout(function() {
				coral.eventsParser()
			}, 50)
		}
	},
	//设置属性处理
	_setOption: function ( key, value ) {
		var that = this;
		//默认属性不允许更改
		if  (key === "id" || key === "name" || key === "type" ) {
			return ;
		}
		//TODO: isLabel状态下目前不处理宽度和高度
		if ( key === "height" ) {
			if ( value ) {
				this.component().outerHeight( value );
				//TODO: 如果ie7，则需要给textarea这个元素设置高度和宽度；
				this.textboxWrapper.find( ".coral-textbox-btn-textico" ).css({
					"line-height": (value - 6) + "px",
					"height": value + "px"
				});
			}
		}
		if ( key === "width" ) {
			if ( value ) {			
				this.component().outerWidth( value );
			}
		}
		// 以上部分如果return后，不对option内部的值进行更改
		this._super( key, value );
		if ( key === "placeholder" ) {
			this.element.attr( "placeholder", this.options.placeholder );	
			if ( this.getValue() === "" ) {
				this._showPlaceholder();					
			}
		}
		// texticons
		if ( key == "texticons" ) {
			var iconsJsonArray = that._getIcon( that.options.texticons );				
			var $icons = $("<span class=\"coral-textbox-btn-icons coral-corner-right\"></span>");
			that.elementBorder.find( ".coral-textbox-btn-icons" ).replaceWith( $icons );
			
			for ( var i in iconsJsonArray ) {
				$.each ( iconsJsonArray[i], function ( classText, clickHandler ) {
					var $icon = $("<span class=\"coral-textbox-btn-ico icon\"></span>")
												.addClass("coral-textbox-btn-textico").html(classText);
					$icon.bind("click" + that.eventNamespace, function (e) {
						if ( that.options.disabled ) {
							return;
						}
						that._triggerClick( clickHandler,e,[{'value':that.element.val()}] );
					});
					$icons.append($icon);
				});
			}
		}
		if ( key === "value" ) {
			that._updateTitle();
			that.setValue(value, false);
		}
		if ( key === "isLabel" ) {
			if ( typeof value == "boolean" && value ) {
				this._setReadonly();
				this.component().removeClass( "coral-readonly" ).addClass( "coral-isLabel" );
			} else if ( typeof value == "boolean" && !value ) {
				this.element.prop( "readonly", false );
				this.options.readonly = false;
				this.options.isLabel = false;
				this.options.readonlyInput = false;
				this.element.addClass("tabbable")
				this.component().removeClass( "coral-isLabel coral-readonly" );
			}
		}
		if ( key === "readonly" ) {
			if ( typeof value == "boolean" && value ) {		
				this._setReadonly();
				this.component().removeClass( "coral-isLabel" ).addClass("coral-readonly");
			} else if ( typeof value == "boolean" && !value ) {
				this.element.prop( "readonly", false );
				this.options.readonly = false;
				this.options.readonlyInput = false;
				this.element.prop( "readonly", false );
				this.element.addClass("tabbable");
				this.component().removeClass("coral-isLabel coral-readonly");
			}
		}
		if ( key === "readonlyInput" ){
			if ( typeof value == "boolean" && value ){
				this._setReadonlyInput();
				this.component().removeClass( "coral-isLabel" ).addClass("coral-readonlyInput");
			}else if ( typeof value == "boolean" && !value ) {
				this.element.prop( "readonly", false );
				this.options.readonlyInput = false;
				this.component().removeClass("coral-isLabel coral-readonlyInput");
			}
		}
 		if ( key === "disabled" ) {
			if ( value ) {
				this.element.prop( "disabled", true );
				//this.component().find(".ctrl-init-button").button("disable");
			} else {
				this.element.prop( "disabled", false );
				//this.component().find(".ctrl-init-button").button("enable");
			}
		}	
		if ( key === "labelField" ) {
			that.labelPanel.html(value);
		}
		if ( key ==="title" ) {
			that._updateTitle();
		}
		if ( key ==="hasTips" ) {
			that._updateTitle();
		}
	},
	_destroy: function() {
		this.textboxWrapper.replaceWith( this.element );
		this.element.val("");
	    this.element.removeAttr("value");
		this.element.removeClass("coral-textbox-default")
			.removeClass("coral-validation-textbox")
			.removeClass("coral-textbox-hover")
			.removeClass("coral-textbox-textarea")
			.removeClass("coral-textbox-input")
			.removeAttr("placeholder")
			.removeAttr("title")
			.removeAttr("readonly")
			.removeAttr("disabled");
	},
	disable: function() {
		this._setOption("disabled", true);
	},
	enable: function() {
		this._setOption("disabled", false);
	},
	getHtml: function () {
		return this.element.text();
	},
	setHtml: function () {
		this.element.text( value );
		this._updateTitle();	
	},
	//获取值
	getValue: function () {
		var value =  this.textboxHidden.val();
		if (this.options.autoDecode){
			value = $.coral.decode(value)
		}
		if (this.options.delSpace) {
			value = value.trim();
		}
		return value;
	},
	//textbox边输边校验，由于未失焦时隐藏值不变，需要校验显示值
	getValidateValue: function () {
		return this.getText();
	},
	getText:function(){
		if( this.component().hasClass("coral-state-focus") ) {
			return this.element.val();
		} else {
			return this.textboxHidden.val();
		}
	},
	//内部setValue，不转码
	_setValue: function(value, changeTrigger, changeText){
		value = value === null || typeof(value) === "undefined" ? "":value;
		var text = value,
			nData;
		changeText = changeText !== false? true: false;
		var fText = $.coral.toFunction(this.options.formatterText);
		if ($.isFunction(fText)) {
			text = fText.apply(this.options.element,[{'value':value}]);
		}
		if (changeText) {
			this.setText(text);
		}
		this.textboxHidden.val(value);
		this.options.value = value;
		if (changeTrigger && this.previous != value) {
			this._trigger("onChange", null, [{'value':value, 'text':text}]);
		}
		this.previous = value;
	
		if ( value !== "" ) {
			this._hidePlaceholder();
		}
	},
	//设置值
	setValue: function (value, changeTrigger, changeText) {
		value = value === null || typeof(value) === "undefined" ? "":value;
		if (this.options.autoDecode){
			value = $.coral.encode(value);
		}
		this._setValue(value, changeTrigger, changeText);
	},
	setText: function(text){
		if ( this.element.is("textarea") ) {
			this.element.val( text );
			this.element.text( text );
			//this.element.attr( "placeholder", this.options.placeholder );//在IE下，placeholder不显示
		} else {
			this.element.val( text );
		}
		this._updateTitle();
	},
	/**
	 ** 返回给form要提交的值信息
	 ** return {name: value};
	 **/
	formValue: function() {
		var data = {},
			name = this.element.attr("name");

		if (!name) return null;
		
		data[name] = this.getValue();
		
		return data ;
	}
});
;


$.component ( "coral.toolbar", {
	version: "4.0.2",
	castProperties: ["data","dataCustom","dropdownOptions"],
	options: {
		/* default options */
		clickToDisplay : 1,
		id: null,
		name: null,
		dataCustom: {},
		responsive: true,
		disabled: false,
		cls: null,
		url: null, 
		title : false,
		method: "get",
		data: null,
		width: "auto",
		height: null,
		isOverflow: true, // 是否自适应
		// 配置自适应时下拉选项
		dropdownOptions: {
			button: {
				text: false, // 默认不显示文字
				label: "更多" // 配置自适应时下拉按钮的文本
			},
			panelPosition: { // 配置下拉按钮的下拉面板相对于下拉按钮的position
				my: "right top",
				at: "right bottom"
			},
			atGroup: 0 //配置自适应时下拉按钮的位置所属的组别（0, 1, 2）
      	},
		align: 0, // 单组的时候，设置水平居左中右（"left", "center", "right"）
		autoDisplay: false, // 显示具有子菜单的按钮时，是否自动显示
		margin: 5, // define item与item之间的距离			
		/* default events */
		onCreate: null,
		onClick: null,
		onLoad: null // 数据加载回调事件
	},	
	/**
	 * 合并两个 $dom 集合
	 * @param: $d1 / $d2 {$dom}
	**/
	_jion: function($d1, $d2) {
		var $d = [];

		$.each($d1, function(i, d) {
			$d.push( $(d) );
		});
		$.each($d2, function(i, d) {
			$d.push( $(d) );
		});

		return $d;
	},
	/**
		hide all tieredmenus
	**/
	_hideMenus: function() {
		$(".coral-tieredmenu").hide();
	},
	/**
	 * create
	 */
	_create: function () {
		var that = this;
		this.isLoaded = false;
		// save sum of groups
		this.groupLength = 1;
		
		this._initElements();
		this._bindEvents();
	},
	//!-- extend api 
	_bindEvents: function () {
		var that = this;

		 // Clicks outside of a grid cancel any edit row
		this._on( this.document, {
			mousedown: function( event ) {
				if ( that.options.clickToDisplay == 1 && that.options.autoDisplay  ) {
					that.uiBox.toggleClass("coral-toolbar-click-active", false);
				}
			}
		});
	},
	/**
	 * initialize elements
	 */
	_initElements: function () {
		var that = this,
			options = this.options;
		
		this.uiBox = $( "<div class=\"coral-toolbar\"></div>" );
		this.uiBorder =  $( "<div class=\"coral-toolbar-border\"></div>" );
		this.uiBox.append( this.uiBorder );
		this.uiBox.insertAfter( this.element );
		this.element.appendTo( this.uiBorder );
		
		if(typeof this.element.attr("id") != "undefined"){
    		this.options.id = this.element.attr("id");
    	} else if (this.options.id){
    		this.element.attr("id", this.options.id);
    	}
    	if(typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name){
    		this.element.attr("name", this.options.name);
    	}

    	// 添加自适应时，需要用到的下拉按钮，默认隐藏
    	//var dropdownLabel = this.options.dropdownOptions.button.label;
    	//if ( !dropdownLabel ) dropdownLabel = "更多";
    	this.uiAfter = $("<button type='button' data-frozen='true' class='coral-toolbar-after-element ctrl-toolbar-element'></button>")
    		/*.appendTo(this.uiBox)	*/    		
    		.menubutton({
    			label: this.options.dropdownOptions.button.label,
    			text: this.options.dropdownOptions.button.text,
    			renderType: "button",
    			icons: "cui-icon-arrow-down3 right",
    			data: [],
    			position: this.options.dropdownOptions.panelPosition
    		});
		this.uiAfter.menubutton("component").addClass("coral-toolbar-item coral-toolbar-after");
		this.uiAfter.menubutton("hide");

		this._loadData();
		if(this.options.width){
			this.uiBox.css({
				"width":this.options.width
			})
		}
		if ( this.options.clickToDisplay == 0 ){
			this.uiBox.addClass("coral-toolbar-click-active");				
		}
	},
	reload: function (url) {
		this.isLoaded = false;
		this.groupLength = 1;
		var opts = this.options;
		if ( typeof( url ) !== "string" ) {
			opts.data = url;
		} else {
			opts.url = url;
		}
		this.element.html("");
		this.uiAfter = $("<button type='button' data-frozen='true' class='coral-toolbar-after-element ctrl-toolbar-element'></button>")
		.menubutton({
			label: this.options.dropdownOptions.button.label,
			text: this.options.dropdownOptions.button.text,
			renderType: "button",
			icons: "cui-icon-arrow-down3 right",
			data: [],
			position: this.options.dropdownOptions.panelPosition
		});
		this.uiAfter.menubutton("component").addClass("coral-toolbar-item coral-toolbar-after");
		this.uiAfter.menubutton("hide");
		this._loadData();
	},
	/**
	 * load json data from options.url or options.data
	 */
	_loadData: function () {
		var that = this,
			options = this.options;
		if (options.url) {
			$.ajax({
				type: options.method,
				url: options.url,
				data: {},
				dataType: "json",
				success: function (data) {
					that._initData(data);
				},
				error: function () {
			        $.alert( "Json Format Error!" );
				}
			});
		} else if (options.data) {
			this._initData(options.data);
		}
	},
	/**
	 * initialize json data
	 */
	_initData: function (data) {
		var that = this;
		
		if (typeof data === "object") {
			this._addItems(null, data); // index = null 代表尾部直接添加
			this._trigger("onLoad", null, {});
			this.isLoaded = true;
			// 处理冻结项
			this._setFrozenElements();
			// 给元素定位
			this._position();
		}

		if ( this.options.disabled ) {
			this._setDisabled( this.options.disabled );
		}
	},
	/**
	 * 增加子项内部处理方法
	 * @param index{number}：0 ~ length,字符型数字,null代表尾部直接添加
	 * @param data {json object{} or array[]} : 子项数据对象
	 * @return ;
	 */
	_addItems: function (index, data, groupIndex) {
		if (typeof data !== "object") return ;
		
		var that = this,
			items = [],
			len = data.length;
		
		for (var i = 0; i < len; i++) {
			var itemData = data[i];
			
			if ( itemData == "" || !$.isEmptyObject( itemData ) ) {
				items.push( that._createItem(itemData) );
			}
		}

		this._appendItems(index, items, groupIndex);
		this._initItems(items);
		/* 如果没有定义 "more" 则添加到末尾 */
		if ( !this.element.find(".coral-toolbar-after-element").length ) {
			var groupName = this._getGroupNameByIndex( this.options.dropdownOptions.atGroup );
			var $group = this.element.find("[group-role='"+groupName+"']");
			
			if ( $group.length ) {
				$group.after(this.uiAfter.menubutton("component"))
			} else {
				this.element.append(this.uiAfter.menubutton("component"));
			}
		}
	},
	/**
	 * create a toolbar item
	 * @param itemData{json object}:子项数据对象
	 * @return {jquery object{}};
	 */
	_createItem: function (itemData) {
		var that = this,
			data = itemData,
			type = itemData.type || "button",
			opts = null;
		// 分隔符 和 分组符
		if (itemData === "-") {
			type = "seperator";
		} else if (itemData === "->") {
			type = "grouper";
		} else if (itemData === "") {
			type = "blank";
		} else if (itemData === "more") {
			type = "more";
		}
			
		var $el = this._createEl(type);
		
		//delete itemData.type;
		opts = itemData;
		//itemData.type = type;
		// 兼容以前的写法，如果以前写的是icon，而不是icons，则处理成现在的button的icons属性
		if (type === "button" && typeof itemData.icon !== "undefined" && itemData.icon != "") {
			var icons = this._getIcon(itemData.icon);
			delete opts.icon;
			if (null != icons.ico1 && null == icons.ico2) {
				opts["icons"] = icons.ico1;
			} else if (null == icons.ico1 && null != icons.ico2) {
				opts["icons"] = icons.ico2 + " right";
			} else if (null != icons.ico1 && null != icons.ico2) {
				opts["icons"] = icons.ico1 + " left, " + icons.ico2 + " right";
			}
		}
		
		return {
			$el: $el, // item jquery element of coral
			coralType: type, // coral type
			options: opts // coral init options
		}
	},
	/**
	 * 处理 align （单组的情况下）
	 */
	_align: function() {
		// 只有在单组的时候处理水平位置
		if ( this.groupLength != 1 ) return ;
		
		var opts = this.options;
		
		if ( opts.align == "center" ) {
			var $grouperLeft = this._createEl("grouper").attr("grouper-role", "center"),
				$grouperRight = this._createEl("grouper").attr("grouper-role", "right");
			
			this.element.prepend($grouperLeft);
			this.element.find("[group-role='left']")
						.removeClass("group-left")
						.addClass("group-center")
						.attr("group-role", "center");				
			this.element.find(".ctrl-toolbar-element")
						.attr("group", "center");
			this.element.append($grouperRight);
		} else if ( opts.align == "right") {
			var $grouperRight = this._createEl("grouper").attr("grouper-role", "right");
			this.element.find("[group-role='left']")
						.removeClass("group-left")
						.addClass("group-right")
						.attr("group-role", "right");
			this.element.find(".ctrl-toolbar-element")
						.attr("group", "right");
			this.element.prepend($grouperRight);
		}
	},
	/**
	 * 根据索引增加子项到页面
	 * @param index{number}：0 ~ length,字符型数字,null代表尾部直接添加
	 * @param items {json object{}} : 子项数据对象
	 * @return ;
	 */
	_appendItems: function (index, items, groupIndex) {
		var that = this;

		if ( !this.isLoaded ) {
			var grouperIndex = 0;
			var grouper = that._createGrouper(grouperIndex, this.groupLength);
			this.element.append(grouper);
			
			$.each(items, function(i, d) {
				if ( d.coralType == "grouper" ) {
					grouperIndex += 1;
					grouper = that._createGrouper(grouperIndex, that.groupLength);
					that.element.append(d.$el.attr("grouper-role", grouper.attr("group-role")));
					that.element.append(grouper);
				} else {
					// 给项分配组别
					grouper.append(d.$el.attr("group", grouper.attr("group-role")));
					// 如果有冻结项，则标识 data-frozen 为 true
					if ( d.options && d.options.frozen == true) {
						d.$el.attr("data-frozen", true);
					}
				}
			});
			// 水平居位处理
			this._align();
		} else {
			var groupName = this._getGroupNameByIndex(groupIndex);
			var $group = this.element.find("[group-role='"+ groupName +"']");
			var innerLength = $group.find(".ctrl-toolbar-element:not(.coral-toolbar-separator)").length;
			
			if ( null == index || index == innerLength ) {
				for (var i in items) {
					items[i].$el.attr("group", groupName);
					items[i].$el.appendTo($group);
				}
			} else if ( index == 0 ) {
				for (var j in items) {
					items[j].$el.attr("group", groupName);
					items[j].$el.prependTo($group);
				}
			} else {
				for (var k in items) {
					items[k].$el.attr("group", groupName);
					var item = $group.find(".ctrl-toolbar-element:eq(" + index + ")");
					var coralType = item.attr("component-role");
					if ( coralType ) {
						item[coralType]("component").before(items[k].$el);
					} else {
						item.before(items[k].$el);
					}
				}
			}
		}
	},
	/**
	 * 初始化添加的项内部组件
	 * @param items {json object{}} : 子项数据对象
	 * @return ;
	 */
	_initItems: function ( items ) {
		var that = this;
		
		for (var i in items) {
			// 如果是 "-" 分隔符，则跳过，不初始化
			if (items[i].coralType === "seperator" || items[i].coralType === "grouper" || items[i].coralType === "blank" || items[i].coralType === "more") {
				continue ;
			}
			var $el = items[i].$el,
				coralType = items[i].coralType.toLowerCase(),
				opts = items[i].options;
			// 给每一个子项的component做标记
			opts.componentCls = " coral-toolbar-item " + opts.componentCls||"";
			if (items[i].coralType === "html") {
				$el.attr("id", opts.id).append(opts.content);
				continue;
			}
			if( that.options.title ){
				opts.title=true;
			}
			$el[coralType](opts);
			
			// listen item's click event and trigger the default click event
			/*var _opts = {} ;				
			_opts[coralType + "onclick"] = function(e,ui) {
    			//that._trigger("onClick", e, ui);
    			//console.log(e);
    			if ( that.uiAfter.length ) {
    				
    				that.uiAfter.menubutton("hidePanel");
    			}
    		};*/
			//that._on( $el, _opts);
			$el.off(".toolbaronclick").on( coralType + "onclick.toolbaronclick", function( e, ui ) {
				ui = ui || {};
				ui.id = ui.id || e.currentTarget.id;
				$(e.currentTarget).attr("component-role") == "splitbutton";
				if ( that.uiAfter.length ) {
					var ctr = $(e.currentTarget).attr("component-role");
					if ( ctr == "splitbutton" 
						|| ctr == "button" ) {
						that.uiAfter.menubutton("hidePanel");
					}
    			}
				// trigger触发一般放在最后，在处理完内部逻辑后调用，因为外部逻辑可能会破坏当前结构；
				that._trigger("onClick", e, ui);
			});
			$el.off(".toolbaronmouseenter").on( coralType + "onmouseenter.toolbaronmouseenter", function( e, ui ) {
				var ctr = $(e.currentTarget).attr("component-role");
				if ( ctr == "splitbutton" 
					|| ctr == "menubutton" ) {
					if ( that.options.clickToDisplay == 0 && that.options.autoDisplay  ) {
						$(e.currentTarget)[ctr]("hideAllMenus");
						$(e.currentTarget)[ctr]("showMenu");
					}
				}
				
			});
		}
	},
	/**
	 * 根据组件类型，创建一个对应的jQuery element
	 * @param coralType(string):组件类型
	 * @return jQuery object
	 */
	_createEl: function (coralType) {
		var $el;
		
		switch(coralType) {
			case "button":
				$el = $("<button type='button'></button>");
				break;
			case "checkbox":
				$el = $("<input type='checkbox' />");
				break;
			case "textbox":
			case "combobox":
				$el = $("<input type='text' />");
				break;
			case "datepicker":
				$el = $("<input type='text' />");
				break;
			case "splitbutton": 
			case "menubutton":
				$el = $("<button type='button'></button>");
				break;
			case "seperator":
				$el = $("<div class='coral-toolbar-item coral-toolbar-separator coral-toolbar-separator-horizontal'></div>");
				break;
			case "grouper":
				this.groupLength += 1;
				$el = $("<div class='coral-toolbar-item coral-toolbar-grouper'></div>");
				break;
			case "html":
			 	$el = $("<div class='coral-toolbar-item coral-toolbar-html'></div>");
			 	break;
			case "blank":
				$el = $("<span class='coral-toolbar-item coral-toolbar-blank'></span>");
				break;
			case "more":
				$el = this.uiAfter.menubutton("component");
				return $el;
				break;
			default:
				$el = $("<span class='coral-toolbar-item'></span>");
				break;
		}
		// 标识是toolbar下的element
		return $el.addClass("ctrl-toolbar-element");
	},		
	/**
	 * 生成分组父元素
	 * @param: index {number}(0, 1, 2)，索引
	 * @param: sum {number}，总分组的数目
	**/
	_createGrouper: function(index, sum) {
		var $grouper = $();

		if (sum == 1 || sum == 3) {
			switch(index) {
				case 0:
					$grouper = $("<span class='coral-toolbar-group group-left' group-role='left'></span>");
					break;
				case 1:
					$grouper = $("<span class='coral-toolbar-group group-center' group-role='center'></span>");
					break;
				case 2:
					$grouper = $("<span class='coral-toolbar-group group-right' group-role='right'></span>");
					break;
				default:
					$grouper = $("<span class='coral-toolbar-group' group-role='default'></span>");
					break;
			}	
		} else if (sum == 2) {
			switch(index) {
				case 0:
					$grouper = $("<span class='coral-toolbar-group group-left' group-role='left'></span>");
					break;
				case 1:
					$grouper = $("<span class='coral-toolbar-group group-right' group-role='right'></span>");
					break;
				default:
					$grouper = $("<span class='coral-toolbar-group' group-role='default'></span>");
					break;
			}	
		}

		return $grouper;
	},
	/**
	 * 根据组别索引获取组别名称
	 */
	_getGroupNameByIndex: function(groupIndex) {
		if (typeof groupIndex !== "number") return "left";
		
		if ( this.groupLength == 1 ) {
			return "left";
		} else if ( this.groupLength == 2 ) {
			return groupIndex == 0 ? "left" : "right"; 
		} else if ( this.groupLength == 3 ) {
			switch (groupIndex) {
				case 0:
					return "left";
				case 1:
					return "center";
				case 2:
					return "right";
			}
		}
	},
	/**
	 * 获取分组符元素
	**/
	_getGrouper: function() {
		return this.element.find(".coral-toolbar-grouper");
	},
	/**
	 * 重置分组符宽度为1，便于计算计算totalWidth（不包括分组符）
	**/
	_resetGrouper: function() {
		var $grouper = this._getGrouper();
		
		if ( $grouper.length ) {
			$grouper.width(1);
		}
	},
	/**
	 *	重置 项 （讲收缩到panel的项还原，并清除绝对定位的样式）
	**/
	_resetToolbarItems: function() {
		var that = this,
			$elements = this._getElements(2);

		this._resetGrouper();
		
		$.each( $elements, function(i, el) {
			var $el = $(el),
				$com = that._getComponentByElement( $el );

			$com.css({
				left: ""
			});

			if ($com.hasClass("coral-menubutton-button-item")) {
				var groupRole = $el.attr("group"),
					$group = that.element.find("[group-role='"+groupRole+"']");

				if ( $group.find("[data-frozen='true']").length ) {
					var $frozenEl = $group.find("[data-frozen='true']:eq(0)");
					var $frozenCom = that._getComponentByElement($frozenEl);
					$frozenCom.before($com.removeClass("coral-menubutton-button-item"));
				} else {
					$group.append($com.removeClass("coral-menubutton-button-item"));
				}
			}
		});
		this.uiAfter.menubutton("hidePanel");
		this.uiAfter.menubutton("hide");

		this.uiBorder.css({
			width: "auto"
		});
	},
	/**
	 *	定位
	**/
	_position: function() {
		if ( !this.element.is(":visible") || !this.options.responsive ) {
			// TODO: 清除 left，并把 panel 内的元素移除来。
			this._resetToolbarItems();
			this.component().addClass("coral-toolbar-initHidden");
			return;
		} else {
			this.component().removeClass("coral-toolbar-initHidden");
		}
		var that = this,
			opts = this.options;
		// 详见方法注释
		this._resetGrouper();

		// 缓存下来totalWidth
		this.totalWidth = this._totalWidth();
		
		if (opts.isOverflow && this.uiBox.width() > 0) {
			// 定位前，先设置border宽度跟component一致，后再调整
			this.uiBorder.width(this.uiBox.width());
		} else {
			this.uiBorder.width( Math.max(this.totalWidth, this.uiBox.width()) );
			//this.uiBorder.width(this.totalWidth);
			//this.uiBox.width(this.totalWidth);
		}
		if(this._toolbarWidth() - this.totalWidth < 0) {
			this.uiAfter.menubutton("show");
			/*this.uiAfter.css("margin-left", opts.margin);
			this.uiBorder.width(this.uiBox.width() - this.uiAfter.width() - opts.margin*2);*/
		} else {
			this.uiAfter.menubutton("hide");
		}

		this._positionItems(this.element);
	},
	/**
		根据浮动的方向，计算每组的定位
	**/
	_positionItems: function($el) {
		var that = this,
			opts = this.options,
			margin = this.options.margin,
			isEnd = false,
			left = 0,
			$lastEl = $(),
			cssStyle = {
				/*margin: "0px",*/
				right: "auto"
			};
		
		this._prePosition();		
		this.element.find(".coral-toolbar-item:not(.coral-state-hidden)").each(function(index, itemEl) {
			var $itemEl = $(itemEl);

			if (isEnd) {
				return true;
			}
			if ($lastEl.length) {
				left = left + $lastEl.outerWidth() + margin;
			}
			cssStyle["left"] = left + "px";
			$itemEl.css(cssStyle);
			$lastEl = $itemEl;
		});	
		// 处理 menubutton，splitbutton 弹出方式
		this._handlerDropdownItems();
	},
	_handlerDropdownItems: function() {
		var that = this,
			$elementsParent = this._filter( this._getElements(0), ".ctrl-init-splitbutton,.ctrl-init-menubutton");
		
		that._hideMenus();
		$.each( $elementsParent, function(i, el) {
			var $el = $(el),
				$com = that._getComponentByElement($el);

			try {
				switch( $el.attr("component-role") ) {
					case "splitbutton":
						if ( $com.hasClass("coral-menubutton-button-item") ) {
							$el.splitbutton("menu").tieredmenu("option", {
								my: "left top",
								at: "right top",
								of: $el.splitbutton("uiDropdownButton")
							});
						} else {
							$el.splitbutton("menu").tieredmenu("option", {
								my: "left top",
								at: "left bottom",
								of: $el
							});
						}
						break;
					case "menubutton":
						if ( $com.hasClass("coral-menubutton-button-item") ) {
							$el.menubutton("menu").tieredmenu("option", {
								my: "left top",
								at: "right top"
							});
						} else {
							$el.menubutton("menu").tieredmenu("option", {
								my: "left top",
								at: "left bottom"
							});
						}
						break;
					default:
						break;
				}
			} catch ( exception ) {
				console.log(" There is a error happened.");
			} finally {
				
			}

		});

	},
	/**
	 * 根据组件原始元素，获取外层元素
	**/
	_getComponentByElement: function($el) {
		var $com = $(),
			type = $el.attr("component-role");
		
		if ( type ) {
			$com = $el[type]("component");
		} else {
			$com = $el;
		}

		return $com ;
	},
	/**
	** @param: $elements {$(dom)}
	** @param: selector {string}
	** return [$dom];
	**/
	_filter: function( $elements, selector ) {
		var $elementsRst = [];

		$.each( $elements, function(i, el) {
			var $el = $(el);

			if ( $el.is(selector) ) {
				$elementsRst.push( $el );
			}
		});

		return $elementsRst ;
	},
	/**
	 *	定位前期准备：将 $dom 所属范围归属好，宽度设置好
	**/
	_prePosition: function() {
		var that = this,
			opts = this.options,
			margin = this.options.margin,
			left = 0,
			isEnd = false,
			addMenuButtons = [],
			$lastEl = $(),
			elements = [];

		if (this.uiAfter.is(":visible")) {
			elements = this._getElements(3);
		} else {
			elements = this._getElements(2);
		}


		var elements = this._jion( that._getFrozenElements(),that._filter(elements, ":not([data-frozen='true'])") ) ;
		
		$.each( elements , function(i, el) {
			var $com = that._getComponentByElement( $(el) );

			var isInner = !$com.hasClass("coral-menubutton-button-item");

			if (isEnd) {
				if (!isInner) return true;
				if ( $com.hasClass("coral-toolbar-grouper") || $(el).attr("data-frozen") == "true" ) return true;
				addMenuButtons.push($com);
				return true;
			}

			if ($lastEl.length && $lastEl.is(":visible")) {
				left = left + $lastEl.outerWidth() + margin;
			}

			if (!isInner) {
				var $group = that.element.find("[group-role='" + $(el).attr("group") + "']");
				if ($group.attr("group-role") == $(el).attr("group") && $group.find("[data-frozen='true']").length) {
					var $frozenEl = $group.find("[data-frozen='true']:eq(0)");
					if ( $frozenEl.attr("component-role") ) {
						$frozenEl[$frozenEl.attr("component-role")]("component").before($com.removeClass("coral-menubutton-button-item"));
					} else {// html元素不是组件，无法调用component方法
						$frozenEl.before($com.removeClass("coral-menubutton-button-item"));
					}
				} else {
					$com.removeClass("coral-menubutton-button-item").appendTo($group);
				}
			}
			if ( left + $com.outerWidth() > that._toolbarWidth() ) {
				isEnd = true;
				if ( $com.hasClass("coral-toolbar-grouper") || $(el).attr("data-frozen") == "true" ) return true;
				if (isInner) {
					addMenuButtons.push($com);
				} else {
					that.uiAfter.menubutton("prepend", $com);
				}
				return true;
			}
			$lastEl = $com;
		});
		// 第一次初始化和刷新时的定位操作不同
		if ( !this.isLoaded ) {
			that.uiAfter.menubutton("append", addMenuButtons);
		} else {
			that.uiAfter.menubutton("prepend", addMenuButtons);
		}
		// 排完所有的元素后，还剩下的宽度给分组符
		this._setGrouperWidth();
	},
	/**
	 * 设置分组符的宽度
	**/
	_setGrouperWidth: function() {
		var $grouper = this._getGrouper();

		var grouperWidth = ( this._toolbarWidth() - this._totalWidth(true, this.uiAfter.is(":visible")) - this.options.margin );
		var leftGroupWidth = this._getWidthByGroupRole("left");
		var rightGroupWidth = this._getWidthByGroupRole("right");
		var leftGrouperWidth = (grouperWidth - leftGroupWidth + rightGroupWidth) / 2;
		var rightGrouperWidth = (grouperWidth - leftGrouperWidth);
		
		if (grouperWidth < 0) {
			$grouper.width(1);
			return ;
		}

		if ( $grouper.length == 1 ) {
			$grouper.width( grouperWidth );
		} else if ( $grouper.length == 2 ) {
			if (leftGrouperWidth > 0 && rightGrouperWidth > 0 && !this.uiAfter.is(":visible")) {
				$( $grouper[0] ).width(leftGrouperWidth + 1);
				$( $grouper[1] ).width(rightGrouperWidth + 1);						
			} else {
				$( $grouper[1] ).width(grouperWidth + 1);
				$( $grouper[0] ).width(1);
			}
		}
	},
	/**
	 * 根据组别，计算内部项宽度之和
	 * @param: groupRole {number}（"left","center","right"）
	**/
	_getWidthByGroupRole: function(groupRole) {
		var opts = this.options,
			width = 0,
			$group = this.element.find("[group-role='" + groupRole + "']"),
			$components = $group.find(".coral-toolbar-item");

		if ( !$group.length || !$components.length) return 0;

		$.each($components, function (i, component) {
			var $component = $(component);

			width += $component.outerWidth() + opts.margin;
			
			if (i == $components.length-1) {
				width -= opts.margin;
			}
		});

		return width;
	},				
	/**
	 * 获取 toolbar 实际宽度
	**/
	_toolbarWidth: function() {
		return this.uiBorder.innerWidth();
	},
	_setFrozenElements: function() {
		var $elements = this._getElements(3),
			flag = false;

		$.each( $elements, function(i, el) {
			var $el = $(el);
			
			if ( $el.hasClass("coral-toolbar-after-element") ) {
				flag = true;
			}
			if ( flag && !$el.hasClass("coral-toolbar-grouper") ) {
				$el.attr("data-frozen", true);
			}
		});
	},
	/**
		获取 frozen（冻结项） 元素
	**/
	_getFrozenElements: function() {
		if ( this.uiAfter.is(":visible") ) {
			return this.element.find("[data-frozen='true']");
		} else {
			return this.element.find("[data-frozen='true']:not(.coral-toolbar-after-element)");
		}			
	},
	/**
		获取 toolbar 项（原始元素）
		@param: type {number}（0-只包括有效项，1-包括分隔符，2-包括分组符，3-包括下拉面板按钮）
	**/
	_getElements: function(type) {
		var $itemsAll = $(),
			$itemsInner = this.element.find(".ctrl-toolbar-element"),
			$itemsOuter = this.uiAfter.menubutton("buttons").find(".ctrl-toolbar-element");

		$itemsAll = this._jion( $itemsInner, $itemsOuter );

		switch(type) {
			case 0: 
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element,.coral-toolbar-grouper,.coral-toolbar-separator)");
				break;
			case 1:
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element,.coral-toolbar-grouper)");
				break;
			case 2:
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after-element)");
				break;
			case 3:
				break;
			default:
				break;
		}

		return $itemsAll;
	},
	/**
		获取 toolbar 项（外层元素）
		@param: type {number}（0-只包括有效项，1-包括分隔符，2-包括分组符，3-包括下拉面板按钮）
	**/
	_getComponents: function(type, containHidden) {
		var $itemsAll = $(),
			$itemsInner = this.element.find(".coral-toolbar-item"),
			$itemsOuter = this.uiAfter.menubutton("buttonElements");
		
		$itemsAll = this._jion( $itemsInner, $itemsOuter );

		type = type || 1;
		switch(type) {
			case 0: 
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after,.coral-toolbar-grouper,.coral-toolbar-separator)");
				break;
			case 1:
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after,.coral-toolbar-grouper)");
				break;
			case 2:
				$itemsAll = this._filter($itemsAll, ":not(.coral-toolbar-after)");
				break;
			case 3:
				break;
			default:
				break;
		}
		// 如果不包含隐藏元素，则剔除
		if ( !containHidden ) {
			// $itemsAll.filter(".coral-state-hidden");
			$itemAll = this._filter($itemsAll, ".coral-state-hidden");
		}

		return $itemsAll;
	},
	/**
	 * 获取 toolbar 项相加的总宽度
	 * @param: inner {boolean}（true-只计算 border 内的项）
	 */
	getTotalWidth: function(inner) {
		return this._totalWidth(inner);
	},
	/**
	 * 获取 toolbar 项相加的总宽度
	 * @param: inner {boolean}（true-只计算 border 内的项）
	 */
	_totalWidth: function(inner, includeAfter) {
		var that = this,
			opts = this.options,
			totalWidth = 0;
		var $items = $();

		if (includeAfter) {
			$items = this.element.find(".coral-toolbar-item:not(.coral-state-hidden)");
		} else {
			$items = this.element.find(".coral-toolbar-item:not(.coral-state-hidden,.coral-toolbar-after)");
		}
		var $items_buttons = this.uiAfter.menubutton("buttons").find(".coral-toolbar-item:not(.coral-state-hidden)");
		

		$items.each(function(index, item) {
			var $item = $(item);

			totalWidth = totalWidth + $item.outerWidth() + opts.margin;
			if (index == $items.length-1 && !$items_buttons.length) {
				totalWidth = totalWidth - opts.margin;
			}
		});
		if (inner) {
			return totalWidth - opts.margin;
		}

		this.uiAfter.menubutton("showPanel");
		$items_buttons.each(function(index, item) {
			var $item = $(item);

			totalWidth = totalWidth + $item.outerWidth() + opts.margin;
			
			if (index == $items_buttons.length-1) {
				totalWidth = totalWidth - opts.margin;
			}
		});
		this.uiAfter.menubutton("hidePanel");

		return totalWidth;
	},
	//获取icon的两个class
	_getIcon: function ( icoStr ) {
		var ico = { ico1: null, ico2: null },
			icoArray = [],
			icoTrim;
		
		if ( icoStr == null ) {
			return ico;
		}
		
		icoTrim = $.trim( icoStr );
		if ( icoTrim.indexOf( "," ) >= 0 ) {
			icoArray = icoTrim.split( "," );
			
			ico.ico1 = icoArray[0] == "" ? null : icoArray[0];
			ico.ico2 = icoArray[1] == "" ? null : icoArray[1];
		} else {
			ico.ico1 = icoTrim;
		}
		
		return ico;
	},		
	/**
	 * 获取子项长度
	 * @return {number};
	 */
	getLength: function () {
		return this._getElements(0).length;
	},
	/**
	 * 根据id判断是否存在子项
	 * @return {boolean} : true - 存在; false - 不存在
	 */
	isExist: function ( id ) {			
		return this._getSubCoral(id) ? true : false;
	},
	/**
	 *	获取组别的长度
	**/
	_getGroupElementsLength: function(groupIndex) {
		if (typeof groupIndex !== "number" || groupIndex > (this.groupLength-1) ) return ;

		var groupName = this._getGroupNameByIndex(groupIndex);
		var $group = this.element.find("[group-role='"+ groupName +"']");

		return $group.find(".ctrl-toolbar-element:not(.coral-toolbar-separator)").length;
	},
	/**
	 * 增加子项
	 * @param key{number，string}：根按钮索引，或者id
	 * @param data {json object{} or array[]} : 子项数据对象
	 * @return ;
	 */
	add: function(key, data , groupIndex) {
		if (typeof data !== "object") return;
		// 说明传进的参数是id
		if ( typeof key === "string" ) {
			return this._addByParentId( key, data );
		}

		groupIndex = groupIndex || 0;
		var that = this,
			idx = parseInt( key );
		
		if ( ((null != key) && isNaN(idx)) || idx < 0 || idx > this._getGroupElementsLength(groupIndex) ) {
			return ;
		}
		if ( !$.isArray(data) ) {
			data = [data];
		}
		// 如果长度为0，则直接添加在尾部
		if ( 0 == this._getGroupElementsLength(groupIndex) ) {
			key = null;
		}
		this._addItems(key, data, groupIndex);
		this._refresh();
	},
	/**
     * 根据父id添加项
     * @param pid { string } : 父id
     * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
     * @return ;
     */
	_addByParentId: function (pid, data) {
		var pNodeObj = this._getSubCoral(pid);
		
		if (pNodeObj) {
			var $el = pNodeObj.$el;
			switch (pNodeObj.type) {
				case "splitbutton":
					$el.splitbutton("menu").tieredmenu("add", null, data);
					break;
				case "menubutton":
					$el.menubutton("menu").tieredmenu("add", null, data);
					break;
				case "tieredmenu":
					$el.tieredmenu("add", pid, data);
					break;
				default:
					break;
			}
		}
	},
	/**
	 * 根据id或index获取组件对象
	 */
	getSubCoral: function (key) {
		var that = this;
		
		if ( typeof key === "string" ) {
			return that._getSubCoral( key );
		} else {
			return that._getSubCoralByIndex( key );
		}
	},
	/**
	 * 根据index获取组件对象
	 */
	_getSubCoralByIndex: function ( index ){
		var that = this,
			idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		return that._getSubCoral( idx );
		
	},
	/** 
	 *
	**/
	_findElementsByAttr: function($elements, attrName, attrValue) {
		var that = this,
			$elementsResult = [];

		$.each($elements, function(idx, item){
			var $item = $(item);
			
			if ( attrValue == $item.attr(attrName) ) {
				$elementsResult.push($item);
			} 
		});

		return $elementsResult;
	},
	/**
	 * 根据id获取子组件的信息
	 * @param id { string } : id
	 * @return { object } : {$el:组件元素, type:组件类型}
	 */
	_getSubCoral: function(id) {
		var that = this,
			$el = this._findElementsByAttr(this._getElements(0), "id", id),
			type = null,
			$splitItems = this._findElementsByAttr(this._getElements(0), "component-role", "splitbutton"),
			$menuItems = this._findElementsByAttr(this._getElements(0), "component-role", "menubutton"),
			$menuEl = null,
			returnObj = null,
			$item = null;
		
		if (typeof id === "number") {
			$item = $( this._getElements(0)[id] );
			returnObj = {
				$el: $item,
				type: $item.attr("component-role")
			};
			return returnObj;
		}
		if ($el.length) {
			returnObj = {
				$el: $el[0],
				type: $el[0].attr("component-role")
			};
			return returnObj;
		} 
		
		$menuEl = this._findSubCoralInMenuItems( $splitItems, id );
		if ($splitItems.length && $menuEl) {
			returnObj = {
				$el: $menuEl,
				type: "tieredmenu"
			};
			return returnObj;
		} 
		
		$menuEl = this._findSubCoralInMenuItems( $menuItems, id );
		if ($menuItems.length && $menuEl) {
			returnObj = {
				$el: $menuEl,
				type: "tieredmenu"
			};
			return returnObj;
		}
		
		return returnObj;
	},
	/**
	 * 在splitbutton 或者 menubutton 下的menuItems里面找
	 * @param $buttonEls { jquery{} } : 工具条下 splitbuttons 或 menubuttons
	 * @param id { string } : id
	 * @return { jquery{} } : 找到含有id的tieredmenu元素
	 */
	_findSubCoralInMenuItems: function($buttonEls, id) {
		if( !$buttonEls.length ) return;
		var returnObj = null;
		
		$.each($buttonEls, function(index, item) {
			var $item = $(item),
				type = $item.attr("component-role"),
				$menu =  $(item)[type]("menu");
			
			if ($menu.find("[data-id='"+id+"']").length) {
				returnObj = $menu;
			}
		});
		
		return returnObj;
	},
	/**
	 * remove all items
	 * @return ;
	 */
	removeAll: function() {
		var that = this;
		
		$.each(this._getElements(1), function(index, el) {
			var $el = $(el),
				coralType= $el.attr("component-role");
			
			if ( coralType ) {
				$el[coralType]("destroy");
			}		
			
			$el.remove();
		});

		this._refresh();
	},
	/**
     * 根据id或者根子项索引删除项
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	remove: function ( key ) {
		var that = this;
		
		if ( typeof key === "string" ) {
			this._removeById( key );
		} else {
			this._removeByIndex( key );
		}

		this._refresh();
		
	}, 
	/**
	 * 根据id删除项
	 * @param id { string } : id
     * @return ;
	 */
	_removeById: function(id) {			
		var that = this,
			pNodeObj = this._getSubCoral(id);
		
		if (pNodeObj) {
			var $el = pNodeObj.$el;
			if ( $el.hasClass("coral-toolbar-html") ) {
				$el.remove();
				return ;
			}					
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("removeItem", id);
					break;
				default:
					var coralType= $el.attr("component-role");
					
					$el[coralType]("destroy");
					$el.remove();
					break;
			}
		}
	},
	/**
	 * 根据根子项index删除项
	 * @param index { number } :根子项索引
     * @return ;
	 */
	_removeByIndex: function(index) {
		var idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		var $el = $( this._getElements(0)[idx] );
		var coralType= $el.attr("component-role");
		
		if ( coralType ) {
			$el[coralType]("component").remove();
		}
		$el.remove();
	},		
	/**
     * 根据id或者根子项索引修改项的文本
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	update: function ( key, label ) {
		var that = this;
		
		if ( typeof key === "string" ) {
			that._updateById( key, label );
		} else {
			that._updateByIndex( key, label );
		}

		this._refresh();
	},
	/**
	 * 根据id修改项的文本
	 * @param id { string } : id
     * @return ;
	 */
	_updateById: function ( id, label ) {
		var pNodeObj = this._getSubCoral(id);
		if (pNodeObj) {
			var $el = pNodeObj.$el;				
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("updateItem", id, label);
					break;
				case "button":
					$el.button("update", label);
					break;
				case "splitbutton":
					$el.splitbutton("button").button("update", label);
					break;
				case "menubutton":
					$el.menubutton("button").button("update", label);
					break;
				default:
					break;
			}
		}
	},
	/**
	 * 根据根子项index修改项的文本
	 * @param index { number } :根子项索引
     * @return ;
	 */
	_updateByIndex: function ( index, label ) {
		var idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		var pNodeObj = this._getSubCoral(index);			
		if (pNodeObj) {
			var $el = pNodeObj.$el;				
			switch (pNodeObj.type) {
				case "button":
					$el.button("update", label);
					break;
				case "splitbutton":
					$el.splitbutton("button").button("update", label);
					break;
				case "menubutton":
					$el.menubutton("button").button("update", label);
					break;
				default:
					break;
			}
		}
	},
	/**
	 * get coral component
	 */
	component: function () {
		return this.uiBox;
	},
	/**
	 * !-- get coral border
	 */
	_uiBorder: function() {
		return this.uiBorder;
	},
	/**
     * 禁用所有的菜单项
     * @return ;
     */
	disable: function () {
		this._setDisabled(true);
	},
	/**
     * 启用所有的菜单项
     * @return ;
     */
	enable: function () {
		this._setDisabled(false);
	},

	/**
	 * disabled handler code
	 * @param disabled{boolean}: true - disable; false - enable
	 */
	_setDisabled: function(disabled) {
		var that = this;
		
		var $els = this._getElements(0);	
		
		$.each( $els, function(i, el) {
			var $el = $(el);
			if ( $el.hasClass("coral-toolbar-html") ) return true;
			if ( !$el.attr("component-role") ) return;
			if (disabled) {
				$el[$el.attr("component-role")]("disable");
			} else {
				$el[$el.attr("component-role")]("enable");
			}
		});
		
		this.options.disabled = !!disabled;
	},		
	/**
     * 根据id或者根子项索引，禁用
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	disableItem: function ( key ) {
		var that = this;
		
		if ( typeof key === "string" ) {
			that._disableItemById( key );
		} else {
			that._disableItemByIndex( key );
		}
	},
	/**
	 * 根据id，禁用
	 * @param id { string } : id
     * @return ;
	 */
	_disableItemById: function(id) {
		var that = this,
			pNodeObj = this._getSubCoral(id);
		
		if (pNodeObj) {
			var $el = pNodeObj.$el;
			if ( $el.hasClass("coral-toolbar-html") ) return ;
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("disableItem", id);
					break;					
				default:
					var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
					if (!$itemEl.length) {
						return ;
					}
					
					$itemEl[$itemEl.attr("component-role")]("disable");
					break;
			}
		}
	},
	/**
     * 根据根子项索引，禁用
     * @param index { number } : 根子项索引
     * @return ;
     */
	_disableItemByIndex: function(index) {
		var that = this,
			idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		var $itemEl = $( this._getElements(0)[idx] );
		if ( $itemEl.hasClass("coral-toolbar-html") ) return false;
		if (!$itemEl.length) {
			return false;
		}
		
		$itemEl[$itemEl.attr("component-role")]("disable");
		return true;
	},
	/**
     * 根据id或者根子项索引，启用
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	enableItem: function ( key ) {
		var that = this;
		
		if (typeof key === "string" ) {
			that._enableItemById( key );
		} else {
			that._enableItemByIndex( key );
		}
	},
	/**
	 * 根据id，启用
	 * @param id { string } : id
     * @return ;
	 */
	_enableItemById: function(id) {
		var that = this,
			pNodeObj = this._getSubCoral(id);
		
		if (pNodeObj) {
			var $el = pNodeObj.$el;	
			if ( $el.hasClass("coral-toolbar-html") ) return ;			
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("enableItem", id);
					break;
				default:
					var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
					if (!$itemEl.length) {
						return ;
					}
					
					$itemEl[$itemEl.attr("component-role")]("enable");
					break;
			}
		}
	},
	/**
     * 根据根子项索引，启用
     * @param index { number } : 根子项索引
     * @return ;
     */
	_enableItemByIndex: function(index) {
		var that = this,
			idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		var $itemEl = $( this._getElements(0)[idx] );
		if ( $itemEl.hasClass("coral-toolbar-html") ) return ;
		if (!$itemEl.length) {
			return false;
		}
		
		$itemEl[$itemEl.attr("component-role")]("enable");
		return true;
	},
	/**
     * 根据id或者根子项索引，隐藏
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	hide: function ( key ) {
		var that = this;
		
		if ( typeof key === "string" ) {
			that._hideById( key );
		} else {
			that._hideByIndex( key );
		}

		this._refresh();
	},
	/**
     * 隐藏所有的菜单项
     * @return ;
     */
	hideAll: function() {
		var that = this;

		$.each(this._getElements(1), function(index, el) {
			var type = $(el).attr("component-role");
			
			if ( type ) {
				$(el)[type]("hide");
			} else {
				$(el).hide();
			}
		});

		this._refresh();			
	},
	/**
	 * 根据id，隐藏
	 * @param id { string } : id
     * @return ;
	 */
	_hideById: function(id) {
		var that = this,
			pNodeObj = this._getSubCoral(id);
	
		if (pNodeObj) {
			var $el = pNodeObj.$el;	
			
			if ( $el.hasClass("coral-toolbar-html") ) {
				$el.hide();
				return ;
			}			
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("hideItem", id);
					break;
				default:
					var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
					if (!$itemEl.length) return ;
					
					$itemEl[$itemEl.attr("component-role")]("hide");
					break;
			}
		}
	},
	/**
     * 根据根子项索引，隐藏
     * @param index { number } : 根子项索引
     * @return ;
     */
	_hideByIndex: function(index) {
		var that = this,
			idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;

		var $itemEl = $( this._getElements(0)[idx] );
		if (!$itemEl.length) return false;
		
		if ( $itemEl.hasClass("coral-toolbar-html") ) {
			$itemEl.hide();
			return true;
		}
		
		$itemEl[$itemEl.attr("component-role")]("hide");
		return true;
	},
	/**
     * 根据id或者根子项索引，显示
     * @param key { string,number } : id，根子项索引
     * @return ;
     */
	show: function ( key ) {
		var that = this;
		
		if (typeof key === "string" ) {
			that._showById(key);
		} else {
			that._showByIndex(key);
		}
		this._refresh();
	},
	/**
     * 显示所有的菜单项
     * @return ;
     */
	showAll: function() {
		var that = this;

		$.each(this._getElements(1), function(index, el){
			var type = $(el).attr("component-role");
			
			if ( type ) {
				$(el)[type]("show");
			} else {
				$(el).show();
			}
		});

		this._refresh();
	},
	/**
	 * 根据id，显示
	 * @param id { string } : id
     * @return ;
	 */
	_showById: function(id) {
		var that = this,
			pNodeObj = this._getSubCoral(id);
		
		if (pNodeObj) {
			var $el = pNodeObj.$el;	
			if ( $el.hasClass("coral-toolbar-html") ) {
				$el.show();
				return ;
			}				
			switch (pNodeObj.type) {
				case "tieredmenu":
					$el.tieredmenu("showItem", id);
					break;
				default:
					var $itemEl = $( this._findElementsByAttr(this._getElements(0),"id", id)[0] );
					if (!$itemEl.length) return ;
					
					$itemEl[$itemEl.attr("component-role")]("show");
					break;
			}
		}
		
	},
	/**
     * 根据根子项索引，显示
     * @param index { number } : 根子项索引
     * @return ;
     */
	_showByIndex: function(index) {
		var that = this,
			idx = parseInt(index);
		
		if (isNaN(idx) || idx < 0 || idx > (this.getLength() - 1) ) return false;
		
		var $itemEl = $( this._getElements(0)[idx] );
		var type = $itemEl.attr("component-role");
		if (!$itemEl.length) return false;
		
		if ( type ) {
			$itemEl[type]("show");
		} else {
			$itemEl.show();
		} 
		return true;
	},
	_destroy: function() {			
		this.uiBox.replaceWith(this.element);
	},
	/**
	 * set option
	 * @param key {string}:键
	 * @param value {string}:值
	 */
	_setOption: function ( key, value ) {
		var that = this;
		//default option can't be modified
		if (key === "id" || key === "name" ) {
			return;
		}			 		
		if ( key === "disabled" ) {
			this._setDisabled(value);
		}
		this._super( key, value );
	},
	/**
	 * 刷新布局
	**/			
	refresh: function() {
		this._refresh();
	},		
	_refresh: function() {
		this._position();
		$.coral.refreshChild(this.element);
	}
});
;

/*!
 * 组件库4.0.1：按钮
 *
 * 依赖JS文件:
 *	   jquery.coral.core.js
 *	   jquery.coral.component.js
 */
(function() {

var lastActive,
	baseClasses = "coral-button coral-component coral-state-default coral-corner-all",
	//typeClasses = "coral-button-icons-only coral-button-icon-only coral-button-text-icons coral-button-text-icon-primary coral-button-text-icon-secondary coral-button-text-only",
	typeClasses = "coral-button-text-icons coral-button-text-icon-primary coral-button-text-icon-secondary",
	focusClass = "coral-state-focus",
	formResetHandler = function() {
		var form = $( this );
		setTimeout(function() {
			form.find( ":coral-button" ).button( "refresh" );
		}, 1 );
	},
	radioGroup = function( radio ) {
		var name = radio.name,
			form = radio.form,
			radios = $( [] );
		if ( name ) {
			name = name.replace( /'/g, "\\'" );
			if ( form ) {
				radios = $( form ).find( "[name='" + name + "'][type=radio]" );
			} else {
				radios = $( "[name='" + name + "'][type=radio]", radio.ownerDocument )
					.filter(function() {
						return !this.form;
					});
			}
		}
		return radios;
	};

$.component( "coral.button", {
	version: "4.0.1",
	defaultElement: "<button>",
	castProperties : ["dataCustom","shortCut"],
	options: {
		id: null, // 设置默认的id
		name: null,
		cls: null,
		title : false,
		disabled: null,
		text: true,
		label: null,
		icons: {
			primary: null,
			secondary: null
		},
		type: "button",
		width: null,
		countdown: false,
		countdownTime: 3000,
		showCountdown: true,
		// 事件
		onCreate: null,
		onClick: null,
		onDblClick: null,
		onMouseEnter: null,
		onMouseLeave: null
	},
	_create: function() {		
		// 图标样式转换
		this.options.icons = this._icons();
		this.element.addClass("ctrl-init ctrl-init-button");
		this.element.closest( "form" )
			.unbind( "reset" + this.eventNamespace )
			.bind( "reset" + this.eventNamespace, formResetHandler );

		if ( typeof this.options.disabled !== "boolean" ) {
			this.options.disabled = !!this.element.prop( "disabled" );
		} else {
			this.element.prop( "disabled", this.options.disabled );
		}

		this._determineButtonType();
		this.hasTitle = !!this.buttonElement.attr( "title" )||this.options.title;

		var that = this,
			options = this.options,
			toggleButton = this.type === "checkbox" || this.type === "radio",
			activeClass = !toggleButton ? "coral-state-active" : "";
		// js初始化时对id初始化处理
		if (options.id) {
			this.element.attr("id", options.id);
		}
		if (options.name) {
			this.element.attr("name", options.name);
		}
		if ( options.label === null ) {
			options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
		}

		this._hoverable( this.buttonElement );

		this.buttonElement
			.addClass( baseClasses )
			.attr( "role", "button" )
			.bind( "mouseenter" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				if ( this === lastActive ) {
					$( this ).addClass( "coral-state-active" );
				}
				that._trigger("onMouseEnter", null, {"id": this.id, "label": that.options.label});
			}).bind( "mouseleave" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return;
				}
				$( this ).removeClass( activeClass );
				that._trigger("onMouseLeave", null, {"id": this.id, "label": that.options.label});
			})
			.bind( "click" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				} else {					
					if (options.once) {
						that.element.button("disable");
					}
					if (options.countdown) {
						var wait = options.countdownTime/1000;
						var label;
						if ($("body").find(that.element).length !== 0) {
							label = that.element.button("option", "label");
						}
						function time() {
							if ($("body").find(that.element).length === 0) return;// delay方法调用的时候，元素可能已经不存在了。
							if (wait <= 0) {
								that.element.button("enable");
								// 需要延时处理，否则被禁用的对象无法触发事件
									that.element.button("option", "label", label);
							} else {
								setTimeout(function(){
									if ($("body").find(that.element).length === 0) return;
									that.element.button("option", "label", label + "(" + wait + ")");
								}, 0);
								wait--;
								setTimeout(function() {
									time();
								}, 1000);
							}
						}
						if ($(document).find(that.element).length) {
							that.element.button("disable");
							if (options.showCountdown) {
								time();
							} else {
								that._delay(function(){
									that.element.button("enable");
									that.element.button("option", "label", label);
								}, options.countdownTime);
							}
						}
					}
					that._trigger("onClick", null, {"id": this.id, "label": that.options.label});
				}
			})
			.bind( "dblclick" + this.eventNamespace, function( event ) {
				if ( options.disabled ) {
					event.preventDefault();
					event.stopImmediatePropagation();
				} else {
					that._trigger("onDblClick", null, {"id": this.id, "label": that.options.label});
				}
			});
		
		// Can't use _focusable() because the element that receives focus
		// and the element that gets the coral-state-focus class are different
		this._on({
			focus: function() {
				this.buttonElement.addClass( "coral-state-focus" );
			},
			blur: function() {
				this.buttonElement.removeClass( "coral-state-focus" );
			}
		});
		
		if ( toggleButton ) {
			this.element.bind( "change" + this.eventNamespace, function() {
				that.refresh();
			});
		}

		if ( this.type === "checkbox" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
			});
		} else if ( this.type === "radio" ) {
			this.buttonElement.bind( "click" + this.eventNamespace, function() {
				if ( options.disabled ) {
					return false;
				}
				$( this ).addClass( "coral-state-active" );
				that.buttonElement.attr( "aria-pressed", "true" );

				var radio = that.element[ 0 ];
				radioGroup( radio )
					.not( radio )
					.map(function() {
						return $( this ).button( "component" )[ 0 ];
					})
					.removeClass( "coral-state-active" )
					.attr( "aria-pressed", "false" );
			});
		} else {
			this.buttonElement
				.bind( "mousedown" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).addClass( "coral-state-active" );
					lastActive = this;
					that.document.one( "mouseup", function() {
						lastActive = null;
					});
				})
				.bind( "mouseup" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return false;
					}
					$( this ).removeClass( "coral-state-active" );
				})
				.bind( "keydown" + this.eventNamespace, function(event) {
					var keyCode = $.coral.keyCode;
					if ( options.disabled ) {
						return false;
					}
					if ( event.keyCode === keyCode.SPACE || event.keyCode === keyCode.ENTER ) {
						$( this ).addClass( "coral-state-active" );
					}
					if(options.shortCut){
						$.coral.callFunction(options.shortCut,event,this);
					}
					that._trigger("onKeyDown");
				})
				.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
					$( this ).removeClass( "coral-state-active" );
				});

			if ( this.buttonElement.is("a") ) {
				this.buttonElement.keyup(function(event) {
					if ( event.keyCode === $.coral.keyCode.SPACE ) {
						$( this ).click();
					}
				});
			}
		}

		if (options.width) {
			this.buttonElement.outerWidth(options.width);
		}
		this._setOption( "disabled", options.disabled );
		this._resetButton();
	},
	_icons: function() {
		var icons   = this.options.icons,
		    iconArr = null, iconstr   = null, 
		    primary = null, secondary = null;
		if (icons && typeof icons === "string") {
			iconArr = icons.split(",");
			if (iconArr.length > 0) {
				iconstr = $.trim(iconArr[0]);
				secondary = cls("right", iconstr);
				if (null === secondary) {
					primary   = cls("left" , iconstr, true);
				}
			}
			if (iconArr.length > 1) {
				iconstr = $.trim(iconArr[1]);
				primary   = ((primary === null) ? cls("left" , iconstr) : primary);
				if (null === secondary) {
					secondary = cls("right", iconstr, true);
				}
			}
		} else { return icons; }
		// 获取css样式
		function cls (position, iconstr, force/*Boolean 强制返回*/) {
			var arr = iconstr.split(" ");
			if ($.inArray(position, arr) > -1) {
				arr = $.grep(arr, function(cls, i) {
					return cls !== position;
				});
				return arr.join(" ");
			}
			if (force) {
				return iconstr;
			}
			return null;
		}
		
		return {"primary": primary, "secondary": secondary};
	},
	_determineButtonType: function() {
		var ancestor, labelSelector, checked;

		if ( this.element.is("[type=checkbox]") ) {
			this.type = "checkbox";
		} else if ( this.element.is("[type=radio]") ) {
			this.type = "radio";
		} else if ( this.element.is("input") ) {
			this.type = "input";
		} else {
			this.type = "button";
		}

		if ( this.type === "checkbox" || this.type === "radio" ) {
			ancestor = this.element.parents().last();
			labelSelector = "label[for='" + this.element.attr("id") + "']";
			this.buttonElement = ancestor.find( labelSelector );
			if ( !this.buttonElement.length ) {
				ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
				this.buttonElement = ancestor.filter( labelSelector );
				if ( !this.buttonElement.length ) {
					this.buttonElement = ancestor.find( labelSelector );
				}
			}
			this.element.addClass( "coral-helper-hidden-accessible" );

			checked = this.element.is( ":checked" );
			if ( checked ) {
				this.buttonElement.addClass( "coral-state-active" );
			}
			this.buttonElement.prop( "aria-pressed", checked );
		} else {
			this.buttonElement = this.element;
		}
	},

	component: function() {
		return this.buttonElement;
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-helper-hidden-accessible" );
		this.buttonElement
			.removeClass( baseClasses + " ui-state-active " + typeClasses )
			.removeAttr( "role" )
			.removeAttr( "aria-pressed" )
			.html( this.buttonElement.find(".coral-button-text").html() );

		if ( !this.hasTitle ) {
			this.buttonElement.removeAttr( "title" );
		}
	},

	_setOption: function( key, value ) {
		this._super( key, value );
		if ( key === "disabled" ) {
			this.component().toggleClass( "coral-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			if ( value ) {
				if ( this.type === "checkbox" || this.type === "radio" ) {
					this.buttonElement.removeClass( "coral-state-focus" );
				} else {
					this.buttonElement.removeClass( "coral-state-focus coral-state-active" );
				}
			}
			return;
		}
		this._resetButton();
	},
	update: function (label) {
		if (typeof label === "string") {
			this.element.find(".coral-button-text").html(label);
		}
	},
	refresh: function() {
		var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "coral-button-disabled" );

		if ( isDisabled !== this.options.disabled ) {
			this._setOption( "disabled", isDisabled );
		}
		if ( this.type === "radio" ) {
			radioGroup( this.element[0] ).each(function() {
				if ( $( this ).is( ":checked" ) ) {
					$( this ).button( "component" )
						.addClass( "coral-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					$( this ).button( "component" )
						.removeClass( "coral-state-active" )
						.attr( "aria-pressed", "false" );
				}
			});
		} else if ( this.type === "checkbox" ) {
			if ( this.element.is( ":checked" ) ) {
				this.buttonElement
					.addClass( "coral-state-active" )
					.attr( "aria-pressed", "true" );
			} else {
				this.buttonElement
					.removeClass( "coral-state-active" )
					.attr( "aria-pressed", "false" );
			}
		}
	},
	_resetButton: function() {
		if ( this.type === "input" ) {
			if ( this.options.label ) {
				this.element.val( this.options.label );
			}
			return;
		}
		var buttonElement = this.buttonElement.removeClass( typeClasses ),
			buttonText = $( "<span></span>", this.document[0] )
				.addClass( "coral-button-text" )
				.html( this.options.label )
				.appendTo( buttonElement.empty() )
				.text(),
			icons = this.options.icons,
			multipleIcons = icons.primary && icons.secondary,
			buttonClasses = [];

		if ( icons.primary || icons.secondary ) {
			if ( this.options.text ) {
				buttonClasses.push( "coral-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
			}

			if ( icons.primary ) {
				buttonElement.prepend( "<span class='coral-button-icon-primary icon " + icons.primary + "'></span>" );
			}

			if ( icons.secondary ) {
				buttonElement.append( "<span class='coral-button-icon-secondary icon " + icons.secondary + "'></span>" );
			}

			if ( !this.options.text ) {
				buttonClasses.push( multipleIcons ? "coral-button-icons-only" : "coral-button-icon-only" );
				if ( !this.hasTitle ) {
					buttonElement.attr( "title", $.trim( buttonText ) );
				}
			}
		} else {
			buttonClasses.push( "coral-button-text-only" );
		}
		if ( this.hasTitle ) {
			buttonElement.attr( "title", $.trim( buttonText ) );
		}
		buttonElement.addClass( buttonClasses.join( " " ) );
	}
});

$.component( "coral.buttonset", {
	version: "4.0.1",
	options: {
		items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(coral-button)"
	},

	_create: function() {
		this.element.addClass( "coral-buttonset" );
	},

	_init: function() {
		this.refresh();
	},

	_setOption: function( key, value ) {
		if ( key === "disabled" ) {
			this.buttons.button( "option", key, value );
		}
		if ( key === "label" ) {
			this.update(value);
		}
		this._super( key, value );
	},

	refresh: function() {
		var rtl = this.element.css( "direction" ) === "rtl",
			allButtons = this.element.find( this.options.items ),
			existingButtons = allButtons.filter( ":coral-button" );

		// Initialize new buttons
		allButtons.not( ":coral-button" ).button();
		
		// Refresh existing buttons
		existingButtons.button( "refresh" );
		
		this.buttons = allButtons
			.map(function() {
				return $( this ).button( "component" )[ 0 ];
			})
				.removeClass( "coral-corner-all coral-corner-left coral-corner-right" )
				.filter( ":first" )
					.addClass( rtl ? "coral-corner-right" : "coral-corner-left" )
				.end()
				.filter( ":last" )
					.addClass( rtl ? "coral-corner-left" : "coral-corner-right" )
				.end()
			.end();
	},

	_destroy: function() {
		this.element.removeClass( "coral-buttonset" );
		this.buttons
			.map(function() {
				return $( this ).button( "component" )[ 0 ];
			})
				.removeClass( "coral-corner-left coral-corner-right" )
			.end()
			.button( "destroy" );
	}
});

})();
;


$.component( "coral.splitbutton", $.coral.button, {
	version: "4.0.2",
	componentName: "splitbutton",
	castProperties: ["menuOptions", "dataCustom"],
	options: {
		/* default options */
		id: null,
		name: null,
		label: null,
		cls: null,
		icons: {
			primary: null,
			secondary: null
		},
		width: null,
		text: true,
		disabled: false,
		// menu options
		menuOptions: {
			autoDisplay: false,
			popup: true
		},
		data: null, // menu data
		url: null, // menu url
		
		/* default events */
		onCreate: null,
		onClick: null,
		onDblClick: null
	},
	/**
	 * get splitbutton waper box
	 */
	component : function() {
		var that = this;
		
		return this.uiBox;
	},
	/**
	 * get splitbutton border - dom element
	 */
	uiBorder: function() {
		return this.uiBorder;
	},
	/**
	 * get the right button - dom element
	 */
	uiDropdownButton: function() {
		return this.dropdownButton;
	},
	/**
	 * get menu - dom element
	 */
	menu: function() {
		return this.uiMenu;
	},
	/**
	 * begin create a splitbutton
	 */
    _create: function() {
    	var that = this;
    	
    	this._initElements();
    	this._super();
	},	
	/**
	 * initialize relevant doms and attributes
	 */
	_initElements: function() {
		var that = this,
			opts = this.options,
			menuOpts = this.options.menuOptions,
			data = this.options.data,
			url = this.options.url;
    	
    	this.element.addClass("ctrl-init ctrl-init-splitbutton coral-splitbutton-element");
    	this.dropdownButton = $("<button class='coral-splitbutton-dropdownbutton' type='button'></button>").uniqueId();    	
    	this.uiBorder = $("<span class=\"coral-splitbutton-border\"></span>");
    	this.uiBox = $("<span class=\"coral-splitbutton\"></span>");
    	this.uiBox.append(this.uiBorder);
    	this.uiMenu = $("<ul class=\"coral-splitbutton-menu\"></ul>");    	
    	this.uiBox.insertAfter( this.element );
    	this.uiBorder.append( this.element ).append( this.dropdownButton );
    	this.uiMenu.appendTo( $(document.body) );
    	// set width and cls
    	if ( opts.width ) {
			this.uiBox.css({ width:opts.width });
		}
    	if ( typeof this.element.attr("id") != "undefined" ) {
    		this.options.id = this.element.attr("id");
    	} else if ( this.options.id ) {
    		this.element.attr("id", this.options.id);
    	} else {
    		this.options.id = this.element.uniqueId();
    	}
    	if ( typeof this.element.attr("name") != "undefined" ) {
    		this.options.name = this.element.attr("name");
    	} else if ( this.options.name ) {
    		this.element.attr("name", this.options.name);
    	}
    	this.triggerId = this.dropdownButton.attr("id");
    	// listen menu's click event and trigger the default click event
    	this._on( this.element, {
    		buttononclick: function(e, ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
    	this.dropdownButton.button({
    		label: "下拉按钮",
    		text: false,
    		icons: "cui-icon-arrow-down3",
    		onClick: function(e, ui) {
    			if ( !that._getToolbar().length || that._getToolbar().toolbar("option", "clickToDisplay") == 0 ) return;
    			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;

    			var $toolbarComponent = that._getToolbar(true);
    			
    			if ($toolbarComponent.length) {
    				$toolbarComponent.toggleClass("coral-toolbar-click-active");
    			}
    		},
    		onMouseEnter: function(e, ui) {  
    			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;
    					
    			var $toolbarComponent = that._getToolbar(true);

    			if ($toolbarComponent.hasClass("coral-toolbar-click-active")) {
    				if ($(".coral-tieredmenu:visible").length) {
	    				that._hideMenus();			
	    			}
    				that.uiMenu.tieredmenu("show");
    			}
    		}
    	});    	
    	// init menu
    	var dataOrUrl = {};
    	if (null != data) {
    		dataOrUrl["data"] = data;
    	}
    	if (null != url) {
    		dataOrUrl["url"] = url;
    	}
    	menuOpts = $.extend({}, dataOrUrl, opts.menuOptions, {
    		id: this.element.attr("id")+"_tieredmenu",
    		trigger: this.dropdownButton,
    		of: this.element
    	});
    	this.uiMenu.tieredmenu( menuOpts );

    	if ( that._getToolbar().length && that._getToolbar().toolbar("option", "autoDisplay") ) {
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
	    	this.uiMenu.tieredmenu("component").bind("mouseleave", function() {
	    		that._hideMenus();
	    	});
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
    	}
    	// listen menu's click event and trigger the default click event
    	this._on( this.uiMenu, {
    		tieredmenuonclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
	},
	/**
		获取自身所属的工具条元素，如果没有则返回 $()
	**/
	_getToolbar: function(isComponent) {
		var that = this,
			opts = this.options,
			$toolbar = $();

		if ( this.element.hasClass("ctrl-toolbar-element") ) {
			$toolbar = isComponent ? this.element.parents(".coral-toolbar:eq(0)") : this.element.parents(".ctrl-init-toolbar:eq(0)");
		}

		return $toolbar;
	},
	/**
	 *	hide all tieredmenus
	**/
	_hideMenus: function() {
		$(".coral-tieredmenu").hide();
	},
	hideAllMenus: function(){
		$(".coral-tieredmenu").hide();
	},
	showMenu: function(){
		this.uiMenu.tieredmenu("show");
	},
	/**
	 * set options
	**/
	_setOption: function (key, value) {
		if ( key === "id" || key === "name" ) {
			return ;
		}

		var that = this;
		
		if ( key === "disabled" ) {
			this.element.toggleClass("coral-state-disabled", value);
			this.dropdownButton.button("option", "disabled", value);
		}

		this._super (key, value );
	},
	/**
	 * destroy
	**/
	_destroy : function() {		
		this.uiBox.replaceWith( this.element );
		this.uiMenu.parent().remove();
		//this.element.children().remove();
		this.element.removeClass("ctrl-init ctrl-init-splitbutton coral-splitbutton-element");
	}
});
;

/*!
 * 组件库4.0：下拉按钮
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */


$(document).unbind(".coral-menubutton").bind("mousedown.coral-menubutton mousewheel.coral-menubutton",function(e){
	if ( $(e.target).closest("span.coral-menubutton,.coral-menubutton-buttons").length ) return;
	$(".coral-menubutton-buttons").hide();
	
});

$.component( "coral.menubutton", $.coral.button, {
	version: "4.0.2",
	castProperties: ["menuOptions"],
	options: {
		/* default options */
		id: null,
		name: null,
		label: null,
		cls: null,
		icons: {
			primary: null,
			secondary: "cui-icon-arrow-down3"
		},
		width: null,
		text: true,
		disabled: false,
		renderType: "menu", // "menu"（渲染成菜单项，可嵌套）, "button"（渲染成按钮，只有一层）
		// menu options
		menuOptions: {
			autoDisplay: false,
			popup: true
		},
		data: null, // data（menu data 或者自己的data）
		url: null, // url（menu url 或者自己的url）
		method: "get",
		// 定义弹出面板的弹出位置，仅限 renderType 为 "button"
		position: {
			my: "left top",
			at: "left bottom"
		},
		/* default events */
		onCreate: null,
		onClick: null,
		onDblClick: null,
		onLoad: null
	},
	/**
		显示buttons弹出面板，仅限当renderType为"button"时
	 */
	showPanel: function() {
		var that = this,
			opts = this.options;

		var position = $.extend(opts.position, {
			of: this.element
		});
		
		var zIndicies = this.uiButtons.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +this.uiButtons.css( "z-index" ) ) {
			this.uiButtons.css( "z-index", zIndexMax + 1 );
		}

		this.uiButtons.css({
			position: "absolute",
			left: "",
			top: "",
			"max-height":"300px",
			overflow:"auto"
		})
		.position(position)
		.show();
	},
	/**
		隐藏buttons弹出面板，仅限当renderType为"button"时
	 */
	hidePanel: function() {
		this.uiButtons.hide();
	},
	/**
	 * begin create a menubutton
	 */
    _create: function() {    	
    	this._initElements();
    	this._super();
	},	
	/**
		获取自身所属的工具条元素，如果没有则返回 $()
	**/
	_getToolbar: function(isComponent) {
		var that = this,
			opts = this.options,
			$toolbar = $();

		if (this.element.hasClass("ctrl-toolbar-element")) {
			$toolbar = isComponent ? this.element.parents(".coral-toolbar:eq(0)") : this.element.parents(".ctrl-init-toolbar:eq(0)");
		}

		return $toolbar ;
	},
	/**
		hide all tieredmenus
	**/
	_hideMenus: function() {
		$(".coral-tieredmenu").hide();
	},
	hideAllMenus: function(){
		$(".coral-tieredmenu").hide();
	},
	showMenu: function(){
		this.uiMenu.tieredmenu("show");
	},
	/**
	 * initialize relevant doms and attributes
	 */
	_initElements: function() {
		var that = this,
			opts = this.options;
    	
    	this.element.addClass("ctrl-init ctrl-init-menubutton coral-menubutton-element");    	
    	this.uiBorder = $("<span class=\"coral-menubutton-border\"></span>");
    	this.uiBox = $("<span class=\"coral-menubutton\"></span>");
    	this.uiBox.append(this.uiBorder);    	
    	this.uiBox.insertAfter (this.element );
    	this.uiBorder.append (this.element);
    	
    	if (typeof this.element.attr("id") != "undefined") {
    		this.options.id = this.element.attr("id");
    	} else if (this.options.id) {
    		this.element.attr("id", this.options.id);
    	} else {
    		this.options.id = this.element.uniqueId().attr("id");
    	}
    	if (typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name){
    		this.element.attr("name", this.options.name);
    	}

    	this.options.onClick = function (e, ui) {
    		if (opts.renderType == "button") {
				if ( !that.uiButtons.is(":visible") ) {
					that.showPanel();
				} else {
					that.hidePanel();
				}
			}
			if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;

			var $toolbarComponent = that._getToolbar(true);
			
			if ($toolbarComponent.length) {
				$toolbarComponent.toggleClass("coral-toolbar-click-active");
			}
    	},
    	this.options.onMouseEnter = function (e, ui) {
    		if ( !that._getToolbar().length || !that._getToolbar().toolbar("option", "autoDisplay") ) return ;
			if (opts.renderType == "button") return ;
			var $toolbarComponent = that._getToolbar(true);

			if ($toolbarComponent.hasClass("coral-toolbar-click-active")) {
				if ($(".coral-tieredmenu:visible").length) {
    				that._hideMenus();    				
    			}
				that.uiMenu.tieredmenu("show");
			}
    	};
    	
    	// listen menu's click event and trigger the default click event
    	this._on( this.element, {
    		buttononclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});

    	if (opts.renderType == "button") {
    		this.uiButtons = $("<div class='coral-menubutton-buttons coral-front'></div>").appendTo( $(document.body) );
    		this._loadData();
    	} else {
    		this.uiMenu = $("<ul class=\"coral-menubutton-menu\"></ul>").appendTo( $(document.body) );
    		this._renderMenu();
    	}
	},	
	/**
		渲染成menu
	*/
	_renderMenu: function() {
		var that = this,
			opts = this.options,
			menuOpts = this.options.menuOptions,
			data = this.options.data,
			url = this.options.url;

		// init menu
    	var dataOrUrl = {};
    	if (null != data) {
    		dataOrUrl["data"] = data;
    	}
    	if (null != url) {
    		dataOrUrl["url"] = url;
    	}
    	
    	menuOpts = $.extend({}, dataOrUrl, opts.menuOptions, {
    		id: this.element.attr("id")+"_tieredmenu",
    		trigger: this.element,
    		of: this.element
    	});
    	
    	this.uiMenu.tieredmenu(menuOpts);
    	// listen menu's click event and trigger the default click event
    	if (that._getToolbar().length && that._getToolbar().toolbar("option", "autoDisplay")) {
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
	    	this.uiMenu.tieredmenu("component").bind("mouseleave", function() {
	    		that._hideMenus();
	    	});
	    	// 鼠标离开 menu 时，隐藏所有的 同类 menu
    	}
    	this._on( this.uiMenu, {
    		tieredmenuonclick: function(e,ui) {
    			that._trigger("onClick", e, ui);
    		}
    	});
	},
	/**
	 * load data，当renderType为button时
	 */
	_loadData: function () {
		var that = this,
			options = this.options;

		if (options.url) {
			$.ajax({
				type: options.method,
				url: options.url,
				data: {},
				dataType: "json",
				success: function (data) {
					that._initData(data);
				},
				error: function () {
			        $.alert( "Json Format Error!" );
				}
			});
		} else if (options.data) {
			this._initData(options.data);	
		}
	},	
	/**
	 * initialize data，当renderType为button时
	 */
	_initData: function (data) {
		var that = this;
		
		if (typeof data === "object") {
			this._addItems(null, data); // index = null 代表尾部直接添加
		}

		that._trigger("onLoad", null, {});
	},
	_addItems: function (index, data) {
		if (typeof data !== "object") return ;
		
		var that = this,
			items = [],
			len = data.length;
		
		for (var i = 0; i < len; i++) {
			var itemData = data[i];
			
			if ( !$.isEmptyObject( itemData ) ) {
				items.push( that._createButton(itemData) );
			}
		}
		
		this._appendItems(index, items);
		this._initItems(items);
	},	
	_createButton: function (options) {
		return {
			button: $("<button type='button'></button>").addClass("coral-menubutton-button-item"),
			options: options // coral init options
		};
	},
	_appendItems: function (index, items) {
		for (var i in items) {	
			items[i].button.appendTo(this.uiButtons);
		}
	},
	_initItems: function ( items ) {
		var that = this;
		
		for (var i in items) {
			var $el = items[i].button,
				opts = items[i].options;

			$el["button"](opts);
			// listen item's click event and trigger the default click event
			var _opts = {} ;				
			_opts["button" + "onclick"] = function(e,ui) {
    			that._trigger("onClick", e, ui);
    		};
			that._on( $el, _opts);
		}
	},
	/**
		add items
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	add: function ( $elements ) {
		/* */
	},
	/**
		prepend $elements
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	prepend: function($elements) {
		if (!$elements instanceof jQuery) return ;
		var that = this,
			len = $elements.length;
		if ( !($elements instanceof Array) ) {
			$elements = [$elements];
		}
		for(var i = len-1; i > -1; i--) {
			var $element = $elements[i];
			$element.css({
				"margin": "",
				"left": "",
				"right": ""
			})
			.removeClass("coral-menubutton-button-item")
			.addClass("coral-menubutton-button-item")
			.prependTo(that.uiButtons);
		}
	},
	/**
		append $elements
		@param $elements {jquery dom elements} : 要添加的 dom jquery 对象集合
	**/
	append: function($elements) {
		if (!$elements instanceof jQuery) return ;
		var that = this,
			len = $elements.length;
		if ( !($elements instanceof Array) ) {
			$elements = [$elements];
		}
		for(var i = len-1; i > -1; i--) {
			var $element = $elements[i];
			$element.css({
				"margin": "",
				"left": "",
				"right": ""
			})
			.removeClass("coral-menubutton-button-item")
			.addClass("coral-menubutton-button-item")
			.prependTo(that.uiButtons);
		}
	},
	pop: function () {
		var that = this,
			opts = this.options;

		if ( "button" != opts.renderType ) return $();

		var $elementPop = this.uiButtons.find(".coral-menubutton-button-item:eq(0)");

		if ($elementPop.length) {
			return $elementPop.removeClass("coral-menubutton-button-item");
		} else {
			return $();
		}
	},
	/**
	 * 返回 uiBox 元素
	 */
	component : function() {
		/*var that = this;*/
		
		return this.uiBox;
	},
	/**
	 * 返回 uiBorder 元素
	 */
	border: function() {
		/*var that = this;*/

		return this.uiBorder;
	},
	/**
		返回 buttons 面板，仅限 renderType 为 "button" 时
	**/
	buttons: function() {
		return this.uiButtons;
	},
	/**
		返回 buttons 面板下的所有子 $dom
	**/
	buttonElements: function() {
		return this.uiButtons.children();
	},
	/**
	 * 返回 mainButton 元素
	 */
	/*button: function() {
		return this.mainButton;
	},*/
	/**
	 *  返回 uiMenu，仅限renderType 为 "menu" 时
	 */
	menu: function() {
		return this.uiMenu;
	},
	/**
	 * !-- extend api: 绑定事件
	 */
	_bindEvents: function() {
		// add code here ...
	},
	/**
	 * 设置属性
	 */
	_setOption: function (key, value) {
		var that = this;
		
		if (key === "id" || key === "name") {
			return ;
		}
		if (key === "disabled") {
			this.element.toggleClass("coral-state-disabled", value);
		}

		this._super(key, value);
	},
	/**
	 * 销毁组件
	 */
	_destroy : function() {
		var opts = this.options;
		
		this.uiBox.replaceWith(this.element);

		if (opts.renderType == "buttons") {
			this.uiButtons.remove();
		} else {
			this.uiMenu.parent().remove();
		}

		this.element.children().remove();
		this.element.removeClass("ctrl-init ctrl-init-menubutton coral-menubutton-element");
	}
});
;


$.component( "coral.treebutton", $.coral.button, {
	version: $.coral.version,
	castProperties: ["treeOptions"],
	options: {
		/* default options */
		id: null,
		name: null,
		label: null,
		cls: null,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		width: null,
		text: true,
		disabled: false,
		multiple: false,
		//position:
		// tree options
		treeOptions: {
			id:null,
			name:null,
			data:null,
			showLine:false,
			showIcon:false,
			checkable:true
		},
		/* default events */
		onCreate: null,
		onClick: null,
		onCheck:null,
		onSelect:null
	},
	/**
	 * get tree - dom element
	 */
	tree: function() {
		return this.uiTree;
	},
	/**
	 * begin create a treebutton
	 */
    _create: function() {
    	var that = this;
    	this._super();
    	this._initElements();
	},	
	_initElements: function() {
		var that = this,
			opts = this.options,
			treeOpts = this.options.treeOptions;
    	
    	this.element.addClass("coral-treebutton-element").uniqueId();
    	
    	this.uiTree = $("<ul>")
    		.attr( "id", $(this.element).attr('id')+"_tree" )
    		.addClass( "coral-treebutton-panel coral-front" )
    		.appendTo ( "body" );
    	// init buttons
    	/*this.element.button({
    		label: opts.label,
    		icons: opts.icons,
    		text: opts.text,
    		width: opts.width,
    		disabled: opts.disabled
    	});*/
    	// listen tree's click event and trigger the default click event
    	this.element.on( "click", function( e, ui ) {
    		that._showtree();
    	});
    	
    	this._on( this.document, {
    		mousedown: function( event ) {
				if(event.isDefaultPrevented())return;
				that._hidetree();
			}
		});
    	this.uiTree.unbind().bind("mousedown", function(e){
			e.preventDefault();
    	});
    	// listen tree's click event and trigger the default click event
    	var setting = {
			checkable : this.options.multiple			
    	};
    	// init 
    	treeOpts = $.extend({},  setting, opts.treeOptions, {
    		id: $(this.element).attr('id')+"_tree"
    	});
    	
    	this.uiTree.tree(treeOpts);
	},
	_bindEvents: function() {
		
	},
	/**
	 * set options
	 */
	_setOption: function (key, value) {
		var that = this;
		
		/*if (key === "id" || key === "name") {
			return;
		}
		if (key == "disabled") {
			this.element.button("option", "disabled", value);
		}*/
		this._super (key, value );
	},
	_showtree: function( items ) {
		var ul = this.uiTree;
		ul.show();
		var zIndicies = ul.siblings( ".coral-front:visible" ).map(function() {
			return +$( this ).css( "z-index" );
		}).get(),
		zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +ul.css( "z-index" ) ) {
			ul.css( "z-index", zIndexMax + 1 );
		}
		
		ul.position( $.extend({
			of: this.element
		}, this.options.position ) );
	},
	_hidetree: function(){
		this.uiTree.hide();	
	},
	disabledNode: function(id){
		var nodes = this.uiTree.tree("getNodesByParam", "id", id);
		for (var i=0, l=nodes.length; i < l; i++) {
			this.uiTree.tree("setChkDisabled", nodes[0], true);
		}
	},
	undisabledNode:function(id){
		var nodes = this.uiTree.tree("getNodesByParam", "id", id);
		for (var i=0, l=nodes.length; i < l; i++) {
			this.uiTree.tree("setChkDisabled", nodes[0], false);
		}
	},
	/**
	 * destroy
	 */
	_destroy : function() {
		this.uiTree.remove();
		this.element.removeClass("ctrl-init ctrl-init-treebutton coral-treebutton-element");
	}
});
;


var _timer = false, _resizable = true;
$(window).unbind(".coral-panel").bind("resize.coral-panel",	function() {
	if (!_resizable) {
		return;
	}
	if (_timer !== false) {
		clearTimeout(_timer);
	}
	_timer = setTimeout(function() {
		_resizable = false;
		$.coral.refreshAllComponent("body");
		_timer = false;
		_resizable = true;
	}, 200);
});

$.component( "coral.panel", {
	version: "4.0.2",
	options: {
		id: null,
		title: null,
		iconCls: null, 
		width: "auto", 
		height: "auto", 
		left:null, 
		top: null, 
		cls: null,
		headerCls: null,
		bodyCls: null,
		style: {},
		href:  null,
		cache: true,
		fit:   false,
		border: true,
		doSize: true,
		showHeader: true,
		showTitle: true,
		content: null,
		collapsible: false,
		showNavButton:false,
		minimizable: false,
		maximizable: false,
		closable:  false,
		collapsed: false,
		minimized: false,
		maximized: false,
		closed:false,
		tools: null,
		url:  null,
		loadtext:"加载中，请耐心等候...",
		loadingMessage:"Loading...",
		extractor: function(content) {
			var reg = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
			var match = reg.exec(content);
			if(match) {
				return match[1];
			} else {
				return content;
			}
		},
		// 事件
		beforeOpen: $.noop,
		beforeClose: $.noop,
		beforeDestroy: $.noop,
		beforeCollapse: $.noop,
		beforeExpand: $.noop,
		
		onLoad: $.noop, 
		onOpen: $.noop,
		onClose: $.noop,
		onDestroy: $.noop,
		onResize: $.noop, /*参数(envent, {width, height})*/
		onMove: $.noop,   /*参数(envent, {left, top})*/
		onMaximize: $.noop,
		onRestore: $.noop,
		onMinimize: $.noop,
		onCollapse: $.noop,
		onExpand: $.noop
	},
	
	_create: function() {

		this.originalTitle = this.element.attr("title");
		this.element.removeAttr("title").addClass("ctrl-init ctrl-init-panel");
		this._createWrapper();
		this.isLoaded = false;
		
		this.element.appendTo(this.uiPanel);
		this._addHeader();
		this._setBorder();
		if (this.options.doSize == true) {
			this.uiPanel.css("display", "block");
			this.resizePanel();
		}
		if (this.options.closed == true || this.options.minimized == true) {
			this.close();
		} else {
			this.open();
		}
	},
	
	_createWrapper: function() {
		var that = this;
		this.element.addClass("coral-panel-body");
		this.uiPanel = $("<div class=\"coral-panel\"></div>").insertBefore(this.element);
	},
	
	_fit: function(fit) {
		return $.coral.panel.fit(this.uiPanel, fit);
	},
	
	resizePanel: function(resizeOpts){
		var opts  = this.options,
		    panel = this.uiPanel,
		    header = panel.children("div.coral-panel-header"),
		    body   = panel.children("div.coral-panel-body");
		if (resizeOpts) {
			$.extend(opts, {
				width: resizeOpts.width,
				height: resizeOpts.height,
				left: resizeOpts.left,
				top: resizeOpts.top
			});
		}
		opts.fit ? $.extend(opts, this._fit()) : this._fit(false);
		panel.css({
			left : opts.left,
			top : opts.top
		});
		if (!isNaN(opts.width)) {
			panel.outerWidth(opts.width);
		} else {
			panel.width("auto");
		}
		header.add(body).outerWidth(panel.width());
		if (!isNaN(opts.height)) {
			panel.outerHeight(opts.height);
			body.outerHeight(panel.height() - header.outerHeight());
		} else {
			body.height("auto");
			panel.css("height", "");
		}
		this._doResize();
		if (this.toolbarEl) {
			this.toolbarEl.toolbar("refresh");
		}
		this._trigger("onResize", null, { width: opts.width, height: opts.height });
	},
	
	_setBorder: function() {
		var opts   = this.options,
		    panel  = this.uiPanel,
		    header = this.header(),
		    body   = this.body();
		if (!$.isEmptyObject(opts.style)) {
			panel.css(opts.style);
		}
		if (opts.border) {
			header.removeClass("coral-panel-header-noborder");
			body.removeClass("coral-panel-body-noborder");
		} else {
			header.addClass("coral-panel-header-noborder");
			body.addClass("coral-panel-body-noborder");
		}
		header.addClass(opts.headerCls);
		body.addClass(opts.bodyCls);
		/*if (opts.id) {
			$(this.element).attr("id", opts.id);
		} else {
			$(this.element).attr("id", "");
		}//*/
	},
	
	_addHeader: function() {
		var opts  = this.options,
		    panel = this.uiPanel,
		    that  = this;
		if (opts.tools && typeof opts.tools == "string") {
			panel.find(">div.coral-panel-header>div.coral-panel-tool .coral-panel-tool-a")
				.appendTo(opts.tools);
		}
		panel.children("div.coral-panel-header").remove();
		if (opts.title && opts.showHeader) {
			var header = $("<div class=\"coral-panel-header\"></div>").prependTo(panel);
			this.toolbarEl = $("<div></div>");
			this.toolbarEl.appendTo(header);
			var toolData = [];
			var _title = {
					type: "html",
					content: opts.title
				},
				_collapse = {
					type: "button",
					icons: "cui-icon-arrow-up3 coral-panel-tool-collapse",
					label: "collapse",
					text: false,
					onClick: function() {
						if (opts.collapsed === true) {
							that.expand(true);
						} else {
							that.collapse(true);
						}
					}
				},
				_minimize = {
					type: "button",
					icons: "cui-icon-minus3 coral-panel-tool-min",
					label: "minimize",
					text: false,
					onClick: function() {
						that.minimize();
					}
				},
				_maximize = {
					type: "button",
					icons: "cui-icon-enlarge7 coral-panel-tool-max",
					label: "maximize",
					text: false,
					onClick: function() {
						if (opts.maximized === true) {
							that.restore();
						} else {
							that.maximize();
						}
					}
				},
				_close = {
					type: "button",
					icons: "cui-icon-cross2 coral-panel-tool-close",
					label: "close",
					text: false,
					onClick: function() {
						that.close();
					}
				};
			var toolOpts = {
					data: toolData
				};
			if (opts.toolbarOptions) {
				$.each(opts.toolbarOptions.data, function(i, value){
					if (value === "title") {
						opts.toolbarOptions.data[i] = _title;
					}
					if (value === "collapse") {
						opts.toolbarOptions.data[i] = _collapse;
					}
					if (value === "minimize") {
						opts.toolbarOptions.data[i] = _minimize;
					}
					if (value === "maximize") {
						opts.toolbarOptions.data[i] = _maximize;
					}
					if (value === "close") {
						opts.toolbarOptions.data[i] = _close;
					}
				});
				$.extend(true, toolOpts, opts.toolbarOptions);
			} else {
				if (opts.showTitle) {
					toolData.push(_title);
				}
				toolData.push("->");
				if ( opts.collapsible ) {
					toolData.push(_collapse);
				}
				if ( opts.minimizable ) {
					toolData.push(_minimize);
				}
				if ( opts.maximizable ) {
					toolData.push(_maximize);
				}
				if ( opts.closable ) {
					toolData.push(_close);
				}
			}
			this.toolbarEl.toolbar(toolOpts);
			panel.children("div.coral-panel-body").removeClass("coral-panel-body-noheader");
		} else {
			panel.children("div.coral-panel-body").addClass("coral-panel-body-noheader");
		}
	},
	toolbar: function(){
		return this.toolbarEl;
	},
	_loadData: function() {
		var opts = this.options,
		    that = this;
		if ( opts.url ) {
			if ( !that.isLoaded || !opts.cache ) {
				that.isLoaded = false;
				that.element.html("");
				$(this.element).loading({
					position:   "inside",
					text:       this.options.loadtext
				});
				// 如果重复刷新panel，需要将上一次的请求终止。
				if ( this.xhr ){
					this.xhr.abort();
				}
				this.xhr = $.ajax(this._ajaxSettings( ));
				this.xhr
					.success(function( content ) {
						that.setContent( opts.extractor.call( that.element, content ) );
						that._trigger( "onLoad", null, arguments );
						that.isLoaded = true;
					}).complete(function( jqXHR, status ) {
						if ( jqXHR === that.xhr ) {
						    that.xhr = null;
						}
					});
			}
		} else {
			if (opts.content) {
				if (!that.isLoaded) {
					that.setContent(opts.content);
					that.isLoaded = true;
				}
			}
		}
	},
	_ajaxSettings:function(){
		var opts = this.options,
	        that = this;
		return {
			url : opts.url,
			cache : false,
			dataType : "html"
		};
	},
	_doResize: function() {
		$.coral.refreshChild(this.element);
	},
	_destroy: function(forceDestroy) {
		if (forceDestroy != true) {
			if (this._trigger("beforeDestroy") == false) {
				return;
			}
		}
		if (this.originalTitle) {
			this.element.attr("title", this.originalTitle);
		}
		this.element.removeClass("coral-panel-body").detach();
		this.element.insertAfter(this.component());
		this.component().remove();
		this._trigger("onDestroy");
	},
	component: function() {
		return this.uiPanel;
	},
	panel: function() {
		return this.uiPanel;
	},
	getOptions: function() {
		return this.options;
	},
	header: function() {
		return this.uiPanel.find(">div.coral-panel-header");
	},
	body: function() {
		return this.uiPanel.find(">div.coral-panel-body");
	},
	setTitle: function(title) {
		this.options.title = title;
		this.header().find("div.coral-panel-title").html(title);
	},
	// 设置内容
	setContent: function(content) {
		this.element.children().remove();
		this.element.html(content);
		if ($.parser) {
			$.parser.parse(this.element);
		}
	},
	open: function(forceOpen) {
		var opts    = this.options,
		    restore = null;
		if (forceOpen != true) {
			if (this._trigger("beforeOpen", null) === false) {
				return;
			}
		}
		this.uiPanel.show();
		opts.closed = false;
		opts.minimized = false;
		restore = this.uiPanel
			.children(".coral-panel-header")
			.find("a.coral-panel-tool-restore");
		if (restore.length) {
			opts.maximized = true;
		}
		this._trigger("onOpen");
		if (opts.maximized === true) {
			opts.maximized = false;
			this.maximize();
		}
		if (opts.collapsed === true) {
			opts.collapsed = false;
			this.collapse();
		}
		if (!opts.collapsed) {
			this._loadData();
			this._doResize();
		}
	},
	close: function(forceClose) {
		var opts = this.options;
		var panel = this.uiPanel;
		if (forceClose != true) {
			if (this._trigger("beforeClose", null) == false) {
				return;
			}
		}
		this._fit(false);
		panel.hide();
		opts.closed = true;
		this._trigger("onClose");
	},
	refresh: function(url) {
		this.isLoaded = false;
		if (url) {
			this.options.url = url;
		}
		this._loadData();
	},
	reload: function(url) {
		this.refresh(url);	
	},
	resize: function(options) {
		this.resizePanel(options);
	},
	move: function(options) {
		var opts = this.options;
		if (options) {
			if (options.left != null) {
				opts.left = options.left;
			}
			if (options.top != null) {
				opts.top = options.top;
			}
		}
		this.uiPanel.css({
			left : opts.left,
			top : opts.top
		});
		this._trigger("onMove", null, { left: opts.left, top: opts.top });
	},
	maximize: function() {
		var opts = this.options;
		if (opts.maximized === true) {
			return;
		}
		this.uiPanel.children("div.coral-panel-header")
		            .find("a.coral-panel-tool-max")
		            .addClass("coral-panel-tool-restore")
		            .addClass("cui-icon-shrink7")
		            .removeClass("cui-icon-enlarge7");
		if (!this.original) {
			this.original = {
				width : opts.width,
				height : opts.height,
				left : opts.left,
				top : opts.top,
				fit : opts.fit
			};
		}
		opts.left = 0;
		opts.top = 0;
		opts.fit = true;
		this.resizePanel();
		opts.minimized = false;
		opts.maximized = true;
		this._trigger("onMaximize");
	},
	minimize : function() {
		this._fit(false);
		this.uiPanel.hide();
		this.options.minimized = true;
		this.options.maximized = false;
		this._trigger("onMinimize");
	},
	restore: function() {
		if (this.options.maximized === false) {
			return;
		}
		this.uiPanel.show();
		this.uiPanel.children("div.coral-panel-header")
		            .find("a.coral-panel-tool-max")
		            .removeClass("coral-panel-tool-restore")
				    .addClass("cui-icon-enlarge7")
				    .removeClass("cui-icon-shrink7");
		$.extend(this.options, this.original);
		this.resizePanel();
		this.options.minimized = false;
		this.options.maximized = false;
		this.original = null;
		this._trigger("onRestore");
	},
	collapse: function(animate) {
		var opts = this.options,
		    body = this.body(),
		    that = this;
		if (opts.collapsed === true) {
			return;
		}
		body.stop(true, true);
		if (that._trigger("beforeCollapse") === false) {
			return;
		}
		this.header().find("a.coral-panel-tool-collapse").addClass("coral-panel-tool-expand");
		//this.header().find("a.cui-icon-arrow-down3").removeClass("cui-icon-arrow-down3").addClass("cui-icon-arrow-up3");
		if (animate === true) {
			body.slideUp("normal", function() {
				opts.collapsed = true;
				that._trigger("onCollapse");
			});
		} else {
			body.hide();
			opts.collapsed = true;
			that._trigger("onCollapse");
		}
	},
	expand: function(animate) {
		var opts = this.options,
		    body = this.body(),
		    that = this;
		if (opts.collapsed === false) {
			return;
		}
		body.stop(true, true);
		if (that._trigger("beforeExpand") === false) {
			return;
		}
		this.header().find("a.coral-panel-tool-collapse").removeClass("coral-panel-tool-expand");
		//$(this.header().find("a.cui-icon-arrow-up3")).removeClass("cui-icon-arrow-up3").addClass("cui-icon-arrow-down3");
		if (animate === true) {
			body.slideDown("normal", function() {
				opts.collapsed = false;
				that._trigger("onExpand");
				that._loadData();
				that._doResize();
			});
		} else {
			body.show();
			opts.collapsed = false;
			that._trigger("onExpand");
			that._loadData();
			that._doResize();
		}
	}
});

/**
 * 面板自适应
 */
$.coral.panel.fit = function ($ele, fit) {
	fit = (fit == undefined ? true : fit);
	var parent = $ele.parent()[0];
	parent = $(parent);
	if (fit) {
		if (!parent.hasClass("coral-noscroll")) {
			parent.addClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").addClass("coral-panel-fit");
			}
		}
	} else {
		if (parent.hasClass("coral-noscroll")) {
			parent.removeClass("coral-noscroll");
			if (parent.attr("tagName") == "BODY") {
				$("html").removeClass("coral-panel-fit");
			}
		}
	}
	return {
		width: parent.width(),
		height: parent.height()
	};
};
;

/**
 *	Coral 4.0: textbox
 *
 *	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *		jquery.validate.js
 *
 */
$.component ( "coral.colorpicker", $.coral.inputbase, {
	version: $.coral.version,
	ids : {},
	charMin : 65,
	tp1 : '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div>'+
		'<div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color">'+
	    '</div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field">'+
		'<input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field">'+
		'<input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" />'+
		'<span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div>'+
		'<div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div>'+
		'<div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div>'+
		'<div class="colorpicker_submit"></div><div class="custom_color_area"></div></div>',
	castProperties : ["customColorArray"],
	options: {		
		readonlyInput:false,
		readonly : false,
		isLabel: false,
		disable: false,
		isShow : false,
		showBgcolor : true,
		showClose: false,
		onShow: null,
		onBeforeShow: null,
		onHide: null,
		customColorArray:["dddddd","eeeeee","cccccc","eb1139","FF0000","700000","585858","33FF00"
		                  ,"330000","009900","990000","FFFF66","FF3366","6666FF","0000CC","00FFFF"
		                  ,"FF66CC","FF0099","999999","ffffff","33FFFF","ffffff","ffffff","ffffff","ffffff","ffffff"],
		onChange: null,
		onSubmit: null,
		color: 'ff0000',
		livePreview: true,
		flat: false 
	},

	fillRGBFields: function  (hsb, cal) {
		var rgb = this.HSBToRGB(hsb);
		$(cal).data('colorpicker').fields
			.eq(1).val(rgb.r).end()
			.eq(2).val(rgb.g).end()
			.eq(3).val(rgb.b).end();
	},
	
	fillHSBFields: function  (hsb, cal) {
		$(cal).data('colorpicker').fields
		.eq(4).val(hsb.h).end()
		.eq(5).val(hsb.s).end()
		.eq(6).val(hsb.b).end();
    },

    fillHexFields: function (hsb, cal) {
		$(cal).data('colorpicker').fields
		.eq(0).val(this.HSBToHex(hsb)).end();
    },
	component: function () {
		return this.textboxWrapper;
	},
	_create: function() {
		var that = this,
		    opts = this.options;
		if (typeof opts.color == 'string') {
			opts.color = that.HexToHSB(opts.color);
		} else if (opts.color.r != undefined && opts.color.g != undefined && opts.color.b != undefined) {
			opts.color = that.RGBToHSB(opts.color);
		} else if (opts.color.h != undefined && opts.color.s != undefined && opts.color.b != undefined) {
			opts.color = that.fixHSB(opts.color);
		} else {
			return this;
		}
		var options = $.extend({}, opts);
		options.origColor = opts.color;
		var id = 'collorpicker_' + parseInt(Math.random() * 1000);
		$(this.element).data('colorpickerId', id);
		this.cal = $(this.tp1).attr('id', id);
		if (options.flat) {
			this.cal.appendTo(this.element).show();
		} else {
			this.cal.appendTo(document.body);
		}
		this._initElement();
		options.fields = this.cal.find("input");
		options.selector = this.cal.find('div.colorpicker_color');
		options.selectorIndic = options.selector.find('div div');
		options.el = this.element;
		options.hue = this.cal.find('div.colorpicker_hue div');
		options.newColor = this.cal.find('div.colorpicker_new_color');
		options.currentColor = this.cal.find('div.colorpicker_current_color');
		this.cal.data('colorpicker', options);
		this._bindEvents();
		this.fillRGBFields(options.color, this.cal.get(0));
		this.fillHSBFields(options.color, this.cal.get(0));
		this.fillHexFields(options.color, this.cal.get(0));
		this.setHue(options.color, this.cal.get(0));
		this.setSelector(options.color, this.cal.get(0));
		this.setCurrentColor(options.color, this.cal.get(0));
		this.setNewColor(options.color, this.cal.get(0));
		if (options.flat) {
			this.cal.css({
				position: 'relative',
				display: 'block'
			});
		}

		that._trigger( "onCreate", null, [] );
	},
	
	_bindEvents:function(){
		var that = this,
		    opts = this.options;
		this._on(this.cal.find("input"),{
			"keyup": function(ev){
				var pressedKey = ev.charCode || ev.keyCode || -1,
				    target = $(ev.target).closest("input")[0];
				if ((pressedKey > this.charMin && pressedKey <= 90) || pressedKey == 32) {
					return false;
				}
				if (this.cal.data('colorpicker').livePreview === true) {
					this._change(target);
				}
			},
			"change": function(ev){
				var target = $(ev.target).closest("input")[0];
				this._change(target);
			},
			"blur": function(e){
				this.cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
			},
			"focus": function(e){
				var target = $(e.target).closest("input")[0];
				    charMin = target.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
				$(target).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
				$(target).parent().addClass('colorpicker_focus');
			}
		})
		this._on(this.cal.find("span"),{
			"mousedown" : function(ev){
				var target = $(e.target).closest("span")[0];
				var field = $(target).parent().find('input').focus();
				var current = {
					el: $(target).parent().addClass('colorpicker_slider'),
					max: target.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (target.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
					y: ev.pageY,
					field: field,
					that : this,
					val: parseInt(field.val(), 10),
					preview: $(this).parent().parent().data('colorpicker').livePreview					
				};
				$(document).bind('mouseup', current, this._upIncrement);
				$(document).bind('mousemove', current, this._moveIncrement);
			},
		})
		this._on(this.cal.find('>div.colorpicker_current_color'),{
			"click": function(ev){
				var cal=this.cal;
				var col = this.cal.data('colorpicker').origColor;
				cal.data('colorpicker').color = col;
				this.fillRGBFields(col, cal.get(0));
				this.fillHexFields(col, cal.get(0));
				this.fillHSBFields(col, cal.get(0));
				this.setSelector(col, cal.get(0));
				this.setHue(col, cal.get(0));
				this.setNewColor(col, cal.get(0));
			},
		})
		this._on(this.cal.find('div.colorpicker_color'),{
			"mousedown": function(ev){
				var that = this,
				    target=$(ev.target).closest("div.colorpicker_color");
				var current = {
						that: this,
						cal: target.parent(),
						pos: target.offset()
					};
					current.preview = current.cal.data('colorpicker').livePreview;
					$(document).bind('mouseup', current, this._upSelector);
					$(document).bind('mousemove', current, this._moveSelector);
					
			},
			"dblclick" : function(ev){
				var that = this,
				    target=$(ev.target).closest("div.colorpicker_color");
				var current = {
						that: this,
						cal: target.parent(),
						pos: target.offset()
					};
				current.preview = current.cal.data('colorpicker').livePreview;
				ev.data = current;
				this._moveSelector(ev);
				var cal = this.cal;
				var col = cal.data('colorpicker').color;
				cal.data('colorpicker').origColor = col;
				this.setCurrentColor(col, cal.get(0));
				this.setValue(this.HSBToHex(col));
				if (this.options.showBgcolor){
					this.element.css({
						"background-color":"#"+this.HSBToHex(col)
					})
				}
				this._trigger("onSubmit", this.HSBToHex(col), this.HSBToRGB(col), cal.data('colorpicker').el);
				this.cal.hide();
				this.options.isShow = false;
			}
		})
		this._on(this.cal.find('div.colorpicker_hue'),{
			"mousedown" : function(ev){
				var that = this,
			        target=$(ev.target).closest("div.colorpicker_hue");  
				var current = {
						that:that,
						cal: target.parent(),
						y: target.offset().top
					};
					current.preview = current.cal.data('colorpicker').livePreview;
					$(document).bind('mouseup', current, that._upHue);
					$(document).bind('mousemove', current, that._moveHue);
			}
		})
		this._on(this.cal.find('div.colorpicker_submit'),{
			"mouseenter": function(ev){
				var target = $(ev.target).closest("div.colorpicker_submit");
				target.addClass('colorpicker_focus');
			},
			"mouseleave": function(ev) {
				var target = $(ev.target).closest("div.colorpicker_submit");
				target.removeClass("colorpicker_focus");
			},
			"click": function(ev){
				var cal = this.cal;
				var col = cal.data('colorpicker').color;
				cal.data('colorpicker').origColor = col;
				this.setCurrentColor(col, cal.get(0));
				this.setValue(this.HSBToHex(col));
				if (this.options.showBgcolor){
					this.element.css({
						"background-color":"#"+this.HSBToHex(col)
					})
				}
				this._trigger("onSubmit", this.HSBToHex(col), this.HSBToRGB(col), cal.data('colorpicker').el);
				this.cal.hide();
				this.options.isShow = false;
			}
		})
		this._on({
			"click": function(ev){
				this.component().addClass("coral-state-focus");
                this._show(ev);
			},
			"blur": function(ev) {
				this.component().removeClass("coral-state-focus");
				this.setValue(this.element.val());
			},
			"keyup": function(ev){
				var value = this.element.val();
				this.cal.find(".colorpicker_new_color").css({
					"background-color": "#"+value
				})
			}
		})
		this._on(this.cal.find(".color-div"),{
			"click": function(ev){
				var target = $(ev.target).closest(".color-div"),
				    color = target.attr("title");
				this.cal.find(".custom_show_area").css({
					"background-color": color
				}).attr("title",color);
			}
		}) 
		this._on(this.cal.find(".custom_show_area"),{
			"click": function(ev){
				var value = this.cal.find(".custom_show_area").attr("title").slice(1)
				this.setValue(value);
				if (this.options.showBgcolor){
					this.element.css({
						"background-color":"#"+value
					})
				}
				this.cal.hide()
                this.options.isShow = false;
			}
		}) 
	},
	_initElement: function () {
		var that = this,
			options = that.options;	
		this.className = "coral-textbox-default coral-validation-colorpicker tabbable "+this.element[0].className;
		this.compClass = "coral-colorpicker coral-textbox";
		this.hiddenClass = "";
		this.classBorder = "";
		if ( "hidden" == this.element.attr("type") ) {
			this.compClass = this.compClass + " hide";
		}
		this.createInput();
		this.textboxWrapper = $(this.textboxWrapper);
		this.elementBorder = $(this.elementBorder);
		this.textboxHidden = $(this.textboxWrapper[0].lastChild);
		this.element = $(this.textboxInput);
		var customShow = $("<div class='custom_show_area' title='#ffffff'></div>");
		customShow.appendTo(".custom_color_area");
		$.each(options.customColorArray,function(index,item){
			var innerColor="#"+item.toLowerCase();
			var colorDiv = $("<div class='color-div' title='"+innerColor+"'></div>");
			colorDiv.appendTo(".custom_color_area").css({
				"background-color" : innerColor,
				position : "absolute",
				width : "16px",
				height : "16px"
			})
			if (index<=12){
				colorDiv.css({
					left : 18+index*19+"px",
					top : "10px"
				})
			}else{
				colorDiv.css({
					left : 18+(index-13)*19+"px",
					top : "36px"
				})
			}
		})
		if ($.trim(this.element.val()) !== "") {
    		this.options.value = this.element.val();
    	} else if (this.options.value) {
    		this.element.val(this.options.value);
    	}
		if (options.width) {				
			this.textboxWrapper.css( "width", options.width );
		}	
		if (options.height) {				
			this._setOption("height", options.height );
		}
		if (options.readonlyInput) {
			this._setReadonlyInput();
		}
		if (options.readonly) {
			this._setReadonly();
		}

		if ( typeof options.isLabel == "boolean" && options.isLabel ) {
			this._setReadonly();
			this.options.readonly = true;
			this.component().addClass( "coral-isLabel" );
			return ;
		} 
		if ( typeof options.disabled === "boolean" && options.disabled  ) {
			this._setOption( "disabled", options.disabled );
		}
		// clear button
		if ( this.options.showClose ) {
			this.clearIcon.css( "right", this.rightPos ? this.rightPos: 0);
		}
		this.element.attr( "placeholder", options.placeholder );
		if ( options.placeholder && "" === this.element.val() ) {
			this._showPlaceholder();
		}
//		this._updateTitle();
	},
	
	setValue: function (value) {
		value = value === null || typeof(value) === "undefined" ? "":value;
		this.textboxHidden.val(value);
		this.element.val(value)
		this.options.value = value;
		this.previous = value;

		if ( value !== "" ) {
			this._hidePlaceholder();
		}
	},
	
	getValue: function () {
		return this.textboxHidden.val();
	},
	
	_hidePlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		
		var that  = this;

		that.textboxWrapper.find( ".coral-textbox-placeholder-label" ).remove();
	},
	
	_showPlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		var that = this,
			$placeholder = $("<span class='coral-textbox-placeholder-label'>" + that.options.placeholder  + "</span>");
		$(that.element).after( $placeholder );
	},
	
	_setReadonlyInput: function() {
		if(typeof this.element.attr("readonly") != "undefined"){
			this.options.readonlyInput = this.element.prop("readonly");
		} else if (this.options.readonlyInput){
			this.element.prop("readonly", this.options.readonlyInput);
		}
		if (this.element.prop("readonly")) {
			this.component().addClass("coral-readonlyInput");
		}
	},
	
	_setReadonly: function() {
		this.options.readonlyInput = true;
		this._setReadonlyInput();
		this.component().removeClass("coral-readonlyInput").addClass("coral-readonly");
		this.element.removeClass("tabbable");
	},
	
	_change : function (ev,bool) {
		var cal = $(ev).parent().parent(), col;
		if (ev.parentNode.className.indexOf('_hex') > 0) {
			cal.data('colorpicker').color = col = this.HexToHSB(this.fixHex($(ev).val()));
		} else if (ev.parentNode.className.indexOf('_hsb') > 0) {
			cal.data('colorpicker').color = col = this.fixHSB({
				h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
				s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
				b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
			});
		} else {
			cal.data('colorpicker').color = col = this.RGBToHSB(this.fixRGB({
				r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
				g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
				b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
			}));
		}
		if (bool) {
			this.fillRGBFields(col, cal.get(0));
			this.fillHexFields(col, cal.get(0));
			this.fillHSBFields(col, cal.get(0));
		}
		this.setSelector(col, cal.get(0));
		this.setHue(col, cal.get(0));
		this.setNewColor(col, cal.get(0));
		//TODO 这个要改成_trigger的写法
		this._trigger("onChange", col, this.HSBToHex(col), this.HSBToRGB(col));
	},
	
	_upIncrement: function(ev){
		var that = ev.data.that;
		that._change(ev.data.field.get(0), true);
		ev.data.el.removeClass('colorpicker_slider').find('input').focus();
		$(document).unbind('mouseup', that._upIncrement);
		$(document).unbind('mousemove', that._moveIncrement);
		return false;
	},
	
	_moveIncrement: function(ev) {
		var that = ev.data.that;
		ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
		if (ev.data.preview) {
			that._change(ev.data.field.get(0), true);
		}
		return false;
	},
	
	setSelector: function (hsb, cal) {
		$(cal).data('colorpicker').selector.css('backgroundColor', '#' + this.HSBToHex({h: hsb.h, s: 100, b: 100}));
		$(cal).data('colorpicker').selectorIndic.css({
			left: parseInt(150 * hsb.s/100, 10),
			top: parseInt(150 * (100-hsb.b)/100, 10)
		});
	},
	setHue : function (hsb, cal) {
		$(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h/360, 10));
	},
	setCurrentColor: function (hsb, cal) {
		$(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + this.HSBToHex(hsb));
	},
	setNewColor: function (hsb, cal) {
		$(cal).data('colorpicker').newColor.css('backgroundColor', '#' + this.HSBToHex(hsb));
	},
	_moveHue: function (ev) {
		var that = ev.data.that;
		that._change(
			ev.data.cal.data('colorpicker')
				.fields
				.eq(4)
				.val(parseInt(360*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.y))))/150, 10))
				.get(0),
			ev.data.preview
		);
		return false;
	},
	_upHue: function (ev) {
		var that = ev.data.that;
		that.fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
		that.fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
		$(document).unbind('mouseup', that._upHue);
		$(document).unbind('mousemove', that._moveHue);
		return false;
	},
	_moveSelector: function (ev) {
		var that = ev.data.that;
		that._change(
			ev.data.cal.data('colorpicker')
				.fields
				.eq(6)
				.val(parseInt(100*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.pos.top))))/150, 10))
				.end()
				.eq(5)
				.val(parseInt(100*(Math.max(0,Math.min(150,(ev.pageX - ev.data.pos.left))))/150, 10))
				.get(0),
			ev.data.preview
		);
		return false;
	},
	_upSelector: function (ev) {
		var that = ev.data.that;
		that.fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
		that.fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
		$(document).unbind('mouseup', that._upSelector);
		$(document).unbind('mousemove', that._moveSelector);
		return false;
	},
	enterSubmit: function (ev) {
		$(this).addClass('colorpicker_focus');
	},
	leaveSubmit: function (ev) {
		$(this).removeClass('colorpicker_focus');
	},
	_hide: function (ev) {
		var that = this.cal?this:ev.data.that;
		if (!that.isChildOf(that.cal.get(0), ev.target, that.cal.get(0))) {
			if (that._trigger("onHide",that.cal.get[0]) != false) {
				that.cal.hide();
				/*if(that.scrollTimer){clearTimeout(that.scrollTimer)};*/
				that.options.isShow=false;
			}
			$(document).unbind('mousedown', that._hide);
		}
	},
	_show: function(ev){
		if (this.options.flat) return;
		var cal = this.cal,
		    that = this,
		    uiBorder = this.element.parent();
		this.setColor(this.getValue());
		this._trigger("onBeforeShow",ev,cal.get(0));
		var pos = $(this.element).offset();
		var viewPort = this.getViewport();
		var top = pos.top + this.element.offsetHeight;
		var left = pos.left;
		if (top + 176 > viewPort.t + viewPort.h) {
			top -= this.element.offsetHeight + 176;
		}
		if (left + 356 > viewPort.l + viewPort.w) {
			left -= 356;
		}
/*		cal.css({
			left : $.coral.getLeft( cal, uiBorder ),
			top  : $.coral.getTop( cal, uiBorder),
			display : "absolute"
		});*/
		if (!that.options.isShow){
			if (this._trigger("onShow",ev,cal.get(0)) != false) {
				cal.show();
				this.options.isShow=true
			}
			(function move () {
				var that1 = that;
				if (that1.options.isShow){
					cal.css({
						left : $.coral.getLeft( cal, uiBorder ),
						top  : $.coral.getTop( cal, uiBorder)
					});
					that1.scrollTimer=setTimeout(move, 200);
				}
				
			})();
		}

		$(document).bind('mousedown', {cal: cal,that:that}, this._hide);
		return false;
	},
	isChildOf: function(parentEl, el, container) {
		if (parentEl == el) {
			return true;
		}
		if (parentEl.contains) {
			return parentEl.contains(el);
		}
		if ( parentEl.compareDocumentPosition ) {
			return !!(parentEl.compareDocumentPosition(el) & 16);
		}
		var prEl = el.parentNode;
		while(prEl && prEl != container) {
			if (prEl == parentEl)
				return true;
			prEl = prEl.parentNode;
		}
		return false;
	},
	getViewport: function () {
		var m = document.compatMode == 'CSS1Compat';
		return {
			l : window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
			t : window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
			w : window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
			h : window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
		};
	},
	fixHSB: function (hsb) {
		return {
			h: Math.min(360, Math.max(0, hsb.h)),
			s: Math.min(100, Math.max(0, hsb.s)),
			b: Math.min(100, Math.max(0, hsb.b))
		};
	}, 
	fixRGB: function (rgb) {
		return {
			r: Math.min(255, Math.max(0, rgb.r)),
			g: Math.min(255, Math.max(0, rgb.g)),
			b: Math.min(255, Math.max(0, rgb.b))
		};
	},
	fixHex: function (hex) {
		var len = 6 - hex.length;
		if (len > 0) {
			var o = [];
			for (var i=0; i<len; i++) {
				o.push('0');
			}
			o.push(hex);
			hex = o.join('');
		}
		return hex;
	}, 
	HexToRGB: function (hex) {
		var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
		return {r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF)};
	},
	HexToHSB: function (hex) {
		return this.RGBToHSB(this.HexToRGB(hex));
	},
	RGBToHSB: function (rgb) {
		var hsb = {
			h: 0,
			s: 0,
			b: 0
		};
		var min = Math.min(rgb.r, rgb.g, rgb.b);
		var max = Math.max(rgb.r, rgb.g, rgb.b);
		var delta = max - min;
		hsb.b = max;
		if (max != 0) {
			
		}
		hsb.s = max != 0 ? 255 * delta / max : 0;
		if (hsb.s != 0) {
			if (rgb.r == max) {
				hsb.h = (rgb.g - rgb.b) / delta;
			} else if (rgb.g == max) {
				hsb.h = 2 + (rgb.b - rgb.r) / delta;
			} else {
				hsb.h = 4 + (rgb.r - rgb.g) / delta;
			}
		} else {
			hsb.h = -1;
		}
		hsb.h *= 60;
		if (hsb.h < 0) {
			hsb.h += 360;
		}
		hsb.s *= 100/255;
		hsb.b *= 100/255;
		return hsb;
	},
	HSBToRGB: function (hsb) {
		var rgb = {};
		var h = Math.round(hsb.h);
		var s = Math.round(hsb.s*255/100);
		var v = Math.round(hsb.b*255/100);
		if(s == 0) {
			rgb.r = rgb.g = rgb.b = v;
		} else {
			var t1 = v;
			var t2 = (255-s)*v/255;
			var t3 = (t1-t2)*(h%60)/60;
			if(h==360) h = 0;
			if(h<60) {rgb.r=t1;	rgb.b=t2; rgb.g=t2+t3}
			else if(h<120) {rgb.g=t1; rgb.b=t2;	rgb.r=t1-t3}
			else if(h<180) {rgb.g=t1; rgb.r=t2;	rgb.b=t2+t3}
			else if(h<240) {rgb.b=t1; rgb.r=t2;	rgb.g=t1-t3}
			else if(h<300) {rgb.b=t1; rgb.g=t2;	rgb.r=t2+t3}
			else if(h<360) {rgb.r=t1; rgb.g=t2;	rgb.b=t1-t3}
			else {rgb.r=0; rgb.g=0;	rgb.b=0}
		}
		return {r:Math.round(rgb.r), g:Math.round(rgb.g), b:Math.round(rgb.b)};
	},
	RGBToHex: function (rgb) {
		var hex = [
			rgb.r.toString(16),
			rgb.g.toString(16),
			rgb.b.toString(16)
		];
		$.each(hex, function (nr, val) {
			if (val.length == 1) {
				hex[nr] = '0' + val;
			}
		});
		return hex.join('');
	},
	HSBToHex: function (hsb) {
		return this.RGBToHex(this.HSBToRGB(hsb));
	},

	showPicker: function() {
		if ($(this.element).data('colorpickerId')) {
			this._show();
		}
	},
	hidePicker: function() {
		var that = this;
		if ($(this).data('colorpickerId')) {
			this._hide();
		}
	},
	setColor: function(col) {
		if (typeof col == 'string') {
			col = this.HexToHSB(col);
		} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
			col = this.RGBToHSB(col);
		} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
			col = this.fixHSB(col);
		} else {
			return this;
		}
		if ($(this.element).data('colorpickerId')) {
			var cal = this.cal;
			cal.data('colorpicker').color = col;
			cal.data('colorpicker').origColor = col;
			this.fillRGBFields(col, cal.get(0));
			this.fillHSBFields(col, cal.get(0));
			this.fillHexFields(col, cal.get(0));
			this.setHue(col, cal.get(0));
			this.setSelector(col, cal.get(0));
			this.setCurrentColor(col, cal.get(0));
			this.setNewColor(col, cal.get(0));
		}
	}
});
;

( function() {
"use strict";

$(document).unbind(".coral-combobox").bind("mousedown.coral-combobox mousewheel.coral-combobox",function(e){
	var p = $(e.target).closest(".coral-combo-panel").length;
	var c = $(e.target).closest(".coral-combo").length;
	var b = $(e.target).closest(".coral-button").length;
	if ( p || ( c && !b ) ) {
		return;
	}
	hidePanels();
});
function hidePanels( panel, iframePanel ){
	$( ".coral-combo-wrapper" ).not( panel ).hide();
	$(".coral-combo-iframePanel:visible").not( iframePanel ).hide();
}
$.component("coral.combo", $.coral.inputbase, {
	castProperties : ["triggers","showRequiredMark","hideRequiredMark","shortCut","onBlur"],
	version: "4.0.2",
	options: {
		panelRenderOnShow: false,//设置为true后，不会去data中找到selected值进行初始化
		popupDialog: false,
		showStar: true,
		showDirection: "down",
		labelField: null,
		starBefore: false,
		isInited: false,
		id: null,
		name: null,
		showOnFocus : true,
		iframePanel : false,
		buttons : [],
		forceSelection: true,
		width : "auto",
		height : 22,
		placeholder: "", // 提示消息
		cls: "",
		required : false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		isLabel: false,
		panelWidth: null,
		panelHeight: "auto",
		panelComponentCls: "",
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		maxPanelHeight: 200,
		multiple : false,
		separator : ",",
		valueTextSeparator : "-",
		postMode:"value", // value, text, value-text
		editable : false,
		readonly: false,
		readonlyInput: true,
		disabled : false,
		clearOnLoad : true,
		hasArrow : true,
		value: null,
		text: "",
		delay : 300,
		zIndex: 10000,
		enableHighlight: false,
		enablePinyin: false,
		showClose: false, // 是否显示x图标来清空当前选中的选项
		enableFilter: false,
		enterFilter : true, // 如果enableFilter=true时，是否开启回车时过滤筛选
		//方法
		query : null,
		filter: function(q, row) {
			var type = $(this).attr("component-role"),
				opts = $(this)[type]("option"),
				textField  = opts.textField,
				valueField = opts.valueField,
				text = (row[textField] ).toLowerCase(),
				value = (row[valueField]).toString().toLowerCase();
			q = q.toLowerCase();
		    // 先判断显示值
			if (text.indexOf(q) > -1) {
		    	return 'text';
		    }
			if( opts.enablePinyin === true ){
				if(pinyinEngine.toPinyin(text,false,"").indexOf(q) > -1) {
					return true;
				}
			}
			if(value.indexOf(q)>-1){
				return true;
			 } else {
			    return false;
			 }
		},
		//事件
		onKeyUp  : null,
		onKeyDown: null,
		onEnter  : null,
		onBlur : null,
		onClick : null,
		onValidError: null,
		onValidSuccess: null,
		onShowPanel : $.noop,
		onHidePanel : $.noop,
		onChange : $.noop,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
	/**
	 * add cacheItem to this.cache
	 * @param item { key:"keyName", value:{} }
	 */
	_addCacheItem: function(item) {
		if (typeof item !== "object") return;
		
		if (typeof this.cache === "undefined") {
			this.cache = {};
		}
		this.cache = $.extend({}, this.cache, item);
	},
	/**
	 * get cacheItem from this.cache
	 * @param key {string}
	 */
	_getCacheItem: function(key) {
		if (typeof key !== "string") return;
		
		if (this.cache && this.cache[key]) {
			return this.cache[key];
		} else {
			return null;
		}
	},
	/**
	 * remove cacheItem form this.cache
	 * @param key {string}
	 */
	_removeCacheItem: function(key) {
		if (this.cache && this.cache[key]) {
			delete this.cache[key];
		}
	},
    _create: function () {
    	this._prepareInit();
    	this._initCombo();
    	this._setDefaultValue();
		this._initState();
		this._initData();
		this._bindEvent();
	},
	/**
	 * prepare the param for the combo
	 */
	_prepareInit: function(){
		this.originalCss = {
			display: this.element[0].style.display,
			width: this.element[0].style.width,
			minHeight: this.element[0].style.minHeight,
			maxHeight: this.element[0].style.maxHeight,
			height: this.element[0].style.height
    	};
		this.panelRendered = false;//初始化的时候肯定是没有渲染的
		this.dataLoaded = false;
		this.search = false;
		this.isInit = false;
		this.isLoaded = false;
		this.isInited = false;
		this.currentValues = [];
		this.cache = {};
		if ( this.options.enableSearch === true ) {
			this.options.readonlyInput = false;
		}
		if ( this.options.popupDialog || this.options.enableFilter ) {
			this.options.readonlyInput = true;
		}
		this.element.hide();
    	// id 冲突处理
		if (this.element.attr("id")) {
			if (this.element.attr("id") != this.options.id) {
				this.options.id = this.element.attr("id");
			}
		} else if (this.options.id) {
			this.element.attr("id", this.options.id);
		}
		// 下拉树:id需要有值
		if (!this.element.attr("id")) {
			this.options.id = this.element.uniqueId().attr("id");
		}
		// 允许初始化的element存在name
		if (this.element.attr("name") && this.options.name) {
			if (this.element.attr("name") != this.options.name) {
				this.options.name = this.element.attr("name");
			}
		} else if (!this.options.name && this.element.attr("name")) {
    		this.options.name = this.element.attr("name");
    	}
		// 允许初始化的element存在value
		if (this.element.attr("value") && this.options.value) {
			if (this.element.attr("value") != this.options.value) {
				this.options.value = this.element.attr("value");
			}
		} else if (!this.options.value && this.element.attr("value")) {
    		this.options.value = this.element.attr("value");
    	}
		if($(this.element)[0].tagName == "SELECT"){
			this.transformData = this._transformData();
		}
	},
	/**
	 * construct the combo
	 */
	_initCombo: function() {
		var textbox = null, 
			valuebox = null;
		this.className = "coral-combo-text coral-combo-default coral-textbox-default tabbable "+this.element[0].className;
		this.classBorder = "coral-combo-border";
		this.compClass = "coral-combo coral-textbox";
		this.hiddenClass = "coral-combo-value";
		// 构造下拉框
		this.uiCombo = {combo: null, panel: null};
		this.previousValue = null;
		this.createInput();
		this.uiCombo.combo = $(this.textboxWrapper);
		this.elementBorder = $(this.elementBorder);
		this.uiCombo.textbox = $(this.textboxInput);
		this.element = $(this.textboxInput);
		
		// 下拉框显示值文本框
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (this.options.labelField) {
//			this.uiLabel = $("<label class=\"coral-label\">"+ this.options.labelField +"</label>");
//			this.elementBorder.before(this.uiLabel);
//			this.uiCombo.combo.addClass("coral-hasLabel");
			this._createLabel();
		}
		// add label and required star before function @lhb @2015-04-27
		if (this.options.name) {
			this.element.removeAttr("name").attr("orgname", this.options.name);
			name = " name='" + this.options.name + "'";
		}
		// 下拉面板
		this.uiCombo.panel = $( "<div class='coral-combo-panel " + this.options.panelComponentCls + "'></div>" ).appendTo( "body" );
		if ( this.options.iframePanel ){
			this.uiCombo.iframePanel = $( "<iframe class='coral-combo-iframePanel' style='position:absolute;display:none;'></iframe>" ).appendTo( "body" );
		}
		this.uiCombo.pContent = $( "<div class='coral-combo-content'></div>" ).appendTo( this.uiCombo.panel );
		if ( this.options.enableFilter ) {
			$( "<div class='coral-combo-filter'><span class='coral-combo-filter-border'><input type='text' class='coral-combo-filterbox'></span>" +
				"<span class='coral-combo-search cui-icon-search2'></span></div>" ).appendTo( this.uiCombo.panel );
		}
		var panelPosition = "absolute";
		if ( this.options.popupDialog ) {
			panelPosition = "";
			// 弹出式对话框
			this.uiCombo.popupDialog = $( "<div class='coral-combo-popup-dialog'></div>" ).appendTo( "body" );
			this.uiCombo.popupInputbox = $( "<input type='text' />" ).appendTo( this.uiCombo.popupDialog );
		}
		if(this.options.hasArrow == false ){
			this.elementBorder.css({
				"padding-right": 0
			})
			this.uiCombo.textbox.css({
				"padding-right":0
			})
			this.uiClose().css({
				"right":0
			})
			
		}
		this.uiCombo.panel.css({
			position : panelPosition
		}).addClass( "coral-combo-wrapper " + this.options.cls + "-panel coral-front" ).hide();
		// handler placeholder @added by@lhb at @20150417 : placeholder
		this.uiCombo.textbox.attr( "placeholder", this.options.placeholder );
		//this.options.placeholder = this.options.placeholder || this.options.emptyText;
		this._showPlaceholder();
		if ( this.options.buttons.length > 0 ) {
			this._createButtonPanel();
		}
	},
	_initState: function(){
		this.options.isLabel === true ? this._setIsLabel(this.options.isLabel) : this._setReadonly(this.options.readonly);
		if ( !this.options.readonly ) {
			this.uiCombo.textbox.prop("readonly", this.options.readonlyInput);
		}
		//this._setDisabled(this.options.disabled);
		this.resize();
	},
	_initData: $.noop,
	_setDefaultValue: function() {
		if (!this.options.value && !this.options.emptyText) {
			this.originalValue = "";
			return;
		} else {
			this.setValue(this.options.value);
			this.originalValue = this.getValue();
		}
	},
	/**
	 * 显示 placeholder @added by@lhb at @20150417 : placeholder
	 */
	_showPlaceholder: function ( placeholder ) {
		if ( $.support.placeholder || this.component().find( ".coral-textbox-placeholder-label" ).length) {
			return ;
		}
		placeholder = placeholder ? placeholder : this.options.placeholder;
		var	$placeholder = $("<span class='coral-textbox-placeholder-label'>" + placeholder + "</span>");
		
		$(this.uiCombo.textbox).after( $placeholder );
	},
	/**
	 * 隐藏 placeholder @added by@lhb at @20150417 : placeholder
	 */
	_hidePlaceholder: function () {
		if ( $.support.placeholder ) {
			return ;
		}
		this.component().find( ".coral-textbox-placeholder-label" ).remove();
	},
	/**
	 *
	 */
	_setIsLabel: function(isLabel) {
		var that = this;
		if (true === isLabel) {
			//TODO: hideRequire should be init in the validate ,here just prepare the event for the validate.
			this.component().removeClass("coral-readonly");
			this.component().addClass("coral-isLabel");
			this.uiCombo.textbox.prop("readonly", true);
			if(this.options.emptyText && "" === this.getValue()) {
				this.uiCombo.textbox.val("");
			}
			this.hidePanel();
			this.uiCombo.textbox.removeClass("tabbable");
			this.uiCombo.textbox.removeAttr( "placeholder");
		} else {
			this.component().removeClass("coral-isLabel coral-readonly");
			this.uiCombo.textbox.prop("readonly", this.options.readonlyInput);
			this.options.readonly = false;
			this.uiCombo.textbox.addClass("tabbable");
			this.uiCombo.textbox.attr( "placeholder", this.options.placeholder );
		}
		this.options.isLabel = !!isLabel;
	},
	_setReadonlyInput: function (readonlyInput) {
		if (readonlyInput) {
			this.uiCombo.textbox.prop("readonly", true);
		} else {
			this.uiCombo.textbox.prop("readonly", false);
		}
	},
	_setReadonly: function (readonly) {
		if (readonly) {
			this.element.prop("readonly", true);
			this.uiCombo.textbox.prop("readonly", true);
			this.uiCombo.textbox.removeClass("tabbable");
			this.uiCombo.combo.find(".coral-combo-value").prop("readonly", true);
		} else {
			$(this.element).prop("readonly", false);
			this.uiCombo.textbox.prop("readonly", false);
			this.uiCombo.textbox.addClass("tabbable");
			this.uiCombo.combo.find(".coral-combo-value").prop("readonly", false);
		}
		this.options.readonly = !!readonly;
		this.uiCombo.combo.removeClass( "coral-isLabel" );
		this.uiCombo.combo.toggleClass( "coral-readonly", this.options.readonly );
	},
	_setDisabled: function(disabled) {
		if (disabled) {
			this.element.prop("disabled", true);
			this.uiCombo.combo.find(".coral-combo-value").prop("disabled", true);
			this.uiCombo.combo.find(".coral-combo-text").prop("disabled", true);
			this.uiCombo.textbox.removeClass("tabbable");
		} else {
			$(this.element).prop("disabled", false);
			this.uiCombo.combo.find(".coral-combo-value").prop("disabled", false);
			this.uiCombo.combo.find(".coral-combo-text").prop("disabled", false);
			this.uiCombo.textbox.addClass("tabbable");
		}
		this.options.disabled = !!disabled;
		this.uiCombo.combo.toggleClass( this.componentFullName + "-disabled coral-state-disabled", this.options.disabled );
	},
	_selectPrev: $.noop,
	_selectNext: $.noop,
	_doEnter: $.noop,
	_doQuery: $.noop,
	/**
	 * 将$el中包含keyword的text部分高亮
	 * @param $el {jquery obj} : 需要添加高亮范围的元素
	 * @param keyword {string} : 高亮的关键字
	 */
	_addHighlight: function($el, keyword) {
		if ( keyword === "" || !$el.length || !this.options.enableHighlight  ) return;
		//keyword = keyword == [] ? "":keyword.join(this.options.separator);
		$el = $($el);
		var content = "",
			keywordArr = keyword.replace(/[\s]+/g,' ').split(' '),
			re;
		
		$el.each(function(index, item) {
			var $item = $(item),
				$parent = $(item).parent(),
				content = $(item).html();
				
			if (content == keyword) {
				return;
			}
			if ($item.hasClass(".coral-combobox-item-selected")) {
				$parent.html(that._getTextFromHTML(content));
				return;
			}
			if (!$item.children("input").length) {
				for (var n = 0; n < keywordArr.length; n ++) {
					re = new RegExp("" + keywordArr[n] + "","gmi");
					content = content.replace(re,'<span class="coral-keyword-highlight">' + keywordArr[n] + '</span>');
				}				
				$item.html(content);
			}
		});		
		
	},
	/**
	 * 将html片段中的text提取出来
	 */
	_getTextFromHTML: function(str) {
		if (typeof str === "undefined") return;
	    str = str.replace(/<\/?[^>]*>/g,''); //去除HTML tag
	    str = str.replace(/[ | ]*\n/g,'\n'); //去除行尾空白
	    //str = str.replace(/\n[\s| | ]*\r/g,'\n'); //去除多余空行
	    str=str.replace(/&nbsp;/ig,'');//去掉&nbsp;
	    return str;
	},
	_clearValues: function(data) {
		var	valueField = this.options.valueField,
		    currentValues = this.currentValues,
		    length = currentValues.length,
		    i,
		    j,
		    numbers = 0;
		for (i = 0; i < length; i++) {
			for (j = 0; j < data.length; j++) {
				if (currentValues[i] == data[j][valueField]) {
					numbers += 1;
					break;
				}
			}
		}
		if (numbers != length) {
			return true;
		} else {
			return false;
		}  
	},
	/**
	 * 移除高亮
	 * @param $el {jquery obj}: 需要移除的高亮元素
	 */
	_removeHighlight: function($el) {
		if (!$el.length || !this.options.enableHighlight) return;
		$el = $($el);
		var that = this;
		$el.each(function(index, item) {
			var $parent = $(item).parent();
			var content = $parent.html();
			$parent.html(that._getTextFromHTML(content));
		});		
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		this.uiCombo.textbox.focus();
		// 如果没加载完，则先缓存，onLoad之后统一执行
		if (!this.dataLoaded) {
			var cacheItem = {
				"focus": {
					param: null
				}
			};
			this._addCacheItem(cacheItem);
			return true;
		}
		//
		return true;
	},

	_bindEvent: function() {
		var that = this,
			opts  = this.options,
		    combo = this.uiCombo.combo,
		    panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel;
		
		if ( this.options.disabled ) {
			this.element.addClass( "coral-state-disabled" );
		}
		this._off( that.component() );
		var suppressBlurs, suppressTT;
		this._on( this.uiCombo.panel.find( ".coral-combo-filterbox" ), {
			"focusin": function(e) {
				suppressTT = true;
			}
		});
		this._on({
			"mouseenter.coral-combo-border" : function(e) {
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly") ) {
					return ;
				}
				//that.uiCombo.combo.addClass( "coral-combo-arrow-hover" );
				that.uiCombo.combo.addClass("coral-textbox-hover");
				this._updateTitle();
			},
			"mouseleave.coral-combo-border" : function(e) {
				if (that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly")) {
					return ;
				}
				//that.uiCombo.combo.removeClass("coral-combo-arrow-hover");
				that.uiCombo.combo.removeClass("coral-textbox-hover");
			},
			"keydown.coral-combo-text": function(e) {
				this._doKeyDown(e, false);
				var options = this.options;
				if(options.shortCut){
					$.coral.callFunction(options.shortCut,event,this);
				}
			},
			"keyup.coral-combo-text": function(e) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this._trigger("onKeyUp", e, {});
			},
			"blur.coral-combo-text": function(e) {
				this._setHv(e,"blur");
			},
			"focusin.coral-combo-text" : function(e) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this.component().addClass( "coral-state-focus" );
				if ( !suppressBlurs ) {
					this._trigger("onFocus", e);
				}
			},
			"focusout.coral-combo-text" : function(e) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}
				if ( this.options.readonly || this.options.isLabel ) return;
				this._delay(function() {
					if ( suppressBlurs ) {
						suppressBlurs = false;
						return;
					}
					this.component().removeClass( "coral-state-focus" );
					if ( suppressTT ) {
						suppressTT = false;
						return;
					}
					this.hidePanel();
					this._trigger("onBlur", e);
				}, 100);
			},
			"click.coral-combo-text" : function(e) {
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly")) {
					if(this.options.hasArrow == true && !this.options.readOnlyInput){
						return ;
					}
				}
				if ( that.component().hasClass("coral-state-focus") ) {
					if ( this.options.popupDialog && this.options.showOnFocus === true ) {
						this.uiCombo.popupDialog.dialog( "open" );
					} else {
						if ( panel.is( ":visible" ) ) {
							this.hidePanel();
						} else {
							this.showPanel();
						}
					}
				}
				// 如果enableFilter设置为true，showPanel 中有查询框聚焦方法，需要抑制失焦，防止触发onBlur事件。
				if ( this.options.enableFilter ) {
					suppressTT = true;
				}
				
				that._trigger("onClick", e);
			},
			"mousedown.coral-combo-arrow" : function(e) {
				if ( this.component().hasClass("coral-isLabel") || this.component().hasClass( "coral-readonly") ) {
					return;
				}
				if ( this.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
			},
			"click.coral-combo-arrow" : function(e) {
				hidePanels( panel, iframePanel );
				if ( that.component().hasClass("coral-isLabel") || that.component().hasClass( "coral-readonly") ) {
					return;
				}
				if ( that.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
				// 如果enableFilter设置为true，showPanel 中有查询框聚焦方法，需要抑制失焦，防止触发onBlur事件。
				if ( this.options.enableFilter ) {
					suppressTT = true;
				}
				this.focus();
				if ( that.options.popupDialog ) {
					that.uiCombo.popupDialog.dialog( "open" );
				} else {
					if ( panel.is( ":visible" ) ) {
						that.hidePanel();
					} else {
						that.showPanel();
					}
				}
			},
			"click.coral-input-clearIcon" : function(e) {
				if ( this.component().hasClass("coral-state-focus") ) {
					suppressBlurs = true;
				}
				this.clear();
				// 清空后如果有placeholder则显示 @added by@lhb at @20150417 : placeholder
				if (this.options.placeholder) {
					this._showPlaceholder();
				}
			},
			"combogridonshowpanel": function(e) {
				that._removeGridHighlights();
				that._scrollTo(that.getValue());
				that.grid().grid("refresh");
			}
		});
		this._on( this.uiCombo.panel.find( ".coral-combo-filterbox" ), {
			"keydown": function(e) {
				this._doKeyDown(e, true);
			}
		});
		this._on( this.uiCombo.panel.find( ".coral-combo-search" ), {
			"click": function(e) {
				e.preventDefault();
				this._filter(e, true);
				return false;
			}
		});
		this._on( this.uiCombo.panel.find( ".coral-combo-filterbox" ), {
			"focusout": function(e) {
				//为了兼容ie浏览器点击滚动条时会触发这个focusout事件
				if(this.cancelBlur){
					this.cancelBlur = false;
					return
				}
				this._delay(function() {
					this.hidePanel();
				}, 100);
			}
		});
	},
	 _updateTitle: function(){
		var widthDiv = $("<span style = 'visibility: hidden'>"+ this.getText() +"</span>").appendTo("body");
		if(this.component().outerWidth() < widthDiv.width()){
    		this.component().attr( "title", this.getText());
    	}
		widthDiv.remove();
	 },
	_doKeyDown: function ( e, searchOnly ) {
		var opts  = this.options,
			panel  = this.panel();
		
		this.previousValue = $(e.target).val();
		if ( opts.readonly || opts.isLabel ) return;
		var keyCode = $.coral.keyCode;
		switch (e.keyCode) {
			case keyCode.TAB:
				break;
			case keyCode.ENTER:
				e.preventDefault();
				this._doEnter(e);
				this._setHv(e);
				this._trigger("onEnter", e, {});
				break;
			case keyCode.ESCAPE:
				this.hidePanel();
				break;
			case keyCode.UP:
				e.preventDefault();// 阻止页面滚动事件
				if ( opts.readonly === false ) {
					if ( !panel.is(":visible") ) {
						this.showPanel();
					} else {
						if (opts.onSelectPrev) {
							this._trigger("onSelectPrev", e);
						} else {
							this._selectPrev(e);
						}	
					}
				}
				break;
			case keyCode.DOWN:
				e.preventDefault();// 阻止页面滚动事件
				if ( opts.readonly === false ) {
					if ( !panel.is(":visible") ) {
						this.showPanel();
					} else {
						if (opts.onSelectNext) {
							this._trigger("onSelectNext", e);
						} else {
							this._selectNext(e);
						}
					}
				}
				break;
			default:
				if(this.options.readonlyInput == false){
					this._filter(e, searchOnly);
				}
				break;
		}
		this._hidePlaceholder();
		this._trigger("onKeyDown", e);
	},
	_setHv: function(e, blur){
		var $this = $(e.target),inputVarr = [],
			inputVal = $this.val();
		if ( this.options.multiple ) {
			inputVal = inputVal.split(this.options.separator);
		} else {
			inputVal = [inputVal];
		}
		// 失去焦点后将下拉选项全部显示出来，恢复到查询之前的状态。
		this._showItems();
		var jinru = true;
		if ( blur == "blur" ) {
			jinru = inputVal.join(this.options.separator) != this.previousValue; 
		}
		if ( jinru ) {
			var textFiled = this.options.textField,
				valueField = this.options.valueField;
			var v = this._checkMathch(inputVal,true);
			if ( !v ) {
				$this.val("");
				this.setValues([""]);
			} else {
				this.setValues(v.valarr);
			}
		}
	},
	/**
	 * input search filter
	 */
	_searchFilter: $.noop,
	/**
	 * 过滤操作
	 */
	_filter: function (e, searchOnly) {
		var that = this,
			opts = this.options,
			panel = this.panel();
		if (that.timer) {
			clearTimeout(that.timer);
		}	
		// 需要放在timer外面，不然下拉grid会在隐藏状态下进行reload，grid的高度计算会为0；
		if ( !panel.is(":visible") ) {
			that.showPanel();
		}
		that.timer = setTimeout(function () {
			var q = $(e.target).val();
			if ( searchOnly ) {
				q = panel.find( ".coral-combo-filterbox" ).val();
			}
			// 查询 begin
			if ( that.options.multiple ) {
				q = q.split(opts.separator);
			} else {
				q = [q];
			}
			if ( q == that.previousValue ) {
				return;
			}
			if (opts.query) {
				opts.query.call(that.element, q);
			} else {
				that.search = true;
				that._doQuery(q);
			}
			// 赋值 begin
			var textFiled = that.options.textField,
				valueField = that.options.valueField;
			if ( !searchOnly ) {
				var v = that._checkMathch(q, false);
				that.setValues(v.valarr,true,true);
			}
			// 赋值 end
			that.resizeIframePanel();
		}, opts.delay);
		return false;
	},
	_formatValue: function(value) {
		return value;
	},
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		}
		if (key === "readonlyInput") {
			this._setReadonlyInput(value);
		}
		if (key === "disabled") {
			this._setDisabled(value);
		}
		if (key === "data") {
			this.data = value;
		}
		this._super(key, value );
		if (key === "isLabel") {
			this._setIsLabel(value);
			return;
		}
		if (key === "labelField") {
			this.labelPanel.html(value);
			
		}
	},
	_destroy : function() {
		this.panel().remove();
		if(this.options.iframePanel){
			this.uiCombo.iframePanel.remove();
		}
		this.component().replaceWith( this.element );
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.show();
		this.element.css(this.originalCss);
		//this.element.detach();
	},
	component : function() {
		return this.uiCombo.combo;
	},
	panel : function() {
		return this.uiCombo.panel;
	},
	uiArrow : function() {
		return this.uiCombo.combo.find("span.coral-combo-arrow");
	},
	uiClose : function() {
		return this.uiCombo.combo.find("span.coral-input-clearIcon");
	},
	uiBorder : function () {
		return this.component().find("span.coral-combo-border");
	},
	resize : function(width) {
		var opts  = this.options,
		    combo = this.uiCombo.combo,
		    panel = this.uiCombo.panel,
		    uiBorder = this.elementBorder;
		if (width) {
			opts.width = width;
		}
		if(opts.width== "auto" || opts.width == "item") return;            
		if (isNaN(opts.width)) {
			var parent   = this.element.parent(":first"),
			    pWidth   = null;
		    width = this.element.outerWidth();
			if (parent && parent.get(0).tagName !== "BODY") {
				pWidth = parent.outerWidth();
				if (pWidth < width) width = pWidth;
			}
			opts.width = width;
		}
		combo.outerWidth(opts.width);
	},
	resizeIframePanel : function(){
		var opts  = this.options,height,
	    	combo = this.uiCombo.combo,
	    	panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel || $();
	    height = panel.height();
		iframePanel.css("height",height);
	},
	_initPanel: function(){
		var opts = this.options,
		    combo = this.uiCombo.combo,
		    uiBorder = this.elementBorder,
		    panel = this.uiCombo.panel,
		    tHeight = opts.panelHeight;
		/*if ( !this.panelRendered ) {
		}*/
		this._renderItems( this.options.data );
		//this.uiCombo.pContent.html( this.lazyPanelHtml );
		this.panelRendered = true;
		this.lazyPanelHtml = "";
		// 下拉面板位置大小设置
		panel.css( "width" , (opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth()) );		
		panel.css( "height", tHeight );
		if ( isNaN( tHeight ) ) {
			this.uiCombo.pContent.css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
			this.uiCombo.popupDialogTree && this.uiCombo.popupDialogTree.css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
		}
		if ( this.options.enableFilter && !isNaN( tHeight ) ) {
			this.uiCombo.pContent.height( opts.panelHeight - 30);
		} else {
			if ( tHeight == "auto" ){
				this.uiCombo.pContent.height( "" );
			} else {
				this.uiCombo.pContent.height( tHeight-2 );
			}
		}
		if ( this.options.iframePanel ){
			this.uiCombo.iframePanel.css( "height" , panel.outerHeight() );
		}
	},
	showPanel : function() {
		var that = this,
			opts = this.options,
		    combo = this.uiCombo.combo,
		    uiBorder = this.elementBorder,
		    showDirection = this.options.showDirection,
		    panel = this.uiCombo.panel,
		    iframePanel = this.uiCombo.iframePanel || $();
		// 判断下拉框面板是否关闭，关闭则打开
		if ( panel.is( ":hidden" ) ) {
			var zIndicies = /*panel.siblings*/$( ".coral-front:visible" ).map(function() {
					return +$( this ).css( "z-index" );
				}).get(),
				zIndexMax = Math.max.apply( null, zIndicies );
			if ( zIndexMax >= +panel.css( "z-index" ) ) {
				panel.css( "z-index", zIndexMax + 1 );
				if ( this.options.iframePanel ) {
					iframePanel.css( "z-index", zIndexMax );
				}
			}
			/*if ( !this._PanelInited ) {
			}*/
			this._initPanel();
			this._PanelInited = true;
			panel.show(0, function() {
				that.resizeIframePanel();
				iframePanel.show();
				(function move () {
					if (panel.is(":visible")) {
						panel.css({
							left : $.coral.getLeft( panel, uiBorder ),
							top  : $.coral.getTop( panel, uiBorder, showDirection),
							width: ( opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth() )
						});
						if ( that.options.iframePanel ) {
							iframePanel.css({
								left : $.coral.getLeft( iframePanel, uiBorder ),
								top  : $.coral.getTop( iframePanel, combo, showDirection ),
								width: ( opts.panelWidth ? opts.panelWidth : uiBorder.outerWidth() )
							});
						}
						setTimeout(move, 200);
					}
				})();
				//需要下拉面板调整好位置后再将输入框聚焦，否则聚焦事件会影响页面的滚动；
				that.uiCombo.panel.find( ".coral-combo-filterbox" ).focus();
				that._trigger("onShowPanel", null, {});
				that._scrollTo( that.getValue() );
			});
		}
		if ( opts.enableFilter ) {
			this.setValues(this.getValues());
		}
	},
	hidePanel : function() {
		this.uiCombo.panel.hide();
		if (this.uiCombo.iframePanel){
			this.uiCombo.iframePanel.hide();
		}
		this._trigger("onHidePanel", null, {});
	},
	disable : function() {
		this._setDisabled(true);
	},
	enable : function() {
		this._setDisabled(false);
	},
	show : function() {
		this._super();
	},
	hide : function() {
		this._super();
		this.hidePanel();
	},
	hideErrors: function () {
		$.validate.hideErrors( this.uiBorder() );
		this.component().removeClass("coral-combo-error");
	},
	clear : function() {
		this.setValues( [], true, false );
	},
	/**
	 * 20150121 返回 oldText
	 */
	getOldText: function () {
		return this.oldText;
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	getText : function() {
		return this.uiCombo.combo.find("input.coral-combo-text").val();
	},
	_setText : function( text ) {
		var $textbox = this.uiCombo.combo.find("input.coral-combo-text");
		$textbox.val(text);
		this.previousValue = text;
	},
	//与grid的编辑功能一起修改，要支持postMode
	setText: function(text) {
		this._setText(text);
	},
	getValues : function() {
		var valArr = [];
		if (!this.dataLoaded) {
			return this.currentValues;
		}
		this.uiCombo.combo.find("input.coral-combo-value").each(function() {
			valArr.push($(this).val());
		});
		return valArr;
	},
	// values必须是数组格式
	// tChange: true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	setValues: function(values, tChange, remainText) {
		var oldValues = this.getValues(), comboVal = null,opts = this.options,
		    i = 0, oldTmp = [], eqTmp = [];
		values = values || [];
		this.oldValues = oldValues;
		var itemVal = [],
			name = "",
			value = "";
		this.uiCombo.combo.find("input.coral-combo-value").remove();	
		if(values.length > 1 || values[0] != ""){	
			for (i = 0; i < values.length; i++) {
				name = "";
				value = "";
				if (this.options.name) {
					name = " name='" + this.options.name + "' ";
				}
				itemVal.push("<input type='hidden' " + name + " value='" + 
						this._formatValue(values[i]) + "' class='coral-combo-value' />");
			}
			this.uiCombo.combo.append(itemVal.join(""));
		}
		for (i = 0; i < oldValues.length; i++) {
			oldTmp[i] = oldValues[i];
		}
		for (i = 0; i < values.length; i++) {
			for ( var j = 0; j < oldTmp.length; j++) {
				if (values[i] == oldTmp[j]) {
					eqTmp.push(values[i]);
					oldTmp.splice(j, 1);
					break;
				}
			}
		}
		if ( values.length ) {// 只要是有值，就应该隐藏placeholder
			if (this.options.placeholder) {
				this._hidePlaceholder();
			}
		}
		if (opts.width == "item") {
			var widthDiv = $("<div style = 'visibility:hidden;'><span>"+this.getText()+"</span></div>")
                           .appendTo("body"),
                innerText = this.component().find(".coral-textbox-default");
            var elementPadding = parseInt(innerText.css("padding-left")) +
                                 parseInt(innerText.css("padding-right")),
                arrowWidth = this.uiArrow().outerWidth() + 2*parseInt(this.uiArrow().css("right")),
                width = widthDiv.find("span").outerWidth() + elementPadding + arrowWidth ;
            this.resize(width);
            widthDiv.remove();
            // resize 方法会将options中的width变为数字，这里重新进行设置。
            opts.width = "item";
		}
		if ((eqTmp.length != values.length || values.length != oldValues.length) 
				&& tChange) {
			if (this.options.multiple) {
				this._trigger("onChange", null, {
					value: values, 
					newValue: values, 
					newText: this.getText(),
					text: this.getText(), 
					oldValue: oldValues, 
					oldText: this.getOldText()
				});
			} else {
				this._trigger("onChange", null, {
					value: values[0], 
					newValue: values[0], 
					newText: this.getText(), 
					text: this.getText(), 
					oldValue: oldValues[0], 
					oldText: this.getOldText()
				});
			}
		}
	},
	// 返回字符串形式的值
	getValue: function() {
		return this.getValues().join( this.options.separator );
	},
	// 设置值，多选设置要以分隔符进行分割
	setValue: function(value,tChange,remainText) {
		value = value || "";
		value = value.split( this.options.separator );
		this.setValues( value, tChange);
	},
	// 获得选中的所有项目
	getSelectedItems: function() { 
		var Arr = this.getValues(),
			Arr2 = [];
		var comboData = this.options.data;
		for ( var i=0; i<Arr.length ;i++ ){
			for ( var j=0; j < comboData.length ;j++ ){
				var p = comboData[j];
				if ( Arr[i] == p.id ) {
					for ( var obj in p ) {		
						Arr2.push( obj+"="+p[obj]+"\n" );
					}
				}
			}
		}
		return Arr2;
	},
	// 这个有待优化，，，，refresh只是dom元素发生变化后进行重新渲染，不能调用销毁方法
	refresh : function() {
		this.destroy();
		this.component().remove();
		this._create();
	}
});
})();
;

( function() {
"use strict";
var COMBOBOX_SERNO = 0;
$.component( "coral.combobox", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["data","buttons","formatter","shortCut","onShowPanel","onBlur"],
	options: {
		cls       : "",
		valueField: "value",
		textField : "text",
		panelRenderOnShow: false,
		mode      : "local",	// or "remote"
		method    : "post",
		url       : "",
		setEmpty  : null,
		data      : [],
		selectedIndex: null,
		buttons   : [],
		width  : "auto",
		showText  : true, // 
		emptyText : null,       // value为空的option，显示值（text）
		postMode  : "value",    // value, text, value-text
		formatter: function(item) {
			var textField = $(this).combobox("option", "textField");
			return item[textField];
		},
		loader: function(param, success, error) {
			var that = this,
			    instance = $(this),
			    url = instance.combobox("option", "url");
			if (!url) return false;
			$.ajax({
				type: instance.combobox("option", "method"),
				url:  url,
				data: param,
				dataType: "json",
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
			return false;
		},
		
		beforeLoad : $.noop, /*参数(event, param)*/
		onLoad     : $.noop, /*数据加载成功*/ 
		onError    : $.noop, /*数据加载失败*/
		onShowPanel: $.noop,
		beforeSelect   : $.noop, /*参数(event, {valueField, textField})*/
		onSelect   : $.noop, /*参数(event, {valueField, textField})*/
		unSelect : $.noop  /*参数(event, {valueField, textField})*/		
	}, 
	_create : function() {
		var that = this,
		    showPanelEvent = null;
		var date1 = new Date();
		
		this.data = this.data || [];//this.data默认不能undefined
		COMBOBOX_SERNO++;
		that.options.itemIdPrefix = "combobox_i" + COMBOBOX_SERNO;
    	this.element.addClass( "coral-form-element-combobox coral-validation-combobox ctrl-form-element" );
    	var onShowPanel = $.coral.toFunction( this.options.onShowPanel );
		showPanelEvent = function(e) {
			if(onShowPanel){
				onShowPanel.apply( that.element, [e] );
			}
		};
		this.options.onShowPanel = showPanelEvent;
		this._super();
		this._on( this.uiCombo.panel, {
			mouseover: function( e ) {
				$(e.target).closest('.coral-combobox-item').addClass('coral-combobox-item-hover');	
			},
			mouseout: function( e ) {
				$(e.target).closest('.coral-combobox-item').removeClass('coral-combobox-item-hover');
			},
			mousedown: function( e ) {
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});
				var item = $(e.target).closest('.coral-combobox-item'),
				value = item.attr("value");
				// 点击面板上面的查询框的时候，不能返回false，否则不能选中查询框里面的内容。
				if ( $(e.target).closest('.coral-combo-filterbox').length ) return;
				// 如果判断点击的不是选项，可能是点击的滚动条，返回false才能阻止事件冒泡；
				if (!item.length || item.hasClass('coral-combobox-item-disabled')){return false;}
				var i = this.getRowIndex( value );
				if ( false === this._trigger("beforeSelect", null, [ {"item":this.options.data[i]},{"data":this.options.data[i]} ]) ) {
					return false;
				} 
				if (this.options.multiple) {
					this.oldText = this.uiCombo.textbox.val();// 20150121重新设置之前保存下text
					if ("" === value) {
						this.clear();
						this.hidePanel();
						this.select(value);
					} else {
						if (this.options.emptyText) {
							this.unselect("");
						}
						if (item.hasClass("coral-combobox-item-selected")) {
							this.unselect(value);
							item.removeClass("coral-combobox-item-selected");
						} else {
							this.select(value);
						}
					}
				} else {
					this.oldText = this.uiCombo.textbox.val();// 20150121重新设置之前保存下text
					this.hidePanel();
					this.select(value);
				}
				return false;
			}
			
		});
		if(this.options.isLabel && this.options.emptyText && "" === this.getValue()) {
			this.uiCombo.textbox.val("");
		}
	}, 
	_initData : function() {
		if (this.options.url) {
			return this._request(this.options.url);
		}
		
		if ( this.options.data.length ) {
			return this.loadData(this.options.data);
		}
		
		return this.loadData(this.transformData);
	},
	_renderItems: function( data ){
		var opts     = this.options,
		    panel    = this.panel(),
		    that     = this,
			defaultOption = {},
			selected = [],
			itemStr = [],
			i,
			restAttr = '',
			formatterEvent = $.coral.toFunction(this.options.formatter),
			itemattrFun = $.coral.toFunction(this.options.itemattr);
		for (i = 0; i < data.length; i++) {
			var row = data[i],
				v = row[opts.valueField],
				s = row[opts.textField],
				classes = !! row.hidden == true ? "hidden" : "",
				style = "",
				fmt = s;
			if (formatterEvent) {
				fmt = formatterEvent.call(this.element, data[i]);
			}
			if ($.isFunction(itemattrFun)) {
				var itemAttrObj = itemattrFun.apply( this.element[0], [{"item":data[i]}]);
				if (!$.isEmptyObject( itemAttrObj )) {
					if (itemAttrObj.hasOwnProperty("style")) {
						style += itemAttrObj.style;
						delete itemAttrObj.style;
					}
					if (itemAttrObj.hasOwnProperty("class")) {
						classes += ' ' + itemAttrObj['class'];
						delete itemAttrObj['class'];
					}
					try { delete itemAttrObj.role; } catch(ra){}
					for (attrName in itemAttrObj) {
						if (itemAttrObj.hasOwnProperty(attrName)) {
							restAttr += ' ' + attrName + '=' + itemAttrObj[attrName];
						}
					}
				}
				itemStr.push("<div class='coral-combobox-item "+ classes + restAttr +"' style='"+ style +"' id='"+this.options.itemIdPrefix+"_"+ i + "' value='"+v+"'>"+fmt+"</div>");
				
			}else{
				itemStr.push("<div class='coral-combobox-item "+ classes +" ' id='"+this.options.itemIdPrefix+"_"+i+"' value='"+v+"'>"+fmt+"</div>");
			}
			if ( row['selected'] && $.inArray(v, selected) === -1 ) {
				selected.push(this.getModeValue(v, s));
			}
		}
		this.lazyPanelHtml = itemStr.join("");
		this.uiCombo.pContent.html( this.lazyPanelHtml );
		return selected;
	},
	loadData: function(data, remainText, loadEvent) {
		var opts     = this.options,
		    panel    = this.panel(),
		    that     = this,
		    loadevent = loadEvent ||"onLoad",
			formatterEvent = $.coral.toFunction(this.options.formatter),
			defaultOption = {},
			selected = [], 
			clearValues = false,
			values   = null;
		if (!(data instanceof Array)) data = [];
		this.data = (data || []);
		this.options.data = (data || []);
		if (this.options.emptyText) {
			if (!(data.length > 0 && "" === data[0][this.options.valueField])) {
				defaultOption[this.options.valueField] = "";
				defaultOption[this.options.textField] = this.options.emptyText;
				data.unshift(defaultOption);
			}
		}
		if ( opts.clearOnLoad ){
			clearValues = that._clearValues(this.data);
		}
		this.uiCombo.pContent.empty();	// clear old data
		var itemStr = [];
		selected = this._renderItems(this.data);
		if (selected.length == 0 && !this.currentValues.length && this.options.selectedIndex!=null && data[this.options.selectedIndex]) {
			selected = [data[this.options.selectedIndex].value];
		}
		if (!this.options.panelRenderOnShow) {
			this.uiCombo.pContent.html(this.lazyPanelHtml);
			this.panelRendered = true;
		}
		
		// option.value有值，则优先
		if (this.currentValues.length && !clearValues) {
			selected = this.currentValues;
		}
		// 已设值且不为空，则优先级别为最高
		/*values = this.currentValues;
		if ("" !== values.toString()) {
			selected = values;
		}*/
		if (!this.isInit) {
			this.isInit = true;
			this.originalValue = selected.join(",");
		}
		this.dataLoaded = true;
		if (opts.multiple) {
			this.setValues(selected, false, remainText);
		} else {
			selected = selected.length?[selected[0]]:[];
			this.setValues(selected, false, remainText);
		}
		this._trigger(loadevent, null, [data]);
	},
	localFilter: function(filterEvent) {
		var data = this.getData() , 
			item = this.panel().find(".coral-combobox-item");
		for(var i = 0; i < data.length; i++) {
			$(item[i]).hide();
			if (filterEvent.apply(this.element, [data[i]])) {
				var v = data[i][this.options.valueField];
				var s = data[i][this.options.textField];
				$(item[i]).show();//此处注意不能移除选项上的class hidden
			}
		}
	},
	_scrollTo : function(value) {
		var panel = this.panel().find(".coral-combo-content"),
			h;
		var item = this.getEl( value );
		if (item.length) {
			if (item.position().top <= 0) {
				h = panel.scrollTop() + item.position().top;
				panel.scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.height()) {
				h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
				panel.scrollTop(h);
				//panel.children(".coral-combo-content").scrollTop(h);
				//: TODO bug 有maxheight或者搜索框的时候，滚动条出现在content上而不是panel上
			}
		}
	}, 
	_transformData : function() {
		var opts = this.options;
		var data = [];
		$(">option", this.element).each(function() {
			var item = {};
			item[opts.valueField] = $(this).attr("value") !== undefined ? $(this).attr("value") : $(this).html();
			item[opts.textField]  = $(this).html();
			item["selected"]      = $(this).attr("selected");
			data.push(item);
		});
		return data;
	},
	_showItems : function(){
		this.uiCombo.panel.find(".coral-combobox-item").show();
	},
	_doQuery : function(q) {
		var opts = this.options,
		    filterEvent = this.options.filter;
		if (opts.mode == "remote") {
			this._request(null, {q:q}, true);
		} else {
			var panel  = this.panel();
			var data = this.getData() , item = panel.find(".coral-combobox-item");
			item.hide();
			//重新查询前，将之前的高亮标签删除
			this._removeHighlight(this.uiCombo.pContent.find("span.coral-keyword-highlight"));
			this.uiCombo.pContent.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
			this.uiCombo.pContent.find(".coral-item-focus").removeClass("coral-item-focus");
			//
			for(var i = 0; i < data.length; i++) {
				var spell = pinyinEngine.toPinyin(data[i][opts.textField],false,"");
				for(var j = 0;j< q.length;j++){
					var r = filterEvent.apply(this.element, [q[j], data[i]]);
					if (r) {
						var v = data[i][opts.valueField].toString();// 匹配的value
						var t = data[i][opts.textField];// 匹配的text
						
						if (t.indexOf(q[j]) > -1 || v.indexOf(q[j]) > -1 || spell.indexOf(q[j]) > -1) {
							//被隐藏的值不在搜索结果中
							if($.inArray($(item[i]).attr("value"),this.hideValueArr) != -1){
								$(item[i]).hide();
							} else {
								$(item[i]).show();//此处注意不能移除选项上的class hidden
								if( t == q[j] ){
									$(item[i]).addClass("coral-combobox-item-selected");
									this._removeHighlight( $(item[i]).find("span.coral-keyword-highlight") );
								} else if (r == "text") {
									// 如何是匹配的text，则高亮其中的关键字
									this._addHighlight( $(item[i]), q[j] );
								}
							}
						}
					}
				}
			}
		}
	}, 
	// checkTypeFlag 为false的时候（查询），不应该将所有项目显示出来
	_checkMathch: function(text, noSearchFlag){
		var valarr = [],
			textarr = [];
		var opts = this.options,
			textField = opts.textField,
			valueField = opts.valueField;
		var matchedIndex = 0;
		if ( noSearchFlag ) {
			this._showItems();
		}
		var matched = false;
		var data = this.data,
			modevalue = "",
			exsit = {},
			repeatIndex = 0,// 选中的值
			i,
			j;
		if ( opts.multiple ) {
			for(i = 0; i < text.length; i++){
				for(j = 0; j < data.length; j++){
					if( data[j][textField] != text[i] && data[j][valueField] != text[i] ){
						exsit[i.toString()] = true;
					}
					if( data[j][textField] == text[i] ){
						modevalue = this.getModeValue(data[j][valueField], data[j][textField]);
						valarr.push( modevalue );
						matched = true;
						break;
					}
				}
				if ( !matched && !opts.forceSelection ) {
					// 如果查询的文本与data中的value匹配，查询的时候，不能进行选中，失去焦点的时候才可以选中
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
						valarr.push(text[i]);
						textarr.push(text[i]);
					}
				}
				matched = false;
			}
		} else {
			var index = -1;
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < data.length; i++ ){
				if ( data[i][textField] == text[0] ){
					index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
					matched = true;
				}
				if( data[i][textField] != text[0] && data[i][valueField] != text[0] ){
					exsit["0"] = true;
				}
			}
			if ( matched ) {
				modevalue = this.getModeValue(data[index][valueField], data[index][textField]);
				valarr.push( modevalue );
			}
			if ( !matched && !opts.forceSelection ) {
				// 如果查询的文本与data中的value匹配，查询的时候，不能进行选中，失去焦点的时候才可以选中
				if ( ( !exsit["0"] && !noSearchFlag ) || noSearchFlag ) {
					valarr.push(text[0]);
					textarr.push(text[0]);
				}
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		};
	},
	_request : function(url, param, remainText) {
		var that = this,
		    opts = {}, 
		    data = [], 
		    loaderEvent = this.options.loader,
		    isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		} else if (!url && that.options.url){
			url = that.options.url;
		}
	    if ( typeof( url ) !== "string" ) {
	    	
		// 传过来的是object，需要区别是data还是options
		// 如果是options，可能是options.data或者options.url ，否则才为data
		    opts = url;
		    if (opts.data) { //传进来的是options对象
			    data = opts.data;			    
		    } else if (opts.url) {// 传进来的是data对象
			    url = opts.url;
			    that.options.url = opts.url;
			    isUrl = true;
		    } else if (opts instanceof Array) {
			    data = url;
		    } else if (!opts.url && !opts.data && !that.options.url) {
		    	data = [];
		    } else if (!opts.url && !opts.data && that.options.url) {
		    	url = that.options.url ;
		    	isUrl = true;
		    }
	    } else {
	    	that.options.url = url;
		    isUrl = true;
	    }
	    if (isUrl){
	    	param = param || {};
			if (this._trigger("beforeLoad", null, [param]) == false) return;
			loaderEvent.apply(this.element, [param, function(data) {
				var loadEvent =  opts.onLoad;
				that.loadData(data, remainText , loadEvent);
//				that._trigger($.isFunction( opts.onLoad ) ? opts.onLoad:"onLoad", null, [data]);
				that._loadedHandler();
			}, function() {
				that._trigger("onError", null, arguments);
			}]);
	     } else{
	    	 var loadEvent = opts.onLoad ;
			 that.loadData(data, remainText , loadEvent);
	     }
	},
	/**
	 * 加载后执行缓存的方法
	 */
	_loadedHandler: function() {
		var that = this;
		/** setValues **/
		var item_setValues = this._getCacheItem("setValues");
		if (item_setValues) {
			this.setValues(item_setValues.values, item_setValues.triggerOnChange, item_setValues.remainText);
			this._removeCacheItem("setValues");
		}
		/** focus **/
		var item_focus = this._getCacheItem("focus");
		if (item_focus) {
			//this.focus();
			this._removeCacheItem("focus");
		}		
	},
	_selectItems: function(isFirst,direction) {
		var panel = this.panel(),
		    item  = null, value = null,
		    focus = panel.find(".coral-item-focus:visible"),
		    position = ":last";
		if (isFirst) {
			position = ":first";
		}
		focus.removeClass("coral-item-focus");
		if ( focus.length ) {
			value = focus.attr("value");
		} else {
			focus = item = panel.find(".coral-combobox-item-selected:visible" + position);
			if (item.length) value = item.attr("value");
		}
		if(direction == "prev"){
			if(focus.prevAll(":visible").length === 0){
				focus = panel.find(".coral-combobox-item:visible:last") ;
				focus.addClass("coral-item-focus");
			}else{
				focus.prevAll(":visible:eq(0)").addClass("coral-item-focus");
			}
		}else{
			if(focus.nextAll(":visible").length === 0){
				focus = panel.find(".coral-combobox-item:visible:first") ;
				focus.addClass("coral-item-focus");
			}else{
				focus.nextAll(":visible:eq(0)").addClass("coral-item-focus");
			}
		}
		return value;
	},
	_selectPrev : function() {
		var panel  = this.panel(),
		   targetValue = this._selectItems(true,"prev"),
		   item = panel.find(".coral-combobox-item[value=\"" + targetValue + "\"]"),
		    prev = null, value= null;
		if (item.length){
			prev = item.prevAll(":visible:eq(0)");
		} else {
			item = panel.find(".coral-combobox-item:visible:last");
		}
		if (null !== prev && prev.length === 0) {
			prev = panel.find(".coral-combobox-item:visible:last");
		}
		value = !!prev ? prev.attr("value") : item.attr("value");
		this.select(value);
		//item.focus();
		this._scrollTo(value);
	},
	_selectNext: function() {
		var panel  = this.panel(),
		    targetValue = this._selectItems(true,"next"),
		    item = panel.find(".coral-combobox-item[value=\"" + targetValue + "\"]"),
		    next = null,
		    value= null;
		if (item.length) {
			next = item.nextAll(":visible:eq(0)");
		} else {
			item = panel.find(".coral-combobox-item:visible:first");
		}
		if (next && next.length == 0) {
			next = panel.find(".coral-combobox-item:visible:first");
		};
		value = next ? next.attr("value") : item.attr("value");
		this.select(value);
		//item.focus();
		this._scrollTo(value);
	},

	_doEnter : function (e) {
		var panel  = this.panel(),
			values = this.getValues(),
			item = panel.find(".coral-item-focus:visible"),
			i,
			data = this.getData(),
			opts = this.options,
			value = item.attr("value");
		if ( value ) {
			var modeValue = "", matchedIndex = 0;
			for(i=0;i < data.length;i++){
				if(value == data[i][opts.valueField]){
					matchedIndex = i;
				}
			}
			modeValue = this.getModeValue(value, data[matchedIndex][opts.textField]);
			if ( this.options.multiple ) {
				if ($.inArray(modeValue, values) == -1) {
					this.select(value);
				} else {
					this.unselect(value);
				}
			} else {
				this.hidePanel();
			}
		}
	},	
	_formatValue: function(value) {
		var data = this.getData(), opts = this.options,
		    valueField = opts.valueField, textField  = opts.textField,
		    i = 0, row = null;
		if ("text" === opts.postMode || "value-text" === opts.postMode) {
			for (i = 0; i < data.length; i++) {
				row = data[i];
				if ("" != value && value == row[valueField]) {
					if ("text" === opts.postMode )	return row[textField];
					if ("value-text" === opts.postMode) return value + opts.valueTextSeparator + row[textField];
				}
			}
		}
		return value;
	},
	_destroy : function () {
		this.element.removeClass("coral-validation-combobox");
		this.element.removeClass("coral-form-element-combobox");
		this._super();
	}, 
	/**
	 * postMode有多种形式，此方法只获得value部分
	 */
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
			( !this.currentValues[0] && 
			this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row        = null;
			if ("value-text" === opts.postMode) {
				value = value.split(opts.valueTextSeparator)[0];
				valArr.push(value);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
		}
		return valArr;
	},
	_getCurrentValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
			( !this.currentValues[0] && 
			this.currentValues.length === 1) ) return valArr;
		return this.currentValues;
	},
	getData: function() {
		return this.data || [];
	},
	/**
	 *  triggerOnChange : true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	 */
	setValues: function( values, triggerOnChange, remainText ) {
		var opts  = this.options,
		    data  = this.getData(),
			panel = this.panel(),
			mOptions = remainText,
		    i = 0, j = 0,
		    oldValues = this.getValues() || [],
			valueArr = [], textArr = [],valArr = null,
			value = null, text = null;
		
		if ( typeof ( mOptions ) == "object" ){
			remainText = mOptions.remainText;
			triggerOnChange = mOptions.triggerOnChange;
		}
		// 当前值缓存，防止异步加载下拉选项时，设值不起作用
		this.currentValues = values;
		if(!this.dataLoaded){
			return;
		}
		panel.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
		for(i = 0; i < values.length; i++){
			if(this.options.setEmpty!=null && values[i] == this.options.setEmpty){
				values[i] = "";
			}
			value = values[i];
			text = value;
			
			var index = this.getRowIndex( value );
			if ( index > -1 ) {
				text = data[ index ][ opts.textField ];
				valArr = data[ index ][ opts.valueField ];
				var row = this._getItemByIndex( index ).addClass("coral-combobox-item-selected");
				// 如果emptyText存在 并且被选中的时候，设置placeholder
				if ( opts.emptyText && "" == value ) {
					this.uiCombo.textbox.attr( "placeholder", opts.emptyText );
					this._showPlaceholder(opts.emptyText);
					text = "";
				} else {
					this._hidePlaceholder();
				}
				// 如果emptyText存在 并且被选中的时候，设置placeholder
				textArr.push( text );
				valueArr.push( value );
			} else if ( index < 0 && !opts.forceSelection ) {
				textArr.push( text );
				valueArr.push( value );
			} 
		}
		
		if (!remainText) {
			this._setText( textArr.join(opts.separator));
		}
		// added by @lhb @20150414 : 如果没有对应值，则设置传进的值
		var noValueArr = this._getMinus(valueArr, values);
		if ( (noValueArr.length && valueArr.length) || !valueArr.length ) {
			textArr = textArr.concat(noValueArr);
			if (!remainText) {
				this._setText( textArr.join(opts.separator) );
			}
			valueArr = values;
		}
		this._super( valueArr,triggerOnChange, remainText);	
	},
	/**
	 * 获取第一个数组中没有，第二个数组中有的项，返回一个数组
	 * @param a,b {Array} : 两个数组
	 * @return b_a {Array} : 第二个数组减去第一个数组的结果
	 */
	_getMinus: function(a, b) {
		var b_a = [];
		
		$.each(b, function(i, o) {
			if ( $.inArray(o, a) == -1 ) {
				b_a.push(o);
			}
		});	
		
		return b_a;
	},
	getEl:function( value ){
		var index = this.getRowIndex( value );
		var id = index;
		return $( '#'+this.options.itemIdPrefix+"_"+id );
	},
	_getItemByIndex:function( index ){
		var id = index;
		return $( '#'+this.options.itemIdPrefix+"_"+id );
	},
	getRowIndex: function( value ){
		var opts = this.options,
			data = this.getData(),
			postMode = opts.postMode;
		for(var i=0; i<data.length; i++){
			if ( postMode == "value") {
				if (data[i][opts.valueField] == value){
					return i;
				}
			} 
			if ( postMode == "text") {
				if (data[i][opts.textField] == value){
					return i;
				}
			}
			if ( postMode == "value-text") {
				if (data[i][opts.valueField] == value.split(opts.valueTextSeparator)[0]){
					return i;
				}
			}
		}
		return -1;
	},
	clear: function() {
		var panel = this.panel();
		this._super();
		panel.find(".coral-combobox-item-selected").removeClass("coral-combobox-item-selected");
		panel.find(".coral-item-focus").removeClass("coral-item-focus");
	},
	reload: function(url) {
		this._request(url);
	},
	select: function(value) {
		var opts = this.options,
	    	data = this.getData(),
	    	i,
	    	values;
		value = $.trim( value );// enter的时候有空格
		if (opts.multiple) {
			values = this.getValues();
		} else {
			values = [];
		}
		
		var modeValue = "", matchedIndex = 0;
		for (i = 0 ; i < data.length ; i++) {
			if (value == data[i][opts.valueField]) {
				matchedIndex = i;
			}
		}
		modeValue = this.getModeValue(value, data[matchedIndex][opts.textField]);
		// 如果点击的是重复的则返回
		for(i = 0; i < values.length; i++) {
			if (values[i] == modeValue) return;
		}
		values.push(modeValue);
		this.setValues(values, true, false);
		this._trigger("onSelect", null, [{
			"item": data[matchedIndex],
			"value":value,
			"text":data[matchedIndex][opts.textField]
		}]);
	},
	getModeValue: function(value, text){
		var modeValue;
		if (this.options.postMode == "value") {
			modeValue = value;
		} 
		if (this.options.postMode == "text") {
			modeValue = text;
		}
		if (this.options.postMode == "value-text") {
			modeValue = value + "-" + text;
		}
		return modeValue;
	},
	unselect: function(value) {
		var opts  = this.options,
		    data  = this.getData(),
		    values= this.getValues(),
		    i;
		var matchedIndex = 0;
		for (i = 0 ; i < data.length ; i++) {
			if (value == data[i][opts.valueField]) {
				matchedIndex = i;
			}
		}
		if (this.options.postMode == "value") {
			value = value;
		} 
		if (this.options.postMode == "text") {
			value = data[matchedIndex][opts.textField];
		}
		if (this.options.postMode == "value-text") {
			value = value + "-" + data[matchedIndex][opts.textField];
		}
		for(i = 0; i < values.length; i++) {
			if (values[i] == value) {
				values.splice(i, 1);
				this.setValues(values, true, false);
				this._trigger("onSelect", null, [{
					"item" : data[matchedIndex],
					"value" : value,
					"text" : data[matchedIndex][opts.textField]
				}]);
				break;
			}
		}
	},
	showPanel: function() {
		//openPanel，将之前的高亮标签删除
		this._removeHighlight(this.uiCombo.pContent.find("span.coral-keyword-highlight"));
		var i = 0, value;
		this._super();
		if (!this.hideValueArr) return ;
		// 隐藏选项处理
		for (; i < this.hideValueArr.length; i++) {
			value = this.hideValueArr[i];
			this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + value + "\"]").addClass("hidden");
			//this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + value + "\"]").hide();
		}
	},
	// 添加下拉选项
	addOption: function(option) {		
		var that = this, i = 0, item = null,
		    valueField = this.options.valueField,
		    textField  = this.options.textField,
		    v = option[valueField],
		    s = option[textField];
		// 判断数据格式
		if (!(valueField in option) || !(textField in option)) {
			if ($.message) { 
				$.message("JSON格式不正确!");
			}
			return false;
		}
		// 检查valueField值是否重复
		for (i = 0; i < this.data.length; i++) {
			if ((option[valueField] == this.data[i][valueField]) || (option[textField] == this.data[i][textField]) ) {
				if ($.message) $.message("当前选项已存在!");
				return false;
			}
		}
		// 同步缓存 并 向下拉面板添加相应的选项
		item = $("<div class=\"coral-combobox-item\"></div>");
		item.attr("value", v);
		if (this.options.formatter) {
			item.html(this.options.formatter.call(this.element, option));
		} else {
			item.html(s);
		}
		if (this.data.length > 0 && "" == this.data[0][valueField]) {
			this.data.splice(1, 0, option);
			item.insertAfter(this.uiCombo.pContent.find(":first-child"));
		} else {
			this.data.unshift(option);
			item.prependTo(this.uiCombo.pContent);
		}
		// 事件绑定
		/*item.hover(
				function() { $(this).addClass("coral-combobox-item-hover");   },
				function() { $(this).removeClass("coral-combobox-item-hover");}
			).click(function() {
				var item = $(this), value = item.attr("value");
				
				if (that.options.multiple) {
					if ("" == value) {
						that.clear();
						that.select(value);
						that.hidePanel();
						return ;
					} else {
						if (that.options.emptyText) {
							that.unselect("");
						}
						if (item.hasClass("coral-combobox-item-selected")) {
							that.unselect(value);
						} else {
							that.select(value);
						}
					}
				} else {
					that.select(value);
					that.hidePanel();
				}
			});	*/	
		return true;
	},
	// 删除下拉选项
	removeOption: function(option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		var _option = null, value = null, i = 0,
		    valueField = this.options.valueField,
		    pos = null;
		// 索引值 
		if (typeof option === "number") {
			if (option > this.data.length) return ;
			_option = this.data[i];
			pos    = option;
		}
		// 隐藏值
		if (typeof option === "string") {
			value = option;
		}
		// 下拉选项JSON格式
		if (typeof option === "object") {
			if (!(valueField in option)) return;
			value = option[valueField];
		}
		// 查找对应的位置
		if (value !== null) {
			for (; i < this.data.length; i++) {
				 if (value == this.data[i][valueField]) {
					 _option = this.data[i];
					 pos     = i;
					 break;
				 }
			}
		}
		// 删除下拉选项相应信息
		if (pos !== null) {
			this.data.splice(pos, 1);
			this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + value + "\"]").remove();
		}
	},
	// 清除下拉框所有选项，病清除 value && text
	clearOptinons: function() {
		this.uiCombo.pContent.empty();
		this.clear();		
	},
	// 显示下拉选项
	showOption: function (option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		var jq;
		if (typeof option === "number") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item:eq(" + option + ")");
		} else if (typeof option === "string") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option + "\"]");
		} else if (typeof option === "object") {
			if (!(this.options.valueField in option)) return;
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option[this.options.valueField] + "\"]");
		} else {
			this.uiCombo.pContent.find(".coral-combobox-item").removeClass("hidden");
			this.hideValueArr = null;
		}
		if (jq && jq.length > 0) {
			jq.removeClass("hidden");// 此处不能通过hide方法，，必须removeClass hidden
			if (this.hideValueArr) {
				if($.inArray(jq.attr("value"), this.hideValueArr) > -1){
					this.hideValueArr.splice($.inArray(jq.attr("value"), this.hideValueArr), 1);
				}
			}
		}
	},
	// 隐藏下拉选项
	hideOption : function (option/*索引值 隐藏值 或下拉选项JSON格式*/) {
		if (!this.hideValueArr) this.hideValueArr = [];
		var jq;
		if (typeof option === "number") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item:eq(" + option + ")");
		} else if (typeof option === "string") {
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option + "\"]");
		} else {
			if (!(this.options.valueField in option)) return;
			jq = this.uiCombo.pContent.find(".coral-combobox-item[value=\"" + option[this.options.valueField] + "\"]");
		}
		if (jq && jq.length > 0) {
			jq.addClass("hidden");//此处必须通过class hidden来控制，否则会和过滤的功能冲突
			if($.inArray(jq.attr("value"),this.hideValueArr) == -1){
				this.hideValueArr.push(jq.attr("value"));
			}
		}
	}
});
})();
;

$.component( "coral.combotree", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["data", "rootNode","buttons","shortCut"],
	options: {
		valueField: 'id',
		textField : 'name',
		panelRenderOnShow: false,
		mode      : 'local',	// or 'remote'
		method    : 'post',
		url       : null,
		dialogMaxHeight: 500,
		data      : null,
		buttons   : [],
		postMode  : "value",    // value, text, value-text
		multiple  : null,		// 可多选树
		simpleDataEnable: false,
		simpleDataIdKey: "id",
		simpleDataPIdKey: "pId",
		simpleDataRootPId: null,
		rootNode: false,
		radioType: "level",
		showRootNode: true,
		allowPushParent: true,
		traversal : false,		// 是否遍历其父子节点
		cascadeCheck : false,	// 多选时不关联父子节点
		formatter: function(row) {
			var textField = $(this).combotree("option", "textField");
			return row[textField];
		},
		loader: function(param, success, error) {
			var that = this,
			    instance = $(this),
			    url = instance.combotree("option", "url");
			if (!url) return false;
			$.ajax({
				type: instance.combotree("option", "method"),
				url:  url,
				data: param,
				dataType: 'json',
				success: function(data) {
					success(data);
				},
				error: function(e){
					error.apply(this, arguments);
				}
			});
			/*$.ajax({
				type: "get",
				url:  url,
				data: {},
				dataType: 'json',
				success: function(data) {
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});*/
			//return false;
		},
		
		beforeClick: null,   /*下拉树 beforeClick(treeId, treeNode)事件*/
		beforeLoad : $.noop, /*参数(event, param)*/
		onLoad     : $.noop, /*数据加载成功*/ 
		onError    : $.noop, /*数据加载失败*/
		onSelect   : $.noop, /*参数(event, {valueField, textField})*/
		unSelect : $.noop,  /*参数(event, {valueField, textField})*/	
		onExpand: null,		
		onClick : null
	}, 	
	/**
	 * return $tree
	 */
	tree: function () {
		return $("#"+$(this.element).attr('id')+"_tree");
	},
	/**
	 * keysObj ({id:testId, name:testName, ... })
	 */
	_filterLocalTree: function (keysObj) {
		var that = this,
			treeObj = $("#"+$(this.element).attr('id')+"_tree");
		// 支持拼音搜索
		treeObj.tree ("filterNodesByParam", keysObj);	
	},
	_create : function() {
		var that = this,
		    showPanelEvent = null;
    	this.element.addClass("coral-form-element-combotree coral-validation-combotree coral-combobox-f ctrl-form-element");
    	
		showPanelEvent = function(){
			
		};
		this.options.onShowPanel = showPanelEvent;
		this._super();
		//lihaibo
		if ( this.options.popupDialog ) {
			this.uiCombo.popupInputbox = this.uiCombo.popupInputbox.textbox({
				componentCls: "coral-combo-popup-input",
				icons: [ {
					icon: "cui-icon-search2",
					click: function (e, data) {						
						that._filterLocalTree({"name": data.value});
					}
				}],
				onKeyUp: function (e, data) {					
					that._filterLocalTree({"name": data.value});
					
					e.stopPropagation();
				}
			});
			
			this.uiCombo.popupDialog.dialog({
				autoOpen : false,
				title: "下拉树",
				maxHeight: typeof this.options.dialogMaxHeight === "string" ? parseInt(this.options.dialogMaxHeight) : this.options.dialogMaxHeight,
				height : 'auto',
				width : 'auto',
				modal : true,
				resizable: false,
				buttons: {
					"确定" : function(e) {
						var valueArr = $.data( that.uiCombo.popupInputbox, "value"),
							textArr = $.data( that.uiCombo.popupInputbox, "text");
						if ( valueArr ) {
							that.setValues(valueArr, true, textArr);
						}
						$(this).dialog("close");
					},
					"关闭" : function(e) {
						$(this).dialog("close");
					}
				}		
			});		
		}
		this.uiCombo.panel.unbind().bind('mouseover', function(e){
			$(e.target).closest('.coral-combobox-item').addClass('coral-combobox-item-hover');
		}).bind('mouseout', function(e){
			$(e.target).closest('.coral-combobox-item').removeClass('coral-combobox-item-hover');
		}).bind('mousedown', function(e) {
			that.cancelBlur = true;
			that._delay(function() {
				delete that.cancelBlur;
			}, 100);
			return false;
		});	
	}, 
	_getSetting: function(){
		var that = this;
		var setting = {
			simpleDataEnable: this.options.simpleDataEnable,
			simpleDataIdKey: this.options.simpleDataIdKey,
			simpleDataPIdKey: this.options.simpleDataPIdKey,
			simpleDataRootPId: this.options.simpleDataRootPId,
			checkable : this.options.multiple == null ? this.options.checkable : this.options.multiple,
			chkStyle : this.options.chkStyle,	
			radioType: this.options.radioType,
			showRootNode:this.options.showRootNode,
			rootNode:this.options.rootNode,
			chkboxType  : this.options.cascadeCheck ? {"Y":"","N":""} : { "Y" : "ps", "N" : "ps" },
			beforeClick : function ( treeId, treeNode ) {
				if ( !that.options.allowPushParent && treeNode.isParent ) return false;
				var fn = $.coral.toFunction( that.options.beforeClick );
				if ( !that.options.multiple ) {
					if(!that.options.checkable){
						if ( $.isFunction(fn) ) {
							return fn(treeId, treeNode);
						}
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			},
			onClick : function( e, treeId, treeNode, clickFlag ) {
				var textArr = [];
				var valueArr = [];
				textArr.push( treeNode.name );
				valueArr.push( treeNode.id );
				if( that.options.traversal ){
					var pNode = treeNode.getParentNode();
					while( !!pNode ) {
						textArr.push(pNode.name);
						//valueArr.push(pNode.id);
					    pNode = pNode.getParentNode();
					}
				}

				if ( that.options.popupDialog ) {
					$.data( that.uiCombo.popupInputbox, "value", valueArr.reverse() );
					$.data( that.uiCombo.popupInputbox, "text", textArr.reverse() );
				} else {
					//给下拉框赋值
					that.setValues(valueArr.reverse(), true,textArr.reverse());
				}	
				if ( !that.options.multiple && !treeNode.isParent ||
						!that.options.multiple && that.options.allowPushParent ) {
					that.hidePanel();
				} 
				//that._trigger("onClick", e, {treeId:treeId, treeNode:treeNode, clickFlag:clickFlag});
				that._trigger("onNodeClick", e, {treeId:treeId, node:treeNode, treeNode:treeNode, clickFlag:clickFlag});
				// 添加onSelect事件
				//that._trigger("onSelect", e, {treeId:treeId, treeNode:treeNode});
				return false;
			},
			beforeCheck: function( treeId, treeNode ){
				//if ( !that.options.parentNodeAllowCheck && treeNode.isParent ) return false;
				var ret = that._trigger("beforeNodeCheck", null, {treeId: treeId, node:treeNode});
				if ( !ret ) return false;
			},
			onCheck : function(e, treeId, treeNode){
				var textArr = [];
				var valueArr = [];
				var nodes = $('#'+treeId).tree("getCheckedNodes",true);
				for (var i=0, l=nodes.length; i<l; i++) {
					//在关联父子节点时,半选状态节点不作为下拉框的值
					if(that.options.cascadeCheck || !nodes[i].getCheckStatus().half){
						if (!that.options.allowPushParent && nodes[i].isParent) {
							continue;
						}
						textArr.push(nodes[i].name);
						valueArr.push(nodes[i].id);
					}
				}
				
				if ( that.options.popupDialog ) {
					$.data( that.uiCombo.popupInputbox, "value", valueArr);
					$.data( that.uiCombo.popupInputbox, "text", textArr);
				} else {
					//给下拉框赋值
					that.setValues(valueArr, true,textArr);
				}									
				that._trigger("onNodeCheck", e, {treeId:treeId, node:treeNode});
			},
			onLoad : function (e, treeId, treeNode, msg) {
				var textArr = [],
				 	valueArr = [],
				 	i,
				 	nodes = [],
				 	clearValues = false,
				 	$cbTree = $('#'+treeId),
				 	data = $cbTree.tree("getNodes"),
				    dataJson = $cbTree.tree("transformToArray",data);
				if (  that.options.clearOnLoad ){
					clearValues = that._clearValues( dataJson );
				}
				
				if ($cbTree.tree("option", "checkable") == true) {
					nodes = $cbTree.tree("getCheckedNodes",true);
					for (i=0, l=nodes.length; i<l; i++) {
						//在关联父子节点时,半选状态节点不作为下拉框的值
						if (that.options.cascadeCheck || !nodes[i].getCheckStatus().half) {
							if (!that.options.allowPushParent && nodes[i].isParent) {
								continue;
							}
							textArr.push(nodes[i].name);
							valueArr.push(nodes[i].id);
						}
					} 
					if(textArr.length == 0) {
						textArr = false;
					}
				} else {
					textArr = false;
				}
				if (that.currentValues.length && !clearValues) {
					valueArr = that.currentValues;
				}
				if (!that.isInit) {
					that.isInit = true;
					that.originalValue = valueArr.join(",");
				}
				that.isLoaded = true;
				that.dataLoaded = true;
				//给下拉框赋值
				that.setValues(valueArr, false,textArr);	
				// 添加onLoad事件
				that._trigger("onLoad", e, {treeId:treeId, treeNode:treeNode, msg:msg});
			},
			onExpand: function (e, treeId, node) {
				that._trigger("onExpand", e, [{treeId: treeId, node: node}]);
			}
		};
		return setting;
	},
	// 设置 popupDialog input 的值
	setPopupInput: function ( text ) {
		this.uiCombo.popupInputbox.textbox("setValue", text.join(this.options.separator) );
	},
	_initData : function() {
		var tree = $("<ul id=\""+$(this.element).attr('id')+"_tree\"></ul>");
		if ( this.options.popupDialog ) {
			tree.appendTo(this.uiCombo.popupDialog);
			this.uiCombo.popupDialogTree  = tree;
		} else {
			tree.appendTo(this.uiCombo.pContent);
		}
		this.uiCombo.panel.unbind().bind('mousedown', function(e){
			e.preventDefault();
		});
		
		var setting = this._getSetting();
		//异步树setting
		if ( typeof this.options.url == 'string' && this.options.url !== '' ) {
			$.extend(setting,{asyncEnable : true,asyncUrl : this.options.url,asyncAutoParam : 'id,name'});
		}
		//初始化tree
		tree.tree(setting, this.options.data);
	},	
	_renderItems: function( data ){
		
	},
	_scrollTo : function(value) {
		var panel = this.panel();
		var item = panel.find("div.coral-combobox-item[value=\"" + value + "\"]");
		if ( item.length ){
			if (item.position().top <= 0){
				var h = panel.scrollTop() + item.position().top;
				panel.scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.height()){
				var h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
				panel.scrollTop(h);
			}
		}
	}, 
	_request : function(url, param, remainText) {
	/*	var $tree = $("#"+$(this.element).attr('id')+"_tree");
		var opts = this.options, 
		    that = this,
		    loaderEvent = this.options.loader;
		if ( $.isArray( url ) ) {
			that.loadData(url, remainText);
		} else {
			if (url) {
				opts.url = url;
			}
			param = param || {};
			if (this._trigger("beforeLoad", null, [param]) == false) return;
			loaderEvent.apply(this.element, [param, function(data) {
				that.loadData(data, remainText);
			}, function() {
				that._trigger("onError", null, arguments);
			}]);
		}*/
		var that = this,
	        opts = {}, 
	        data = [], 
	        loaderEvent = this.options.loader,
	        isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		}else if (!url && that.options.url){
			url = that.options.url;
		}
        if ( typeof( url ) !== "string" ) {
	     // 传过来的是object，需要区别是data还是options
	    // 如果是options，可能是options.data或者options.url ，否则才为data
	         opts = url;
	         if ( opts.data ) { //传进来的是options对象
		          data = opts.data;			    
	          } else if ( opts.url ) {// 传进来的是data对象
		          url = opts.url
		          that.options.url = opts.url;
		          isUrl = true;
	          } else if( opts instanceof Array ) {
		          data = url;
	          }else if ( !opts.url && !opts.data && !that.options.url ){
			      data = [];
			  }else if ( !opts.url && !opts.data && that.options.url ){
			      url = that.options.url ;
			      isUrl = true;
			  }
        } else {
    	    that.options.url=url
	        isUrl = true;
        }
        if ( isUrl ){
    	     param = param || {};
		     if (this._trigger("beforeLoad", null, [param]) == false) return;
		     loaderEvent.apply(this.element, [param, function(data) {
			      that.loadData(data, remainText);
			      that._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data]);
		      }, function() {
			      that._trigger("onError", null, arguments);
		      }]);
        } else{
    	    that.loadData(data, remainText);
    	    that._trigger($.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data]);
        }

	},
	getTree: function(){
		return $("#"+$(this.element).attr('id')+"_tree");
	},
	/**
	 * handle
	 */
	loadData: function (data, remainText) {
		var $tree = this.getTree();
		$tree.tree("reload", data);
		var nodes = $tree.tree("getNodes");
		// expand root node defaultly
		$.each( nodes, function( i, node ) {
			$tree.tree("expandNode", node, true);
		});
		this.dataLoaded = true;
		this.setValues(this.currentValues);
	},
	getData: function() {
		return this.getTree().tree("getNodes") || [];
	},	
	/**
	 * 加载后执行缓存的方法
	 */
	setComboValues: function(values, remainText) {
		this.setValues(values,false, remainText); // 20150121 不触发change，不校验
	},
	// 设置combo中的tree在不同状态下的选中状态。
	_setTreeNodeState: function(values, remainText) {
		var opts  = this.options,
			nodeName = [],
			$cbTree = $("#"+$(this.element).attr('id')+"_tree");
		// 清除selected状态
		$cbTree.tree("cancelSelectedNode");
		if ($cbTree.tree("option", "checkable") == true) {
			// 清空checked状态
			$cbTree.tree("checkAllNodes", false);
			// 设置checkbox
			for(i in values){
				var node = $cbTree.tree("getNodeByParam", "id", values[i]);
				if (node) {
					$cbTree.tree("checkNode", node, true, !opts.cascadeCheck);
				}
				// 获得value对应的text值
				if ( values || !remainText) {
					if (node) {
						nodeName.push(node.name);
					} else {
						nodeName.push(values[i]);
					}
				}
			}
		} else {
			for(i in values){
				var node = $cbTree.tree("getNodeByParam","id",values[i]);
				$cbTree.tree("selectNode",node);
				// 获得value对应的text值
				if (  values || !remainText) {
					if (node) {
						nodeName.push(node.name);
					} else {
						nodeName.push(values[i]);
					}
				}
			}
		}
		if ( values || !remainText) {
			remainText = nodeName;
		}
		return remainText;
	},
	//给下拉树赋值并赋值文本
	/**
	 *  isSelect : true(则是用户选择或取消选择的操作)；false(则是开发者代码调用setValues方法)。
	 */
	setValues: function(values, triggerOnChange, remainText) {
		var treeNodeText;
		// 当前值缓存，防止异步加载下拉选项时，设值不起作用
		this.currentValues = values;
		treeNodeText = this._setTreeNodeState(values, remainText).join(this.options.separator);
		remainText = typeof remainText == "boolean" ? remainText: false;
		if ( !remainText ) {
			this._setText(treeNodeText);
		} 
		this._super(values, triggerOnChange, remainText);
	},
	//赋值
	setValue: function(value, triggerOnChange, remainText){
		value = value.split( this.options.separator );
		this.setValues(value, false, remainText);
	},
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
				( !this.currentValues[0] && 
				this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i];
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
		}
		/*for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row = null;
			
			if ( "value-text" === opts.postMode ) {
				valArr.push(value.split(opts.valueTextSeparator)[0]);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
			
		}*/
		return valArr;
	},
	_showItems : function(){
		var allNodes = this.tree().tree("getNodes");
		var allNodesData = this.tree().tree("transformToArray",allNodes);
		this.tree().tree("showNodes", allNodesData,{showParents: true});
	},
	//下拉框查询方法
	_doQuery : function(q) {	
		if(q=='') return;
		var opts = this.options,
			dataArr = [],
			textField = opts.textField,
			valueField = opts.valueField,
		    filterEvent = this.options.filter;
		if (opts.mode == "remote") {
			this._request(null, {q:q}, true);
		} else {
			var nodes = this.tree().tree("getNodes");
			var data = this.tree().tree("transformToArray",nodes);
			this.tree().tree("hideNodes",data);
			for(var i = 0; i < data.length; i++) {
				var spell = pinyinEngine.toPinyin(data[i][textField],false,"");
				for(var j = 0;j< q.length;j++){
					var r = filterEvent.apply(this.element, [q[j],data[i]]);
					if (r) {
						var v = data[i][valueField];// 匹配的value
						var t = data[i][textField];// 匹配的text
						
						if (t.indexOf(q[j]) > -1 || spell.indexOf(q[j]) > -1) {
							dataArr.push(data[i]);
							this.tree().tree("showNodes",dataArr,{showParents: true});
							this.tree().tree("expandNode", dataArr[0].getParentNode(), true, false, false);
						}
					}
				}
			}
		}
	},
	_checkMathch:function(text, noSearchFlag){
		var valarr = [],
			textarr = [],
		 	tvalarr = [],
		 	ttextarr = [],
			nodes=[],
			i,
			j,
			k,
			h,
			options = this.options,
			textField = options.textField,
			valueField = options.valueField;
		if ( noSearchFlag ) {
			this._showItems();
		}
		var matched = false;
		var exsit = {};
		if ( options.multiple ) {
			this.tree().tree("checkAllNodes", false);
			for(i = 0; i < text.length; i++){
				if ( noSearchFlag ) {
					if ( this.options.forceSelection && $.trim( text[i] ) === "" ) {
						continue;
					}
				}
				var nodes = this.tree().tree("getNodesByParam", textField, text[i], null);
				if( !nodes.length ){
					exsit[i.toString()] = true;
				}
				for(j=0;j<nodes.length;j++){
					// cascadeCheck为true，说明父节点是可以单独选的
					if ( options.cascadeCheck || !nodes[j].isParent ) {
						valarr.push(nodes[j][valueField]);
						textarr.push(nodes[j][textField]);
						matched = true;
						break;
					}
				}
				if ( !matched && !this.options.forceSelection ) {
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
						valarr.push(text[i]);
						textarr.push(text[i]);
					}
				}
				matched = false;
			}
			for(h=0;h<valarr.length;h++){
				var nodes = this.tree().tree("getNodesByParam", valueField, valarr[h], null);
				if ( nodes.length ) {
					this.tree().tree("checkNode", nodes[0], true, !options.cascadeCheck);
				}
			}
			// 为了获取选中父节点的所有子节点，必须要等上面的checkNode方法执行后才有效。
			var nodes = this.tree().tree("getCheckedNodes",true);
			for (k=0, l=nodes.length; k<l; k++) {
				//在关联父子节点时,半选状态节点不作为下拉框的值
				if( options.cascadeCheck || !nodes[k].getCheckStatus().half ){
					if ( !options.allowPushParent && nodes[k].isParent ) {
						continue;
					}
					if ( $.inArray(nodes[k][valueField], valarr) == -1 ) {
						textarr.push(nodes[k][textField]);
						valarr.push(nodes[k][valueField]);
					}
				}
			}
		} else {
			var nodes = this.tree().tree("getNodesByParam", textField, text[0], null);
			var index = -1;
			for (i = 0; i < nodes.length; i++ ) {
				index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
				matched = true;
			}
			if ( matched ) {
				valarr.push(nodes[index][valueField]);
				textarr.push(nodes[index][textField]);
			}
			if ( !matched && !this.options.forceSelection ) {
				valarr.push(text[0]);
				textarr.push(text[0]);
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		}
	},
	//清除下拉框值
	clear: function(){
		this._super();
		//清除多选框选中
		if(this.options.multiple){
			$("#"+$(this.element).attr('id')+"_tree").tree("checkAllNodes",false);
		}
	},
	_formatValue: function(value) {
		var data;
		if ( this.options.multiple ) {
			data = this.getTree().tree("getCheckedNodes",true);
		} else {
			data = this.getTree().tree("getSelectedNodes");
		}
		var opts = this.options,
		    valueField = opts.valueField, textField  = opts.textField,
		    i = 0, row = null;
		if ("text" === opts.postMode || "value-text" === opts.postMode) {
			for (i = 0; i < data.length; i++) {
				row = data[i];
				if ("" != value && value == row[valueField]) {
					if ("text" === opts.postMode )	return row[textField];
					if ("value-text" === opts.postMode) return value + opts.valueTextSeparator + row[textField];
				}
			}
		}
		return value;
	},
	reload: function(url) {
		this._request(url);
	},
	_destroy : function () {
		var that = this;
		
		this.element.removeClass("coral-validation-combotree");
		this.element.removeClass("coral-form-element-combotree");
		if (this.options.popupDialog) {
			this.uiCombo.popupDialog.dialog("forceDestroy");
		}
		this._super();
	}	
});
;

$.component( "coral.combogrid", $.coral.combo, {
	version: "4.0.3",
	castProperties : ["colNames", "colModel", "data", "buttonOptions", "gridOptions","buttons","shortCut", "searchColumns"],
	options: {
		colNames: [],
		colModel : [],
		valueField: "id",
		textField: "name",
		panelRenderOnShow: false,
		multiple : false,
		selarrrow: [],
		buttons:[],
		searchColumns: [],
		url       : null,
		panelWidth : 500,
		panelHeight : 220,
		sortable : false,
		data      : [],
		onSelectAll : null,
		onSortableColums : null,
		onLoad     : $.noop, /*数据加载成功*/
		onComplete : null,
		pager: false,
		// add sub button options
		buttonOptions: null,
		gridOptions: {
			loadonce:"false"
		} // grid 额外的参数添加
	}, 
	grid: function () {
		return $("#combo_grid_"+$(this.element).attr('id'));
	},
	/**
	 * 获取combogrid的button组件
	 */
	button: function () {
		if (null !== this.options.buttonOptions) {
			return this.$button;
		}
	},
	_destroy : function () {
		this.element.removeClass("coral-validation-combogrid");
		this.element.removeClass("coral-form-element-combogrid");
		this.grid().grid("destroy");
		this._super();
	},
	_showItems:function(){
		var grepArr = [],valarr = [],textarr = [],new_arr = [];
		var textField = this.options.textField,
			valueField = this.options.valueField,
			sdata = {};
		var $grid = this.grid();
		sdata['filters'] = '{}';
		$grid.grid("option", "localonce", true);
		$.extend($grid.grid("option", "postData"),sdata);
		$grid.grid("reload", {page:1});
	},
	_doQuery:function(q){
		var opts = this.options,
			$grid = this.grid();
		var textField = opts.textField;
		var fields = $grid.grid("option", "colModel"),
			sdata = [],
			fieldsRules = [];
		for (var i in fields) {
			var item = fields[i];
			if ("cb" == item.name || "rn" == item.name) continue;
		}
		for(var j = 0;j< q.length;j++){
			q[j] = pinyinEngine.toPinyin(q[j], false, "");
			if(opts.searchColumns.length > 0){
				for(var i = 0;i < opts.searchColumns.length;i++){
					fieldsRules.push('{"field":"'+ opts.searchColumns[i] +'","op":"cn","data":"'+q[j]+'"}');
				}
			}else{
				fieldsRules.push('{"field":"'+ textField +'","op":"cn","data":"'+q[j]+'"}');
			}
		}
		sdata['filters'] = '{"groupOp":"OR","rules":['+ fieldsRules.join(",") +']}';
		$grid.grid("option", "localonce", true);
		$.extend($grid.grid("option", "postData"),sdata);
		$grid.grid("reload", {page:1});
	},
	_checkMathch:function(text, noSearchFlag){
		var grepArr = [],valarr = [],textarr = [],new_arr = [];
		var textField = this.options.textField,
			valueField = this.options.valueField,
			sdata = {},
			repeatIndex = 0,// 选中的值
			i,
			j;
		var $grid = this.grid();
		if ( noSearchFlag ) {
			this._showItems();
		}
		var data = this.grid().grid("option", "data");
		var matched = false;
		var exsit = {};
		if ( this.options.multiple ) {
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < text.length; i++ ){
				for( j = 0; j < data.length; j++ ){
					if( data[j][textField] != text[i] && data[j][valueField] != text[i] ){
						exsit[i.toString()] = true;
					}
					if ( data[j][textField] == text[i] ){
						valarr.push(data[j][valueField]);
						textarr.push(data[j][textField]);
						matched = true;
						break;
					}
				}
				if ( !matched && !this.options.forceSelection ) {
					if ( ( !exsit[i.toString()] && !noSearchFlag ) || noSearchFlag ) {
							valarr.push(text[i]);
							textarr.push(text[i]);
						}
				}
				matched = false;
			}
			// 检测缓存里面的值是否有匹配
			var valarrCache = this._getOnlyValues();
			var textarrCache = this._getOnlyTexts();
			for( i = 0; i < text.length; i++ ){
				for( j = 0; j < textarrCache.length; j++ ){
					if(textarrCache[j] == text[i] && 
						$.inArray(textarrCache[j], textarr) === -1){
						valarr.push(valarrCache[j]);
						textarr.push(textarrCache[j]);
					}
				}
			}
		} else {
			var index = -1;
			// 检测当前页里面的值是否有匹配
			for( i = 0; i < data.length; i++ ){
				if ( data[i][textField] == text[0] ){
					index = index===-1?i:index;// 单选的时候，只保留地一个匹配的选项
					matched = true;
				}
			}
			if ( matched ) {
				valarr.push(data[index][valueField]);
				textarr.push(data[index][textField]);
			}
			if ( !matched && !this.options.forceSelection ) {
				if ( ( !exsit["0"] && !noSearchFlag ) 
						|| noSearchFlag ) {
						valarr.push(text[0]);
						textarr.push(text[0]);
					}
			}
		}
		return {
			valarr:valarr,
			textarr:textarr
		};
	},
	/**
	 * reload
	 */
	reload: function( url ) {
		this.cache.isReload = true;
		var $grid = this.grid(),
		    that = this,
		    opts = {},
	        isUrl = false,
	        data = [];
		if ( !url && !this.options.url ) {
			url = [];
		} else if ( !url && this.options.url ) {
			url = this.options.url;
		}
		if ( typeof( url ) !== "string" ) {
			opts = url;
			if ( opts.data ) {
				data = opts.data;
			} else if ( opts.url ) {
				url = opts.url;
				isUrl = true;
			} else if ( url instanceof Array ) {
				data = url;
			} else if ( !opts.url && !opts.data && !this.options.url ) {
		    	data = [];
		    } else if ( !opts.url && !opts.data && this.options.url ) {
		    	url = this.options.url ;
		    	isUrl = true;
		    }
		} else {
			this.options.url = url;
			isUrl = true;
		}
		if ( $.isFunction( opts.onLoad ) ) {
			this.cache.onLoad = opts.onLoad;
		}
		if ( opts.postData ) {
			//this.cache.postData = opts.postData;
		}
		//现在都在grid的reload()里面处理
		$grid.grid("reload", url);
	},
	_removeGridHighlights: function() {		
		this._removeHighlight(
			this.grid().find(".coral-grid-btable tr td > span.coral-keyword-highlight"));
	},
	_renderItems: function( data ){
		
	},
	/**
	 * 给搜索到的grid结果集上加高亮显示
	 */
	_addGridHighlights: function() {
		this._addHighlight(this.grid().find(".coral-grid-btable .jqgrow").children("td"), 
			this.uiCombo.textbox.val());
	},
	/**
	** 每次选择一行时，更新缓存的value，text，rowId
	**/
	_updateGridData: function (ui) {
		var that = this;
		var rowData = this.grid().grid("getRowData", ui.rowId);
		var value = this._getTextFromHTML( rowData[this.options.valueField] );
		var text = this._getTextFromHTML( rowData[this.options.textField] );
		var index = $.inArray(value, this.gridValueArr);
		//单选时，不缓存值。
		if ( !this.options.multiple ) {
			this.gridValueArr = [value];
			this.gridTextArr = [text];
			this.gridRowIdArr = [ui.rowId];
			return ;
		}
		//多选时，缓存值。
		if ( !ui.status ) {
			if ( index != -1 ) {
				this.gridValueArr.splice(index, 1);
				this.gridTextArr.splice(index, 1);
				this.gridRowIdArr.splice(index, 1);
			}
		} else {
			if ( index == -1 ) {
				this.gridValueArr.push(value);
				this.gridTextArr.push(text);
				this.gridRowIdArr.push(ui.rowId);
			}
		}
	},
	_create : function() {
		var that = this, 
		    showPanelEvent = null, 
		    goptions;

    	this.element.addClass("coral-form-element-combogrid coral-validation-combogrid");
    	this._super();
		this.panelRendered = true;
		// add button code
		if (null !== this.options.buttonOptions) {
			this.$button = this._getButtonEl();
			this.component().append(this.$button).addClass("coral-combogrid-hasButton");
			this.$button.button(this.options.buttonOptions);
		}
		this.uiCombo.panel.unbind().bind('mousedown', function(e) {
			that.cancelBlur = true;
			that._delay(function() {
				delete that.cancelBlur;
			});
			var p = $(e.target).closest(".coral-grid-pager").length;
			if (p==1) {
				return true;
			} else {
				return false;
			}
		});
	}, 
	_initCombo: function() {
		this._super();
		var $grid = $();
		
		if ( this.options.pager ) {
			grid = $('<div id="combo_grid_'+$(this.element).attr('id')+'"><div class="combo_grid_'+$(this.element).attr('id')+'"></div></div>').appendTo(this.uiCombo.pContent);	
		} else {
			grid = $('<div id="combo_grid_'+$(this.element).attr('id')+'"></div>').appendTo(this.uiCombo.pContent);	
		}
		
		// 缓存value，text，rowId数组，用以设置值
		this.gridValueArr = [];
		this.gridTextArr = [];
		this.gridRowIdArr = [];

		goptions = {
			fitStyle: "fill",
			keyName: this.options.valueField,
			sortable: this.options.sortable,
			colModel : this.options.colModel,
		    colNames : this.options.colNames,
			multiselect: this.options.multiple,
			sortname : this.options.sortname,
			width : "auto"
		};
		goptions = $.extend({}, goptions, this.options.gridOptions);
		
		if (null != this.options.url) {
			goptions.url = this.options.url;
			goptions.datatype = "json";
		} else {
			goptions.data = this.options.data;
			goptions.datatype = "local";
		}
		
		this._on(grid, {
			gridonselectrow: function(e, ui) {
				var value = this._getOnlyValues();
				if (this.options.multiple) {
					if ( $.inArray(ui.rowId,value)==-1 ){
						value.push(ui.rowId);
					} else {
						value.splice( $.inArray( ui.rowId, value ), 1 );
					}
				} else {
					value = [ ui.rowId ];
				}
				this.setValues(value, true, false);
				if (!this.options.multiple && e.originalEvent && e.originalEvent.type == "click" ) {
					this.hidePanel();
				}
				this._trigger("onSelectRow", e, [{'rowId':ui.rowId, 'status':ui.status}]);
			},
			gridonselectall: function(e, ui) {
				var tvalue = ui.status ? ui.aRowIds.concat():[];
				this.setValues(tvalue, true, false);
			},
			gridonload: function(e, ui) {
				var t = this,
					clearValues = false,
				    data = ui.data;
				if (t.options.clearOnLoad){
					clearValues = t._clearValues(data);
				}
				this._addGridHighlights();
				this.dataLoaded = true;
				var selarrrow = this.grid().grid("option", "selarrrow").concat();
				for(var i =0;i< selarrrow.length;i++){
					this.grid().grid("setSelection", selarrrow[i], false);
				}
				var value = this._getOnlyValues();
				// 点击分页码时，reload，设置缓存的值
				$.each(value, function(i, v) {
					t.grid().grid("setSelection", v, false, null);					
				});
				if (clearValues == true) {
					this.currentValues = [];
				}
				if(!this.search){
					this.setValues(this.currentValues);
					this.search = false;
				}
				if (this.cache.isReload) {
					this.cache.isReload = false;
					this._trigger(this.cache.onLoad || "onLoad", null, [ui]);
					delete this.cache.onLoad;
				}
			}
		});
		grid.grid(goptions);
		grid.grid("refresh");
	},
	_getButtonEl: function () {
		return $("<button type='button'></button>").addClass("coral-combogrid-button");
	},
	/**
	 * 根据colName获取grid所有行集合数据
	 * @param colNameArr {array,string} : 列名name数组
	 * @return rowData {array} : 行集合数据
	 */
	_getRowDataByColName: function(colNameArr) {
		var that = this,
			opts = this.options,
			$grid = this.grid(),
			gridData = $grid.grid("option", "data"),
			rowData = [];
		
		if (typeof colNameArr === "string") {
			colNameArr = [colNameArr];
		}
		
		$.each(gridData, function(index, item) {
			var rowObj = {};
			for (var i in colNameArr) {
				var colName = colNameArr[i];
				rowObj[colName] = item[colName];
			}
			rowData.push(rowObj);
		});

		return rowData;
	},
	/**
	 * grid根据value数组，获取对应的text数组
	 * @param valueArr {array} : value 集合数组
	 * @returns textArr {array} : text 集合数组
	 */
	_getTextArrByValueArr: function (valueArr) {
		var that = this,
			opts = this.options,
			valueField = this.options.valueField,
			textField = this.options.textField,
			dataObj = this._getRowDataByColName( [valueField, textField] ),
			textArr = [];
		
		for (var i in valueArr) {
			var valueItem = valueArr[i],
				hasText = false;
			
			$.each(dataObj, function(index, item) {
				if (valueItem == item[valueField]) {
					textArr.push(item[textField]);
					hasText = true;
				}
			});
			// 如果没找到对应的text，则将value作为一个textItem
			if (!hasText) {
				textArr.push(valueArr[i]);
			}
		}
		
		return textArr;
	},	
	//给文本框赋值
	setValues: function (values, triggerOnChange, text) {
		// 清除下拉列表的选中
		var $grid = this.grid();
		var selarrrow = $grid.grid("option", "selarrrow").concat();
		for(var i =0;i< selarrrow.length;i++){
			$grid.grid("setSelection", selarrrow[i], false);
		}
		// 如果没加载完，则先缓存，onLoad之后统一执行
		if (!this.dataLoaded) {
			var cacheItem = {
				"setValues": {
					values: values,
					text: text,
					triggerOnChange: triggerOnChange
				}
			};
			this._addCacheItem(cacheItem);
		}
		var opts  = this.options;
		var textArr = [];
		textArr = this._getTextArrByValueArr(values);
		text = typeof text == "boolean" ? text: false;
		if (!text) {
			this._setText(textArr.join(opts.separator));
		} 
		this.currentValues = values;
		this.currentTexts = textArr;
		var tvalues = values.concat();
		tvalues.sort();
		for(var i =0;i < tvalues.length;i++){
			if ( tvalues[i] !== tvalues[i+1] && i != tvalues.length ||
					i == tvalues.length ) {
				$grid.grid("setSelection", tvalues[i], false);
			}
		}
		if (opts.width == "item") {
			var widthDiv = $("<div style = 'visibility:hidden;'><span>"+this.getText()+"</span></div>")
                           .appendTo("body"),
                innerText = this.component().find(".coral-textbox-default");
            var elementPadding = parseInt(innerText.css("padding-left")) +
                                 parseInt(innerText.css("padding-right")),
                arrowWidth = this.uiArrow().outerWidth() + 2*parseInt(this.uiArrow().css("right")),
                width = widthDiv.find("span").outerWidth() + elementPadding + arrowWidth ;
            this.resize(width);
            widthDiv.remove();
            // resize 方法会将options中的width变为数字，这里重新进行设置。
            opts.width = "item";
		}
		this._super(values, triggerOnChange, false);
	},
	_getOnlyValues: function() {
		var data = this.getData(),
		    opts = this.options,
		    valArr = [],
		    i = 0;
		if ( !this.currentValues || 
				( !this.currentValues[0] && 
				this.currentValues.length === 1) ) return valArr;
		for (; i < this.currentValues.length; i++) {
			var value = this.currentValues[i],
			    j     = 0,
			    valueField = opts.valueField,
			    textField  = opts.textField,
			    row = null;
			
			if ( "value-text" === opts.postMode ) {
				valArr.push(value.split(opts.valueTextSeparator)[0]);
			}
			if ( "value" === opts.postMode ) {
				valArr.push(value);
			}
			if ( "text" === opts.postMode ) {
				for (;data && j < data.length; j++) {
					row = data[j];
					if ( row[textField] == value ) {
						valArr.push(row[valueField]);
						break;
					}
				}
			}
			
		}
		return valArr;
	},
	_getOnlyTexts: function(){
		return this.currentTexts || [];
	},
	getData: function() {
		return this.grid().grid("option", "data") || [];
	},
	_selectPrev : function(){
		 var that = this,
		 	 selected = null,
		 	 index = 0,
		 	 rows = that.grid().grid("getDataIDs");
			 selarrrow = that.grid().grid("option","selarrrow").concat();
			 valueFirst = that.getValues()[0];
			 that.selectedRow = that.selectedRow || valueFirst;
		 if(that.options.multiple){
			 if ( that.selectedRow ) {
					// that.selectedRow 在rows中的第几个 得到下一个
					for(var i=rows.length;i>=0;i--){
						if ( that.selectedRow == rows[i] ) {
							index = (i==0? (rows.length-1) : ( i - 1 ));
							that.selectedRow = rows[ index ];
							break;
						}//下一个
					}
					if ( $.inArray( that.selectedRow, selarrrow ) == -1){//没选中的情况
						that.grid().grid("setSelection", that.selectedRow);
					} 
					// 判断当前项目(selectedRow)是否选中
					// that.selectedRow 在selarrrow中是否存在	
				} else {
					that.selectedRow = rows.length;
					that.grid().grid("setSelection",rows.length);
				}
				that._scrollTo(that.selectedRow);
		 }else{
		  //取得选中行	
			selected = that.grid().grid("option","selrow");
			if (selected) {
				//取得选中行的rowIndex
				index = that.grid().grid("getInd",selected);   
				//向上移动到第一行为止
				if (index >= 0) {
					that.grid().grid("setSelection",rows[index-2]);
				}
			} else {	
				that.grid().grid("setSelection", rows.length);	
			}
		 }
			that._scrollTo(selected);
	},
	_selectNext : function(){
		var that = this, 
			selected = null,
			index = 0,
			rows = that.grid().grid("getDataIDs");
			selarrrow = that.grid().grid("option","selarrrow").concat();
			valueFirst = that.getValues()[0];
			that.selectedRow = that.selectedRow || valueFirst;
		if ( that.options.multiple ) {		
			if ( that.selectedRow ) {
				// that.selectedRow 在rows中的第几个 得到下一个
				for(var i=0;i<rows.length;i++){
					if ( that.selectedRow == rows[i] ) {
						index = (i==rows.length-1? 0 : ( i + 1 ));
						that.selectedRow = rows[ index ];
						break;
					}//下一个
				}
				if ( $.inArray( that.selectedRow, selarrrow ) == -1){//没选中的情况
					that.grid().grid("setSelection", that.selectedRow);
				} 
				// 判断当前项目(selectedRow)是否选中
				// that.selectedRow 在selarrrow中是否存在	
			} else {
				that.selectedRow = rows[0];
				that.grid().grid("setSelection",rows[0]);
			}
			that._scrollTo(that.selectedRow);
		} else {		
			selected = that.grid().grid("option","selrow");
			//$.inArray
			if ( selected ) {
				//取得选中行的rowIndex
				index = that.grid().grid("getInd",selected);		
				//向下移动到当页最后一行为止	
				if (index < rows.length) {	
					that.grid().grid("setSelection",rows[index]);
				}
			} else {
				that.grid().grid("setSelection",rows[0]);
			}
			that._scrollTo(selected);
		}
	},
	_doEnter: function() {
		if (!this.uiCombo.panel.is(":visible")) return;
		if ( this.options.multiple ) {
			this.grid().grid("setSelection", this.selectedRow);
		} else {
			this.hidePanel();
		}
	},
	_scrollTo : function(value) {
		var panel = this.panel();
		var item = panel.find(".coral-row-ltr[id=\"" + value + "\"]");
		if (item.length){
			if (item.position().top <= 0){
				var h = panel.find(".coral-grid-rows-view").scrollTop() + item.position().top - item.outerHeight();
				panel.find(".coral-grid-rows-view").scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.find(".coral-grid-rows-view").height()){
				var h = panel.find(".coral-grid-rows-view").scrollTop() + item.position().top + item.outerHeight() - panel.find(".coral-grid-rows-view").height();
				panel.find(".coral-grid-rows-view").scrollTop(h);
			}
		}
	}
});
;

var datepicker_instActive;
var formatOptions = {
	  ymdFormat: ["dd","MMdd","yyyyMM","yyyyMMdd"],
	  ymFormat:["yyyy","yyyyMM"],
	  yFormat:["yyyy"],
	  mdFormat:["MMdd"]
	}
$.coral.trim = function(str) {
	return str.replace(/(^\s*)|(\s*$)/g,"");
}
$.coral.parseDate = function(format, value, options){
	var opts = options,fValue;
	if (format == null || value == null) {
		throw "Invalid arguments";
	}
	options = options || {};	
	value = (typeof value === "object" ? value.toString() : value + "");
	if (value === "") {
		return null;
	}
	if(opts.model=="timepicker"){
		var date= new Date(),
			timeValue = [];
		format = "yyyy-MM-dd "+opts.timeFormat;
		timeValue.push(date.getFullYear());
		timeValue.push(date.getMonth()+1);
		timeValue.push(date.getDate());
		value = timeValue.join("-") + " " + value;
		
	}
	fValue = configDateFormat(format,value,options);
    format = fValue.format;	    
    value = fValue.value;
	//是否含有时间
	var hasTime = _hasTime(format);

	var iFormat, dim, extra,
		iValue = 0,
		shortYearCutoffTemp = (options ? options.shortYearCutoff : null) || options.shortYearCutoff,
		shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
		dayNamesShort = (options ? options.dayNamesShort : null) || options.dayNamesShort,
		dayNames = (options ? options.dayNames : null) || options.dayNames,
		monthNamesShort = (options ? options.monthNamesShort : null) || options.monthNamesShort,
		monthNames = (options ? options.monthNames : null) || options.monthNames,
		opts=options.opts,
		year = -1,
		month = -1,
		day = -1,
		doy = -1,
		hur = -1,
		miu = -1,
		sed = -1,
		literal = false,
		date,
		lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
			if (matches) {
				iFormat++;
			}
			return matches;
		},
		//判断格式匹配长度  如 yyyy 返回4 ，yyy 返回3
		lookMathesLength = function(match){
			var length=1;
			while(iFormat+1 < format.length && format.charAt(iFormat+1) == match){
				length++;
				iFormat++;
			}
			return length;
		},
		getNumber = function(match) {
			var isDoubled = lookAhead(match),
				size = (match === "@" ? 14 : (match === "!" ? 20 :
				(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
				minSize = (match === "y" ? size : 1),
				digits = new RegExp("^\\d{" + minSize + "," + size + "}"),
				num = value.substring(iValue).match(digits);
			if (!num) {
				throw "Missing number at position " + iValue;
			}
			iValue += num[0].length;
			return parseInt(num[0], 10);
		},
		//带有长度的数字
		getNumber2 = function(match,size) {
			if ( iValue > value.length || iValue == value.length) {
				return -1;
			}
			var digits = new RegExp("^\\d{1," + size + "}"),
				num = value.substring(iValue).match(digits);
			if (!num) {
				throw "Missing number at position " + iValue;
			}
			iValue += num[0].length;
			return parseInt(num[0], 10);
		},
		getName = function(match, shortNames, longNames) {
			var index = -1,
				names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
					return [ [k, v] ];
				}).sort(function (a, b) {
					return -(a[1].length - b[1].length);
				});

			$.each(names, function (i, pair) {
				var name = pair[1];
				if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
					index = pair[0];
					iValue += name.length;
					return false;
				}
			});
			if (index !== -1) {
				return index + 1;
			} else {
				throw "Unknown name at position " + iValue;
			}
		},
		checkLiteral = function() {
			if ("" !== value.charAt(iValue) && value.charAt(iValue) !== format.charAt(iFormat)) {
				return; // 支持没有格式化符号的输入
				throw "Unexpected literal at position " + iValue;
			}
			iValue++;
		};
		

	for (iFormat = 0; iFormat < format.length; iFormat++) {
		if (literal) {
			if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
				literal = false;
			} else {
				checkLiteral();
			}
		} else {
			switch (format.charAt(iFormat)) {
				// 解析日期
				case "d":
					var ml=lookMathesLength("d");
					day = getNumber2("d",ml);
					break;
				case "M":
					ml=lookMathesLength("M");
					month = getNumber2("M",ml);
					break;
				case "y":
					ml=lookMathesLength("y");
					year = getNumber2("y",ml);
					break;

				//解析时间
				case "H":
					ml=lookMathesLength("H");
					hur = getNumber2("H",ml);
					break;	
				case "m":
					ml=lookMathesLength("m");
					miu = getNumber2("m",ml);
					break;	
				case "s":
					ml=lookMathesLength("s");
					sed = getNumber2("s",ml);
					break;
				default:
					checkLiteral();
			}
		}
	}
	if( day == -1 ){
		day = 1;
		if(month == -1 ){
			month = 1;
		}
	}
	
	if(day != -1 && month == -1){
		month = new Date().getMonth() + 1;
	}
	if (year === -1) {
		year = new Date().getFullYear();
	} else if (year < 100) {
		year += new Date().getFullYear() - new Date().getFullYear() % 100 +
			(year <= shortYearCutoff ? 0 : -100);
	}
	if (doy > -1) {
		month = 1;
		day = doy;
		do {
			//dim = this._getDaysInMonth(year, month - 1,inst);
			dim = _getDaysInMonth(year, month - 1);
			if (day <= dim) {
				break;
			}
			month++;
			day -= dim;
		} while (true);
	}
		year = ( year==-1 ? 1 : year);
//			month = ( month==-1 ? 1 : month);
//			day = ( day==-1 ? 1 : day);
		hur = ( hur==-1? 0 : hur);
		miu = ( miu==-1? 0 : miu);
		sed = ( sed==-1? 0 : sed);
	// ??
	date = _daylightSavingAdjustWidthTime(new Date(year, month - 1, day),[hur,miu,sed]);
	if ( 
		( date.getFullYear() !== year || 
		date.getMonth() + 1 !== month ||
		date.getDate() !== day ) ||
		( hasTime && (date.getHours() !== hur || 
		date.getMinutes() !== miu ||
		date.getSeconds() !== sed ) )
		) {
		throw "Invalid date"; // E.g. 31/02/00
		
	}
	return date;
},
$.coral.longToStringDate = function (value, options) {
	var dateFormat;
	// 毫秒级别是无法察觉的，0和1代表的秒是相同的。
	// undefined or null or "" return "";
	// 当restrictConvert为true时,将1强制转换为空值
	if (! $.trim(value) || (value ==1 && options.restrictConvert)) {
		return "";
	}
	if (options == undefined) {
		dateFormat = "yyyy-MM-dd";
	} else {
		dateFormat = options.dateFormat;
	}
	var date = new Date(parseInt(value));
	var str = $.coral.formatDate(dateFormat, date, options);
	return str;
},
$.coral.stringToLongDate = function (value, opts) {
	if (! $.trim(value)) {
		// 当restrictConvert为true时,将空值强制转换为1
		if ( opts.restrictConvert ) {
			return 1;
		} else {
			return "";
		}
	}
	var d = new Date(value);
	var value = d.getTime();
	return value;
},
$.coral.formatDate = function (format, date, options) {
	if (!date) {
		return "";
	}
	var iFormat,
		opts = options,
		dayNamesShort = opts ? opts.dayNamesShort : null,
		dayNames = opts ? opts.dayNames : null,
		monthNamesShort = opts ? opts.monthNamesShort : null,
		monthNames = opts ? opts.monthNames : null,
		// Check whether a format character is doubled
		//是否为两个相同的字符
		lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
			if (matches) {
				iFormat++;
			}
			return matches;
		},
		//判断格式匹配长度  如 yyyy 返回4 ，yyy 返回3
		lookMathesLength = function(match){
			var length=1;
			while(iFormat+1 < format.length && format.charAt(iFormat+1) == match){
				length++;
				iFormat++;
			}
			return length;
		},
		formatNumber = function(match, value, len) {
			var num = "" + value;
			if (lookAhead(match)) {
				while (num.length < len) {
					num = "0" + num;
				}
			}
			return num;
		},
		formatName = function(match, value, shortNames, longNames) {
			return (lookAhead(match) ? longNames[value] : shortNames[value]);
		},
		output = "",timeput = "",weekput="",
		literal = false;
	if(opts && opts.model=="timepicker"){
		format = "yyyy-MM-dd " + opts.timeFormat;
	}
	if (date) {
		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					output += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					case "d":
						output += formatNumber("d", date.getDate(), 2);
						break;
					case "D":
						output += formatName("D", date.getDay(), dayNamesShort, dayNames);
						break;
					case "M":
						var ml=lookMathesLength("M");
						if(ml==4){
							output += monthNames[date.getMonth()];
						}else if(ml==3){
							output += monthNames[date.getMonth()];
						}else if(ml==2){
							output += (date.getMonth() + 1>9?date.getMonth() + 1:"0"+(date.getMonth() + 1));
						}else if(ml==1){
							output += date.getMonth() + 1;
						}
						
						//output += formatNumber("M", date.getMonth() + 1, 2);//formatName("M", date.getMonth(), monthNamesShort, monthNames);
						break;
					case "y":
						ml=lookMathesLength("y");
						if(ml==4){
							output += date.getFullYear();
						}else if(ml==3){
							output += (date.getFullYear()+"").substring(1,4);
						}else if(ml==2){
							output += ((date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
						}else if(ml==1){
							output += date.getYear() % 100;
						}
						//output += (lookAhead("y") ? date.getFullYear() :
						//	(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
						break;
						
					// 时间解析	
					case "H":
						ml=lookMathesLength("H");
						if(ml==2){
							output += (date.getHours()>9?date.getHours():"0"+(date.getHours()));
						}else if(ml==1){
							output += date.getHours();
						}
					break;
					case "m":
						ml=lookMathesLength("m");
						if(ml==2){
							output += (date.getMinutes()>9?date.getMinutes():"0"+(date.getMinutes()));
						}else if(ml==1){
							output += date.getMinutes();
						}
					break;
					case "s":
						ml=lookMathesLength("s");
						if(ml==2){
							output += (date.getSeconds()>9?date.getSeconds():"0"+(date.getSeconds()));
						}else if(ml==1){
							output += date.getSeconds();
						}
					break;
					//计算年周数
					case "W":
						ml=lookMathesLength("W");
						if(ml==2){
							output += (options.calculateWeek(date)>9?options.calculateWeek(date):"0"+options.calculateWeek(date));
						}else if(ml==1){
							output += options.calculateWeek(date);
						}
					break;
					//返回一周中的天数
					case "w":
						output += date.getDay();
					break;
					default:
						output += format.charAt(iFormat);
				}
			}
		}
	}
	if(opts  && opts.model == "timepicker"){
		output = output.substring(output.indexOf(" ") + 1,output.length);
	} 
	return output;
},
_hasTime = function( dateFormat ){
	var format = (dateFormat+"");
	if( format.indexOf("H")!=-1 || format.indexOf("m")!=-1 || format.indexOf("s")!=-1 ){
		return true;
	}
	return false;
},
//该方法的作用：根据value得到format
getFormatter = function(value, format, options){
	var inputFormats = null,
		inputFormat = null,
		opts = options;
	if(format.indexOf("y")>-1 && format.indexOf("M")>-1 && format.indexOf("d")>-1){
		inputFormats = "ymdFormat";
	}
	if(format.indexOf("y")>-1 && format.indexOf("M")>-1 && format.indexOf("d")==-1){
		inputFormats = "ymFormat";
	}
	if(format.indexOf("y")>-1 && format.indexOf("M") == -1 && format.indexOf("d") ==-1){
		inputFormats = "yFormat";
	}
	if(format.indexOf("y") == -1 && format.indexOf("M") > -1 && format.indexOf("d") >-1){
		inputFormats = "mdFormat";
	}
	var editFormate = "yyyy-MM-dd";
	var formatOpts = opts.formatOptions || formatOptions;
	var value = (typeof value === "object" ? value.toString() : value + "");
	if (value === "") {
		return null;
	}
	var vValue = value.split(" ");
	if(vValue[0].indexOf("/")>-1 || vValue[0].indexOf("-")>-1){
		var subStr =vValue[0].indexOf("/")>-1 ? vValue[0].split("/") : vValue[0].split("-");
		//实现日期框中月份和日期可以输入个位数字
		for(var i=0;i<subStr.length;i++){
			if(subStr[i].length % 2 != 0  ){
				subStr[i] = "0"+ subStr[i];
			}
			vValue[0] = subStr.join("-");
		}
	}
	var valRep = vValue[0].indexOf("/")>-1 ? vValue[0].replace( /\//g, "" ):vValue[0].replace( /-/g, "" );//去除value中的特殊字符
	var	str1 = vValue[0].split("/").length-1,//value中有几个分隔符
		str2 = vValue[0].split("-").length-1;
	//将去掉特殊分隔符的value的长度与formatOpts里面存的format的长度进行比较，取得长度相等的format
	for(var i=0;i<formatOpts[inputFormats].length;i++){
		if(formatOpts[inputFormats][i].length == valRep.length){
			inputFormat = formatOpts[inputFormats][i];
		}
	}
	return (inputFormat ? inputFormat: format) || null ;
	
},
//得到配置的模式format，和输入框中的value值
configDateFormat = function(format,value,options){
	//若有hh:mm:ss的时候，只取前面的年日月
	var orgFormat = format;
	var vformat = format.split(" ");
	var timeFormat = vformat[1] || "";
	var vValue = value.split(" ");
	if(vValue[0].indexOf("/")>-1 || vValue[0].indexOf("-")>-1){
		var subStr =vValue[0].indexOf("/")>-1 ? vValue[0].split("/") : vValue[0].split("-");
		//实现日期框中月份和日期可以输入个位数字
		for(var i=0;i<subStr.length;i++){
			if(subStr[i].length % 2 != 0  ){
				subStr[i] = "0"+ subStr[i];
			}
			vValue[0] = subStr.join("-");
		}
	}
//		options.inst && (options.inst.beforevalue = vValue);
	format = getFormatter( vValue[0], vformat[0], options);
	format += orgFormat.substr(vformat[0].length, orgFormat.length);//将时间与年月日拼在一起显示
	vValue[0] = vValue[0].indexOf("/")>-1? vValue[0].replace( /\//g, "" ):vValue[0].replace( /-/g, "" );//将value中的分隔符去掉
	value = vValue.join(" "); 
	return {
		format: format,
		value: value
	};
},
_daylightSavingAdjust = function(date) {
	if (!date) {
		return null;
	}
	date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
	return date;
},
//提供配置用来格式化和解析
_getFormatConfig= function(opts) {
	var shortYearCutoff = opts.shortYearCutoff;
	shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
		new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
	return {shortYearCutoff: shortYearCutoff,
		dayNamesShort:opts.dayNamesShort, dayNames: opts.dayNames,
		monthNamesShort: opts.monthNamesShort, monthNames: opts.monthNames,calculateWeek:opts.calculateWeek,"opts":opts};
},
_daylightSavingAdjustWidthTime= function(date,timeArr) {
	var ndate = _daylightSavingAdjust( date );
	if ( ndate ) {
		ndate.setHours(timeArr[0]);
		ndate.setMinutes(timeArr[1]);
		ndate.setSeconds(timeArr[2]);
		ndate.setMilliseconds(0);
	}
	return date;
}

$.component("coral.datepicker", $.coral.inputbase,{
	castProperties : ["showRequiredMark","hideRequiredMark","shortCut"],
	version: "4.0.2",
	componentName: "datepicker",
	componentFullName: "coral-datepicker",
    initialized: false,
	_curInst: null, // 当前在用的实例
	_keyEvent: false, //  若最后一个是键盘事件
	_disabledInputs: [],//  日历选择输入框中被禁用的
	_datepickerShowing: false, //  日历是否为正显示，True为是
	_inDialog: false, // 日历是否正显示为一个对话框中，True为是
	_mainDivId: "coral-datepicker-divId", // 日历选择组件主ID
	_inlineClass: "coral-datepicker-inline", // 内嵌标记类名
	_appendClass: "coral-datepicker-append", // 附加标记类名
	_triggerClass: "coral-datepicker-trigger", //  触发标记类名
	_dialogClass: "coral-datepicker-dialog", // 对话框标记类名
	_disableClass: "coral-datepicker-disabled", // 禁用标记类名
	_unselectableClass: "coral-datepicker-unselectable", // 为选择标记类名
	_currentClass: "coral-datepicker-current-day", //当前日期标记类名
	_dayOverClass: "coral-datepicker-days-cell-over", // 日期单元格类名
	regional: [], // 地域性设置，通过语言代码索引
	options: { //全局默认设置，针对所有日历组件实例
		showOn: "button", //  “focus” 即获得焦点后弹出
			//  “button” 按钮点击后触发，“both” 两者
		showAnim: "fadeIn", // 日历组件弹出时动画，参照jquery动画
		showOptions: {}, // 动画增强选项
		closeOnClick: true,
		iframePanel: false,
		dateFormat: 'yyyy-MM-dd',//日期格式
		timeFormat: 'HH:mm:ss',//日期格式
		formatOptions: formatOptions,
		firstDay: 1,//每周第一天
		isRTL: false,//为True表示右到左语言，否则为左到右
		showMonthAfterYear: true,// 为True表示年份选择优选月份
		defaultDate: null, //  默认时间，为空则为今天
		appendText: "", // 输入框显示的文字，例如显示格式 
		buttonText: "...", // 按钮的文字
		buttonImage: "", //按钮的图片Url
		buttonImageOnly: false, // 为True则只有图片，否则将图片赋予按钮
		hideIfNoPrevNext: false, //  为True隐藏 上一个月/下一个月
			// 若为不可用，false 就只是禁用他们
		navigationAsDateFormat: false, //为True日期格式应用于  prev/today/next
		gotoCurrent: false, // 为True则today链接返回为当前选择
		changeMonth: true, //  为True则能直接选择月份，否则仅为 prev/next
		changeYear: true, // 为True则能直接选择年度，否则仅为 prev/next
		complete: true,//是否自动补全日期
		yearRange: "c-30:c+30", //  下拉框中年度范围，默认为当前年度+-10年
		showOtherMonths: true, //为True显示非本月的日期，否则为空白
		selectOtherMonths: true, // 为True允许选择非本月的日期，否则不能
		showWeek: false, // 为True显示 周 的序号
		/* 计算当前Date对象的年周数 基于ISO 8601 定义
		 * @param date Date - 日期对象
		 * @return  number - Date对象在年中的周数
		 */
		calculateWeek: function(date) {
			var time,
				checkDate = new Date(date.getTime());
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
			time = checkDate.getTime();
			checkDate.setMonth(0); // Compare with Jan 1
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
			
		}, //  如何计算年当中的周
			// 使用Date对象返回 周 的数量
		shortYearCutoff: "+10", 
		validDate: true,
		model:"datepicker",
		minDate: null, //最小的可选日期，为null则无限制
		maxDate: null, // 最大的可选日期，为null则无限制
		minTime: null,
		maxTime: null,
		duration: "fast", // 显示、关闭的速度
		beforeShowDay: null, //  方法，使用date并返回一个数组
			// [0]=true 则为可选则的，[1]=自定义css名
			// [2]= 单元格标题，
		beforeShow: null, // 方法，在输入框中返回个性化设定的日历组件
	//	onSelect: null, // 当日期被选择后的方法回调
		onChangeMonthYear: null, // 当月份和年度发生改变时的方法回调
		onClose: null, //当日历组件被关闭时的方法回调
		numberOfMonths: 1, // 显示的月份的数量
		showCurrentAtPos: 0, // 在多月份中当前月份的位置，起始为0
		stepMonths: 1, // 跳过月份的步长
		stepBigMonths: 12, //big links中back/forward跳过月份的步长
		altField: "", //  alt键被存储的值
		altFormat: "", // alt键被存储的日期格式
		constrainInput: true, // 输入被迫按照当前日期格式
		showButtonPanel: true, //  True为显示一个button面板
		autoSize: false, // True输入时按照日期格式调整大小
		disabled: false, // 初始为禁用状态
		
		//补充。。。
		//autoFormat : false, // 是否自动格式化输入日期
		isLabel : false, // 是否输入框为标签项
		readonly : false, // 输入框是否为只读
		readonlyInput : false,
		showClose: false,
		value : null ,//输入框值
		required : false,//是否为只读
		showStar : true,
		starBefore: false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		startDateId: null,
		endDateId: null,
		onSelect : null ,
		onChange : null,
		onFormatError : null,
		onFormatWarn : null,
		//原始的dateFormat
		srcDateFormat : null,
		zIndex : null,
		name : null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false, // true 则不单独校验
		valueType: "string",
		restrictConvert: true
    },
  //为元素添加类名，指出一个已配置的日历组件
	markerClassName: "hasDatepicker",

	//跟踪最大的显示行数
	maxRows: 4,
	// jquery extend 忽略null
	extendRemove: function(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null) {
				target[name] = props[name];
			}
		}
		return target;
	},
	bindHover: function(dpDiv) {
		var that = this;
		var selector = "button, .coral-datepicker-prev, .coral-datepicker-next, .coral-datepicker-calendar td a, .menuTimeSel";
		var selectormousedown = "#coral-datepicker-divId";
		return dpDiv.delegate(selector, "mouseout", function() {
				$(this).removeClass("coral-state-hover");
				if (this.className.indexOf("coral-datepicker-prev") !== -1) {
					$(this).removeClass("coral-datepicker-prev-hover");
				}
				if (this.className.indexOf("coral-datepicker-next") !== -1) {
					$(this).removeClass("coral-datepicker-next-hover");
				}
			})
			.delegate( selector, "mouseover",{element: that}, that.datepicker_handleMouseover );
		
	},
	datepicker_handleMouseover: function(event) {
		var that = event.data ? event.data.element : event;
		if (!that.isDisabled()) {   //TODO:没有考虑div或者span初始化时的情况
			$(this).parents(".coral-datepicker-calendar").find("a").removeClass("coral-state-hover");
			$(this).addClass("coral-state-hover");
			if (this.className.indexOf("coral-datepicker-prev") !== -1) {
				$(this).addClass("coral-datepicker-prev-hover");
			}
			if (this.className.indexOf("coral-datepicker-next") !== -1) {
				$(this).addClass("coral-datepicker-next-hover");
			}
		}
	},
	// TODO 重命名“widget”
	widget: function() {
		return this.dpDiv;
	},

	/*
	 * 覆盖日历组件实例的默认设置方法。
	 * @param options object - 新的设置
	 * @return 管理的对象
	 */
/*		setDefaults: function(options) {
			that.extendRemove(this.options, options || {});
			return this;
		},*/
    
    _create: function () {
    	var nodeName, inline;
		nodeName = this.element[0].nodeName.toLowerCase();
		inline = (nodeName === "div" || nodeName === "span");
    	this.regional[""] = { // 默认地域设置
			//将默认英文改为中文
			closeText: '关闭',//关闭
			prevText: '上月',//上月
			nextText: '下月&#x3E;',//下月
			currentText: '今天',//今天
			// 以下两个属性，将“月”字去掉，选择框内只显示数字，“月”字写死在 select 外面，配置在 monthSuffix 属性
			monthNames: ['1','2','3','4','5','6',
			'7','8','9','10','11','12'],//月的名字
			monthNamesShort: ['1','2','3','4','5','6',
			'7','8','9','10','11','12'],//月的短名
			dayNames: ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'],//日期名
			dayNamesShort: ['周日','周一','周二','周三','周四','周五','周六'],//日期短名
			dayNamesMin: ['日','一','二','三','四','五','六'],//日期单名
			weekHeader: '周',//周前缀

			yearSuffix: '年',//年与月之间的分隔文字
			monthSuffix: '月' // 月文本配置
		};
    	$.extend(this.options, this.regional[""]);
    	var options = this.options;
    	if( options["dateFormat"] != null && 
			options["srcDateFormat"] == null ){
			options["srcDateFormat"] = options["dateFormat"];
		}
    	if (options.valueType == "long" && options.value) {
    		options.value = $.coral.longToStringDate(options.value, options);
		}
    	this.regional.en = $.extend( true, {}, this.regional[ "" ]);
    	this.regional[ "en-US" ] = $.extend( true, {}, this.regional.en );
    	var panel = $("body").find("#coral-datepicker-divId");
    	this.dpDiv = $("#coral-datepicker-divId").length ? $("#coral-datepicker-divId") : this.bindHover($("<div id='" + this._mainDivId + "' class='coral-datepicker coral-component coral-component-content coral-helper-clearfix coral-corner-all'></div>"));
    	this.iframePanel = $("<iframe class='coral-datepicker-iframePanel' style='position:absolute;height:auto;'></iframe>" )
    	//初始化日历组件
    	if (!this.initialized) {
    		$(document).mousedown({that:this},this._checkExternalClick);
    		this.initialized = true;
    	}
    	//在body中加入日历组件
    	if ($("#"+this._mainDivId).length === 0) {
    		$("body").append(this.dpDiv);
    	}
    	this.prepareInit(this.options);
    	//初始化
		this._initElement();
		if ( options.startDateId ) {
			$( "#"+ options.startDateId ).datepicker("option", "endDateId", this.element[0].id);
			var value = $("#"+ options.startDateId).datepicker("getValue");
			$("#"+ this.element[0].id).datepicker("option","minDate",value);
		}
		
		if (nodeName === "input") {
			this.connect();
		} else if (inline) {
			this.inline();
		}
    	$( document ).off(".coral-datepicker").on("mousedown.coral-datepicker", "#"+this._mainDivId, function(e){
    		if ( $(e.target).hasClass("menuTimeSel")) {
    			e.stopPropagation();
    			return;
    		}
    		e.stopPropagation();
    	});
    },
    
	component: function () {
		return this.element.parent().parent();
	},
    
	_initElement: function(){
		var opts = this.options,
		    id=opts.id,
			name = this.element.attr("name") || opts.name || "",
			value = $.coral.trim(opts.value),
			width = opts.width,
			height = opts.height,
			cls = opts.cls,
			labelField = opts.labelField,
			showClose = opts.showClose,
			clearIcon = "",
			componentCls = opts.componentCls;
		this.originalValue = value;
		if ( name ) { 
			this.element.removeAttr("name");
		}
		if (showClose) {
			clearIcon = "<span class='coral-input-clearIcon cui-icon-cross2'></span>";
		}
		var hidden = $("<input id='"+id+"_srcval' name='"+name+"' type='hidden' value='"+(value==null?"":value)+"'>");
		var eleBorder = $("<span id='"+id+"_eleBorder' class='coral-textbox-border coral-corner-all'>" + clearIcon + "</span>");
		var eleComp = $("<span id='"+id+"_eleComp' class='coral-textbox'></span>");
		this.element.addClass("coral-textbox-default coral-validation-datepicker tabbable ");
		this.element.addClass("coral-form-element-datepicker ctrl-init ctrl-form-element ctrl-init-datepicker");

		if(height!=null){
			eleComp.outerHeight(height);
			this.element.outerHeight("100%");
		}
		if(width!=null){
			eleComp.outerWidth(width);
		}
		eleComp.insertAfter(this.element).addClass(componentCls);
		hidden.appendTo(eleBorder);
		this.element.appendTo(eleBorder).addClass(cls);
	   
		eleBorder.appendTo(eleComp);
		if( opts.iframePanel ){
			this.iframePanel.appendTo("body").hide();
		};
		if (null != labelField) {
			this._createLabel();
		}
		if ( ! (this.options.readonly)) {
			this.element.prop("readonly", this.options.readonlyInput);
		}
	},
	prepareInit: function(options) {
		var target = this.element[0];
		options = options || {};
		
		if (!target.id) {
			if (options.id) {
				target.id = options.id;
			}else{
				/*this.uuid += 1;
				target.id = "dp" + this.uuid;*/
			}
			options.id = $(target).uniqueId().attr("id");
		} else {
			if (options.id) {
				target.id = options.id;
			} else {
				options.id = $(target).uniqueId().attr("id");
			}
		}
		if (!target.name) {
			if (options.name) {
				target.name = options.name;
			}
			options.name = $(target).attr("name");
		} else {
			if (options.name) {
				target.name = options.name;
			} else {
				options.name = $(target).attr("name");
			}
		}
		options.value =  $(target).val() || options.value || "";
		var inline = (target.nodeName.toLowerCase() === "div" || target.nodeName.toLowerCase() === "span");
		this._newInst($(target), inline);
		
		//解析input对象中data-options并赋值给响应的options
		/*if(nodeName === "input"){
			var dataoptions=$.parser.parseOptions(target,[], ['dataCustom','formatOptions']);
			$.extend( true, options, dataoptions );
		}*/
		
		//options = $.extend({}, this.options, $.fn["datepicker"].defaults, options || {});
		//如果srcDateFormat没有指定，则将dateFormat复制到srcDateFormat
		//options = $.extend(this.options, options || {});
    },
    
    _newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
		this.dpDiv.css({display:"none"});//默认隐藏组件外框Div
		target.attr( "component-role", this.componentName );//身份识别
		this.inst =  {id: id, input: target, 
				selectedDay: 0, selectedMonth: 0, selectedYear: 0, 
				drawMonth: 0, drawYear: 0, 
				inline: inline, 
				isShow: false,
				dpDiv: (!inline ? this.dpDiv :
				this.bindHover($("<div class='" + this._inlineClass + " coral-datepicker coral-datepicker-panel coral-component coral-component-content coral-helper-clearfix coral-corner-all'></div>")))};
		$.extend(this.options,this.inst)
	},
	//输入框附加日历组件
	connect: function() {
		var opts = this.options,
		    target = this.element[0],
		    input = $(target),
		    that = this;
		opts.append = $([]);
		opts.trigger = $([]);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		this._attachments(input);
		input.addClass(this.markerClassName)
			.keydown({that:that},this._doKeyDown)
			.keypress({that:that},this._doKeyPress)
			.keyup({that:that},this._doKeyUp);
		this._autoSize();
		
		if( opts.disabled ) {
			this.disable();
		}
		if( opts.readonlyInput ) {
			this.readonlyInput(opts.readonlyInput);
		}
		if( opts.readonly ) {
			this.readonly( opts.readonly);
		}
		if( opts.isLabel ) {
			this.isLabel(opts.isLabel);
		}
		/*if( inst.options.required && inst.options.showStar) {
			$.validate._showRequire(input.parent().parent());
		}*/
	},
	//处理defaultDate
	_processDefaultDate : function(that,defaultDate){
		var opts = this.options;
		if(defaultDate==""){
			opts.selectedDay = opts.currentDay = null;
			opts.selectedMonth = opts.currentMonth = null;
			opts.selectedYear = opts.currentYear = null;
			
			opts.currentHur=null;
			opts.currentMiu=null;
			opts.currentSed=null;
			opts.input.val("");
			return null;
		}
		var dateFormat=opts.dateFormat;
		var defaultDateObj=null;
		try{
			defaultDateObj = $.coral.parseDate(dateFormat,defaultDate,opts);
		}catch(e){
			//触发格式化错误事件TODO:_apply无法继承方法待商定
//			that._apply(inst,"onFormatError",[defaultDate,inst]);
//			that._apply(inst,"onFormatWarn",[defaultDate,inst]);
			return null;
		}
		opts.selectedDay = opts.currentDay = defaultDateObj.getDate();
		opts.selectedMonth = opts.currentMonth = defaultDateObj.getMonth();
		opts.selectedYear = opts.currentYear = defaultDateObj.getFullYear();
		
		opts.currentHur=defaultDateObj.getHours();
		opts.currentMiu=defaultDateObj.getMinutes ();
		opts.currentSed=defaultDateObj.getSeconds();
		var date = _daylightSavingAdjustWidthTime(new Date(opts.currentYear, opts.currentMonth, opts.currentDay),[opts.currentHur,opts.currentMiu,opts.currentSed]);
		var datestr = "";
		if ( !opts.value && defaultDate ) {
			opts.value = defaultDate;
		}
		if ( opts.value != "" ) {
			var srcDateFormat = getFormatter(opts.value,opts.dateFormat,opts);
			datestr = this.completeFormate(srcDateFormat,dateFormat);
			datestr = $.coral.formatDate(datestr, date, opts);
		} 
		opts.input.val(datestr);
		return date;
	},
	//基于options上附加内容
	_attachments: function(input) {
		var that =this,
		    opts = this.options;
		var showOn, buttonText, buttonImage,
			appendText = opts.appendText,
			isRTL = opts.isRTL;

		if (opts.append) {
			opts.append.remove();
		}
		if (appendText) {
			opts.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
			input[isRTL ? "before" : "after"](opts.append);
		}

		input.unbind("focus", this.show);
		input.unbind("blur");
		input.parent().unbind("mouseleave");
		input.parent().unbind("mouseenter");
		input.unbind(".attachments");

		if (opts.trigger) {
			opts.trigger.remove();
		}
		//将defaultDate值赋值给input，并格式化为显示格式
		var defaultDate= $.coral.trim(opts.value);
		if("" == input.parent().find("input[type='hidden']").val() && typeof defaultDate==="string" && defaultDate!=''){				
			that._processDefaultDate(that,defaultDate);
			that._setHiddenInputValue();//设置隐藏字段值
		} else {
			var valueDate = that._getHiddenInputValue();
			that._processDefaultDate(that,valueDate);
		}
		input.parent().find(".coral-input-clearIcon").unbind("click").bind("click", function(e){
			that.setValue("",true)
//				that._clearDate();
		});
		showOn = opts.showOn;
		input.focus(function(e){
			//that._inputFocus(inst);
			if (showOn === "focus" || showOn === "both") { //  在被标记的域中弹出日历组件
				that.show(e);
			}
			if(that.options.readonly || that.options.isLabel) return;
			that.component().addClass("coral-state-focus");
		});
		if (showOn === "button" || showOn === "both") {
			// 按钮点击时弹出日历组件
			buttonText = opts.buttonText;
			opts.trigger = $("<span/>").addClass("coral-icon-calendar cui-icon-calendar4");
			
			input[isRTL ? "before" : "after"](opts.trigger);
			if(opts.isLabel == true){
				input.parent().addClass("coral-datepicker-no-close");
			}
			opts.trigger.click(function(e) {
				if (that._datepickerShowing && that._lastInput === input[0]) {
					that.hide();
				} else if (that._datepickerShowing && that._lastInput !== input[0]) {
					that.hide();
				}
				that.show();
				return false;
			});
		}
		input.blur(function(e){
			that._inputBlur(opts,e);
		});
		//增加验证
		input.parent().mouseleave(function() {
			if ( opts.readonly || opts.isLabel || opts.disabled || opts.readonlyInput) {
				return ;
			}
			input.parent().parent().removeClass("coral-textbox-hover");
		});    
		//lihaibo add
		input.parent().mouseenter(function(){
			if ( opts.readonly || opts.isLabel || opts.disabled || opts.readonlyInput) {
				return ;
			}
			input.parent().parent().addClass("coral-textbox-hover");
		});
		input.bind("keyup.attachments", function(e){
			switch (e.keyCode) {
			case 9:
				that.show( e );
				break;
			}
		})
	},
	_autoSize: function() {
		var opts = this.options;
		if (opts.autoSize && !opts.inline) {
			var findMax, max, maxI, i,
				date = new Date(2009, 12 - 1, 20), // 确定浮点位数
				dateFormat = opts.dateFormat;

			if (dateFormat.match(/[DM]/)) {
				findMax = function(names) {
					max = 0;
					maxI = 0;
					for (i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				var matchMM = dateFormat.match(/MM/) ?
						"monthNames" : "monthNamesShort",
					matchDD = dateFormat.match(/DD/) ?
							"dayNames" : "dayNamesShort";
				date.setMonth(findMax(opts.matchMM));
				date.setDate(findMax(opts.amtchDD) + 20 - date.getDay());
			}
			opts.input.attr("size", this._formatDate(date).length);
		}
	},
	//div中加入日历组件
	inline: function() {
		var target = this.element[0],
		    opts = this.options,
		    divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName)) {
			return;
		}
		divSpan.addClass(this.markerClassName).append(opts.dpDiv);
		this._setDate( this._getDefaultDate(), true);
		this.update();
		this._updateAlternate();
		//若disabled 为True，在显示前禁用日历组件
		if( opts.disabled ) {
			this.disable(target);
		}
		// 设置display为block 代替 inst.dpDiv.show() 不能工作在未连接的元素
		opts.dpDiv.css( "display", "block" );
	},
	/*
	 * 在对话框中弹出日历组件
	 * @param input - 忽略的
	 * @param data string or Date - 显示的初始日期
	 * @param onSelect function - 当日期被选中是触发的回调函数
	 * @param options object - 更新对话框中日历组件实例的设置
	 * @param pos int[2] - 等同于 对话框在屏幕中的位置
	 * 					event - x/y
	 * @return 对象 
	 */
	dialog: function(date, onSelect, options, pos) {//TODO： 暂时此功能不添加,以后需要时再做处理
		var input = this.element[0],
		    that = this;
		var id, browserWidth, browserHeight, scrollX, scrollY,
			opts = this._dialogInst; // internal instance

		if (!opts) {
			this.uuid += 1;
			id = "dp" + this.uuid;
			this._dialogInput = $("<input type='text' id='" + id +
				"' style='position: absolute; top: -100px; width: 0px;'/>");
			this._dialogInput.keydown({that:that},this._doKeyDown);
			$("body").append(this._dialogInput);
			this._newInst(this._dialogInput, false);
			this._dialogInst = opts;
			inst.options = {};
		}
		that.extendRemove(inst.options, options || {});
		date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			browserWidth = document.documentElement.clientWidth;
			browserHeight = document.documentElement.clientHeight;
			scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = 
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// 移动焦点至屏幕中的输入项，之后隐藏对话框
		this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
		inst.options.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this.show();
		if ($.blockUI) {
			$.blockUI(this.dpDiv);
		}
		return this;
	},
	//将目标对象与日历组件分离
	_destroy: function() {
		var nodeName,
		    opts = this.options,
		    target = this.element[0],
			$target = $(target);

		$(target).parent().parent().replaceWith($target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		
		nodeName = target.nodeName.toLowerCase();
		$.removeData(target, "inited");
		opts.isShow = false;
		if (nodeName === "input") {
			opts.append.remove();
			opts.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind(".field").
				unbind(".restrictInput").
				unbind("blur").
				unbind("focus").
				unbind("keydown").
				unbind("keypress").
				unbind("keyup").
				unbind("datepickeronblur").
				unbind("datepickeronchange").
				unbind("datepickeronkeydown").
				unbind("datepickeronkeyup").
				unbind("datepickeronstatus").
				unbind("onOptionChange");
		} else if (nodeName === "div" || nodeName === "span") {
			$target.removeClass(this.markerClassName).empty();
		}
		$(target).val("");
		$(target).removeAttr("value");
		$target.removeAttr( "component-role" )
			   .removeClass("coral-textbox-default coral-validation-datepicker coral-form-element-datepicker ctrl-init ctrl-form-element ctrl-init-datepicker")
			   .removeAttr("data-options");
	},
	//启用日历组件到一个jquery选择器上
	enable: function() {
		var target = this.element[0],
		    opts = this.options,
		    nodeName, inline,
			$target = $(target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		//$(target).parent().parent().css({opacity: "1"});
		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = false;
			opts.trigger.filter("button").
				each(function() { this.disabled = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
			$target.parent().parent().removeClass("coral-state-disabled");
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().removeClass("coral-state-disabled");
			inline.find("select.coral-datepicker-month, select.coral-datepicker-year").
				prop("disabled", false);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
	},

	//禁用日历组件到一个jquery选择器上
	disable: function() {
		var target = this.element[0],
		    nodeName, inline,
		    opts = this.options,
			$target = $(target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		//$(target).parent().parent().css({opacity: "0.5"});
		nodeName = target.nodeName.toLowerCase();
		if (nodeName === "input") {
			target.disabled = true;
			opts.trigger.css({opacity: "0.5", cursor: "default"});
			
			$target.parent().parent().addClass("coral-state-disabled");
		} else if (nodeName === "div" || nodeName === "span") {
			inline = $target.children("." + this._inlineClass);
			inline.children().addClass("coral-state-disabled");
			inline.find("select.coral-datepicker-month, select.coral-datepicker-year").
				prop("disabled", true);
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value === target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},
	/**
	 * 设置日历组件为只读
	 */
	readonly: function(flag){
		var target = this.element[0],
		    inline,
			$target = $(target);

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}

		$(target).parent().parent().removeClass( "coral-isLabel" );
		$(target).parent().parent().toggleClass( "coral-readonly", flag );
		$(target).toggleClass("tabbable",!flag);
		this._readonly(target,flag);
	},
	_readonly: function(target,flag){
		var nodeName = target.nodeName.toLowerCase(),
			opts = this.options;
		if (nodeName === "input" && flag) {
			target.readOnly = true;
			opts.trigger.filter("button").
				each(function() { this.readOnly = true; }).end().
				filter("img").css({opacity: "0.5", cursor: "default"});
		}
		if (nodeName === "input" && !flag) {
			if(this.isIsLabel())return ;
			target.readOnly = false;
			opts.trigger.filter("button").
				each(function() { this.readOnly = false; }).end().
				filter("img").css({opacity: "1.0", cursor: ""});
		}
	},
	readonlyInput: function(flag) {
		if( !(this.options.readonly))
			this.element.prop("readonly", flag);
	},
	/**
	 * 日历组件是否为只读
	 */
	isReadonly: function() {
		if(this.options.readonly){
			return this.options.readonly;
		}
		return false;
	},
	isReadonlyInput: function() {
		if(this.options.readonlyInput){
			return this.options.readonlyInput;
		}
		return false;
	},
	isIsLabel: function() {
		if(this.options.isLabel){
			return this.options.isLabel;
		}
		return false;
	},
	/**
	 * 设置日历组件为只读
	 */
	isLabel: function(flag){
		var target = this.element[0],
		    inline,
			$target = $(target),
			opts = this.options;

		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var id=opts.id;
		//修改样式
		if(flag){
			$target.parent().removeClass("coral-datepicker-no-close");
			$target.parent().parent().removeClass("coral-readonly");
			$target.parent().parent().addClass("coral-isLabel");
			$target.removeClass("tabbable");
		}else{
			$target.parent().parent().removeClass("coral-isLabel coral-readonly");
			$target.parent().addClass("coral-datepicker-no-close");
			$target.addClass("tabbable");
		}
		//设置为只读 标签
		this.options.readonly = flag;
		this.options.isLabel = flag;
		this._readonly(target,flag);
	},
	
	/*
	 * 是否第一个jquery组件禁用的日历组件
	 * @param target element - 输入框  或 div 或 span
	 * @return boolean - true 为禁用的，false 为启用的
	 */	
	isDisabled: function() {
		var target = this.element[0];
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] === target) {
				return true;
			}
		}
		return false;
	},
	
	_doOption: function (key, value) {
		var that = this,
			opts = this.options;
		var settings, date, minDate, maxDate;
		date=this.getDate(true);
		minDate = this._getMinMaxDate("min");
		maxDate = this._getMinMaxDate("max");
		var oldValue=this._getHiddenInputValue();
		if ( key=="value" ) {
			if(value){
				var format = getFormatter(value,opts.dateFormat, opts);
				var cdate = $.coral.parseDate(format, value,opts);
				var srcDateFormat = opts.srcDateFormat;
				if (this._checkDateRange(cdate) === 2){
					value = $.coral.formatDate(srcDateFormat, minDate, opts);
				}
				if (this._checkDateRange(cdate) === 1) {
					value = $.coral.formatDate(srcDateFormat, maxDate, opts);
				}
			}
			date = that._processDefaultDate(that,value);
			//设置隐藏字段值
		}
		if (minDate !== null && key=="dateFormat" || minDate !== null && key=="minDate") {
			opts.minDate = this._formatDate(minDate);
		}
		if (maxDate !== null && key == "dateFormat" || maxDate !== null && key == "maxDate") {
			opts.maxDate = this._formatDate(maxDate);
		}
		if ( key == "disabled" ) {
			if ( value ) {
				this.disable();
			} else {
				this.enable();
			}
		}
		if ( key == "readonlyInput" ) {
			this.readonlyInput(value);
		}
		if ( key == "readonly" ) {
			this.readonly(value);
		}
		if ( key == "isLabel" ) {
			this.isLabel(value);
		}
		if ( key == "labelField" ) {
			this.labelPanel.html(value);
		}
		if ( key == "showAnim" ) {
			//下拉显示的时候无需进行下面的初始化操作
			return;
		}
		if ( key === "startDateId" ) {
			$( "#"+value ).datepicker( "option", "endDateId", opts.id );
		}
		
		this._attachments(this.element);
		this._autoSize();
		this._setDate(date);
		if ( opts.isShow ) {
			this.update();
		}
		this._updateAlternate();
		this._setHiddenInputValue();
		if( key=="value" ){
			this._setStartEnd(oldValue, value);
		}
	},
	/**
	 * 用于更新option参数时赋值的方法
	 * @param target element - 目标对象
	 * @param key object - 新的设置对象
	 * 			   string - 设置的key
	 * @param value any - 新的value
	 */
	_setOption: function(key, value) {
		// 判断key必须放在最前面
		if ( key=="value" ) {
			if (this.options.valueType == "long") {
				value = $.coral.longToStringDate(value, this.options);
			}
		}
		this._super(key,value);
		this._doOption(key, value);
	},
	valid: function(){
		var target = this.element[0];
		var data = {
			hasTips: false,
			element: $(target)
		};
		return ( $.validate.validateField( null, data ).length > 0 ? false : true );
	},
	//发生变化的方法
	change: function( key, value) {
		var target = this.element[0];
		this.option( key, value);
	},
	/**
	 * 日历组件的刷新方法
	 */
	refresh: function() {
		var target = this.element[0],
		    opts = this.options;
		if (opts) {
			this.update();
		}
	},
	reset: function(){
		var target = this.element[0];
		$(target).datepicker("option", "value", this.originalValue);
	},
	/**
	 * 设置日历组件的日期
	 */
	setValue: function(value, triggerChange) {
		var opts = this.options;
		if (opts.valueType == "long") {
			value = $.coral.longToStringDate(value, opts);
		}
		var target = this.element[0],
		    oldValue = this._getHiddenInputValue();
		var value=$.coral.trim(value);
		this._doOption("value", value);
		//$(target).datepicker("option", "value", value);
		if (triggerChange){
			this._change(oldValue,value);
		}
	},
	
	/**
	 * 取得日历组件的日期
	 */
	getValue: function(noDefault) {
		var target = this.element[0];
		var opts = this.options;
		var value = this.getDateValue();
		if(opts.valueType == "long") {
			value = $.coral.stringToLongDate(value, opts);
		}
		return value;
	},
	/**
	 * 取得日期组件的显示值
	 */
	getText: function() {
		return this.options.input.val();
	},
	getValidateValue: function() {
		if (this.options.restrictConvert && this.options.valueType =="long") {
			return this.getText();
		} else {
			return this.getValue();
		}
	},
	/**
	 * 设置日历组件的日期
	 */
	setDate: function(date) {
//			var target = this.element[0],
//			    opts = this.options;
//			if (opts) {
//				//var tmpDateFormat=this._get(inst,"dateFormat");
//			//	this._set(inst,"dateFormat",editFormat);
//				this._setDate(date);
//				//this._set(inst,"dateFormat",tmpDateFormat);
//				this.update();
//				this._updateAlternate();
//				//设置隐藏字段值
//				this._setHiddenInputValue();
//			}
		var opts = this.options;
		var dateFormat = opts.dateFormat
		var str = $.coral.formatDate(dateFormat, date, opts);
		this.setValue(str);
	},
	
	/**
	 * 取得日历组件的日期
	 */
	getDate: function(noDefault) {
		var target = this.element[0],
		    opts = this.options;
		
		if (opts && !opts.inline) {
			this._setDateFromField(opts, noDefault);
		}
		return (opts ? this._getDate() : null);
	},
	/**
	 * 取得日历组件的显示值
	 */
	getDateValue: function() {
		var target = this.element[0],
		    opts = this.options;
		//if( !inst.currentYear ) return "";
		return this._getHiddenInputValue();
		/*var str=this._formatDate(inst);
		return str;*/
	},

	//执行keydown事件
	_doKeyDown: function(event) {
		var that = event.data.that,
		    onSelect, dateStr, sel,
		    opts = that.options,
			handled = true,
			isRTL = opts.dpDiv.is(".coral-datepicker-rtl");
		var oldValue = that._getHiddenInputValue();
		opts._keyEvent = true;
		if (that._datepickerShowing) {
			switch (event.keyCode) {
				case 9: that.hide();
						handled = false;
						break; //  屏蔽Tab
				case 13: sel = $("td." + that._dayOverClass + ":not(." +
									that._currentClass + ")", opts.dpDiv);
						if (sel[0]) {
							that._selectDay(event.target, opts.selectedMonth, opts.selectedYear, sel[0]);
						}

						onSelect = opts.onSelect;
						if (onSelect) {
							dateStr = that._formatDate();
							// 触发回调
							//onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
						} else {
							that.hide();
						}
						//return false; // form中不提交
				case 27: that.hide();
						break; // 屏蔽 escape
				case 33: that._adjustDate(event.target, (event.ctrlKey ?
							-opts.stepBigMonths :
							-opts.stepMonths), "M");
						break; // previous month/year on page up/+ ctrl
				case 34: that._adjustDate(event.target, (event.ctrlKey ?
							+opts.stepBigMonths :
							+opts.stepMonths), "M");
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) {
							that._clearDate();
						}
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) {
							that._gotoToday(event.target);
						}
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) {
							that._adjustDate(event.target, (isRTL ? +1 : -1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) {
							that._adjustDate(event.target, (event.ctrlKey ?
								-opts.stepBigMonths :
								-opts.stepMonths), "M");
						}
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) {
							that._adjustDate(event.target, -7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) {
							that._adjustDate(event.target, (isRTL ? -1 : +1), "D");
						}
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) {
							that._adjustDate(event.target, (event.ctrlKey ?
								+opts.stepBigMonths :
								+opts.stepMonths), "M");
						}
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) {
					       that._adjustDate(event.target, +7, "D");
						}
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		} else if (event.keyCode === 36 && event.ctrlKey) { // 显示日历 date picker on ctrl+home
			that.show();
		} else {
			// 对输入框的keyDown事件
			handled = false;
			switch (event.keyCode) {
			case 9:
			case 13: 
				that._setHiddenInputValue();
				dateStr = that._getHiddenInputValue();
				that._setStartEnd(oldValue, dateStr);
				that._change( oldValue, dateStr);
				break; 
			}
		}
		if(opts.shortCut){
			$.coral.callFunction(opts.shortCut,event,this);
		}
		// added by mengshuai begin onKeydown
		that._trigger("onKeyDown", event, [ { "oldValue": oldValue, "value": opts.input.val() } ]);
		// added by mengshuai end
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},
	
	_setStartEnd: function(oldValue, value){
		var opts = this.options;
		if (oldValue == value) {
			return;
		}
		var startDateId = opts.startDateId;
		var endDateId = opts.endDateId;
		if (startDateId) {
			$("#"+startDateId).datepicker("option", "maxDate", value);
		}
		if (endDateId) {
			$("#"+endDateId).datepicker("option", "minDate", value);
		}
	},
	_change: function(oldValue, value, event){
		if ( oldValue != value ) {
			this.options.value = value;
			this._trigger("onChange", event, [{"oldValue": oldValue,"newValue": value,"value": value}]);
		}
	},

	//执行keypress事件
	_doKeyPress: function(event) {
		/*var chars, chr,
			inst = $.datepicker._getInst(event.target);

		if ($.datepicker._get(inst, "constrainInput")) {
			chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
			chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
		}*/
	},

	//执行keyup事件
	_doKeyUp: function(event) {
		var that = event.data.that,
		    date,
			opts = that.options;
		var oldValue = that._getHiddenInputValue();
		var minDate = that._getMinMaxDate( "min"),
			maxDate = that._getMinMaxDate( "max");	
		if (opts.input.val() !== opts.lastVal) {
			try {
				//支持通过键盘删除日期操作
				if(opts.input.val()==""){
					opts.selectedDay = null;
					opts.drawMonth = opts.selectedMonth = null;
					opts.drawYear = opts.selectedYear = null;
					opts.currentDay = null;
					opts.currentMonth = null;
					opts.currentYear = null;
					opts.currentHur = null;
					opts.currentMiu = null;
					opts.currentSed = null;
					
				}
				
				date = $.coral.parseDate(opts.dateFormat,
					opts.input ? opts.input.val() : null,opts),
				// 标识是用户在键盘输入的编辑状态
				opts.input.addClass("isEdit");

				if (date && that._checkDateRange(date)===0) { // only if valid
					that._setDateFromField();
					that._updateAlternate();
					//$.datepicker._updateDatepicker(inst);
				}else if(that._checkDateRange(date)===1){
					 opts.currentDay= maxDate.getDate();
					 opts.currentMonth = maxDate.getMonth();
					 opts.currentYear = maxDate.getFullYear();
				}else if(that._checkDateRange(date)===2){
					 opts.currentDay= minDate.getDate();
					 opts.currentMonth = minDate.getMonth();
					 opts.currentYear = minDate.getFullYear();
				}
				//触发修改事件
				var dateStr=opts.input.val();
			//	$.datepicker._trigger(opts, "onChange", event, [ { "oldValue": oldValue, "newValue": datestr,"value": datestr } ]);
			//	$.datepicker._apply(inst,"onChange",[dateStr,inst]);
			//	this._apply( inst,"onChange",[ { "oldValue": oldValue, "newValue": datestr,"value": datestr } ] );
				//设置隐藏字段值
			//	$.datepicker._setHiddenInputValue(inst);
			}catch (err) {
				//触发格式化错误事件
				var dateStr=opts.input.val();
/*					that._apply(inst,"onFormatError",[dateStr,inst]);
					that._apply(inst,"onFormatWarn",[dateStr,inst]);*/
			}
			that._trigger("onKeyUp", event, [ { "oldValue": oldValue, "value": opts.input.val() } ]);
		}
		return true;
	},
	/**
	 * 检查日期时间是否在最大最小日期范围内
	 * @return 0在minDate和maxDate之间  1大于maxDate 2小于minDate 
	 */
	_checkDateRange: function(date){
		var minDate,maxDate,
			opts = this.options,
		minDate = this._getMinMaxDate("min");
		maxDate = this._getMinMaxDate("max");
		if(maxDate!=null && date>maxDate){
			return 1;
		}
		if(minDate!=null && date<minDate){
			return 2;
		}
		return 0; 
	},
	//获取srcDateFormat的分隔符是什么
	_srcDateFormatSeparator: function(srcDateFormat){
		var separator = "/";
		if(srcDateFormat.indexOf("/")>-1){
			return separator;
		}
		if(srcDateFormat.indexOf("-")>-1){
			separator = "-";
			return separator;
		}
	},
	
	/**
	 * 设置隐藏input字段值,getValue()取值的时候，若complete==false,只能根据显示值的格式来显示，但是分隔符可以根据隐藏值的格式显示，
	 * 例如：显示值为2015-12，隐藏值srcDateFormat=“yyyy/MM/dd”，则getValue()取到的值为2015/12
	 */
	_setHiddenInputValue: function() {
		// 修改赋值bug 20150129
		var opts = this.options;
		if (opts.input.val() == "") {
			opts.input.parent().find("input[type='hidden']").val("");
			return ;
		}
		var dateFormat=opts.dateFormat;
		var srcDateFormat = srcDateFormat || opts.srcDateFormat;//this._get(inst,"srcDateFormat");
		var separator = this._srcDateFormatSeparator(srcDateFormat);
		if(opts.currentYear==null || opts.currentMonth==null){
			opts.input.parent().find("input[type='hidden']").val("");
			return ;
		}
		var date = _daylightSavingAdjustWidthTime(new Date(opts.currentYear, opts.currentMonth, opts.currentDay),[opts.currentHur,opts.currentMiu,opts.currentSed]);
		var format = getFormatter(opts.input.val(),opts.dateFormat, opts),
			datestr = this.completeFormate(format,dateFormat);
		if(opts.complete){
			dateStr = $.coral.formatDate(srcDateFormat, date, opts);
		}else {
			//getValue()的时候如果配置的srcDateFormat有分隔符，按照下面的处理，取到值的分隔符按照srcDateFormat的分隔符显示
			if(srcDateFormat.indexOf("-")>-1 ||srcDateFormat.indexOf("/")>-1 ){
				datestr = (datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1 && datestr.indexOf("d")>-1)?srcDateFormat:datestr; 
				var dateStr = $.coral.formatDate(datestr, date, _getFormatConfig(opts));
				if(dateStr.indexOf("-") > -1){
					var dateStr = dateStr.indexOf(separator) ==-1 ? dateStr.replace(/-/gm,separator):dateStr;
				}else if(dateStr.indexOf("/") > -1){
					var dateStr = dateStr.indexOf(separator) ==-1 ? dateStr.replace(/\//gm,separator):dateStr;
				}
			}else{
				//如果srcDateFormat没有分隔符，例如srcDateFormat=“yyyyMMdd”,按如下处理
				datestr = datestr.indexOf("-")>-1?datestr.replace(/-/gm,""):datestr.replace(/\//gm,"");
				if(datestr.indexOf("y")>-1){
					if(datestr.indexOf("d")==-1 && datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1){
						srcDateFormat = (srcDateFormat.split(" "))[0];
						datestr = srcDateFormat.replace(/d/gm,"");
					}
					if(datestr.indexOf("y")>-1 && datestr.indexOf("M")>-1 && datestr.indexOf("d")>-1){
						datestr = srcDateFormat;
					}else{
						datestr = datestr;
					}
				}
				dateStr = $.coral.formatDate(datestr, date, opts);
			}
		}
		opts.input.parent().find("input[type='hidden']").val(dateStr);
	},
	/**
	 * 取得隐藏字段值
	 */
	_getHiddenInputValue:function(){
		var opts = this.options;
		var id=opts.id;
		return opts.input.parent().find("input[type='hidden']").val();
	},
	//根据dateFormat构件editFormat
	_createEditFormat : function(dateFormat){
		var editFormat="";
		if(dateFormat!=null){
			if(this._isYearMonthMode(dateFormat)){
				editFormat+="yyyy-MM";
			}else if(this._isYearMode(dateFormat)){
				editFormat+="yyyy";
			}else{
				editFormat+="yyyy-MM-dd";
			}
			if(_hasTime(dateFormat)){
				editFormat+=" HH:mm:ss";
			}
		}
		return editFormat;
	},
	//如果complete为true，返回dateFormat即自动补全；若complete为false,根据配置的格式来显示
	completeFormate : function(dateshow,dateFormat){
		var str1,str2,mark = null,datestr;
		var opts = this.options;
		var dateformat = dateFormat.indexOf("H")>-1?(dateFormat.split(" "))[0]:dateFormat;
		if(opts.complete){
			return dateFormat;
		}else{
			//若dateformat不含“dd”,则只需根据dateFormat的格式来显示
			if(dateformat.indexOf("d") == -1){
				if(dateformat.indexOf("d") == -1 && dateshow.indexOf("M") == -1){
					return dateshow;
				}
				return dateformat;
			}
			//若dateFormat中有“dd”,则根据配置的模式显示，但是样式要和dateFormat的样式一样
			if(dateformat.indexOf("d") > -1){
				var posYear = dateformat.indexOf("y"),
				 	posDay =  dateformat.indexOf("d"),
				 	substr1 = dateformat.substr(posDay + 2,dateformat.length),
					substr2 = dateformat.substr(0,posDay-1),
					substr3 = dateformat.substr(0,posDay + 2);
				//如果dateshow只有两位,即dd,则直接返回dateshow
				if(dateshow.length == 2){
					return dateshow;
				}
				//如果dateshow为yyyyMMdd,则返回dateFormat的格式
				if(dateshow.indexOf("y") > -1 && dateshow.indexOf("d") > -1 && dateshow.indexOf("M") > -1){
					return dateFormat;
				}
				//如果dateshow不含dd,比如“yyyyMM”,根据dateFormat格式返回
				if(dateshow.indexOf("d") == -1){
					if(dateshow.indexOf("M") == -1){
						return dateshow;
					}
					if( posDay == 0){
						datestr = substr1;
					}
					if(posDay == 8){
						datestr = substr2;
					}
					if(posDay == 3){
						datestr = substr2 + substr1;
					}
				}else if(dateshow.indexOf("y") == -1){
					if( posYear == 0){
						datestr = dateformat.substr(posYear + 5,5);
					}
					if(posYear == 6){
						datestr = dateformat.substr(0,posYear-1);
					}
				}
			}
			return datestr;
		}
	},
	compMaxMin: function(){
		var opts = this.options;
		var minDate = this._getMinMaxDate("min");
		var maxDate = this._getMinMaxDate("max");
		if(minDate && opts.currentYear == minDate.getFullYear() && opts.currentMonth == minDate.getMonth() 
				&& opts.currentDay == minDate.getDate().toString()) {
			if(opts.currentHur < minDate.getHours()) {
				opts.currentHur = minDate.getHours();
				opts.currentMiu = minDate.getMinutes();
				opts.currentSed = minDate.getSeconds();
			} else if(opts.currentHur == minDate.getHours()){
				opts.currentHur = minDate.getHours();
				if(opts.currentMiu < minDate.getMinutes()) {
					opts.currentMiu = minDate.getMinutes();
					opts.currentSed = minDate.getSeconds();
				}else if(opts.currentMiu == minDate.getMinutes()){
					opts.currentMiu = minDate.getMinutes();
					if (opts.currentSed <= minDate.getSeconds()){
						opts.currentSed = minDate.getSeconds();
					}
				}
			} 
		} else if(maxDate && opts.currentYear == maxDate.getFullYear() && opts.currentMonth == maxDate.getMonth() 
				&& opts.currentDay == maxDate.getDate().toString()){
			if(opts.currentHur > maxDate.getHours()) {
				opts.currentHur = maxDate.getHours();
				opts.currentMiu = maxDate.getMinutes();
				opts.currentSed = maxDate.getSeconds();
			} else if(opts.currentHur == maxDate.getHours()){
				opts.currentHur = maxDate.getHours();
				if(opts.currentMiu > maxDate.getMinutes()) {
					opts.currentMiu = maxDate.getMinutes();
					opts.currentSed = maxDate.getSeconds();
				}else if(opts.currentMiu == maxDate.getMinutes()){
					opts.currentMiu = maxDate.getMinutes();
					if (opts.currentSed >= maxDate.getSeconds()){
						opts.currentSed = maxDate.getSeconds();
					}
				}
			} 
		}
	},
	//失去焦点的时候将编辑格式换成显示格式
	_inputBlur : function(e){
		this.component().removeClass( "coral-state-focus" );
		var opts = this.options;
		var dateFormat=opts.dateFormat;
		if(this.isReadonly() || this.isIsLabel()){
			return ;
		}
		var oldValue = this._getHiddenInputValue();
		var datestr = "";
		var minDate = this._getMinMaxDate("min");
		var maxDate = this._getMinMaxDate("max");
		this.compMaxMin();
		var date = _daylightSavingAdjustWidthTime(new Date(opts.currentYear, opts.currentMonth, opts.currentDay),[opts.currentHur,opts.currentMiu,opts.currentSed]);
		// 日期面板不显示的时候才触发onBlur事件和onChange事件；
		// 日期面板显示的时候，onChange事件交给面板上面的事件去处理；
		if ( (typeof opts.currentYear != "undefined" || opts.currentYear != null) && !opts.isShow ) {
			var srcDateFormat = getFormatter(opts.input.val(),opts.dateFormat, opts);
			var patrn = /[\u4E00-\u9FA5]|[\uFE30-\uFFA0]|[a-zA-Z]|[`~!@#\$%\^\&\*\(\)_\+<>\?"\{\},\.\\\;'\[\]]|^[-/:]|[-/:]$/gi;
			if(patrn.exec(opts.input.val())){
				opts.input.val("");
			}
			// 修改赋值bug 20150129
			if ( "" != opts.input.val() ) {
				datestr = this.completeFormate(srcDateFormat,dateFormat);
				datestr = $.coral.formatDate(datestr, date, opts);
			} 
			opts.input.val(datestr);
			this._setHiddenInputValue();
			//var value = this._getHiddenInputValue();
			//设置隐藏字段值
//				opts.dpDiv.find("#dpTimeHour").val(opts.currentHur||"00");
//				opts.dpDiv.find("#dpTimeMinute").val(opts.currentMiu||"00");
//				opts.dpDiv.find("#dpTimeSecond").val(opts.currentSed||"00");
			this._setStartEnd(oldValue, datestr);
			this._change(oldValue, datestr, null);
			this._trigger("onBlur", e, [ { "value": datestr } ]);
		}
	},
	/**
	 * 获取焦点方法
	 */
	focus: function(event) {
		if (event) {
			input = event.target;
		} else {
			input = this.element[0];
		}
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if (this.isDisabled() || this._lastInput === input || this.isReadonly() || this.isIsLabel() || this.isReadonlyInput()) { // already here
			return false;
		}
		input.focus();
		return true;
	},
	//在给定的输入字段上弹出日历组件
	show: function(event) {
		var input,
		    that = this,
		    opts = this.options;
		if (event) {
			input = event.target;
		} else {
			input = this.element[0];
		}
		if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
			input = $("input", input.parentNode)[0];
		}

		if ( that.isDisabled() || 
				that._lastInput === input || 
				that.isReadonly() || 
				that.isIsLabel() ) { // already here
			return;
		}

		var beforeShow, beforeShowoptions, isFixed,
			offset, showAnim, duration;
		
		if ( $.coral._curInst && $.coral._curInst !== opts ) {
			$.coral._curInst.dpDiv.stop( true, true );
			if ( opts && that._datepickerShowing ) {
				that.hide();
			}
		}

		beforeShow = opts.beforeShow;
		beforeShowoptions = beforeShow ? beforeShow.apply(input, [input, opts]) : {};
		if(beforeShowoptions === false){
			return;
		}
		that.extendRemove(opts, beforeShowoptions);

		opts.lastVal = null;
		that._lastInput = input;
		that._setDateFromField();

		if ( that._inDialog ) { // 隐藏 cursor
			input.value = "";
		}
		if ( !that._pos ) { // 
			that._pos = that._findPos( input );
			that._pos[1] += input.offsetHeight; // 增加高度
		}
		isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css("position") === "fixed";
			return !isFixed;
		});

		offset = {left: that._pos[0], top: that._pos[1]};
		that._pos = null;

		opts.dpDiv.empty();
		
		opts.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
		that.iframePanel.css({position: "absolute", display: "block", top: "-1000px"});
		that.update();
		
		var panel = $(opts.dpDiv),
	        ifPanel = that.iframePanel, 
            width = panel.width(),
	        height = panel.height();
	    
		offset = that._checkOffset(offset, isFixed);
		opts.dpDiv.css({position: (that._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px"});
		that.iframePanel.css({position: (that._inDialog && $.blockUI ?
			"static" : (isFixed ? "fixed" : "absolute")), display: "none",
			left: offset.left + "px", top: offset.top + "px", width:width, height:height});
		if ( !opts.isShow ) {
			opts.isShow = true;
			if (!opts.inline) {
				showAnim = opts.showAnim;
				duration = opts.duration;
				if(opts.zIndex!=null){
					opts.dpDiv.zIndex(opts.zIndex+1);
					that.iframePanel.zIndex(opts.zIndex);
				}
				//inst.dpDiv.zIndex($(input).zIndex()+1);
				that._datepickerShowing = true;
	
				if ( $.effects && $.effects.effect[ showAnim ] ) {
					opts.dpDiv.show(showAnim, opts.showOptions, duration);
				} else {
					opts.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}
				that.iframePanel.show(showAnim);   
				if ( that._shouldFocusInput() ) {
					opts.input.focus();
				}
	
				that._curInst = opts;
				$.coral._curInst = that._curInst;
			}
			
			(function move () {
				var datepickerComponent = $(input).parent().parent();
				    
				
				if (opts.isShow) {
					panel.css({
						left : $.coral.getLeft( panel, datepickerComponent ),
						top  : $.coral.getTop( panel, datepickerComponent )
					});
					ifPanel.css({
						left : $.coral.getLeft( panel, datepickerComponent ),
						top  : $.coral.getTop( panel, datepickerComponent )
					});
					setTimeout(move, 200);
				}
			})();
		}
		opts.dpDiv.find( "#dpTimeSpinner" ).spinner( "setValue", opts.dpDiv.find("#dpTimeHour").val() );
		opts.dpDiv.find( "#dpTimeSpinner" ).spinner( "setValue", opts.dpDiv.find("#dpTimeMinute").val() );
		opts.dpDiv.find( "#dpTimeSpinner" ).spinner( "setValue", opts.dpDiv.find("#dpTimeSecond").val() );
	},
	_updateDateTime: function(){
		var that = this,hur,min,sed,
			timeDate=[],compDate,compMin,compMax,
		    opts = this.options;
		if(opts.model=="timepicker"){
			var date = new Date();
			timeDate.push(date.getFullYear(),date.getMonth(),date.getDate());
			var minDate = opts.minTime ?  timeDate.join("-") + " " + opts.minTime: null,
				maxDate = opts.maxTime ? timeDate.join("-") + " " + opts.maxTime: null;
			var minDay = new Date(minDate),
				maxDay = new Date(maxDate);
			compDate = new Date(date.getFullYear(),date.getMonth(),date.getDate());
			compMin = compMax = compDate;
		}else{
			var minDate = this._getMinMaxDate("min");
			var maxDate = this._getMinMaxDate("max");
			var minDay = new Date(minDate),
			maxDay = new Date(maxDate);
			compDate = new Date(opts.selectedYear,opts.selectedMonth,opts.selectedDay),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		}
		opts.dpDiv.find( "#coral-timePanel").find("#dpTimeHour").spinner({
			max: 24,
			min: 0,
			step: 1,
			vertical: true,
			onSpin: function( e, ui ){
				var value = $(this).spinner( "getValue" );
				hur = ui.value;
				if(new Date(compDate).getTime() == new Date(compMin).getTime() &&(minDate && hur < minDay.getHours())|| (maxDate &&  new Date(compDate).getTime() == new Date(compMax).getTime() && hur > maxDay.getHours())){
					$(this).find("#dpTimeHour").val(value);
					return false;
				}
				that._selectTime(hur);
			}
		});
		opts.dpDiv.find( "#coral-timePanel").find("#dpTimeMinute").spinner({
			max: 60,
			min: 0,
			step: 1,
			vertical: true,
			onSpin: function( e, ui ){
				var value = $(this).spinner( "getValue" );
				min = ui.value;
				var hour = opts.dpDiv.find("#dpTimeHour").val();
				if(new Date(compDate).getTime() == new Date(compMin).getTime() && (minDate && min < minDay.getMinutes() && hour <= minDay.getHours())|| (maxDate && new Date(compDate).getTime() == new Date(compMax).getTime() &&  min > maxDay.getMinutes() && hour >= maxDay.getHours())){
					$(this).find("#dpTimeMinute").val(value);
					return false;
				}
				that._selectTime(null,ui.value);
			}
		});
		opts.dpDiv.find( "#coral-timePanel").find("#dpTimeSecond").spinner({
			max: 60,
			min: 0,
			step: 1,
			vertical: true,
			onSpin: function( e, ui ){
				var value = $(this).spinner( "getValue" );
				sed = ui.value;
				var hour = opts.dpDiv.find("#dpTimeHour").val(),
					miu = opts.dpDiv.find("#dpTimeMinute").val();
				if(new Date(compDate).getTime() == new Date(compMin).getTime() &&(minDate && sed < minDay.getSeconds() && hour <= minDay.getHours() && miu <= minDay.getMinutes())|| (maxDate && new Date(compDate).getTime() == new Date(compMax).getTime() &&  sed > maxDay.getSeconds()&& hour >= maxDay.getHours()&& miu >= maxDay.getMinutes())){
					$(this).find("#dpTimeSecond").val(value);
					return false;
				}
				that._selectTime(null,null,ui.value);
			}
		});
	},
	// 更新日历组件
	/* Generate the date picker content. */
	update: function() {
		var opts = this.options,
		    that = this;
		this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		datepicker_instActive = opts; // for delegate hover events
		if (opts.model=="datepicker") {
			opts.dpDiv.empty().append(this._generateHTML()).append(this._generateTimePanel());
			opts.dpDiv.find("#timepicker").find(".icon-checkmark").hide();
		} else {
			opts.dpDiv.empty().append(this._generateTimePanel());
		}
		this._updateDateTime();
		this._attachHandlers();
		this._attachTimeHandlers();
		
		var origyearshtml,
			numMonths = this._getNumberOfMonths(),
			cols = numMonths[1],
			width = 17,
			activeCell = opts.dpDiv.find( "." + this._dayOverClass + " a" );

		if ( activeCell.length > 0 ) {
			this.datepicker_handleMouseover.apply( activeCell.get( 0 ),[that] );
		}
		opts.dpDiv.removeClass("coral-datepicker-multi-2 coral-datepicker-multi-3 coral-datepicker-multi-4").width("");
		if (cols > 1) {
			opts.dpDiv.addClass("coral-datepicker-multi-" + cols).css("width", (width * cols) + "em");
		}
		opts.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
			"Class"]("coral-datepicker-multi");
		opts.dpDiv[(opts.isRTL ? "add" : "remove") +
			"Class"]("coral-datepicker-rtl");

		if (opts === this._curInst && this._datepickerShowing && this._shouldFocusInput() ) {
			//inst.input.focus();
		}		
		// 
		if( opts.yearshtml ){
			origyearshtml = opts.yearshtml;
			setTimeout(function(){
				//
				if( origyearshtml === opts.yearshtml && opts.yearshtml ){
					opts.dpDiv.find("select.coral-datepicker-year:first").replaceWith(opts.yearshtml);
				}
				origyearshtml = opts.yearshtml = null;
			}, 0);
		}
	},
	_shouldFocusInput: function() {
		var opts = this.options;
		return opts.input && opts.input.is( ":visible" ) && !opts.input.is( ":disabled" ) && !opts.input.is( ":focus" );
	},

	/* 检查屏幕中剩余位置 */
	_checkOffset: function(offset, isFixed) {
		var opts = this.options,
		    dpWidth = opts.dpDiv.outerWidth(),
			dpHeight = opts.dpDiv.outerHeight(),
			inputWidth = opts.input ? opts.input.outerWidth() : 0,
			inputHeight = opts.input ? opts.input.outerHeight() : 0,
			viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
			viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= opts.isRTL ? (dpWidth - inputWidth) : 0;
		offset.left -= (isFixed && offset.left === opts.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top === (opts.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* 发现指定对象在屏幕中的位置. */
	_findPos: function(obj) {
		var position,
			opts = this.options,
			isRTL = opts.isRTL;

		while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
			obj = obj[isRTL ? "previousSibling" : "nextSibling"];
		}

		position = $(obj).offset();
		return [position.left, position.top];
	},

	//隐藏日历组件
	hide: function(input) {
		var input = this.element[0],
		    that = this,
		    showAnim, duration, postProcess, onClose,
			opts = this._curInst;
		if (!opts || (input && opts !== this.options)) {
			return;
		}
		opts.isShow = false;
		if (this._datepickerShowing) {
			showAnim = opts.showAnim;
			duration = opts.duration;
			postProcess = function() {
				that._tidyDialog(opts);
			};

			if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
				opts.dpDiv.hide(showAnim, opts.showOptions, duration, postProcess);
			} else {
				opts.dpDiv[(showAnim === "slideDown" ? "slideUp" :
					(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
			}
            this.iframePanel.hide();
            
			if (!showAnim) {
				postProcess();
			}
			this._datepickerShowing = false;

			onClose = opts.onClose;
			if (onClose) {
				onClose.apply((opts.input ? opts.input[0] : null), [(opts.input ? opts.input.val() : ""), opts]);
			}

			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
				if ($.blockUI) {
					$.unblockUI();
					$("body").append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},
	
	_tidyDialog: function(opts) {
		opts.dpDiv.removeClass(this._dialogClass).unbind(".coral-datepicker-calendar");
	},

	_checkExternalClick: function(event) {
		var that = event.data.that;
		if (!that._curInst) {
			return;
		}

		var $target = $(event.target),
			opts = that.options;
		if (event.isDefaultPrevented()) {return};
		if ( ( ( $target[0].id !== that._mainDivId &&
				$target.parents("#" + that._mainDivId).length === 0 &&
				!$target.hasClass(that.markerClassName) &&
				!$target.closest("." + that._triggerClass).length &&
				that._datepickerShowing && !(that._inDialog && $.blockUI) ) ) ||
			( $target.hasClass(that.markerClassName) && that._curInst !== opts ) ) {
				that.hide();
		}
	},
	//调整日期字段
	_adjustDate: function(id, offset, period) {
		var target = $(id),
			opts = this.options;

		if (this.isDisabled(target[0]) || this.isReadonly() || this.isIsLabel()) {
			return;
		}
		this._adjustInstDate( offset +
			(period === "M" ? opts.showCurrentAtPos : 0), 
			period);
		this.update();
	},

	//响应gotoToday
	_gotoToday: function(id) {
		var that = this,
			date,
			target = $(id),
			opts = this.options;
		var hasTime = _hasTime(opts.dateFormat);
		if (opts.gotoCurrent && opts.currentDay) {
			opts.selectedDay = opts.currentDay;
			opts.drawMonth = opts.selectedMonth = opts.currentMonth;
			opts.drawYear = opts.selectedYear = opts.currentYear;
		} else {
			date = new Date();
			if ( !hasTime ) {
				date.setHours(0, 0, 0, 0);
			}
			if(that._checkDateRange(date)===1){
				return;
			}else if(that._checkDateRange(date)===2){
				return;
			}
			opts.selectedDay = date.getDate();
			opts.drawMonth = opts.selectedMonth = date.getMonth();
			opts.drawYear = opts.selectedYear = date.getFullYear();
			opts.currentHur = date.getHours();
			opts.currentMiu = date.getMinutes();
			opts.currentSed = date.getSeconds();
			
		}
		this._notifyChange();
		//this._adjustDate(target);//点击今天，面板直接消失不需要update()了
		// 如果没有时间格式，点击“今天”按钮， 则默认选中今天的日期
		
		if (!hasTime) {
			var $targetToday = opts.dpDiv.children("table").find(".coral-datepicker-today");
			this._selectDay(id, +$targetToday.attr("data-month"), +$targetToday.attr("data-year"), $targetToday[0]);
		}else{
			this._selectDateTime();
		}
		this._updateDateTime();
	},

	//响应年月选择
	_selectMonthYear: function(id, select, period, change) {
		var target = $(id),
		    that = this,
			opts = this.options;
		var isYearMonth=this._isYearMonthMode(opts.dateFormat);
		var isYear = this._isYearMode(opts.dateFormat);
		//inst["selected" + (period === "M" ? "Month" : "Year")] =		
		if(isYearMonth===true){
			opts["draw" + (period === "M" ? "Month" : "Year")]=
			parseInt(period === "M" ? $(select).attr("data-month"): select.options[select.selectedIndex].value,10);
		}else if(isYear===true){
			opts["drawYear"]=
				parseInt(period === "Y" ? $(select).attr("data-year"): select.options[select.selectedIndex].value,10);
		}else{
			opts["draw" + (period === "M" ? "Month" : "Year")]=
			parseInt(select.options[select.selectedIndex].value,10);
		}
		opts["selected" + (period === "M" ? "Month" : "Year")]=
		opts["draw" + (period === "M" ? "Month" : "Year")];
			
		var oldValue = this._getHiddenInputValue();
		if(isYearMonth===true && period === "M"){
			this._setMonthYearValue(this);
		}
		if(isYear === true){
			this._setMonthYearValue(this);
			//change = false;
		}
		var value = this._getHiddenInputValue();
		this._notifyChange();
		if(change){
			that._setStartEnd( oldValue, value);
			that._change(oldValue, value, null);
		}
		this._adjustDate(target);
	},
	//针对年月模式时的值处理
	_setMonthYearValue : function($this){
		var opts = this.options,
		    dateFormat = opts.dateFormat;
		if($this._isYearMonthMode(dateFormat)){
			opts.currentYear=opts.selectedYear;
			opts.currentMonth=opts.selectedMonth;
			opts.currentDay=opts.selectedDay=1;
		}
		if($this._isYearMode(dateFormat)){
			opts.currentYear=opts.selectedYear;
			opts.currentMonth=opts.selectedMonth=1;
			opts.currentDay=opts.selectedDay=1;
		}
		var dateStr = $this._formatDate();
		if (opts.input) {
			opts.input.val(dateStr);
		}
		//设置隐藏字段值
		$this._setHiddenInputValue();
	},
	// 选择的天更新到输入域中
	_selectDay: function(id, month, year, td) {
		var opts = this.options,
		    minDate,maxDate,
			target = $(id);

		if ($(td).hasClass(this._unselectableClass) || this.isDisabled() || this.isReadonly() || this.isIsLabel()) {
			return;
		}
		opts.selectedDay = opts.currentDay = $("a", td).html();
		opts.selectedMonth = opts.currentMonth = month;
		opts.selectedYear = opts.currentYear = year;	
		var dateFormat = opts.dateFormat;
		var minDate = this._getMinMaxDate("min");
		var maxDate = this._getMinMaxDate("max");
		this.compMaxMin();
		//验证时间是否超范围
		this._autoFixInput(this);
		//加入时间字段
		var hur=opts.dpDiv.find("#dpTimeHour").val();
		var miu=opts.dpDiv.find("#dpTimeMinute").val();
		var sed=opts.dpDiv.find("#dpTimeSecond").val();
		this._selectDate(id, this._formatDate(
			opts.currentDay, opts.currentMonth, opts.currentYear));
		//日期选中时增加样式
		$(td).parent().parent().find("a").removeClass("coral-state-active");	
		$(td).children("a").addClass("coral-state-active");
		this.update();
		if(this.options.closeOnClick && opts.dateFormat.indexOf("H")==-1 ){
			this.hide();
		}
	},
	//清楚日期
	_clearDate: function() {
		this._setDate("");
	},
	clearError:function(){
		var target = this.element[0];
		$(".coral-validate-state-error").remove();
		$(".coral-errorIcon").remove();
		$(".coral-validate-error").removeClass("coral-validate-error");
		$(target).prop("isError", false);
	},
	// 选择的日期更新到输入域中
	_selectDate: function(id, dateStr) {
		var onSelect,
			target = $(id),
			opts = this.options;

		//取得日期时间格式，查看是否含有时间
		var dateFormat=opts.dateFormat;
		dateStr = (dateStr != null ? dateStr : this._formatDate());
		if (opts.input) {
			opts.input.val(dateStr);
		}
//			opts.value = dateStr;
		this._updateAlternate();
		//不触发修改时间
		/* else if (inst.input && !hasTime) {
			inst.input.trigger("change"); // fire the change event
		}*/
		if (opts.inline){
			this.update();
		} else {
			this._lastInput = opts.input[0];
			if (typeof(opts.input[0]) !== "object") {
				opts.input.focus(); // restore focus
			}
			this._lastInput = null;
			
			var oldValue = this._getHiddenInputValue();
			//设置隐藏字段值
			this._setHiddenInputValue();
			
			var datestr=this._getHiddenInputValue();
			if( datestr !== oldValue ) {
				this._setStartEnd(oldValue, datestr);
				this._change(oldValue, datestr, null);
			}
		}
		//触发日期选择时间
		this._trigger("onSelect", null, [ { "oldValue": oldValue, "newValue": datestr } ]);
	},
	
	/**********************************时间处理start*********************************/
	//增加时间按钮事件及输入框验证处理
	_attachTimeHandlers :function(){var that = this,datestr="",
	    opts = this.options;
		var oldValue = this._getHiddenInputValue();
			this._setHiddenInputValue();
		var	datestr = this._getHiddenInputValue();
		function slideToggleTrans (element, display) {
            var h = display ? (function() {
                var height = 0;
                element.children(":visible").each(function(i){
                	height += $(this).outerHeight(true);
                })
                return height;
            })() : 0;
            element.height(h);
		}
		// 对时间边栏的处理，点击确定按钮后触发时间选择
		opts.dpDiv.find("#timePanel").bind('mousedown',function(e){
			var datePanel = opts.dpDiv.find("#datepicker"),
				timePanel = opts.dpDiv.find("#timepicker");
			if (datePanel.hasClass("in")) {
				slideToggleTrans(datePanel,true);
				slideToggleTrans(datePanel,false);
				slideToggleTrans(timePanel,true);
				setTimeout(function(){
					timePanel.css("height", "auto")
				}, 350);
			} else {
				slideToggleTrans(timePanel,true);
				slideToggleTrans(datePanel,true);
				slideToggleTrans(timePanel,false);
				setTimeout(function(){
					datePanel.css("height", "auto")
				}, 350);
			}
			datePanel.toggleClass('in')
			e.preventDefault();
		});
		this._verifyInput(opts.dpDiv.find("#dpTimeHour"),"H");
		this._verifyInput(opts.dpDiv.find("#dpTimeMinute"),"m");
		this._verifyInput(opts.dpDiv.find("#dpTimeSecond"),"s");
	},
	//自动更正时间范围
	_autoFixInput : function (that){
		var min = 0,
		    opts = this.options;
		var minDate = that._getMinMaxDate("min");
		var maxDate = that._getMinMaxDate("max");
		var hur=opts.dpDiv.find("#dpTimeHour").val();
		var miu=opts.dpDiv.find("#dpTimeMinute").val();
		var sed=opts.dpDiv.find("#dpTimeSecond").val();
		//如果时间的输入框输入的不是数字，那么返回上一个日期
		hur = hur.replace(/[^0-9]/g,'');
		if(hur=='')  hur = opts.currentHur;
		miu = miu.replace(/[^0-9]/g,'');
		if(miu=='')  miu = opts.currentMiu;
		sed = sed.replace(/[^0-9]/g,'');
		if(sed=='')  sed = opts.currentSed;
		var date=new Date(opts.currentYear,opts.currentMonth,opts.currentDay,hur,miu,sed);
		var tmpDate=date;
		if(that._checkDateRange(date)===1){
			tmpDate=maxDate;
		}else if(that._checkDateRange(date)===2){
			tmpDate=minDate;
		}
		opts.dpDiv.find("#dpTimeHour").spinner("setValue",tmpDate.getHours()||"00");
		opts.dpDiv.find("#dpTimeMinute").spinner("setValue",tmpDate.getMinutes()||"00");
		opts.dpDiv.find("#dpTimeSecond").spinner("setValue",tmpDate.getSeconds()||"00");
//			opts.dpDiv.find("#dpTimeHour").val(tmpDate.getHours()||"00");
//			opts.dpDiv.find("#dpTimeMinute").val(tmpDate.getMinutes()||"00");
//			opts.dpDiv.find("#dpTimeSecond").val(tmpDate.getSeconds()||"00");
	},
	//增加输入框验证
	_verifyInput : function(input,type){
		var that=this,min=0,max=59;
		max=type=="H"?23:max;
		input.change(function(){   
                    that._autoFixInput(that); 
                }).bind("paste",function(){  //CTR+V事件处理    
                    //处理最大最小日期时间范围
                    that._autoFixInput(that); 
                });
	},
	_selectTime: function(hour,min,sed){
		var opts = this.options;
		var oldValue = this._getHiddenInputValue();
		var hur=hour || opts.dpDiv.find("#dpTimeHour").val();
		var miu=min || opts.dpDiv.find("#dpTimeMinute").val();
		var sed=sed || opts.dpDiv.find("#dpTimeSecond").val();
				
		opts.currentHur=hur;
		opts.currentMiu=miu;
		opts.currentSed=sed;
		opts.input.val( this._formatDate() );
		this._setHiddenInputValue();
		var datestr=this._getHiddenInputValue();
		this._change(oldValue, datestr, null);
		
	},
	//将选择的日期时间更新到输入框中
	_selectDateTime : function(){
		var oldValue = this._getHiddenInputValue(),
		    opts = this.options;
//		var hur=opts.dpDiv.find("#dpTimeHour").val();
//		var miu=opts.dpDiv.find("#dpTimeMinute").val();
//		var sed=opts.dpDiv.find("#dpTimeSecond").val();
//				
//		opts.currentHur=hur;
//		opts.currentMiu=miu;
//		opts.currentSed=sed;
			
		//取得日期时间格式，查看是否含有时间
		var minDate = this._getMinMaxDate("min"),
			maxDate = this._getMinMaxDate("max");	
		var date = new Date();
		if ( !opts.selectedYear ) {
			opts.currentDay = opts.selectedDay = date.getDate();
			opts.currentMonth = opts.selectedMonth = date.getMonth();
			opts.currentYear = opts.selectedYear = date.getFullYear();
			var tmpDate = new Date(opts.currentYear,opts.currentMonth,opts.currentDay,hur,miu,sed);
			if(!(minDate || maxDate)){
				opts.input.val(tmpDate);
			}else {
				if(this._checkDateRange(tmpDate)===1){
					 opts.selectedDay= maxDate.getDate();
					 opts.selectedMonth = maxDate.getMonth();
					 opts.selectedYear = maxDate.getFullYear();
				}else if(this._checkDateRange(tmpDate)===2){
					 opts.selectedDay= minDate.getDate();
					 opts.selectedMonth = minDate.getMonth();
					 opts.selectedYear = minDate.getFullYear();
				}
			}
		}
		opts.input.val( this._formatDate() );
		//设置隐藏字段值
		this._setHiddenInputValue();
		this._updateAlternate();
		
		var datestr=this._getHiddenInputValue();
		
		this._setStartEnd(oldValue, datestr);
		this._change(oldValue, datestr, null);
		var target = $(opts.input[0]);
		this.hide();
	},

	//检查日期格式中是否含有时间格式
	//返回 true or false
	_hasHur : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("H")!=-1 ){
			return true;
		}
		return false;
	},
	_hasMin : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("m")!=-1 ){
			return true;
		}
		return false;
	},
	_hasSec : function( dateFormat ){
		var format = ( dateFormat+"" );
		if( format.indexOf("s")!=-1 ){
			return true;
		}
		return false;
	},
	//是否为年月模式的
	_isYearMonthMode : function(dateFormat){
		if(!_hasTime(dateFormat)){
			return dateFormat.indexOf("M")!=-1 && dateFormat.indexOf("y")!=-1 &&dateFormat.indexOf("d")==-1;
		}
		return false;
	},
	//是否为只有年的模式
	_isYearMode : function(dateFormat){
		if(!_hasTime(dateFormat)){
			return dateFormat.indexOf("y")!=-1 && dateFormat.indexOf("M")==-1 && dateFormat.indexOf("d")==-1;
		}
		return false;
	},
	/**********************************时间处理end*********************************/

	//交替更新
	_updateAlternate: function() {
		var opts = this.options,
		    altFormat, date, dateStr,
			altField = opts.altField;

		if (altField) { // update alternate field too
			altFormat = opts.altFormat || opts.dateFormat;
			date = this._getDate();
			dateStr = $.coral.formatDate(altFormat, date, opts);
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ""];
	},
	/*// yyyy-MM-dd 
	// 11
	//查找format的分隔符在什么位置
	searchIndex : function(format){
		var i=0,j=0,temp = [];
		format = format.indexOf("/")>-1 ? format.replace( /\//g, "" ):format.replace( /-/g, "" );
		for( i = 0; i < format.length - 1; i++ ){
			if ( format[i] != format[i+1] ){//splice
				temp.push(j+1);
				j++;
			}
			j++;
		}
		return temp;
	},*/
	//解析指定格式的字符串为一个Date对象
	//指定格式为yyyy-MM 或 yyyy-MM-dd 或 yyyy-MM-dd HH:mm:ss

	
	ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
	COOKIE: "D, dd M yy",
	ISO_8601: "yy-mm-dd",
	RFC_822: "D, d M y",
	RFC_850: "DD, dd-M-y",
	RFC_1036: "D, d M y",
	RFC_1123: "D, d M yy",
	RFC_2822: "D, d M yy",
	RSS: "D, d M y", // RFC 822
	TICKS: "!",
	TIMESTAMP: "@",
	W3C: "yy-mm-dd", // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* 
	 * 将Date对象格式化为一个字符串
y	将年份表示为最多两位数字。如果年份多于两位数，则结果中仅显示两位低位数。
yy	同上，如果小于两位数，前面补零。
yyy	将年份表示为三位数字。如果少于三位数，前面补零。
yyyy	将年份表示为四位数字。如果少于四位数，前面补零。
M	将月份表示为从 1 至 12 的数字
M M	同上，如果小于两位数，前面补零。
M M M	返回月份的缩写 一月 至 十二月 (英文状态下 Jan to Dec) 。
M M M M	返回月份的全称 一月 至 十二月 (英文状态下 January to December) 。
d	将月中日期表示为从 1 至 31 的数字。
d d	同上，如果小于两位数，前面补零。
H	将小时表示为从 0 至 23 的数字。
H H	同上，如果小于两位数，前面补零。
m	将分钟表示为从 0 至 59 的数字。
m m	同上，如果小于两位数，前面补零。
s	将秒表示为从 0 至 59 的数字。
s s	同上，如果小于两位数，前面补零。
w	返回星期对应的数字 0 (星期天) - 6 (星期六) 。
D	返回星期的缩写 一 至 六 (英文状态下 Sun to Sat) 。
D D	返回星期的全称 星期一 至 星期六 (英文状态下 Sunday to Saturday) 。
W	返回周对应的数字 (1 - 53) 。
W W	同上，如果小于两位数，前面补零 (01 - 53) 。
	 */
	
	
	_possibleChars: function (format) {
		var iFormat,
			chars = "",
			literal = false,

			lookAhead = function(match) {
				var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
				if (matches) {
					iFormat++;
				}
				return matches;
			};

		for (iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					chars += format.charAt(iFormat);
				}
			} else {
				switch (format.charAt(iFormat)) {
					//case "d": case "m": case "y": case "@":
					case "d": case "m": case "y": case "@": case "H": case "M": case "s":
						chars += "0123456789";
						break;
					//case "D": case "M":
					case "D": case "W":
						return null; // Accept anything
					case "'":
						if (lookAhead("'")) {
							chars += "'";
						} else {
							literal = true;
						}
						break;
					default:
						chars += format.charAt(iFormat);
				}
			}
		}
		return chars;
	},
	//解析可执行的Date对象初始化日历组件
	_setDateFromField: function( noDefault) {
		var opts = this.options;
		var dateFormat = opts.dateFormat,
			dates = opts.lastVal = opts.input ? opts.input.val() : null,
			defaultDate = this._getDefaultDate(),
			date = defaultDate,
			dateValue = opts.input.val(),
			options = _getFormatConfig(opts);
		
		try {
			date = $.coral.parseDate(dateFormat, dateValue, opts) || defaultDate;
		} catch (event) {
			//dateValue = (noDefault ? "" : dateValue);
			date = defaultDate;
		}
		opts.selectedDay = date.getDate();
		opts.drawMonth = opts.selectedMonth = date.getMonth();
		opts.drawYear = opts.selectedYear = date.getFullYear();
		opts.currentDay = date.getDate();
		opts.currentMonth = date.getMonth();
		opts.currentYear = date.getFullYear();
		
		opts.currentHur = date.getHours();
		opts.currentMiu = date.getMinutes();
		opts.currentSed = date.getSeconds();
		this._adjustInstDate();
	},

	//取得默认的date在显示时
	_getDefaultDate: function() {
		var opts = this.options;
		return this._restrictMinMax(
			this._determineDate(opts.defaultDate, new Date()));
	},
	/* A date may be specified as an exact value or a relative one. */
	//按照指定格式来判定时间范围
	//指定格式 为 yyyy-MM-dd HH:mm:ss 或者 yyyy-MM-dd
	_determineDate: function( date, defaultDate) {
		var that = this,timeDate=[],
		    opts = this.options;
		var offsetNumeric = function(offset) {
				var date = new Date();
				date.setDate(date.getDate() + offset);
				return date;
			},
			offsetString = function(offset) {
				try {
					var tmpFormat="yyyy-MM-dd";
					var srcDateFormat=opts.srcDateFormat;
					if(that._isYearMonthMode(srcDateFormat)){
						tmpFormat="yyyy-MM";
					}
					if(that._isYearMode(srcDateFormat)){
						tmpFormat="yyyy";
					}
					if((offset+"").length>10 && _hasTime(srcDateFormat)){
						tmpFormat+=" HH:mm:ss";
					}
					tmpFormat = opts.dateFormat;
					//return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
					return $.coral.parseDate(tmpFormat,
						offset, opts);
				}catch (e) {
					// Ignore
					//return "Invalid Date";
					//触发格式化错误事件
/*						that._apply(inst,"onFormatError",[date,inst]);TODO: 涉及_apply的以后要重写
						that._apply(inst,"onFormatWarn",[date,inst]);*/
				}

				var date = (offset.toLowerCase().match(/^c/) ?
					that._getDate() : null) || new Date(),
					year = date.getFullYear(),
					month = date.getMonth(),
					day = date.getDate(),
					pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
					matches = pattern.exec(offset);

				while (matches) {
					switch (matches[2] || "d") {
						case "d" : case "D" :
							day += parseInt(matches[1],10); break;
						case "w" : case "W" :
							day += parseInt(matches[1],10) * 7; break;
						case "m" : case "M" :
							month += parseInt(matches[1],10);
							day = Math.min(day, that._getDaysInMonth(year, month,opts));
							break;
						case "y": case "Y" :
							year += parseInt(matches[1],10);
							day = Math.min(day, that._getDaysInMonth(year, month,opts));
							break;
					}
					matches = pattern.exec(offset);
				}
				return new Date(year, month, day);
			},
			newDate = (date == null || date === "" ? 
					defaultDate : 
					(typeof date === "string" ? 
						offsetString(date) : 
						(typeof date === "number" ? 
							(isNaN(date) ? 
								defaultDate : 
								offsetNumeric(date)
							) : 
							new Date(date.getTime())
						)
					)
				);

		newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
		var hur = 0, miu = 0, sed = 0, msed = 0;
		if (newDate) {
			hur = newDate.getHours(),
			miu = newDate.getMinutes(),
			sed = newDate.getSeconds(),
			msed = newDate.getMilliseconds();
			
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return _daylightSavingAdjustWidthTime(newDate,[hur,miu,sed]);
	},

	//直接设置日期
	_setDate: function(date, noChange) {
		var clear = !date,
		    opts = this.options,
			origMonth = opts.selectedMonth,
			origYear = opts.selectedYear,
			newDate = this._restrictMinMax(this._determineDate(date, new Date()));
		var dateFormat=opts.dateFormat,
		    oldValue = this._getHiddenInputValue();
		opts.selectedDay = opts.currentDay = newDate.getDate();
		opts.drawMonth = opts.selectedMonth = opts.currentMonth = newDate.getMonth();
		opts.drawYear = opts.selectedYear = opts.currentYear = newDate.getFullYear();
		
		opts.currentHur=newDate.getHours();
		opts.currentMiu=newDate.getMinutes();
		opts.currentSed=newDate.getSeconds();
		
		if ((origMonth !== opts.selectedMonth || origYear !== opts.selectedYear) && !noChange) {
			this._notifyChange();
		}
		this._adjustInstDate();
		if (opts.input) {
			if ( clear ) {
				this._processDefaultDate(this,"");
				this._setHiddenInputValue();//设置隐藏字段值
			} else {
				if(opts.complete){
//					opts.input.val(this._formatDate());
					var currentValue = this._formatDate();
					opts.input.val(currentValue);
					this._setStartEnd(oldValue,currentValue);
				}else{
					var format = getFormatter(opts.value,opts.dateFormat, opts);
					var datestr = this.completeFormate(format,dateFormat);
					datestr = $.coral.formatDate(datestr, date, opts);
					/*var format = this.getFormatter(inst.input.val(),this._get(inst,"srcDateFormat"), this._getFormatConfig(inst));
				var datestr = this.completeFormate(format,this._get(inst,"srcDateFormat"),inst);*/
					opts.input.val(datestr);
				}
			}
		}
	},

	//取回日期对象
	_getDate: function() {
		var opts = this.options,
		    startDate = (!opts.currentYear || (opts.input && opts.input.val() === "") ? null :
			_daylightSavingAdjustWidthTime( new Date( opts.currentYear, opts.currentMonth, opts.currentDay ), [opts.currentHur,opts.currentMiu,opts.currentSed] ) );
		return startDate;
	},
	
	//响应日历组件上的各种动作事件 
	_attachHandlers: function() {
		var $this=this,
		    opts = this.options;
		var stepMonths = opts.stepMonths,
			id = "#" + opts.id.replace( /\\\\/g, "\\" );
		var isYearMonth=this._isYearMonthMode(opts.dateFormat);
		var isYear = this._isYearMode(opts.dateFormat);
		opts.dpDiv.find("[data-handler]").map(function () {
			var handler = {
				prev: function () {
					if(isYearMonth===true){
						$this._adjustDate(id, -1, "Y");
					}else if(isYear===true){
						$this._adjustDate(id, -12, "Y");
					}else{
						$this._adjustDate(id, -stepMonths, "M");
					}
					//$this._setMonthYearValue($this,inst);
					return false;
				},
				next: function () {
					if(isYearMonth===true){
						$this._adjustDate(id, +1, "Y");
					}else if(isYear===true){
						$this._adjustDate(id, +12, "Y");
					}else{
						$this._adjustDate(id, +stepMonths, "M");
					}
					//$this._setMonthYearValue($this,inst);
					return false;
				},
				hide: function () {
					$this.hide();
				},
				today: function () {
					$this._gotoToday(id);					
					return false;
				},
				selectDay: function () {
					$this._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
					return false;
				},
				selectMonthAndHide: function(){
					$this._selectMonthYear(id, this, "M", true);
					$this.hide();
					return false;
				},
				selectYearAndHide: function(){
					$this._selectMonthYear(id, this, "Y", true);
					$this.hide();
					return false;
				},
				selectMonth: function () {
					$this._selectMonthYear(id, this, "M");
					return false;
				},
				selectYear: function () {
					$this._selectMonthYear(id, this, "Y");
					return false;
				},
				focusTime: function () {
//					var opts = this.options;
					if ( $(this).prop("readonly") ) return false;
					$this.focusInput = this.id;
					if ( this.id == "dpTimeHour" ){
						opts.dpDiv.find(".coral-datepicer-timePanel").hide();
						opts.dpDiv.find(".hourMenu").show();
					}
					if ( this.id == "dpTimeMinute" ){
						//获得时间的值，然后判断如果大于最小日期的时间，例如最小日期的时间为09:20:45，那么可以获得时间的值为09，那么选择大于9点的时候，分钟和秒
						//都是可以选择的，用新生成的面板来取代原来的面板。
						var value = $("#dpTimeHour").val();
						opts.dpDiv.find(".coral-datepicer-timePanel").hide();
						opts.dpDiv.find(".minuteMenu").replaceWith($this._modifiedMin(value));
						opts.dpDiv.find(".minuteMenu").show();
					}
					if ( this.id == "dpTimeSecond" ){
						var value = $("#dpTimeHour").val();
						var value1 = $("#dpTimeMinute").val();
						opts.dpDiv.find(".secondMenu").replaceWith($this._modifiedSed(value,value1));
						opts.dpDiv.find(".coral-datepicer-timePanel").hide();
						opts.dpDiv.find(".secondMenu").show();
					}
					return false;
				}
			};
			$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			//重新生成的时间面板绑定"mousedown"事件，点击事件面板选中时间
			$(opts.dpDiv).off(".hourMenu").on("mousedown.hourMenu", ".hourMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				opts.dpDiv.find("#dpTimeHour").spinner("setValue",$(e.target).html());
				opts.dpDiv.find(".menuSel").hide();
				$this._autoFixInput($this);
				$this._selectTime();
				opts.dpDiv.find("#coral-timePanel").show();
				return false;
			});
			$(opts.dpDiv).off(".minuteMenu").on("mousedown.minuteMenu", ".minuteMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				opts.dpDiv.find("#dpTimeMinute").spinner("setValue",$(e.target).html());
				opts.dpDiv.find(".menuSel").hide();
				$this._autoFixInput($this);
				$this._selectTime();
				opts.dpDiv.find("#coral-timePanel").show();
				return false;
			});
			$(opts.dpDiv).off(".secondMenu").on("mousedown.secondMenu", ".secondMenu", function(e){
				if ( !$(e.target).hasClass("menuTimeSel") ) return false;;
				opts.dpDiv.find("#dpTimeSecond").spinner("setValue",$(e.target).html());
				opts.dpDiv.find(".menuSel").hide();
				$this._autoFixInput($this);
				$this._selectTime();
				opts.dpDiv.find("#coral-timePanel").show();
				return false;
			});
		});
	},
	// 生成 当前状态日历组件的html代码
	_generateHTML: function() {
		var opts = this.options,
		    maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
			controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
			monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
			selectOtherMonths, defaultDate,defaultDateTime, html, dow, row, group, col, selectedDate,
			cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
			printDate, dRow, tbody, dayoptions, otherMonth, unselectable,
			tempDate = new Date(),
			today = _daylightSavingAdjustWidthTime(
				new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate()),[0,0,0]), // clear time
			isRTL = opts.isRTL,
			isYearMonth=this._isYearMonthMode(opts.dateFormat),
			isYear=this._isYearMode(opts.dateFormat),
			showButtonPanel = isYearMonth==true || isYear==true?false:opts.showButtonPanel,
			hideIfNoPrevNext = opts.hideIfNoPrevNext,
			navigationAsDateFormat = opts.navigationAsDateFormat,
			numMonths = this._getNumberOfMonths(),
			showCurrentAtPos = opts.showCurrentAtPos,
			stepMonths = opts.stepMonths,
			isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
			currentDate = _daylightSavingAdjustWidthTime((!opts.currentDay ? new Date(9999,9,9) :
				new Date(opts.currentYear, opts.currentMonth, opts.currentDay)),[0,0,0]),
			minDate = this._getMinMaxDate("min"),
			maxDate = this._getMinMaxDate("max"),		
			drawMonth = opts.drawMonth - showCurrentAtPos,
			drawYear = opts.drawYear,
			//日期时间格式
			dateFormat = opts.dateFormat,
			panelCls = "";
			//根据日期时间格式调整最大最小值，在日历绘制时
			var hasTime = _hasTime(opts.dateFormat);
			//有time情况，最小日期要-1
			/*if(minDate!=null && hasTime){
				minDate.setDate(minDate.getDate());
			}*/
			//无time情况，最大日期要+1(作废)
			/*if(maxDate!=null && !hasTime){
				maxDate.setDate(maxDate.getDate());
			}*/

		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			maxDraw = _daylightSavingAdjustWidthTime(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()),[opts.currentHur,opts.currentMiu,opts.currentSed]);
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (_daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, 1),[opts.currentHur,opts.currentMiu,opts.currentSed]) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		opts.drawMonth = drawMonth;
		opts.drawYear = drawYear;

		prevText = opts.prevText;
		prevText = (!navigationAsDateFormat ? prevText : $.coral.formatDate(prevText,
			_daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth - stepMonths, 1),[opts.currentHur,opts.currentMiu,opts.currentSed]),
			opts));

		prev = (this._canAdjustMonth(-1, drawYear, drawMonth) ?
			"<a class='coral-datepicker-prev coral-state-default coral-corner-all' data-handler='prev' data-event='mousedown'" +
			" title='" + prevText + "'><span class='icon  cui-icon-arrow-" + ( isRTL ? "right3" : "left3") + "'></span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='coral-datepicker-prev coral-state-default coral-corner-all coral-state-disabled' title='"+ prevText +"'><span class='coral-icon coral-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

		nextText = opts.nextText;
		nextText = (!navigationAsDateFormat ? nextText : $.coral.formatDate(nextText,
			_daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth + stepMonths, 1),[opts.currentHur,opts.currentMiu,opts.currentSed]),
			opts));

		next = (this._canAdjustMonth( +1, drawYear, drawMonth) ?
			"<a class='coral-datepicker-next coral-state-default coral-corner-all' data-handler='next' data-event='mousedown'" +
			" title='" + nextText + "'><span class='cui-icon-arrow-" + ( isRTL ? "left3" : "right3") + "'></span></a>" :
			(hideIfNoPrevNext ? "" : "<a class='coral-datepicker-next coral-state-default coral-corner-all coral-state-disabled' title='"+ nextText + "'><span class='coral-icon coral-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

		currentText = opts.currentText;
		gotoDate = (opts.gotoCurrent && opts.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			$.coral.formatDate(currentText, gotoDate, opts));

		controls = "";//(!inst.inline ? "<button type='button' class='coral-datepicker-close coral-state-default coral-priority-primary coral-corner-all' data-handler='hide' data-event='click'>" +
			//this._get(inst, "closeText") + "</button>" : "");

		buttonPanel = (showButtonPanel) ? "<div class='coral-datepicker-buttonpane coral-component-content' "+(isYearMonth || isYear?"style='display:none'":"")+">" + (isRTL ? controls : "") +
			(this._isInRange( gotoDate) ? "<button type='button' class='coral-datepicker-current coral-state-default coral-priority-primary coral-corner-all' data-handler='today' data-event='mousedown'" +
			">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
		var buttonPanelstr = "";
		!hasTime||(buttonPanelstr += '<button class="coral-datepicker-close coral-state-default coral-priority-secondary coral-corner-all" id="dpTimeEnsure">确定</button>');	
		buttonPanelstr += (showButtonPanel)? "<button type='button' class='coral-datepicker-current coral-state-default coral-priority-primary coral-corner-all' data-handler='today' data-event='mousedown'" +
			">" + currentText + "</button>":"";

		firstDay = parseInt(opts.firstDay,10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);

		showWeek = opts.showWeek;
		dayNames = opts.dayNames;
		dayNamesMin = opts.dayNamesMin;
		monthNames = opts.monthNames;
		monthNamesShort = opts.monthNamesShort;
		beforeShowDay = opts.beforeShowDay;
		showOtherMonths = opts.showOtherMonths;
		selectOtherMonths = opts.selectOtherMonths;
		defaultDateTime = this._getDefaultDate();//原始defaultDate，会含有时间格式
		//只含年月日
		defaultDate=new Date(defaultDateTime.getFullYear(),defaultDateTime.getMonth(),defaultDateTime.getDate());
		html = "";
		dow;
		if(opts.model == "datepicker"){
			panelCls = "collapse in"
		}
		for (row = 0; row < numMonths[0]; row++) {
			group = "";
			this.maxRows = 4;
			for (col = 0; col < numMonths[1]; col++) {
				selectedDate = _daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, opts.selectedDay),[opts.currentHur,opts.currentMiu,opts.currentSed]);
				cornerClass = " coral-corner-all";
				calender = "";
				if (isMultiMonth) {
					calender += "<div class='coral-datepicker-group";
					if (numMonths[1] > 1) {
						switch (col) {
							case 0: calender += " coral-datepicker-group-first";
								cornerClass = " coral-corner-" + (isRTL ? "right" : "left"); break;
							case numMonths[1]-1: calender += " coral-datepicker-group-last";
								cornerClass = " coral-corner-" + (isRTL ? "left" : "right"); break;
							default: calender += " coral-datepicker-group-middle"; cornerClass = ""; break;
						}
					}
					calender += "'>";
				}
				calender += "<div id='datepicker' class='coral-datepickerPanel "+ panelCls +"'><div class='coral-datepicker-header coral-helper-clearfix" + cornerClass + "'>" +
					(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
					(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
					this._generateMonthYearHeader(drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort,isYearMonth) + // draw month headers
					"</div>" ;
				if(isYearMonth===true){
					//生成月份
					calender += this._generateMonthHTML(drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort,currentDate,today);
				}
				//生成年份
				if(isYear == true){
					calender += this._generateYearHTML(drawYear, minDate, maxDate,
							row > 0 || col > 0,currentDate,today);
				}
				calender += "<table class='coral-datepicker-calendar' "+(isYearMonth || isYear ? "style='display:none'":"")+"><thead>" +
					"<tr>";
				thead = (showWeek ? "<th class='coral-datepicker-week-col'>" + opts.weekHeader + "</th>" : "");
				for (dow = 0; dow < 7; dow++) { // days of the week
					day = (dow + firstDay) % 7;
					thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='coral-datepicker-week-end'" : "") + ">" +
						"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
				}
				calender += thead + "</tr></thead><tbody>";
				daysInMonth = this._getDaysInMonth(drawYear, drawMonth,opts);
				if (drawYear === opts.selectedYear && drawMonth === opts.selectedMonth) {
					opts.selectedDay = Math.min(opts.selectedDay, daysInMonth);
				}
				leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				printDate = _daylightSavingAdjustWidthTime(new Date(drawYear, drawMonth, 1 - leadDays),[0,0,0]);
				for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += "<tr>";
					tbody = (!showWeek ? "" : "<td class='coral-datepicker-week-col'>" +
						opts.calculateWeek(printDate) + "</td>");
					for (dow = 0; dow < 7; dow++) { // create date picker days
						dayoptions = (beforeShowDay ?
							beforeShowDay.apply((opts.input ? opts.input[0] : null), [printDate]) : [true, ""]);
						otherMonth = (printDate.getMonth() !== drawMonth);
						unselectable = (otherMonth && !selectOtherMonths) || !dayoptions[0] ||
							(minDate && printDate<= new Date(minDate.getFullYear(),minDate.getMonth(),minDate.getDate()-1)) || (maxDate && printDate > maxDate);
						tbody += "<td class='" +
							((dow + firstDay + 6) % 7 >= 5 ? " coral-datepicker-week-end" : "") + // highlight weekends
							(otherMonth ? " coral-datepicker-other-month" : "") + // highlight days from other months
							((printDate.getTime() === selectedDate.getTime() && drawMonth === opts.selectedMonth && opts._keyEvent) || // user pressed key
							(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							" " + this._dayOverClass : "") + // highlight selected day
							(unselectable ? " " + this._unselectableClass + " coral-state-disabled": "") +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? "" : " " + dayoptions[1] + // highlight custom dates
							(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
							(printDate.getTime() === today.getTime() ? " coral-datepicker-today" : "")) + "'" + // highlight today (if different)
							((!otherMonth || showOtherMonths) && dayoptions[2] ? " title='" + dayoptions[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
							(unselectable ? "" : " data-handler='selectDay' data-event='mousedown' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
							(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
							(unselectable ? "<span class='coral-state-default'>" + printDate.getDate() + "</span>" : "<a class='coral-state-default" +
							(printDate.getTime() === today.getTime() ? " coral-state-highlight" : "") +
							(printDate.getTime() === currentDate.getTime() ? " coral-state-active" : "") + // highlight selected day
							(otherMonth ? " coral-priority-secondary" : "") + // distinguish dates from other months
							"' href='javascript:void(0);'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = _daylightSavingAdjustWidthTime(printDate,[0,0,0]);
					}
					calender += tbody + "</tr>";
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				if (hasTime) {
					 calender += "</tbody></table></div><div class='picker-switch accordion-toggle'>" +
					 	"<a class='coral-datepicker-today time-btn' data-handler='today' data-event='mousedown'>今天</a>";
					 calender +="<a id='timePanel' class='date-time-icon time-btn'><span class='cui-icon-clock'/></a>" +
					 	"<a class='datepicker-close time-btn' data-handler='hide' data-event='click'>关闭</a></div>";
				 }

				group += calender;
			}
			html += group;
		}
		//html += buttonPanel;
		opts._keyEvent = false;
		return html;
	},
	
	//生成 仿win8 风格 月份
	_generateMonthHTML : function(drawMonth,drawYear,minDate, maxDate,
			secondary, monthNames, monthNamesShort,currentDate,today){
		var html="<table class='coral-datepicker-calendar' ><tbody>";
		var opts = this.options;
		var month=0;var highlightcss="";var activecss="";
		var inMinYear = (minDate && minDate.getFullYear() === drawYear);
		var inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
		for(var i=0;i<3;i++){
			html+="<tr>"
			for(var j=0;j<4;j++){
				if(month === today.getMonth() && drawYear === today.getFullYear()){
					highlightcss="coral-state-highlight";
				}else{
					highlightcss="";
				}
				if(month === drawMonth){
					activecss="coral-state-active";
				}else{
					activecss="";
				}
				if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())){
					html+="<td data-handler='selectMonthAndHide' data-event='mousedown' data-month='"+ month +"'>" +
						"<a class='coral-state-default date-month "+ highlightcss + " "+activecss+"' href='javascript:void(0);'" +
						">"+ monthNames[month++] +"</a></td>";
				}else{
					html+="<td class='"+ this._unselectableClass + " coral-state-disabled'>" +
						"<span class='date-month' >"+ monthNames[month++] + "</span></td>";
				}
			}
			html+="</tr>";
		}
		return html+"</tbody></table>";
	},
	isExist: function(datestr) {
		if (typeof datestr != "undefined"){
			return  true;
		} else {
			return false;
		}
	},
	_timeDateInitValue: function(){
		var opts = this.options,hur,min,sed,tmpDate,
			timeDate = [],minDay,maxDay,compMin,compMax,compDate,
			date=new Date();
		if(opts.model == "timepicker"){
			hur = opts.currentHur ? opts.currentHur: date.getHours() ,
			min = opts.currentMiu ? opts.currentMiu: date.getMinutes(),
			sed = opts.currentSed ? opts.currentSed: date.getSeconds();
			timeDate.push(date.getFullYear(),date.getMonth(),date.getDate());
			var minDate = opts.minTime ?  timeDate.join("-") + " " + opts.minTime: null,
				maxDate = opts.maxTime ? timeDate.join("-") + " " + opts.maxTime: null;
			tmpDate=new Date(date.getFullYear(),date.getMonth(),date.getDate(), hur, min, sed);
			compDate = new Date(date.getFullYear(),date.getMonth(),date.getDate());
			compMin = compMax = compDate;
		} else {
			var hasTime=_hasTime(opts.dateFormat),
				hasHur=this._hasHur(opts.dateFormat),
				hasMin=this._hasMin(opts.dateFormat),
				hasSec=this._hasSec(opts.dateFormat);
			var minDate = opts.minDate;
				maxDate = opts.maxDate;
			hur = hasHur?( this.isExist(opts.currentHur) ? opts.currentHur : date.getHours() ):"00";
			min = hasMin?( this.isExist(opts.currentMiu) ? opts.currentMiu : date.getMinutes() ):"00";
			sed = hasSec?( this.isExist(opts.currentSed) ? opts.currentSed : date.getSeconds() ):"00";
			tmpDate=new Date(opts.selectedYear,opts.selectedMonth,opts.selectedDay, hur, min, sed);
			compDate = new Date(opts.selectedYear,opts.selectedMonth,opts.selectedDay);
			if (minDate && minDate != ""){
				minDay = new Date(minDate.replace(/-/g, "/"));
				compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate());
			}
			if (maxDate && maxDate != ""){
				maxDay = new Date(maxDate.replace(/-/g, "/"));
				compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
			}
		}
		//验证时间是否超范围
		if(this._checkDateRange(tmpDate)===1){
			tmpDate=new Date(maxDate.replace(/-/g, "/"));
			hur=tmpDate.getHours();
			min=tmpDate.getMinutes();
			sed=tmpDate.getSeconds();
		}else if(this._checkDateRange(tmpDate)===2){
			tmpDate=new Date(minDate.replace(/-/g, "/"));
			hur=tmpDate.getHours();
			min=tmpDate.getMinutes();
			sed=tmpDate.getSeconds();
		}
		return {
			hur:hur,min:min,sed:sed,
			minDate:minDate,maxDate:maxDate,
			minDay:minDay,maxDay:maxDay,
			compMin:compMin,compMax:compMax,compDate:compDate
		}
	},
	_generateTimePanel: function(){
		var opts = this.options,divStyle,
			dateFormat = opts.dateFormat;
		var calender = [],panelCls = "",timeValue,minDay,compMin,compMax,maxDay;
		if(this.options.model == "datepicker"){
			panelCls = "collapse";
		}
		timeValue = this._timeDateInitValue();
		var minDate = timeValue.minDate,
			maxDate = timeValue.maxDate,
			compDate = timeValue.compDate,
			compMin = timeValue.compMin,
			compMax = timeValue.compMax;
		calender.push( "<div id='timepicker' class='coral-timepickerPanel "+ panelCls +"'>");
		calender.push("<table id='coral-timePanel' class='coral-datepicer-timePanel'><tr><td><input data-handler='focusTime' data-event='click' id='dpTimeHour' name='timeHourVal' value='"+ timeValue.hur +"' maxlength='2'/></td>")
		calender.push("<td class='separator'>:</td><td><input id='dpTimeMinute' name='timeMinVal' data-handler='focusTime' data-event='click' value='"+ timeValue.min +"' maxlength='2'/></td>");
		if (opts.model=="datepicker" && opts.dateFormat.indexOf("s") > -1 ||
				opts.model=="timepicker" && opts.timeFormat.indexOf("s") > -1){
			divStyle = "";
		} else {
			divStyle = "display:none";
		}
		calender.push("<td class='separator' style="+ divStyle +">:</td><td id='secondTd' style="+ divStyle +"><input id='dpTimeSecond' name='timeSecVal' data-handler='focusTime' data-event='click' value='"+ timeValue.sed +"' maxlength='2'/></td>"); 
		calender.push("</tr></table>");
		calender.push(this._timeHourPanel(minDate,maxDate,compDate,compMin,compMax,false));
		// init minute
		calender.push(this._timeMinPanel(minDate,maxDate,compDate,compMin,compMax,false));
		// init second
		calender.push(this._timeSedPanel(minDate,maxDate,compDate,compMin,compMax,false));
		calender.push("</div>");
		return calender.join("");
	},
	//只生成年份
	_generateYearHTML : function(drawYear,minDate, maxDate,
			secondary, currentDate,today){
		var opts = this.options;
		var html="<table class='coral-datepicker-calendar' ><tbody>";
		var highlightcss="";var activecss="";
		var year = drawYear-(drawYear%12);
		var inMinYear = (minDate && minDate.getFullYear() === drawYear);
		var inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
		
		for(var i=0;i<3;i++){
			html+="<tr>"
			for(var j=0;j<4;j++){
				/*if(drawYear === today.getFullYear()){
					highlightcss="coral-state-highlight";
				}else{*/
					highlightcss="";
				//}
				if(year == opts.currentYear){
					activecss="coral-state-active";
				}else{
					activecss="";
				}
				if ((!inMinYear || year >= minDate.getFullYear()) && (!inMaxYear || year <= maxDate.getFullYear())){
					html+="<td data-handler='selectYearAndHide' data-event='mousedown' data-year='"+ year +"'>" +
						"<a class='coral-state-default date-year "+ " "+activecss+"' href='javascript:void(0);'" +
						">"+ year++ +"</a></td>";
				}else{
					html+="<td class='"+ this._unselectableClass + " coral-state-disabled'>" +
						"<span class='date-year' >"+ year++ + "</span></td>";
				}
			}
			html+="</tr>";
		}
		return html+"</tbody></table>";
	},
	_timeHourPanel: function(minDate,maxDate,compDate,compMin,compMax,isTimePanel){
		var dateTimeHTML = [],hourCls = "";
		if(isTimePanel){
			hourCls = "hourPanel";
		}
		dateTimeHTML.push( "<div class='menuSel hourMenu '"+ hourCls +" style='display: none;'>");
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0' nowrap='nowrap'><tbody>" );
		var k= 0;
		for ( var i = 0; i < 6; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 4; j++ ) {
					if((minDate && k < new Date(minDate).getHours() && new Date(compDate).getTime() == new Date(compMin).getTime())
							||(maxDate && k > new Date(maxDate).getHours() && new Date(compDate).getTime() == new Date(compMax).getTime())){
						dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickHour' data-event='click' >" +
								((k++)/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
					}else{
						dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickHour' data-event='click' >"+ ((k++)/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	_timeMinPanel: function(minDate,maxDate,compDate,compMin,compMax,isTimePanel){
		var dateTimeHTML = [],minCls = "";
		if(isTimePanel){
			minCls = "minPanel";
		}
		dateTimeHTML.push( "<div class='menuSel minuteMenu '"+ minCls +" style='display: none;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0' nowrap='nowrap'><tbody>" );
		var k= 0;
		for ( var i = 0; i < 3; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 4; j++ ) {
				if((minDate && k < new Date(minDate).getMinutes() && new Date(compDate).getTime() == new Date(compMin).getTime() )
						||(maxDate && k > new Date(maxDate).getMinutes() && new Date(compDate).getTime() == new Date(compMax).getTime())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickMinute' data-event='click'>" +
							k +"</td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickMinute' data-event='click' >"+ k +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	_timeSedPanel: function(minDate,maxDate,compDate,compMin,compMax,isTimePanel) {
		var dateTimeHTML = [],k,sedCls = "";
		if(isTimePanel){
			sedCls = "sedPanel";
		}
		dateTimeHTML.push( "<div class='menuSel secondMenu '"+ sedCls +" style='display: none;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0' nowrap='nowrap'><tbody>" );
		k= 0;
		for ( var i = 0; i <4; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 3; j++ ) {
				if((minDate && k < new Date(minDate).getSeconds() && new Date(compDate).getTime() == new Date(compMin).getTime() )
						||(maxDate && k > new Date(maxDate).getSeconds() && new Date(compDate).getTime() == new Date(compMax).getTime())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickSecond' data-event='click'>" +
							(k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickSecond' data-event='click' >"+ (k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	//有最小值和最大值的时候，例如最小日期为2015-08-12 09:45:10 ，当选择2015-08-12，时间大于9点的时候，分钟和秒的面板上的所有值都可以点击，因此重新生成面板
	_modifiedMin: function(value){
		var opts = this.options,timeDate=[],
			minDay,maxDay,compDate,
			minDate = opts.minDate,
			maxDate = opts.maxDate,
			compMin,compMax;
		if(opts.model == "timepicker"){
			var date = new Date();
			timeDate.push(date.getFullYear(),date.getMonth(),date.getDate());
			minDate = opts.minTime ?  timeDate.join("-") + " " + opts.minTime: null,
			maxDate = opts.maxTime ? timeDate.join("-") + " " + opts.maxTime: null;
			compDate = new Date(date.getFullYear(),date.getMonth(),date.getDate());
			compMin = compMax = compDate;
		} else {
			compDate = new Date(opts.selectedYear,opts.selectedMonth,opts.selectedDay),
			minDay = new Date(minDate),
			maxDay = new Date(maxDate);
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		}
		var dateTimeHTML= [];
		dateTimeHTML.push( "<div class='menuSel minuteMenu' style='display: none;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		var k= 0;
		for ( var i = 0; i < 3; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 4; j++ ) {
				if((minDate && k < new Date(minDate).getMinutes() && new Date(compDate).getTime() == new Date(compMin).getTime() && value == new Date(minDate).getHours())
						||(maxDate && k > new Date(maxDate).getMinutes() && new Date(compDate).getTime() == new Date(compMax).getTime() && value == new Date(maxDate).getHours())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickMinute' data-event='click'>" +
							(k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickMinute' data-event='click' >"+ (k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	_modifiedSed: function(value,value1){
		var opts = this.options;
		var minDate = opts.minDate;
		var maxDate = opts.maxDate;
		var compDate = new Date(opts.selectedYear,opts.selectedMonth,opts.selectedDay),
			minDay = new Date(minDate),
			maxDay = new Date(maxDate),
			compMin= new Date(minDay.getFullYear(),minDay.getMonth(),minDay.getDate()),
			compMax= new Date(maxDay.getFullYear(),maxDay.getMonth(),maxDay.getDate());
		var dateTimeHTML= [];
		dateTimeHTML.push( "<div class='menuSel secondMenu' style='display: none;'>" );
		dateTimeHTML.push( "<table cellspacing='0' cellpadding='3' border='0<tr' nowrap='nowrap'><tbody>" );
		var k= 0;
		for ( var i = 0; i < 3; i++ ) {
			dateTimeHTML.push( "<tr nowrap='nowrap'></tr>" );
			for ( var j = 0; j < 4; j++ ) {
				if((minDate && k < new Date(minDate).getSeconds() && new Date(compDate).getTime() == new Date(compMin).getTime() && value == new Date(minDate).getHours() && value1 == new Date(minDate).getMinutes())
						||(maxDate && k > new Date(maxDate).getSeconds() && new Date(compDate).getTime() == new Date(compMax).getTime()&& value == new Date(maxDate).getHours() && value1 == new Date(maxDate).getMinutes())){
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel coral-state-disabled' data-handler='clickSecond' data-event='click'>" +
							(k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}else{
					dateTimeHTML.push( "<td nowrap='' class='menuTimeSel' data-handler='clickSecond' data-event='click' >"+ (k/Math.pow(10,2)).toFixed(2).substr(2) +"</td>" );
				}
				k+=5;
			}
			dateTimeHTML.push( "</tr>" );
		}
		dateTimeHTML.push( "</tbody></table></div>" );
		return dateTimeHTML.join("");
	},
	// 生成月份和年度的头部
	_generateMonthYearHeader: function(drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort,isYearMonth) {

		var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
		    opts = this.options,
			changeMonth = opts.changeMonth,
			changeYear = opts.changeYear,
			showMonthAfterYear = opts.showMonthAfterYear,
			html = "<div class='coral-datepicker-title'>",
			monthHtml = "",
			monthSuffix = opts.monthSuffix,
			dateFormat = opts.dateFormat;
		//年份
		//月份选择
		if(!this._isYearMonthMode(dateFormat)&&!this._isYearMode(dateFormat)){
			if (secondary || !changeMonth) {
				monthHtml += "<span class='coral-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='coral-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
						(month === drawMonth ? " selected='selected'" : "") +
						">" + monthNamesShort[month] + "</option>";
					}
				}
				
				monthHtml += "</select>";
				monthHtml += monthSuffix;// “月”，写死在panel
			}
			
			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}
		}

		// 年度选择
		if ( !opts.yearshtml ) {
			opts.yearshtml = "";
			if (secondary || !changeYear) {
				html += "<span class='coral-datepicker-year'>" + drawYear + "</span>";
			} else {
				// 判断 年度范围用来显示
				years = opts.yearRange.split(":");
				thisYear = new Date().getFullYear();
				determineYear = function(value) {
					var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				year = determineYear(years[0]);
				endYear = Math.max(year, determineYear(years[1] || ""));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				if(this._isYearMode(dateFormat)){
					var year = drawYear-(drawYear % 12)
					opts.yearshtml +="<span class = 'coral-datepicker-year'>" + year + "-" + (year+11) + "</span>";
				}else{
					opts.yearshtml += "<select class='coral-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						opts.yearshtml += "<option value='" + year + "'" +
						(year === drawYear ? " selected='selected'" : "") +
						">" + year + "</option>";
					}
					opts.yearshtml += "</select>";
				}

				html += opts.yearshtml;
				opts.yearshtml = null;
			}
		}

		html += opts.yearSuffix;
		if (showMonthAfterYear) {
			html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + (isYearMonth===false?monthHtml:"");
		}
		html += "</div>"; // 关闭 datepicker_header
		return html;
	},
	
	//调整日期子字段
	_adjustInstDate: function(offset, period) {
		var opts = this.options;
		var year = opts.drawYear + (period === "Y" ? offset : 0),
			month = opts.drawMonth + (period === "M" ? offset : 0),
			day = Math.min(opts.selectedDay, this._getDaysInMonth(year, month,opts)) + (period === "D" ? offset : 0),
			date = this._restrictMinMax(_daylightSavingAdjustWidthTime(new Date(year, month, day),[opts.currentHur,opts.currentMiu,opts.currentSed]));

		opts.selectedDay = date.getDate();
		opts.drawMonth = opts.selectedMonth = date.getMonth();
		opts.drawYear = opts.selectedYear = date.getFullYear();
		if (period === "M" || period === "Y") {
			this._notifyChange();
		}
	},

	//保证一个日期在最大和最小范围内
	_restrictMinMax: function(date) {
		var opts = this.options;
		var minDate = this._getMinMaxDate( "min"),
			maxDate = this._getMinMaxDate("max"),
			newDate = (minDate && date < minDate ? minDate : date);
		return (maxDate && newDate > maxDate ? maxDate : newDate);
	},

	//通知月份或月份发生改变
	_notifyChange: function() {
		var opts = this.options,
		    onChange = opts.onChangeMonthYear;
		if (onChange) {
			onChange.apply((opts.input ? opts.input[0] : null),
				[opts.selectedYear, opts.selectedMonth + 1, opts]);
		}
	},

	//判断 显示的月份数量
	_getNumberOfMonths: function() {
		var opts = this.options;
		var numMonths = opts.numberOfMonths;
		return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
	},

	//判定当前最大最小的日期 - 保证没有时间组件被设定
	_getMinMaxDate: function( minMax) {
		var opts = this.options,temp,
			defaultDate;
		if(opts.model == "timepicker"){
			temp = minMax + "Time";
		} else {
			temp = minMax + "Date";
		}
		return this._determineDate(opts[temp], null);
	},

	//查找月中的日期
	_getDaysInMonth: function(year, month,options) {
		// TODO: 代码优化；
		var opts = options;
		if ( opts ) {
			return 32 - _daylightSavingAdjustWidthTime(new Date(year, month, 32),[opts.currentHur,opts.currentMiu,opts.currentSed]).getDate();
		} else {
			return 32 - _daylightSavingAdjustWidthTime(new Date(year, month, 32),[0,0,0]).getDate();
		}
	},

	//查找月中的第一天的date
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	//判定 是否允许调整月份
	_canAdjustMonth: function(offset, curYear, curMonth) {
		var opts = this.options,
		    numMonths = this._getNumberOfMonths(),
			date = _daylightSavingAdjustWidthTime(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1),[opts.currentHur,opts.currentMiu,opts.currentSed]);

		if (offset < 0) {
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth(),opts));
		}
		return this._isInRange(date);
	},

	//给定的日期是否在接收范围内
	_isInRange: function(date) {
		var opts = this.options,
		    yearSplit, currentYear,
			minDate = this._getMinMaxDate("min"),
			maxDate = this._getMinMaxDate("max"),
			minYear = null,
			maxYear = null,
			years = opts.yearRange;
			if (years){
				yearSplit = years.split(":");
				currentYear = new Date().getFullYear();
				minYear = parseInt(yearSplit[0], 10);
				maxYear = parseInt(yearSplit[1], 10);
				if ( yearSplit[0].match(/[+\-].*/) ) {
					minYear += currentYear;
				}
				if ( yearSplit[1].match(/[+\-].*/) ) {
					maxYear += currentYear;
				}
			}

		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()) &&
			(!minYear || date.getFullYear() >= minYear) &&
			(!maxYear || date.getFullYear() <= maxYear));
	},

	//格式化给定的日期用来显示
	_formatDate: function(day, month, year) {
		var opts = this.options;
		if (!day) {
			opts.currentDay = opts.selectedDay;
			opts.currentMonth = opts.selectedMonth;
			opts.currentYear = opts.selectedYear;
		}
		var minDate = this._getMinMaxDate("min");
		var maxDate = this._getMinMaxDate("max");
		var date = (day ? (typeof day === "object" ? day :
			_daylightSavingAdjustWidthTime(new Date(year, month, day),[opts.currentHur,opts.currentMiu,opts.currentSed])) :
			_daylightSavingAdjustWidthTime(new Date(opts.currentYear, opts.currentMonth, opts.currentDay),[opts.currentHur,opts.currentMiu,opts.currentSed]));
//			date.setHours(opts.currentHur);
//			date.setMinutes(opts.currentMiu);
//			date.setSeconds(opts.currentSed);
//			date.setMilliseconds(0);
		return $.coral.formatDate(opts.dateFormat, date, opts);
	},
	//调用事件
	_apply : function(type,datas,event){
		var opts = this.options;
		var callback = opts.type;
		if (callback) {
			if(typeof callback ==="string"){
				return window[callback].apply((opts.input ? opts.input[0] : null),[event].concat(datas));
			}else if($.isFunction( callback )){
				return callback.apply((opts.input ? opts.input[0] : null), [event].concat(datas));
			}
		}
	}
	
})
;

/*!
 * 组件库4.0：下拉框
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

$.component( "coral.checkbox", $.coral.formelement, {
	version: "4.0.1",
	castProperties : ["triggers","showRequiredMark","hideRequiredMark","shortCut"],
	options: {
		showStar: true,
		id: null,
		name: null,
		value: "",
		label: "",
		maxLabelWidth:"auto",
		labelField: null,
		starBefore: false,
		title: "",//只有设置maxLabelWidth属性的时候会显示title
		width: "auto",
		height: null,
		disabled: false,
		required: false,
		readonly: false,
		isLabel: false,
		checked: false,
		errMsg: null,
		errMsgPosition: "leftBottom",
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		onChange: $.noop,  /* 参数 ( event, { checked: boolean } ) */
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
    _create: function() {
    	var that = this,
    		options = this.options,
    		maxLabelWidth = options.maxLabelWidth,
    		label = options.label;
    	that.originalValue = "";
    	if ( !that.element.jquery ) {
    		that.element = $(that.element);
    	}    		
    	
    	that.element.addClass("coral-form-element-checkbox tabbable");
    	that.element.addClass("coral-validation-checkbox");

    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");
    	
    	var name = that.element.attr("name");
    	typeof name != "undefined"?(that.options.name = name):(that.element.attr("name", that.options.name));
    	
    	if ( $.trim(that.element.val()) != "" && $.trim(that.element.val()) != "on" ) {
    		that.options.value = that.element.val();
    	} else if (that.options.value) {
    		that.element.val(that.options.value);
    	}
    	// 便于查找同一个name的所复选框
    	if (that.options.name) {
    		that.nameMark = "coral-checkbox-element-" + that._hashCode(that.options.name);
    		that.element.addClass(that.nameMark);
    	}    	
    	
		that.uiCheckbox = $("<span class=\"coral-checkbox\"></span>");
		that.uiLabel = $("<label class=\"coral-checkbox-label\" for='"+that.options.id+"'></label>");
		that.uiIcon = $("<span class=\"coral-checkbox-icon\"></span>");
		if ( maxLabelWidth == "auto" ){
			that.uiText = $("<span class=\"coral-checkbox-text\"></span>");
		}else{
			that.uiText = $("<span class=\'coral-checkbox-text\'  title=\'"+label+"\' style=\'max-width:"+maxLabelWidth+"px;\'></span>");
		}
			
		that.uiLabel.append(that.uiIcon);		
		that.uiLabel.append(this.uiText);
		if (that.options.label) {
			that.uiText.append(that.options.label);			
		}		
		if (that.options.title) {
			that.uiLabel.attr("title", that.options.title);
		}
		if (that.options.checked) {
			that.uiIcon.addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			that.element.prop("checked", true);
		} else {
			that.uiIcon.addClass("cui-icon-checkbox-unchecked");
			that.element.prop("checked", false);
		}
		
		that.element.after(that.uiCheckbox);
		that.uiCheckbox.append(that.element).append(that.uiLabel);
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
			this.uiLabelField = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.uiCheckbox.prepend(this.uiLabelField);
			this.uiCheckbox.addClass("coral-hasLabel");
		}
		if((that.element)[0].checked === true){
			that.originalValue = that.options.value;
		}
		// add label and required star before function @lhb @2015-04-27
		that._bindEvent();
		
		that._trigger("onCreate", null, []);
	},
	reset: function() {
		if ( this.originalValue === "") {
			this.uncheck();
		} else {
			this.check();
		}
	},
	// 获取checkbox name相同的list
	_getCheckboxs: function () {
		var that = this,
			form  = that.element.closest("form");
		
		if (!that.nameMark) return that.element;
		
		if ( form.length > 0 ) {
			return form.find($("."+that.nameMark)); 
		} else {
			return $("."+that.nameMark);
		}
	},
	_setDisabled: function(disabled) {
		//this._setOption("disabled", disabled);
		
		if (disabled) {
			this.element.prop("disabled", true);
			this.element.removeClass("tabbable");
			this.uiCheckbox.addClass("coral-state-disabled");			
		} else {
			this.element.prop("disabled", false);
			this.uiCheckbox.removeClass("coral-state-disabled");
			this.element.addClass("tabbable");
		}
		
		this.options.disabled = ( disabled ? true : false );
	},
	_setReadonly: function(readonly) {
		if (readonly) {
			this.element.prop("readonly", true);
			this.uiCheckbox.addClass("coral-readonly");		
			this.element.removeClass("tabbable");
		} else {
			this.element.prop("readonly", false);
			this.uiCheckbox.removeClass("coral-readonly");
			this.element.addClass("tabbable");
		}	
		this.options.readonly = !!readonly;
	},
	_setIsLabel: function(isLabel){
		if (isLabel) {
			this.element.prop("isLabel", true);
			this.uiCheckbox.addClass("coral-isLabel");	
			this.element.removeClass("tabbable");
		} else {
			this.element.prop("isLabel", false);
			this.uiCheckbox.removeClass("coral-isLabel");
			this.element.addClass("tabbable");
		}	
		this.options.isLabel = !!isLabel;
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		
		this.element.focus();
		return true;
	},
	_bindEvent: function() {
		var that = this,options = that.options;
		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}	
		
		this.element.bind("change", function(event){
			if ($(this).prop("checked")) {
				that.uiIcon.removeClass("cui-icon-checkbox-unchecked ").addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			} else {
				that.uiIcon.removeClass("cui-icon-checkbox-checked coral-checkbox-hightlight").addClass("cui-icon-checkbox-unchecked");
			}
			that._trigger("onChange", event, [{ checked: !!that.element.prop("checked") }]);
		}).bind( "focus", function(event) {
			that.uiCheckbox.addClass("coral-checkbox-highlight");
		}).bind( "blur", function() {
			that.uiCheckbox.removeClass("coral-checkbox-highlight");
		}).bind( "keydown" + this.eventNamespace, function(e) {
			if(options.shortCut){
				$.coral.callFunction(options.shortCut,event,this);
			}
			that._trigger("onKeyDown", e, {});
		});
		
		this.uiCheckbox.bind("mouseenter" + this.eventNamespace, function() {
			if (that.options.disabled || that.uiCheckbox.hasClass("coral-checkbox-highlight") || that.uiCheckbox.hasClass("coral-checkbox-highlight")) {
				return;
			}
			$(this).addClass("coral-checkbox-hover");
		}).bind("mouseleave" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).removeClass("coral-checkbox-hover");
		});
		this.uiLabel.bind("click" ,function(e){
			if (that.options.readonly || that.options.isLabel || that.options.disabled ) {
				return false;
			}
			that._trigger("onClick", e, {});
		});
	},
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key === "disabled") {
			this._setDisabled(value);
		} 
		if (key ===  "isLabel") {
			this._setIsLabel(value);
		}
		if (key === "label") {
			this.uiText.html(value);
		} 
		if (key ==="maxLabelWidth"){
			var maxLabelWidth = value;
			if ( value != "auto" ){
				maxLabelWidth = maxLabelWidth+"px";
				this.uiText.attr("title",this.options.label);
			} else {
				maxLabelWidth = "";
				this.uiText.attr("title","");
			}
			this.uiText.css("max-width",maxLabelWidth);
		}
		/*if (key === "isLabel") {
			this._setIsLabel(value);
			return;
		}*/
		this._super(key, value);
	},
	_destroy : function() {
		this.uiCheckbox.replaceWith( this.element );
		this.uncheck();
		this.element.removeAttr("value");
		this.element.removeClass("coral-form-element-checkbox");
		this.element.removeClass("coral-validation-checkbox");
		this.element.removeClass(this.nameMark);
	},
	// hash code
	_hashCode : function (str) {
		if (!str) return 0;
		str = "" + str;
		var h = 0, off = 0, len = str.length;
        for (var i = 0; i < len; i++) { 
        	h = 31 * h  + str.charCodeAt(off++);
        	if ( h > 0x7fffffff || h < 0x80000000) {  
        		h=h & 0xffffffff; 
        	}
        }
        return h; 
	},	
	component : function() {
		return this.uiCheckbox;
	},
	disable : function() {
		this._setDisabled(true);
	},
	readonly: function(){
		this._setReadonly(true);
	},
	enable : function() {
		this._setDisabled(false);
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	check: function() {
		if (!this.uiIcon.hasClass("coral-checkbox-hightlight")) {
			this.uiIcon.removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkbox-hightlight");
			this.element.prop("checked", true);
		}		
	},	
	uncheck : function() {
		if (this.uiIcon.hasClass("coral-checkbox-hightlight")) {
			this.uiIcon.removeClass("cui-icon-checkbox-checked coral-checkbox-hightlight").addClass("cui-icon-checkbox-unchecked");
			this.element.prop("checked", false);
		}	
	},
	isChecked: function() {
		return this.element.prop("checked");
	},
	getValue: function() {
		return this.getValues().join(",");
	},
	getValues : function() {
		var that = this,
			valArr = [];
		
		that._getCheckboxs().each(function() {
			var jq = $(this);
			if (jq.checkbox("isChecked")) {
				valArr.push(jq.val());
			}
		});
		return valArr;
	},
	refresh : function() {
		this._destroy();
		this._create();
	}
});
;

/*!
 * 组件库4.0：复选框组
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 *    jquery.validatehelper.js
 */

$.component("coral.checkboxlist", $.coral.formelement, {
	version: "4.0.1",
	castProperties : ["data", "triggers","showRequiredMark","hideRequiredMark","shortCut"],
	options: {
		id:null,
		name:null,
		valueField:"value",
		textField :"text",
		//width : "auto",
		//height : 22,
		required: false,
		showStar: true,
		maxLabelWidth : "auto",
		labelField: null, // 表单元素前面的文本
		starBefore: false, // 必输项 * 是否前面
		column: null, // 每行放几个复选框
		disabled: false,
		readonly:false,
		isLabel:false,
		value: "",
		data:null, // 数组形式: [{value:,text:},...]或者 字符串形式: "cn:中国;us:美国;..."
		url: null,
		termSplit : ";", // 如果data是字符串，则termSplit作为复选框组的分隔符
		itemSplit : ":", // 如果data是字符串，则每个复选框隐藏值与显示值的分隔符
		errMsg: null,
		errMsgPosition: "leftBottom",
		repeatLayout: "table", // "table", "flow" // flow 时自适应
		itemWidth: "auto", // repeatLayout 为 flow 时，radio item 控制宽度，用于对齐
		
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false, // true 则不单独校验
		onChange: $.noop /*参数(event, {value:string,checked:boolean})*/
	},
    _create: function () {
    	var that = this,
    	    textbox = null, 
    	    valuebox = null,
    	    uiArrow = null,
    	    options = this.options;
    	if (!this.element.jquery) {
    		this.element = $(this.element);
    	}
    	
    	this.element.addClass("coral-form-element-checkboxlist  ctrl-init ctrl-form-element ctrl-init-checkboxlist coral-validation-checkboxlist");

    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");    	
    	var name = that.element.attr("name");
    	typeof name != "undefined" ? (that.options.name = name) : (that.element.attr("name", that.options.name));
		this.uiBoxlist = $("<span class=\"coral-checkboxlist\"></span>");
		this.uiInput   = $("<input type=\"hidden\">");
		if (this.options.name) {
			this.uiInput.attr("name", this.options.name);
		}
		if (this.options.value) {
			this.uiInput.val(this.options.value);
		}
		
		this._initData();	
		this._bindEvent();
		this.uiInput.appendTo(this.uiBoxlist);
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
			this.uiLabel = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
			this.uiBoxlist.prepend(this.uiLabel);
			this.uiBoxlist.addClass("coral-hasLabel");
		}
		// add label and required star before function @lhb @2015-04-27
		this.uiBoxlist.insertAfter(this.element);		
		this.element.hide();		
		
	},
	reload: function( url ){
		var that = this,
	    opts = {}, 
	    data = [], 
	    isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		} else if (!url && that.options.url){
			url = that.options.url;
		}
	    if ( typeof( url ) !== "string" ) {
	    	
		// 传过来的是object，需要区别是data还是options
		// 如果是options，可能是options.data或者options.url ，否则才为data
		    opts = url;
		    if (opts.data) { //传进来的是options对象
			    data = opts.data;			    
		    } else if (opts.url) {// 传进来的是data对象
			    url = opts.url;
			    that.options.url = opts.url;
			    isUrl = true;
		    } else if (opts instanceof Array) {
			    data = url;
		    } else if (!opts.url && !opts.data && !that.options.url) {
		    	data = [];
		    } else if (!opts.url && !opts.data && that.options.url) {
		    	url = that.options.url ;
		    	isUrl = true;
		    }
	    } else {
	    	that.options.url = url;
		    isUrl = true;
	    }
	    this.uiBoxlist.empty();
	    if (isUrl){
	    	if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
						that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
	     } else{
			 that._loadData(data);
	     }
		this._bindEvent();
	},
	/**
	 * 获取生成筛选框的数据
	 * @returns
	 */
	_initData : function () {
		var that = this,
			options = this.options;
		if (this.options.url) {
			//data = $.loadJson(this.options.url);
			if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
						that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
		}else if (this.options.data) {
			this._loadData(this.options.data);
		}
		/*data = data || this.options.data;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}*/
	},
	_ajaxSettings :function(){
		var opts = this.options,
	        that = this;
		return {
			type: "get",
			url: opts.url,
			data: {},
			async: false,
			dataType: "json"
		};
	},
	_loadData : function (data) {
		var tmpArr = null, checked=[],row,useData = [],arrayData=[],
	        i = 0, option = null, 
	        tmpRow = null, rowArr = null;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}
		this.data = data;
		for(i;i<data.length;i++){
			row = data[i];
			if(row['checked']){
				checked.push(row[this.options.valueField]);
			}
			arrayData.push(row[this.options.valueField]);
		}
		if(this.options.value) {
			checked = this.options.value.split(",");
		}
		if(this.options.clearOnLoad){
			for(var j = 0; j < checked.length; j++){
				if($.inArray(checked[j],arrayData) > -1){
					useData.push(checked[j]);
				}
			}
			checked = useData;
		}
		if ( !this.isInit ) {
			this.isInit = true;
			this.originalValue = checked.join(",");
		}
		this._renderChkItem();
		this.setValue(checked);
	},
	_renderChkItem: function(){
		if (this.options.repeatLayout == "table") {
			if (this.options.column == null ) {
				this.options.column = 3;
			} 
			this._renderTableItem();			
			this.uiTable.appendTo(this.uiBoxlist);
		} else if (this.options.repeatLayout == "flow") {
			if (this.options.column == null ) {
				this.options.column = this.data.length;
			} 
			this._renderBorderItem();
			this.uiBorder.appendTo(this.uiBoxlist);
		}		
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	_renderBorderItem: function () {
		var that = this,
			opts = this.options,
			column = this.options.column,
			data = this.data;
		
		that.uiBorder = $("<span class=\"coral-checkboxlist-border\"></span>");
		
		for (var i in data) {
			if ( i > (column-1) && i%(column) == 0) {
				$("<br/>").appendTo(that.uiBorder);
			}
			that._renderItem(data[i]).css("width", opts.itemWidth).appendTo(that.uiBorder);
		}
	},
	_renderTableItem: function () {
		this.uiTable = $("<table></table>");
		
		var i = 0, j = 0, 
		    data = this.data, 
		    len  = data.length || 0, 
		    column = this.options.column,
		    rows = 0, uiTr = null, uiTd = null;
		
		if (!data || data.length < 1) return;
		
		rows = Math.ceil(len/column);
		
		for (; i < rows; i++) {
			uiTr = $("<tr></tr>");
			for (j = 0; j < column ; j++) {
				uiTd = $("<td></td>");
				if ((i*column + j) < len) {
					this._renderItem(data[(i*column + j)]).appendTo(uiTd);
				}
				uiTd.appendTo(uiTr);
			}
			uiTr.appendTo(this.uiTable);
		}
	},
	_renderItem : function (cellData) {
		var isHidden = cellData.hidden == true?"hidden":"";
		var uiCheckbox = $("<span class='coral-checkbox tabbable "+isHidden+"'tabindex=0></span>"),
		    uiLabel    = $("<span class='coral-checkbox-label'></span>"),
		    uiIcon = $("<span class='coral-checkbox-icon'></span>"),
		    maxLabelWidth = this.options.maxLabelWidth,
		    uiText = $(),
		    value      = cellData[this.options.valueField],
		    text       = cellData[this.options.textField];
		
		//uiCheckbox.val( value );	
		if ( maxLabelWidth == "auto" ){
			uiText = $("<span class=\"coral-checkbox-text\"></span>");
		}else{
			uiText = $("<span class=\'coral-checkbox-text\'  title=\'"+text+"\' style=\'max-width:"+maxLabelWidth+"px;\'></span>");
		}
		uiCheckbox.attr( "data-value", value );	
		
		uiLabel.append(uiIcon).append(uiText);
		uiLabel.appendTo(uiCheckbox);
		uiIcon.addClass("cui-icon-checkbox-unchecked");
		uiText.append(text);
		
		return uiCheckbox;
	}, 
	_bindEvent: function() {
		var that = this;
		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}
		if ( this.options.readonly ) {
			this._setReadonly(this.options.readonly);
		}
		if ( this.options.isLabel ) {
			this._setIsLabel(this.options.isLabel);
		}
		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).bind("click" + that.eventNamespace, function( event ) {
				that._selectItems(event)
				event.stopPropagation();
			});
		});
		this._on( {
			"keydown .coral-checkbox": function( e ) {
				var keyCode = $.coral.keyCode,options = that.options;
				switch (e.keyCode) {
					case keyCode.SPACE:
						e.preventDefault();
						that._selectItems(e);
						break;
				}
				if(options.shortCut){
					$.coral.callFunction(options.shortCut,event,this);
				}
				that._trigger( "onKeyDown", e, {} );
			},
			"focus .coral-checkbox": function(e) {
				var uiCheckbox = $(e.target).closest( ".coral-checkbox" );
				uiCheckbox.addClass("coral-checkbox-highlight");
			},
			"blur .coral-checkbox": function(e) {
				var uiCheckbox = $(e.target).closest( ".coral-checkbox" );
				uiCheckbox.removeClass("coral-checkbox-highlight");
			},
			"mouseenter .coral-checkbox": function(e) {
				var uiCheckbox = $(e.target).closest( ".coral-checkbox" );
				if (uiCheckbox.hasClass("coral-state-disabled")) {
					return;
				}
				uiCheckbox.addClass("coral-checkbox-hover");
			},
			"mouseleave .coral-checkbox": function(e) {
				var uiCheckbox = $(e.target).closest( ".coral-checkbox" );
				if (uiCheckbox.hasClass("coral-state-disabled")) {
					return;
				}
				uiCheckbox.removeClass("coral-checkbox-hover");
			}
		});
		this.uiBoxlist.find(".coral-checkbox-label").each(function() {
			$(this).bind("click" + that.eventNamespace, function( event ) {
				if (that.options.readonly || that.options.isLabel) {
					return false;
				}				
			})
		});	
	},
	_selectItems: function(e) {
		var that = this;
		if (that.options.disabled) {
			return;
		}
		if (that.options.readonly ){
			return;
		}
		if (that.options.isLabel) {
			return;
		}
		var uiCheckbox = $( e.target ).closest( ".coral-checkbox" ),
			  uiIcon = uiCheckbox.find(".coral-checkbox-icon");
		
		if (uiCheckbox.hasClass("coral-state-disabled")||uiCheckbox.hasClass("coral-readonly")||uiCheckbox.hasClass("coral-isLabel")) {
			event.stopPropagation();
			return;
		}
		if (uiIcon.hasClass("coral-checkboxlist-item-highlight")) {
			uiIcon.removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("cui-icon-checkbox-unchecked");
			uiCheckbox.removeClass("coral-checkbox-highlight");
		} else {
			uiIcon.removeClass("cui-icon-checkbox-unchecked").addClass("coral-checkboxlist-item-highlight cui-icon-checkbox-checked");
			uiCheckbox.addClass("coral-checkbox-highlight");
		}
		var oldValue = that.getValue();
		that._changeValue();
		that._trigger("onChange", null, {value: that.uiInput.val(),oldValue:oldValue, checked: uiIcon.hasClass("coral-checkboxlist-item-highlight")});
	},
	_changeValue: function() {
		var that = this, valArr = [];

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			if ($(this).find(".coral-checkbox-icon").hasClass("coral-checkboxlist-item-highlight")) {				
				valArr.push( $(this).attr("data-value") );
			}			
		});
		
		this.uiInput.val(valArr.toString());
	},
	_setDisabled: function(disabled) {
		disabled = !!disabled;

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).toggleClass( "coral-state-disabled", disabled );
			$(this).toggleClass( "tabbable", !disabled );
		});
		
		this.options.disabled = disabled;
	},
	_setReadonly: function(readonly) {
		readonly = !!readonly;

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).toggleClass( "coral-readonly", readonly );
			$(this).toggleClass( "tabbable",!readonly );
		});
		
		this.options.readonly = readonly;
	},	
	_setIsLabel:function(isLabel){
		isLabel = !!isLabel;

		this.uiBoxlist.find(".coral-checkbox").each(function() {
			$(this).toggleClass( "coral-isLabel", isLabel );
			$(this).toggleClass( "tabbable",!isLabel );
		});
		
		this.options.isLabel = isLabel;
	},
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key === "isLabel") {
			this._setIsLabel(value);
		}
		if (key === "disabled") {
			this._setDisabled(value);
			return;
		}
		if (key ==="maxLabelWidth"){
			var maxLabelWidth = value;
			if ( value != "auto" ){
				maxLabelWidth = maxLabelWidth+"px";
                var array = this.component().find(".coral-checkbox-text");
                for( var i=0;i<array.length;i++){
                	var text = $(array[i]).html();
                	$(array[i]).attr("title",text);
                }
			} else {
				maxLabelWidth = "";
				this.component().find(".coral-checkbox-text").attr("title","");
			}
			this.component().find(".coral-checkbox-text").css("max-width",maxLabelWidth);
		}
		this._super(key, value );
	},
	_destroy : function() {
		this.component().remove();
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.removeClass("coral-form-element-checkboxlist");
		this.element.removeClass("coral-validation-checkboxlist");
		this.element.show();
	},
	focus: function() {
		//TODO:focus
	},
	component : function() {
		return this.uiBoxlist;
	},
	disable : function() {
		this._setOption("disabled", true);
		this._setDisabled(true);
	},
	readonly : function(){
		this._setReadonly("readonly",true);
	},
	enable : function() {
		this._setOption("disabled", false);
		this._setDisabled(false);
	},
	disableItem : function (value) {
		this.uiBoxlist.find(".coral-checkbox[data-value=\"" + value + "\"]").toggleClass( "coral-state-disabled", true );
	},
	enableItem : function (value) {
		this.options.disabled = false;
		
		var item = this.uiBoxlist.find(".coral-checkbox[data-value=\"" + value + "\"]").toggleClass( "coral-state-disabled", false );		
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	getValue : function() {
		return this.uiInput.val();
	},
	setValue : function(value, force) {
		var oldValue = this.getValue() || [];
		this.uiBoxlist.find(".coral-checkboxlist-item-highlight").each(function() {
			$(this).removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("cui-icon-checkbox-unchecked");
		});
		value = value || "";
		var i = 0, valArr = $.isArray(value) ? value 
				: ((!value || typeof value !== "string" || "" === $.trim(value)) ? [] : value.split(","));
		for (; i < valArr.length; i++) {
			this.uiBoxlist.find(".coral-checkbox[data-value=\"" + valArr[i] + "\"]").find(".coral-checkbox-icon")
							   .removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight");
		}
		
		this.uiInput.val(valArr.toString());
		
		/*if (force !== true) {
			this.valid();
		}*/
	},
	// 反选 force 的意义同 setValue 中的 force
	invertCheck : function (force) {
		var valArr = [];
		
		this.uiBoxlist.find(".coral-checkboxlist-item-highlight").each(function() {
			$(this).removeClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight").addClass("coral-checkbox-temp");
		});
		this.uiBoxlist.find(".cui-icon-checkbox-unchecked").each(function() {
			$(this).removeClass("cui-icon-checkbox-unchecked").addClass("cui-icon-checkbox-checked coral-checkboxlist-item-highlight");
		});
		this.uiBoxlist.find(".coral-checkbox-temp").each(function() {
			$(this).removeClass("coral-checkbox-temp").addClass("cui-icon-checkbox-unchecked");
		});
		
		this.uiBoxlist.find(".coral-checkbox").each(function() {
			if ($(this).find(".coral-checkbox-icon").hasClass("coral-checkboxlist-item-highlight")) {
				valArr.push( $(this).attr("data-value") );
			}			
		});
		
		this.setValue(valArr, force);		
	},
	// 全选；若要反选请使用 setValue(null)
	checkAll : function () {
		var valArr = [], i = 0, row = null, data = this.data;
		for (; i < data.length; i++ ) {
			row = data[i];
			valArr.push(row[this.options.valueField]);
		}
		this.setValue(valArr);
	},
	// 获取指定项的显示名称
	getText : function (values/*String:"CN,US,EN" or Array:["CN","US","EN"]*/) {
		var i    = 0, 
		    data = this.data,
		    val  = null,
		    txtArr = [];
		if (!values) {
			values = this.getValue().split(",");
		} else if (typeof values) {
			values = values.split(",");
		}
		for (; i < data.length; i++) {
			val = data[i][this.options.valueField];
			if ($.inArray(val, values) > -1) txtArr.push(data[i][this.options.textField]);
		}
		return txtArr.toString();
	}
});
;

/*
 * 组件库 4.0 ： 单选框
 * 
 * 依赖 JS 文件 ：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

$.component( "coral.radio", $.coral.formelement , {
	version: "4.0.1",
	castProperties : ["triggers","showRequiredMark","hideRequiredMark","shortCut"],
	options: {
		showStar: true,
		id: null,
		name: null,
		width: "auto",
		height: 24,
		label: "",
		starBefore: false,
		labelField: null,
		disabled: false,
		readonly:false,
		isLabel:false,
		allowCancel: false,
		checked: false,
		required: false,
		isCheck: false,
		value: "",
		errMsg: null,
		errMsgPosition: "leftBottom",
		onValidError: null,
		onValidSuccess: null,
		onClick: null,
		onKeyDown: null,
		onChange: $.noop,  // 参数(event, { checked })
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
    _create: function() {
    	var that = this,
    		options = this.options;
    	if ( !that.element.jquery ) {
    		that.element = $(that.element);
    	}
    	
    	that.element.addClass("coral-form-element-radio tabbable");
    	that.element.addClass("coral-validation-radio");
    	
    	typeof that.element.attr("id") == "undefined" && !!that.options.id&&that.element.attr( "id", that.options.id );
    	that.options.id = that.element.uniqueId().attr("id");
    	
    	var name = that.element.attr("name");
    	typeof name != "undefined"?(that.options.name = name):(that.element.attr("name", that.options.name));

    	if ( $.trim( that.element.val() ) != "" && $.trim(that.element.val()) != "on" ) {
    		that.options.value = that.element.val();
    	} else if (that.options.value) {
    		that.element.val(that.options.value);
    	}
    	// 便于查找同一个 name 的所单选框
    	that.nameMark = "coral-radio-element-" + that._hashCode( that.options.name );
		that.element.addClass(that.nameMark);
		
		that.uiRadio = $("<span class=\"coral-radio\"></span>");
		that.uiLabel = $("<label class=\"coral-radio-label\" for="+that.options.id+"></label>");
		that.uiIcon = $("<span class=\"coral-radio-icon\"></span>");
		
		that.uiLabel.append(that.uiIcon);		
		if (that.options.label) {
			that.uiLabel.append(that.options.label);
		}
		
		if (that.options.checked) {
			that._getRadios().not(that.element).radio("uncheck");
			that.uiIcon.addClass("cui-icon-radio-checked coral-radio-hightlight");
			that.element.prop("checked", true);
		} else {
			that.uiIcon.addClass("cui-icon-radio-unchecked");
			that.element.prop("checked", false);
		}		
		that.element.after(that.uiRadio);
		that.uiRadio.append(that.element).append(that.uiLabel);
		
		// add label and required star before function @lhb @2015-04-27 add labelField attribute
		if (options.labelField) {
//			this.uiLabelField = $("<label class=\"coral-label\">"+ options.labelField +"</label>");
//			this.uiRadio.prepend(this.uiLabelField);
//			this.uiRadio.addClass("coral-hasLabel");
			this._createLabel();
		}
		// add label and required star before function @lhb @2015-04-27
		if((that.element)[0].checked === true){
			that.originalValue = this.getValue();
		} 
		that._bindEvent();
	},
	reset : function() {
		if ( this.originalValue === "off" || this.originalValue === "") {
			this.uncheck();
		} else {
			this.check();
		}
	},
	// 获取radio name相同的list
	_getRadios: function () {
		var that = this,
			form  = that.element.closest("form");
		
		if ( form.length > 0 ) {
			return form.find($("."+that.nameMark)); 
		} else {
			return $("."+that.nameMark);
		}
	},
	_setDisabled: function(disabled) {
		//this._setOption("disabled", disabled);
		
		if (disabled) {
			this.element.prop("disabled", true);
			this.element.removeClass("tabbable");
			this.uiRadio.addClass("coral-state-disabled");
		} else {
			this.element.prop("disabled", false);
			this.element.addClass("tabbable");
			this.uiRadio.removeClass("coral-state-disabled");
		}
		
		this.options.disabled = (disabled ? true : false);
	},
	_setIsLabel:function(isLabel){
		if (isLabel) {
			this.element.prop("isLabel", true);
			this.uiRadio.addClass("coral-isLabel");
			this.element.removeClass("tabbable");
		} else {
			this.element.prop("isLabel", false);
			this.uiRadio.removeClass("coral-isLabel");
			this.element.addClass("tabbable");
		}	
		this.options.isLabel = !!isLabel;
	},
	_setReadonly:function(readonly){
		if (readonly) {
			this.element.prop("reaonly", true);
			this.uiRadio.addClass("coral-readonly");
			this.element.removeClass("tabbable");
		} else {
			this.element.prop("readonly", false);
			this.uiRadio.removeClass("coral-readonly");
			this.element.addClass("tabbable");
		}	
		this.options.readonly = !!readonly;
	},
	/**
	 * 获取焦点方法
	 */
	focus: function() {
		var that = this;
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		
		this.element.focus();
		return true;
	},
	_bindEvent: function() {
		var that = this,options = that.options;		
		if ( this.options.disabled ) {
			this._setDisabled(this.options.disabled);
		}
		if (this.options.readonly) {
			this._setReadonly(this.options.readonly)
		}
		if (this.options.isLabel) {
			this._setIsLabel(this.options.isLabel)
		}
		var suppressClick;
		this.element.bind( "focus", function() {
			that.uiRadio.addClass("coral-radio-highlight");
		}).bind( "blur", function() {
			that.uiRadio.removeClass("coral-radio-highlight");
		}).bind( "click", function(event) {
			if (that.options.disabled || that.options.readonly || that.options.isLabel) {
				return ;
			}
			
			if ( suppressClick ) {
				suppressClick = false;
				return ;
			}
			that._clearCheckedState();
			that.uiIcon.removeClass("cui-icon-radio-unchecked");
			that.uiIcon.addClass("cui-icon-radio-checked coral-radio-hightlight");
			that._trigger("onChange", null, [{ checked: !!that.element.prop("checked") }]);
			that._trigger("onClick", null, { checked: !!that.element.prop("checked") });
		}).bind( "keydown" + this.eventNamespace, function(e) {
			if(that.options.allowCancel){
				var keyCode = $.coral.keyCode;
				switch (e.keyCode) {
					case keyCode.SPACE:
						e.preventDefault();
						that._selectItem(e);
						break;
				}
			}
			if(options.shortCut){
				$.coral.callFunction(options.shortCut,event,this);
			}
			that._trigger("onKeyDown", e, {});
		});
		this.uiRadio.bind("mouseenter" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).addClass("coral-radio-hover");
		}).bind("mouseleave" + this.eventNamespace, function() {
			if (that.options.disabled) {
				return;
			}
			$(this).removeClass("coral-radio-hover");
		});
		this.uiLabel.bind("click" ,function(e){
			//e.preventDefault();
			that._selectItem(e);
		})
	},
	_selectItem: function(e){
		var that = this;
		if ( that.options.readonly || that.options.disabled || that.options.isLabel) {
			return false;
		}
		suppressClick = true;
		that.options.isCheck = $(that.element).prop("checked");
		if ( !that.options.isCheck ) {
			that._clearCheckedState();
			that.uiIcon.removeClass("cui-icon-radio-unchecked");
			that.uiIcon.addClass("cui-icon-radio-checked");
			that.element.prop("checked", true);
			that._trigger("onChange", null, [{ checked: !!that.element.prop("checked") }]);	
		} else {
			if ( !that.options.allowCancel ) {
				//e.preventDefault();
				return ;
			}
			that._clearCheckedState();
			that.uiIcon.addClass("cui-icon-radio-unchecked");
			that.element.prop("checked", false);
			that._trigger("onChange", null, [{ checked: !!that.element.prop("checked") }]);	
		}
	},
	clear: function(){
		
	},
	_clearCheckedState: function(){
		this._getRadios().each(function(){
			$(this).radio("component").find(".coral-radio-icon").removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass(" cui-icon-radio-unchecked");
		});
	},
	// hash code
	_hashCode : function(str) {
		if ( !str ) {
			return 0;
		}	
		str = "" + str;		
		var h = 0, off = 0, len = str.length;        
		for (var i = 0; i < len; i++) { 
        	h = 31 * h  + str.charCodeAt(off++);
        	if ( h > 0x7fffffff || h < 0x80000000) {  
        		h=h & 0xffffffff; 
        	}
        }
		
        return h; 
	},		
	//设置属性处理
	_setOption: function(key, value) {
		//默认属性不允许更改
		if (key === "id" || key === "name") {
			return;
		}
		if (key === "readonly") {
			this._setReadonly(value);
		} 
		if (key ==="isLabel") {
			this._setIsLabel(value);
		}
		if (key === "disabled") {
			this._setDisabled(value);
		} 
		this._super(key, value );
	},
	_destroy: function() {
		this.uiRadio.replaceWith( this.element );
		this.uncheck();// just uncheck not remove the attr value
		this.element.removeClass("coral-form-element-radio");
		this.element.removeClass("coral-validation-radio");
		this.element.removeClass(this.nameMark);
	},
	component: function() {
		return this.uiRadio;
	},
	disable: function() {
		this._setDisabled(true);
	},
	enable: function() {
		this._setDisabled(false);
	},
	show: function() {
		this.component().show();
	},
	hide: function() {
		this.component().hide();
	},
	check: function() {
		var that = this;
		
		if (this.uiIcon.hasClass("cui-icon-radio-unchecked")) {
			that._getRadios().each(function(){
				$(this).radio("component").find(".coral-radio-icon").removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass(" cui-icon-radio-unchecked");
			});
			this.uiIcon.removeClass("cui-icon-radio-unchecked").addClass("cui-icon-radio-checked coral-radio-hightlight");
			this.element.prop("checked", true);
		}		
	},
	uncheck: function() {
		if (this.uiIcon.hasClass("coral-radio-hightlight")) {
			this.uiIcon.removeClass("cui-icon-radio-checked coral-radio-hightlight").addClass("cui-icon-radio-unchecked");
			this.element.prop("checked", false);
		}	
	},
	isChecked: function() {
		return this.element.prop("checked");
	},
	/**
	 * TODO: 待验证是否合理
	 */
	setValue: function(value) {
		if ( "on" === value ) {
			this.check();
		} else {
			this.uncheck();
		}
	},
	getValue: function() {
		return this.getValues().join(",");
	},
	getValues: function() {
		var that = this,
			valArr = [];

		that._getRadios().each(function() {
			var jq = $(this);
			if (jq.radio("isChecked")) {
				valArr.push(jq.val());
			}
		});
		
		return valArr;
	},
	refresh: function() {
		this._destroy();
		this._create();
	}
});
;


$.component("coral.radiolist", $.coral.formelement,{
	version: "4.0.1",
	castProperties : ["data", "triggers","showRequiredMark","hideRequiredMark","shortCut"],
	options: {
		id: null,
		name: null,
		valueField: "value",
		textField : "text",
		//width : "auto",
		//height : 22,
		required : false,
		labelField: null, // 表单元素前面的文本
		starBefore: false, // 必输项 * 是否前面
		showStar: true,
		column : null, // 每行放几个单选框
		disabled : false,
		readonly:false,
		isLabel : false,
		isCheck: false,
		allowCancel:false,
		value : "",
		valueIndex: null, // number
		data  : [], // 数组形式: [{value:,text:},...]或者 字符串形式: "cn:中国;us:美国;..."
		url   : null,
		termSplit : ";", // 如果data是字符串，则termSplit作为复选框组的分隔符
		itemSplit : ":", // 如果data是字符串，则每个复选框隐藏值与显示值的分隔符
		repeatLayout: "table", // "table", "flow" // flow 时自适应
		itemWidth: "auto", // repeatLayout 为 flow 时，radio item 控制宽度，用于对齐

		errMsg: null,
		errMsgPosition: "leftBottom",
		onLoad: null, // url
		onValidError: null,
		onKeyDown: null,
		onValidSuccess: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false, // true 则不单独校验
		onChange : $.noop /*参数(event, {value: string, checked: boolean})*/
	},
    _create: function () {
    	var that = this,
    	    textbox = null, 
    	    valuebox = null,
    	    uiArrow = null,
    	    options = this.options;
    	
    	this._prepareInit();
    	this._initComponent();
    	this._setDefaultValue();
		// 数据处理
		this._initData();
		this._bindEvent();
		
		if ( this.options.url || this.options.data) {
			this._trigger("onLoad", null, [{data: this.getData()}]);
		}
	},
	_prepareInit: function(){
		this.isInit = false;
	},
	_initComponent: function(){
		this.element.addClass("coral-form-element-radiolist coral-validation-radiolist ctrl-init ctrl-form-element ctrl-init-radiolist");

    	typeof this.element.attr("id") == "undefined" && !!this.options.id&&that.element.attr( "id", this.options.id );
    	this.options.id = this.element.uniqueId().attr("id");
    	
    	var htmlValue = this.element.attr("value");
    	if (htmlValue){
    		this.options.value=htmlValue;
    	}
    	
    	var name = this.element.attr("name");
    	typeof name != "undefined" ? (this.options.name = name) : (this.element.attr("name", this.options.name));

    	this.uiBoxlist = $("<span class=\"coral-radiolist\"></span>");
		this.uiInput   = $("<input type=\"hidden\">");
		if (this.options.name) {
			this.uiInput.attr("name", this.options.name);
			this.element.removeAttr("name").attr("orgname", this.options.name);
		}
		this.uiInput.appendTo(this.uiBoxlist);
		// add label before function @lhb @2015-04-27 add labelField attribute
		if (this.options.labelField) {
			this.uiLabel= $("<label class=\"coral-label\">"+ this.options.labelField +"</label>");
			this.uiBoxlist.prepend(this.uiLabel);
			this.uiBoxlist.addClass("coral-hasLabel");
		}
		this.uiBoxlist.insertAfter(this.element);
		this.element.hide();
	},
	_setDefaultValue: function() {
		
	},
	reload: function(url){
		var that = this,
	    opts = {}, 
	    data = [], 
	    isUrl = false;
		if ( !url && !that.options.url ){
			url = [];
		} else if (!url && that.options.url){
			url = that.options.url;
		}
	    if ( typeof( url ) !== "string" ) {
	    	
		// 传过来的是object，需要区别是data还是options
		// 如果是options，可能是options.data或者options.url ，否则才为data
		    opts = url;
		    if (opts.data) { //传进来的是options对象
			    data = opts.data;			    
		    } else if (opts.url) {// 传进来的是data对象
			    url = opts.url;
			    that.options.url = opts.url;
			    isUrl = true;
		    } else if (opts instanceof Array) {
			    data = url;
		    } else if (!opts.url && !opts.data && !that.options.url) {
		    	data = [];
		    } else if (!opts.url && !opts.data && that.options.url) {
		    	url = that.options.url ;
		    	isUrl = true;
		    }
	    } else {
	    	that.options.url = url;
		    isUrl = true;
	    }
	    this.uiBoxlist.empty();
	    if (isUrl){
	    	if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
						that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
	     } else{
			 that._loadData(data);
	     }
	},
	/**
	 * 获取生成筛选框的数据
	 * @returns
	 */
	_initData: function() {
		var that = this,
			options = this.options;

		if (options.url) {
			if ( this.xhr ){
				this.xhr.abort();
			}
			this.xhr = $.ajax(this._ajaxSettings( ));
			this.xhr
				.success(function( data ) {
					that._loadData(data);
				}).complete(function( jqXHR, status ) {
					if ( jqXHR === that.xhr ) {
					    that.xhr = null;
					}
				}).error(function(){
					 $.alert( "Json Format Error!" );
				});
		} else if (options.data) {
			this._loadData(options.data);
		}
	},
	_ajaxSettings :function(){
		var opts = this.options,
	        that = this;
		return {
			type: "get",
			url: opts.url,
			data: {},
			async: false,
			dataType: "json"
		};
	},
	_loadData : function (data) {
		var tmpArr = null, row,checked,
	        i = 0, option = null, 
	        tmpRow = null, rowArr = null;
		if (typeof data === "string") {
			tmpArr = data.split(this.options.termSplit);
			data = [];
			for (; i < tmpArr.length; i++) {
				tmpRow = tmpArr[i];
				rowArr = tmpRow.split(this.options.itemSplit);
				option = {};
				option[this.options.valueField] = rowArr[0];
				option[this.options.textField]  = rowArr[1];
				data.push(option);
			}
		}
		this.data = data;
		for(i;i<data.length;i++){
			row = data[i];
			if(row['checked']){
				checked=row[this.options.valueField];
			}
		}
		if (this.options.value) {
			checked = this.options.value;
		}
		if ( !this.isInit ) {
			this.isInit = true;
			this.originalValue = checked;
		}
		this._renderRadioItem();
		this.setValue(checked);
	},
	_renderRadioItem: function(){
		// 创建复选框组
		if (this.options.repeatLayout == "table") {
			if (this.options.column == null ) {
				this.options.column = 3;
			} 
			this._renderTableItem();
			this.uiTable.appendTo(this.uiBoxlist);
		} else if (this.options.repeatLayout == "flow") {
			if (this.options.column == null ) {
				this.options.column = this.data.length;
			} 
			this._renderFlowItem();
			this.uiBorder.appendTo(this.uiBoxlist);
		}		
		
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	/**
	 * 返回data ( url / data )
	 */
	getData: function () {
		return this.data;
	},
	_renderFlowItem: function () {
		var that = this,
			opts = this.options,
			column = this.options.column,
			data = this.data;
		
		that.uiBorder = $("<span class=\"coral-radiolist-border\"></span>");
		
		for (var i in data) {
			if ( i > (column-1) && i%(column) === 0) {
				$("<br/>").appendTo(that.uiBorder);
			}
			that._renderItem(data[i]).css("width", opts.itemWidth).appendTo(that.uiBorder);
		}
	},
	_renderTableItem: function () {
		this.uiTable = $("<table></table>");
		
		var i = 0, j = 0, 
		    data = this.data, 
		    len  = data.length || 0, 
		    column = this.options.column,
		    rows = 0, uiTr = null, uiTd = null;
		
		if (!data || data.length < 1) return;
		
		rows = Math.ceil(len/column);
		
		for (; i < rows; i++) {
			uiTr = $("<tr></tr>");
			for (j = 0; j < column ; j++) {
				uiTd = $("<td></td>");
				if ((i*column + j) < len) {
					this._renderItem(data[(i*column + j)]).appendTo(uiTd);
				}
				uiTd.appendTo(uiTr);
			}
			uiTr.appendTo(this.uiTable);
		}
	},
	_renderItem : function (cellData) {
		var data = this.data,uiRadio,isHidden,isTabIndex,isTabbable,
			isChecked = false;
		for (var i=0 ; i<data.length ; i++) {
			if(data[i]['checked'] == true){
				isChecked = true
			}
			//isChecked = data[i]['checked'] === true;
		}
		if(!isChecked){
			//data[0]['checked'] = true;
			this.tabIndex = 0;
		} else {
			this.tabIndex = i;
		}
		isHidden = cellData.hidden === true?"hidden":"";
		isTabIndex = cellData.checked === true ? "tabindex = 0" : "";
		isTabbable = cellData.checked === true ? "tabbable" : "";
		if(!isChecked && cellData[this.options.valueField] == data[0].value){
			isTabIndex = "tabindex = 0";
			uiRadio = $("<span class='coral-radio "+ isHidden + "tabbable '"+ isTabIndex +"></span>");
		}else{
			uiRadio = $("<span class='coral-radio "+ isHidden + isTabbable +"'"+ isTabIndex +"></span>");
		}
	    uiLabel    = $("<label class='coral-radio-label'></label>"),
	    uiIcon = $("<span class='coral-radio-icon'></span>"),
	    value      = cellData[this.options.valueField],
	    text       = cellData[this.options.textField];
		uiRadio.attr("value", value);	
		uiLabel.append(uiIcon).append(text);
		uiLabel.appendTo(uiRadio);
		uiIcon.addClass("cui-icon-radio-unchecked");
		
		return uiRadio;
	}, 
	_bindEvent: function() {
		var that = this;
		
		if ( this.options.disabled ) {
			this._setDisabled ( this.options.disabled );
		}
		if ( this.options.readonly ) {
			this._setReadonly(this.options.readonly);
		}
		if ( this.options.isLabel ) {
			this._setIsLabel(this.options.isLabel);
		}
		this._on( {
			"mouseenter .coral-radio": function( e ){
				if ( that.options.readonly || that.options.isLabel ) {
					return false;
				}
				var radio = $( e.target ).closest( ".coral-radio" );
				if ( $( radio ).hasClass( "coral-state-disabled" ) ) {
					return;
				}
				$( radio ).addClass( "coral-radio-hover" );
			},
			"mouseleave .coral-radio": function( e ){
				if ( that.options.readonly || that.options.isLabel ) {
					return false;
				}
				var radio = $( e.target ).closest( ".coral-radio" );
				if ( $( radio ).hasClass( "coral-state-disabled" ) ) {
					return;
				}
				$( radio ).removeClass( "coral-radio-hover" );
			},
			"focus .coral-radio": function( e ){
				var radio = $( e.target ).closest( ".coral-radio" );
				$( radio ).addClass("coral-radio-highlight");
			},
			"blur .coral-radio": function( e ){
				var radio = $( e.target ).closest( ".coral-radio" );
				$( radio ).removeClass("coral-radio-highlight");
			},
			"keydown .coral-radio": function( e ){
				var keyCode = $.coral.keyCode,options = this.options;
				var radioList = $( e.target ).closest( ".coral-radiolist" ),
					radio = radioList.find(".coral-radio");
					record = 0,
					isChecked = true;
				$.each (radio , function(i) {
					if (radio[i] == document.activeElement) {
						record = i;
					}
					isChecked = $(radio[i]).attr("checked") === true;
				});
				switch (e.keyCode) {
					case keyCode.SPACE:
						e.preventDefault();
//						if(!isChecked){
//							var value  = $(radio[i]).attr( "value" );
//							that.setValue( value );
//						}
						that._selectItem(e);
						break;
					case keyCode.LEFT:
						e.preventDefault();
						if ( that.options.readonly || that.options.isLabels ) {
							return false;
						}				
						if (record == 0) {
							record = radio.length;
						}
						var uiRadio = $(radio[record - 1]),
							uiIcon = uiRadio.find( ".coral-radio-icon" ),
							value   = uiRadio.attr( "value" );
						uiRadio.attr("tabindex","0");
						$(radio[record]).removeAttr("tabindex");
						uiRadio.addClass("tabbable");
						$(radio[record]).removeClass("tabbable");
						that.setValue( value );
						setTimeout(function(){
							uiRadio.focus();
						});
					    that._trigger( "onChange", null, {value: value, checked: uiIcon.hasClass( "coral-radiolist-item-hightlight" )} );
						break;
					case keyCode.RIGHT:
						e.preventDefault();
						if ( that.options.readonly || that.options.isLabel ) {
							return false;
						}		
						if(record == radio.length -1){
							record = -1;
						}
						var uiRadio = $(radio[record + 1]),
							uiIcon = uiRadio.find( ".coral-radio-icon" ),
							value   = uiRadio.attr( "value" );
						uiRadio.attr("tabindex","0");
						$(radio[record]).removeAttr("tabindex");
						uiRadio.addClass("tabbable");
						$(radio[record]).removeClass("tabbable coral-radio-highlight");
						that.setValue( value );
						setTimeout(function(){
							uiRadio.focus();
						});
						that._trigger( "onChange", null, {value: value, checked: uiIcon.hasClass( "coral-radiolist-item-hightlight" )} );
						break;
				}
				if(options.shortCut){
					$.coral.callFunction(options.shortCut,event,this);
				}
				that._trigger( "onKeyDown", e, {} );
			},
			"click .coral-radio": function( e ){
				if (that.options.disabled || that.options.readonly) {
					return ;
				}
				that._selectItem(e);
				e.stopPropagation();
			}
		} );
	},
	_selectItem: function(e) {
		var that = this;
		var radioList = $(".coral-radiolist").find(".coral-radio");;
		var radio = $( e.target ).closest( ".coral-radio" );
		if ( that.options.readonly || that.options.isLabel) {
			return false;
		}	
		var uiRadio = radio,
			uiIcon = uiRadio.find( ".coral-radio-icon" ),
		    value   = uiRadio.attr( "value" ),
		    oldValue = that.getValue();
		$.each (radioList , function(i) {
			if ($(radioList[i]).hasClass("tabbable")) {
				$(radioList[i]).removeClass("tabbable");
				$(radioList[i]).removeAttr("tabindex");
			}
		})
		uiRadio.addClass("tabbable");
		uiRadio.attr("tabindex","0");
		uiRadio.focus();
		if ( value == oldValue ){
			if ( !this.options.allowCancel ) return false;
			uiIcon.removeClass( "cui-icon-radio-checked coral-radiolist-item-hightlight " ).addClass( "cui-icon-radio-unchecked" );
			radioList.removeClass("coral-radio-highlight")
			that.uiInput.val( "" );
		} else {
		    that.setValue( value );
		    that._trigger( "onChange", null, {value: value, checked: uiIcon.hasClass( "coral-radiolist-item-hightlight" )} );
		}
	},
	_setDisabled: function(disabled) {
		disabled = !!disabled;
		
		this.uiBoxlist.find(".coral-radio").each(function() {
			$(this).toggleClass( "coral-state-disabled", disabled );
			$(this).toggleClass( "tabbable", !disabled );
		});
		
		this.options.disabled = disabled;
	},	
	_setReadonly: function(readonly) {
		readonly = !!readonly;
		
		this.uiBoxlist.find(".coral-radio").each(function() {
			$(this).toggleClass( "coral-readonly", readonly );
			$(this).toggleClass( "tabbable", !readonly );
		});
		
		this.options.readonly = readonly;
	},
	_setIsLabel : function(isLabel){
		isLabel = !!isLabel;
		
		this.uiBoxlist.find(".coral-radio").each(function() {
			$(this).toggleClass( "coral-isLabel", isLabel );
			$(this).toggleClass( "tabbable", !isLabel );
		});
		
		this.options.isLabel = isLabel;
	},
	_setOption: function(key, value) {
		if (key === "id" || key === "name") {
			return ;
		}

		if (key === "disabled") {
			this._setDisabled(value);
		}
		if (key === "readonly") {
			this._setReadonly(value);
		}
		if (key === "isLabel") {
			this._setIsLabel(value);
		}
		this._super(key, value );
	},
	_destroy: function() {
		// ??
		this.component().remove();
		
		if (this.options.name) {
			this.element.removeAttr("orgname").attr("name", this.options.name);
		}
		this.element.removeClass("coral-form-element-radiolist");
		this.element.removeClass("coral-validation-radiolist");
		this.element.show();
	},
	focus: function(){
		//TODO: focus 
	},
	component: function() {
		return this.uiBoxlist;
	},
	disable: function() {
		this._setDisabled(true);
	},
	readonly: function(){
		this._setReadonly(true);
	},
	enable: function() {
		this._setDisabled(false);
	},
	disableItem: function (value) {
		this.uiBoxlist.find( ".coral-radio[value=\"" + value + "\"]" ).toggleClass( "coral-state-disabled", true );
	},
	enableItem: function (value) {
		this.options.disabled = false;
		this.uiBoxlist.find( ".coral-radio[value=\"" + value + "\"]" ).toggleClass( "coral-state-disabled", false );
	},
	show: function() {
		this.component().show();
	},
	hide: function() {
		this.component().hide();
	},	
	getValue: function() {
		return this.uiInput.val();
	},
	setValue: function( value ) {
		value = value || "";
		this.uiBoxlist.find(".coral-radiolist-item-hightlight").each(function() {
			$(this).removeClass("cui-icon-radio-checked coral-radiolist-item-hightlight").addClass("cui-icon-radio-unchecked");
		});
		
		var item = this.uiBoxlist.find(".coral-radio[value=\"" + value + "\"]").find(".coral-radio-icon")
			.removeClass("cui-icon-radio-unchecked").addClass("cui-icon-radio-checked coral-radiolist-item-hightlight");
//		this.uiBoxlist.find(".coral-radio").removeClass("coral-radio-highlight");
//		this.uiBoxlist.find(".coral-radio[value=\"" + value + "\"]").addClass("coral-radio-highlight");
		
		this.uiInput.val( value );	
	},
	// 获取指定项的显示名称
	getText: function (value) {
		var i    = 0, 
		    data = this.data,
		    val  = null,
		    txtArr = [];
		if (!value) {
			value = this.getValue();
		}
		for (; i < data.length; i++) {
			val = data[i][this.options.valueField];
			if (val == value) return (data[i][this.options.textField]);
		}
		return "";
	}
});
;

/*!
 * 组件库4.0.1：进度条
 *
 * 依赖JS文件:
 *   jquery.coral.code.js
 *   jquery.coral.component.js
 */
$.component( "coral.progressbar", {
	version: "4.0.1",
	options: {
		id: null,
		name: null,
		max: 100,
		value: 0,
		text: "{value}%",

		onChange: null,
		onComplete: null
	},

	min: 0,

	_create: function() {
		this.oldValue = this.options.value = this._constrainedValue();

		this.element
			.addClass( "coral-progressbar coral-component coral-corner-all" );

		this.valueDiv = $( "<div class=\"coral-progressbar-value coral-corner-left\"></div>" )
			.appendTo( this.element );
		this.textDiv = $("<div class=\"coral-progressbar-text\"></div>").appendTo(this.valueDiv);
		// 进度条宽度
		this.valueWidth = this.element.width() - (this.valueDiv.outerWidth(true) - this.valueDiv.outerWidth());

		this._refreshValue();
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-progressbar coral-component coral-component-content coral-corner-all" );

		this.valueDiv.remove();
	},

	value: function( newValue ) {
		if ( newValue === undefined ) {
			return this.options.value;
		}

		this.options.value = this._constrainedValue( newValue );
		this._refreshValue();
	},

	_constrainedValue: function( newValue ) {
		if ( newValue === undefined ) {
			newValue = this.options.value;
		}

		this.indeterminate = newValue === false;

		if ( typeof newValue !== "number" ) {
			newValue = 0;
		}
		return (this.indeterminate ? false :
			Math.min( this.options.max, Math.max( this.min, newValue ) ));
	},

	_setOptions: function( options ) {
		var value = options.value;
		delete options.value;

		this._super( options );

		this.options.value = this._constrainedValue( value );
		this._refreshValue();
	},

	_setOption: function( key, value ) {
		if ( key === "max" ) {
			value = Math.max( this.min, value );
		}
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "coral-state-disabled", !!value )
				.attr( "aria-disabled", value );
		}
		this._super( key, value );
	},

	_percentage: function() {
		return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
	},

	_refreshValue: function() {
		var value = this.options.value,
			percentage = this._percentage().toFixed(0),
			text = this.options.text.replace(/{value}/, percentage),
			left = 0, top = 0;

		this.valueDiv
			.toggle( this.indeterminate || value > this.min )
			.toggleClass( "coral-corner-right", value === this.options.max )
			.width(this.valueWidth * percentage / 100);
		
		if (100 == percentage) this.valueDiv.width("auto");
		
		this.textDiv.html(text);
		
		
		left = (this.element.position().left + (this.element.outerWidth()  - this.textDiv.outerWidth()) / 2);
		top  = (this.element.position().top  + (this.element.outerHeight() - this.textDiv.outerHeight())/2);
		
		this.textDiv.position({
			of: this.element,
			my: left + " " + top,
			at: left + " " + top 
		});

		this.element.toggleClass( "coral-progressbar-indeterminate", this.indeterminate );

		if ( this.indeterminate ) {
			if ( !this.overlayDiv ) {
				this.overlayDiv = $( "<div class='coral-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
			}
		} else {
			if ( this.overlayDiv ) {
				this.overlayDiv.remove();
				this.overlayDiv = null;
			}
		}

		if ( this.oldValue !== value ) {
			this.oldValue = value;
			this._trigger( "onChange", null, {value: value, oldValue: this.oldValue});
		}
		if ( value === this.options.max ) {
			this._trigger( "onComplete" );
		}
	}
});
;

$.component( "coral.accordion", {
	version: "4.0.1",
	options: {
		active: 0,
		a: [],
		animate: {params : {},duration : 300,easing  : 'swing'},//在此给动画默认属性赋值
		collapsible: false,
		event: "click",
		header: "> li > :first-child,> :not(li):even",
		heightStyle: "auto",
		icons: {
			activeHeader: "cui-icon-arrow-down3",
			header: "cui-icon-arrow-up3"
		},

		//回调方法
		activate: null,
		beforeActivate: null
	},
	
	hideProps: {
		borderTopWidth: "hide",
		borderBottomWidth: "hide",
		paddingTop: "hide",
		paddingBottom: "hide",
		height: "hide"
	},
		
	showProps: {
		borderTopWidth: "show",
		borderBottomWidth: "show",
		paddingTop: "show",
		paddingBottom: "show",
		height: "show"
	},
		
	_create: function() {
		var options = this.options;
		options.icons = $.coral.toFunction(options.icons);
		this.options.a.push("ddd");
		this.prevShow = this.prevHide = $();
		this.element.addClass( "coral-accordion ctrl-init ctrl-init-accordion coral-component coral-helper-reset" )
			.attr( "role", "tablist" );

		// 当collapsible: false and active: false / null时，必须指定一个展开节点，默认是index:0
		if ( !options.collapsible && (options.active === false || options.active == null) ) {
			options.active = 0;
		}

		this._processPanels();
		if ( options.active < 0 ) {
			options.active += this.headers.length;
		}
		this._refresh();
	},

	_getCreateEventData: function() {
		return {
			header: this.active,
			panel: !this.active.length ? $() : this.active.next()
		};
	},

	_createIcons: function() {
		var that = this, icons = this.options.icons;
		if ( icons ) {
			$( "<span>" )
				.addClass( "coral-accordion-header-icon icon " + icons.header )
				.prependTo( this.headers );
			this.active.children( ".coral-accordion-header-icon" )
				.removeClass( icons.header )
				.addClass( icons.activeHeader );
			this.headers.each(function(){
				var dataOptions = $.parser.parseOptions(this);
				if ( dataOptions.collapsible == false ){
					$(this).children( ".coral-accordion-header-icon" ).remove();
				} else {
					$(this).addClass( "coral-accordion-icons" );
				}
			});
		}
	},

	_destroyIcons: function() {
		this.headers
			.removeClass( "coral-accordion-icons" )
			.children( ".coral-accordion-header-icon" )
				.remove();
	},

	_destroy: function() {
		var contents;

		// 清除主标签上的class
		this.element
			.removeClass( "coral-accordion coral-component coral-helper-reset" )
			.removeAttr( "role" );

		// clean up headers
		this.headers
			.removeClass( "coral-accordion-header coral-accordion-header-active coral-state-default " +
				"coral-corner-all coral-state-active coral-state-disabled coral-corner-top" )			
			.removeAttr( "role" )
			.removeAttr( "aria-expanded" )
			.removeAttr( "aria-selected" )
			.removeAttr( "aria-controls" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();
		this._destroyIcons();

		// clean up content panels
		contents = this.headers.next()
			.removeClass( "coral-helper-reset coral-widget-content coral-corner-bottom " +
				"coral-accordion-content coral-accordion-content-active coral-state-disabled" )
			.css( "display", "" )
			.removeAttr( "role" )
			.removeAttr( "aria-hidden" )
			.removeAttr( "aria-labelledby" )
			.removeUniqueId();
		if ( this.options.heightStyle !== "content" ) {
			contents.css( "height", "" );
		}
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			this._activate( value );
			return;
		}

		if ( key === "event" ) {
			if ( this.options.event ) {
				this._off( this.headers, this.options.event );
			}
			this._setupEvents( value );
		}

		this._super( key, value );

		if ( key === "collapsible" && !value && this.options.active === false ) {
			this._activate( 0 );
		}

		if ( key === "icons" ) {
			this._destroyIcons();
			if ( value ) {
				this._createIcons();
			}
		}

		// #5332 - opacity doesn't cascade to positioned elements in IE
		// so we need to add the disabled class to the headers and panels
		if ( key === "disabled" ) {
			this.element
				.toggleClass( "coral-state-disabled", !!value )
				.attr( "aria-disabled", value );
			this.headers.add( this.headers.next() )
				.toggleClass( "coral-state-disabled", !!value );
		}
	},
		//键盘事件
	_keydown: function( event ) {
		if ( event.altKey || event.ctrlKey ) {
			return;
		}

		var keyCode = $.coral.keyCode,
			length = this.headers.length,
			currentIndex = this.headers.index( event.target ),
			toFocus = false;

		switch ( event.keyCode ) {
			case keyCode.RIGHT:
			case keyCode.DOWN:
				toFocus = this.headers[ ( currentIndex + 1 ) % length ];
				break;
			case keyCode.LEFT:
			case keyCode.UP:
				toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
				break;
			case keyCode.SPACE:
			case keyCode.ENTER:
				this._eventHandler( event );
				break;
			case keyCode.HOME:
				toFocus = this.headers[ 0 ];
				break;
			case keyCode.END:
				toFocus = this.headers[ length - 1 ];
				break;
		}

		if ( toFocus ) {
			$( event.target ).attr( "tabIndex", -1 );
			$( toFocus ).attr( "tabIndex", 0 );
			toFocus.focus();
			event.preventDefault();
		}
	},
	//内容部分事件
	_panelKeyDown : function( event ) {
		if ( event.keyCode === $.coral.keyCode.UP && event.ctrlKey ) {
			$( event.currentTarget ).prev().focus();
		}
	},

	refresh: function() {
		var options = this.options;
		this._processPanels();

		if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
			options.active = false;
			this.active = $();
		// active false only when collapsible is true
		} else if ( options.active === false ) {
			this._activate( 0 );
		// was active, but active panel is gone
		} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
			if ( this.headers.length === this.headers.find(".coral-state-disabled").length ) {
				options.active = false;
				this.active = $();
			} else {
				this._activate( Math.max( 0, options.active - 1 ) );
			}
		} else {
			options.active = this.headers.index( this.active );
		}

		this._destroyIcons();

		this._refresh();
	},

	_processPanels: function() {
		//为头部<h>添加class
		this.headers = this.element.find( this.options.header )
			.addClass( "coral-accordion-header coral-state-default coral-corner-all" );
		//为内容<div>添加class
		this.headers.next()
			.addClass( "coral-accordion-content coral-helper-reset coral-component-content coral-corner-bottom" )
			.filter(":not(.coral-accordion-content-active)")
			.hide();
	},

	_refresh: function() {
		
		var maxHeight,
			options = this.options,
			heightStyle = options.heightStyle,
			parent = this.element.parent();
		//为激活状态下的头部<h>添加class
		this.active = this._findActive( options.active )
			.addClass( "coral-accordion-header-active coral-state-active coral-corner-top" )
			.removeClass( "coral-corner-all" );
		//为激活状态下的内容<div>添加class
		this.active.next()
			.addClass( "coral-accordion-content-active" )
			.show();
		//为头部添加属性role=tab
		this.headers
			.attr( "role", "tab" )
			.each(function() {
				var header = $( this ),
					headerId = header.uniqueId().attr( "id" ),
					panel = header.next(),
					panelId = panel.uniqueId().attr( "id" );
				header.attr( "aria-controls", panelId );
				panel.attr( "aria-labelledby", headerId );
			})
			.next()
				.attr( "role", "tabpanel" );

		this.headers
			.not( this.active )
			.attr({
				"aria-selected": "false",
				"aria-expanded": "false",
				tabIndex: -1
			})
			.next()
				.attr({
					"aria-hidden": "true"
				})
				.hide();

		if ( !this.active.length ) {
			this.headers.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active.attr({
				"aria-selected": "true",
				"aria-expanded": "true",
				tabIndex: 0
			})
			.next()
				.attr({
					"aria-hidden": "false"
				});
		}
		//为头部<h>添加图标
		this._createIcons();
		//为头部<h>绑定事件
		this._setupEvents( options.event );
		//自动填充满高度
		if ( heightStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			//父元素高度
			maxHeight = parent.height();
			//以父元素高度为基础，减去兄弟元素的高度
			this.element.siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});
			//再减去所有头部<h>的高度
			this.headers.each(function() {
				maxHeight -= $( this ).outerHeight( true );
			});
			//为内容部分设置高度与浮动
			this.headers.next()
				.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				//.css( "overflow", "auto" );
				.addClass( "coral-scroll" );
		} else if ( heightStyle === "auto" ) {
			$.coral.fitParent(this.component(), false);
			//以内容自身高度填充
			maxHeight = 0;
			this.headers.next()
				.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
				})
				.height( maxHeight );
		}
		this.headers.each(function(){
			var dataOptions = $.parser.parseOptions(this);
			if ( dataOptions.collapsible == false ){
				$(this).next().addClass("hidden");
			}
		});
	},

	_activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		if ( active === this.active[ 0 ] ) {
			return;
		}

		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},

	_setupEvents: function( event ) {
		var events = {
			keydown: "_keydown"
		};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.headers.add( this.headers.next() ) );
		this._on( this.headers, events );
		this._on( this.headers.next(), { keydown: "_panelKeyDown" });
		this._hoverable( this.headers );
		this._focusable( this.headers );
	},
	
	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			clicked = $( event.currentTarget ),
			//判断是否选中激活状态中的头部<h>
			clickedIsActive = clicked[ 0 ] === active[ 0 ],
			//折叠标志true/false
			collapsing = clickedIsActive && options.collapsible,
			//展开内容
			toShow = collapsing ? $() : clicked.next(),
			//隐藏内容                        
			toHide = active.next(),
			eventData = {
				oldHeader: active,
				oldPanel: toHide,
				newHeader: collapsing ? $() : clicked,
				newPanel: toShow,
				headerOptions: $.parser.parseOptions( (collapsing ? $() : clicked) )
			};

		event.preventDefault();

		if (
				// 点击的是激活状态头部，并且参数设置collapsible为false，则返回
				( clickedIsActive && !options.collapsible ) ||
				// 允许运行激活前的回调函数
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.headers.index( clicked );
		this.active = clickedIsActive ? $() : clicked;
		//动态效果
		this._toggle( eventData );

		//针对激活状态头部<h>切换class
		active.removeClass( "coral-accordion-header-active coral-state-active" );
		if ( options.icons ) {
			active.children( ".coral-accordion-header-icon" )
				.removeClass( options.icons.activeHeader )
				.addClass( options.icons.header );
		}
		//如果点击的不是激活状态头部<h>，则切换class
		if ( !clickedIsActive ) {
			clicked
				.removeClass( "coral-corner-all" )
				.addClass( "coral-accordion-header-active coral-state-active coral-corner-top" );
			if ( options.icons ) {
				clicked.children( ".coral-accordion-header-icon" )
					.removeClass( options.icons.header )
					.addClass( options.icons.activeHeader );
			}

			clicked
				.next()
				.addClass( "coral-accordion-content-active" );
		}
	},

	_toggle: function( data ) {
		var toShow = data.newPanel,
			toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

		// 针对正在运行的动画效果，停止当前队列中的所有动画
		this.prevShow.add( this.prevHide ).stop( true, true );
		this.prevShow = toShow;
		this.prevHide = toHide;
		//animate : {}有动画效果
		if ( this.options.animate ) {
			this._animate( toShow, toHide, data );
		} else {//animate : null无动画效果
			toHide.hide();
			toShow.show();
			//切换class
			this._toggleComplete( data );
		}

		toHide.attr({
			"aria-hidden": "true"
		});
		toHide.prev().attr( "aria-selected", "false" );
		if ( toShow.length && toHide.length ) {
			toHide.prev().attr({
				"tabIndex": -1,
				"aria-expanded": "false"
			});
		} else if ( toShow.length ) {
			this.headers.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow
			.attr( "aria-hidden", "false" )
			.prev()
				.attr({
					"aria-selected": "true",
					tabIndex: 0,
					"aria-expanded": "true"
				});
	},

	_animate: function( toShow, toHide, data ) {
		var total, easing, duration,
			that = this,
			adjust = 0,
			down = toShow.length &&
				( !toHide.length || ( toShow.index() < toHide.index() ) ),
			animate = this.options.animate || {},
			options = down && animate.down || animate,
			//动画结束后的回调函数，主要处理切换class
			complete = function() {
				that._toggleComplete( data );
			};

		if ( typeof options === "number" ) {
			duration = options;
		}
		if ( typeof options === "string" ) {
			easing = options;
		}
		// 使用options.easing赋值
		easing = easing || options.easing || animate.easing;
		// 使用options.duration赋值
		duration = duration || options.duration || animate.duration;
		//当所有内容都已关闭时，直接展开当前点击的内容
		if ( !toHide.length ) {
			return toShow.animate( this.showProps, duration, easing, complete );
		}
		//当其他内容都已关闭时，直接关闭当前点击的内容
		if ( !toShow.length ) {
			return toHide.animate( this.hideProps, duration, easing, complete );
		}

		total = toShow.show().outerHeight();
		//当既有需要关闭的内容，也有需要展开的内容时，执行以下代码
		//关闭内容的动画
		toHide.animate( this.hideProps, {
			duration: duration,
			easing: easing,
			step: function( now, fx ) {
				fx.now = Math.round( now );
			}
		});
		//展开内容的动画
		toShow
			.hide()
			.animate( this.showProps, {
				duration: duration,
				easing: easing,
				complete: complete,
				step: function( now, fx ) {
					fx.now = Math.round( now );
					if ( fx.prop !== "height" ) {
						adjust += fx.now;
					} else if ( that.options.heightStyle !== "content" ) {
						//fx.now = Math.round( total - toHide.outerHeight() - adjust );
						adjust = 0;
					}
				}
			});
	},

	_toggleComplete: function( data ) {
		var toHide = data.oldPanel;

		toHide
			.removeClass( "coral-accordion-content-active" )
			.prev()
				.removeClass( "coral-corner-top" )
				.addClass( "coral-corner-all" );

		if ( toHide.length ) {
			toHide.parent()[0].className = toHide.parent()[0].className;
		}
		this._trigger( "onActivate", null, data );
	}
});
;

/*!
 * 组件库4.0： 窗体
 *
 * 依赖JS文件:
 *	jquery.coral.core.js
 *	jquery.coral.component.js
 *	jquery.coral.mouse.js
 *  jquery.coral.button.js
 *	jquery.coral.draggable.js
 *	jquery.coral.position.js
 *	jquery.coral.resizable.js
 */
(function() {

var sizeRelatedOptions = {
		buttons: true,
		height: true,
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true,
		width: true
	},
	resizableRelatedOptions = {
		maxHeight: true,
		maxWidth: true,
		minHeight: true,
		minWidth: true
	},
	timer = null;

$.component("coral.dialog", {
	version: "@version",
	castProperties : ["buttons","position"],
	options: {
		appendTo: "body",
		autoOpen: true,
		buttons: [],
		closeOnEscape: true,
		closeText: "关闭",
		closeButtonClass: "cui-icon-cross2",	
		closable: true,// 是否可关闭，出现关闭图标
		loadtext: "加载中，请耐心等候 ...", // 20141230 - haibo lee
		maximumText: "最大化",
		maximizable: false,// 是否出现最大化按钮
		maximized: false, // default maxized or not
		minimizable: false,// 是否出现最小化按钮
		minimized: false, // default maxized or not
		minimizText: "最小化",
		restoreWidth: 200,
		restoreHeight: 200,
		dialogClass: "",
		iframePanel: false,
		draggable: true,
		animateType:null,
		hide: null,
		delay:"800",
		height: "auto",
		percent: false,
		manualResize: false,
		maxHeight: null,
		maxWidth: null,
		minHeight: 150,
		minWidth: 150,
		modal: false,
		zIndex: null,
		timeOut: 0,
		position: {
			my: "center",
			at: "center",
			of: window,
			collision: "fit",
			using: function(pos) {
				var topOffset = $(this).css(pos).offset().top;
				if (topOffset < 0) {
					$(this).css("top", pos.top - topOffset);
				}
			}
		},
		resizable: true,
		show: null,
		title: null,
		subTitle:null,
		type: null, //消息类型："info" "warn" "error" "question"
		wtype: "dialog", //窗体类型："dialog" "message" "alert" "confirm"
		message: null,
		width: 300,
		url: "",
		contentType: "",
		reLoadOnOpen: false,
		postData: [],
		asyncType: "post",//Ajax 的 http 请求模式
		/*titleFormat: function(titles) {
			var title = titles.split('-');
			var title1 = "<span class='coral-dialog-mainTitle'>"+title[0]+"</span>";
			var title2 = "<span class='coral-dialog-subTitle'>"+title[1]+"</span>";
			return title1+title2;
		},*/
		// 事件
		beforeClose: null,
		onCreate: null,
		onClose: null,
		onDrag: null,
		onDragStart: null,
		onDragStop: null,
		onFocus: null,
		onLoad: null,
		onLoadError: null,
		onOpen: null,
		onResize: null,
		onResizeStart: null,
		onResizeStop: null,
		onConfirm: null,
		onCancel : null,
		focusInput : false
		
	},
	_compatible: function() {
		this.options.reloadOnOpen = this.options.reLoadOnOpen;
	},
	_create: function() {
		this._compatible();
		var that = this, animateArr = [];
		var re =/^(\d|[1-9]\d|100)%$/;
		if (re.test(this.options.height)) {
			this.options.percent = this.options.height;
			this.options.height = this._percentToPx();
		}
		
		if ($.inArray(this.options.wtype, ["dialog", "message", "alert", "confirm"]) < 0) {
			this.options.wtype = "dialog";
		}
		
		if (this.options.wtype !== "dialog") {
			this.options.minHeight = null;
		}
		this.originalCss = {
			display: this.element[0].style.display,
			width: this.element[0].style.width,
			minHeight: this.element[0].style.minHeight,
			maxHeight: this.element[0].style.maxHeight,
			height: this.element[0].style.height
		};
		this.originalPosition = {
			parent: this.element.parent(),
			index: this.element.parent().children().index( this.element )
		};
		this.originalTitle = this.element.attr("title");
		this.options.title = this.options.title || this.originalTitle;
		this.originalsubTitle = this.element.attr("subTitle");
		this.options.subTitle = this.options.subTitle || this.originalsubTitle;
		animateArr = ["slideTop","slideBottom","slideLeft","slideRight"];
		if($.inArray(this.options.animateType, animateArr) > -1) {
			this.animate = true;
		}
		this._createWrapper();
		var contentCls = this.options.isMessage ? "alert-box" : "coral-dialog-content";
		this.element
			.show()
			.removeAttr("title")
			.addClass(contentCls + " coral-component-content")
			.appendTo(this.uiDialog);
		
		if (this.options.wtype !== "dialog") {
			this.uiDialog.addClass("coral-messager");
		}

		switch (this.options.wtype) {
			case "alert":
				this._createTitlebar();
				this._createButtonPanel();
				break;
			case "message":
				break;
			case "confirm":
				this._createTitlebar();
				this._createButtonPanel();
				break;
			case "dialog":
				this._createTitlebar();
				this._createButtonPanel();
		}
		
		if (this.options.draggable && $.fn.draggable) {
			this._makeDraggable();
		}
		if (this.options.resizable && $.fn.resizable) {
			this._makeResizable();
		}
		this._isOpen = false;
		this._trackFocus();
	},

	_init: function() {
		if (this.options.autoOpen) {
			this.open();
		}
	},

	_appendTo: function() {
		var element = this.options.appendTo;
		if (typeof element == "string" && element == "parent"){
			return this.originalPosition.parent;
		}
		if (element && (element.jquery || element.nodeType)) {
			return $(element);
		}
		return this.document.find(element || "body").eq(0);
	},
	/**
	 * 强制销毁dialog
	 */
	forceDestroy: function() {
		var that = this;
		this._destroy(true);
	},
	_destroy: function(forceDestroy) {
		var next,
			originalPosition = this.originalPosition;
		this._destroyOverlay();
		this.element
			.removeUniqueId()
			.removeClass("coral-dialog-content coral-component-content")
			.css(this.originalCss)
			.detach();

		this.uiDialog.stop(true, true).remove();
		if (this.options.iframePanel) {
			this.iframePanel.stop(true, true).remove();
		}
		if (!forceDestroy) {
			if (this.originalTitle) {
				this.element.attr("title", this.originalTitle);
			}
			next = originalPosition.parent.children().eq(originalPosition.index);
			if (next.length && next[0] !== this.element[0]) {
				next.before(this.element);
			} else {
				originalPosition.parent.append(this.element);
			}
		}
	},

	component: function() {
		return this.uiDialog;
	},

	disable: $.noop,
	enable: $.noop,
	minimize: function() {
		var activeElement,
			that = this,
			next,
			originalPosition = this.originalPosition;
		
		// hide first, or it will influence the auto fit
		// it must be hide first, then move the dialog to the original position
		// or it will be overflow the parent dom, and chrome will has scroll bar
		this._hide(this.uiDialog, this.options.hide, function() {
			next = originalPosition.parent.children().eq(originalPosition.index);
			if (next.length && next[0] !== that.element[0]) {
				next.before(that.uiDialog);
			} else {
				originalPosition.parent.append(that.uiDialog);
			}
			
			that._isOpen = false;
			that._focusedElement = null;
			that._destroyOverlay();
			that._untrackInstance();
			if ($.inArray(that.options.wtype, ["dialog","alert","confirm"]) > -1) {
				if (that.opener.length && that.opener[0].tagName.toLowerCase() != "object" && 
						!that.opener.filter(":focusable").focus().length) {
					// support: IE9
					// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
					try {
						activeElement = that.document[0].activeElement;
						
						// Support: IE9, IE10
						// If the <body> is blurred, IE will switch windows, see #4520
						if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {
							
							// Hiding a focused element doesn't trigger blur in WebKit
							// so in case we have nothing to focus on, explicitly blur the active element
							// https://bugs.webkit.org/show_bug.cgi?id=47182
							$(activeElement).blur();
						}
					} catch (error) {}
				}
			}
	
			if ("dialog" !== that.options.wtype) {
				that.element.remove();
			}
			that._trigger("onMinimize", event);
		});	
		if(this.options.iframePanel){
			this.iframePanel.hide();
		}
	},
	close: function(event) {
		var activeElement,
			that = this,
			next,
			optsHide = this.options.hide,
			originalPosition = this.originalPosition;
		if(this.animate){
			if(that.uiDialog.hasClass("in")){
				that.uiDialog.removeClass("in");
//				setTimeout(function(){
//					that.uiDialog.removeClass(that.options.animateType);
//				},800)
			}
			optsHide = this.options;
		}
		if (this.options.reLoadOnOpen) {
			this.loaded = false;
		}
		if (!this._isOpen || this._trigger("beforeClose", event) === false) {
			return;
		}
		// dialog must remove first then clear the content
		// or the flash method call is undefined, the flash can not be destroy.
		//关闭就销毁
		if (that.options.destroyOnClose) {
			that.element.html("");
		}
		//有url的情况下才销毁 autoDestroy为true说明
		if (that.options.url != "" && that.options.reLoadOnOpen && that.options.autoDestroy) {
			that.element.html("");
		}
		// hide first, or it will influence the auto fit
		// it must be hide first, then move the dialog to the original position
		// or it will be overflow the parent dom, and chrome will has scroll bar
		this._hide(this.uiDialog, optsHide, function() {
			next = originalPosition.parent.children().eq(originalPosition.index);
			if (next.length && next[0] !== that.element[0]) {
				next.before(that.uiDialog);
			} else {
				originalPosition.parent.append(that.uiDialog);
			}
			
			that._isOpen = false;
			that._focusedElement = null;
			that._destroyOverlay();
			that._untrackInstance();
			if ($.inArray(that.options.wtype, ["dialog","alert","confirm"]) > -1) {
				if (that.opener.length && that.opener[0].tagName.toLowerCase() != "object" && 
						!that.opener.filter(":focusable").focus().length) {
					// support: IE9
					// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
					try {
						activeElement = that.document[0].activeElement;
						
						// Support: IE9, IE10
						// If the <body> is blurred, IE will switch windows, see #4520
						if (activeElement && activeElement.nodeName.toLowerCase() !== "body") {
							
							// Hiding a focused element doesn't trigger blur in WebKit
							// so in case we have nothing to focus on, explicitly blur the active element
							// https://bugs.webkit.org/show_bug.cgi?id=47182
							$(activeElement).blur();
						}
					} catch (error) {}
				}
			}
			
			if ("dialog" !== that.options.wtype) {
				that.element.remove();
			}
			that._trigger("onClose", event);
		});	
		if(this.options.iframePanel){
			this.iframePanel.hide();
		}
	},

	isOpen: function() {
		return this._isOpen;
	},

	moveToTop: function() {
		this._moveToTop();
	},

	_moveToTop: function(event, silent) {
		var moved = false,
		zIndicies = this.uiDialog.siblings(".coral-front:visible").map(function() {
			return +$( this ).css("z-index");
		}).get(),
		zIndexMax = Math.max.apply(null, zIndicies);
		
		if (zIndexMax >= +this.uiDialog.css("z-index")) {
			this.uiDialog.css("z-index", zIndexMax + 1);
			if(this.options.iframePanel){
				this.iframePanel.css("z-index", zIndexMax + 1);
			}
			moved = true;
		}
		
		if (moved && !silent) {
			this._trigger("onFocus", event);
		}
		return moved;
	},
	reload: function() {
		var that = this,
			eventData = {
				panel: that.element
			};
		var canRequest = this.options.url;
		if (canRequest) {
			$(that.element).loading({
				position:   "overlay",
				text:       "加载中，请耐心等候！"
			});
			that.loaded = true;
			$.ajax({
				url: this.options.url,
				type: this.options.asyncType,
				dataType: "html" ,
				data: this.options.postData,
				success: function(data, st, xhr) {
					$(that.element).loading("hide");
					that.element.html(data);
					$(that.element).loading({
						text:       "渲染中，请耐心等候！",
						position:   "overlay"
					});
					/*if ($.coral.openTag == true) {
					}*/
					$.parser.parse(that.element);
					$(that.element).loading("hide");
					//that.hideLoading(); // loading end
					that._trigger ("onLoad", null, eventData);
					//$.coral.refreshAllComponent(that.element);
				},
				error: function(xhr,st,err) {
					that._trigger ("onLoadError", null, [{xhr:xhr,st:st,err:err}]);
				},
				beforeSend: function(xhr, settings ) {
					
				}
			});
		}
	},
	open: function() {
		var that = this,
			eventData = {
				panel: that.element
			};
		this.uiDialog.appendTo(this._appendTo());
		var canRequest = this.options.url && !that.loaded;
		if (canRequest) {
			$(that.element).loading({
				position:   "overlay",
				text:       "加载中，请耐心等候！"
			});
			that.loaded = true;
			$.ajax({
				contentType: this.options.contentType,
				url: this.options.url,
				type: this.options.asyncType,
				dataType: "html" ,
				data: this.options.postData,
				success: function(data, st, xhr) {
					$(that.element).loading("hide");
					that.element.html(data);
					$(that.element).loading({
						text:       "渲染中，请耐心等候！",
						position:   "overlay"
					});
					/*if ($.coral.openTag == true) {
					}*/
					$.parser.parse(that.element);
					$(that.element).loading("hide");
					//that.hideLoading(); // loading end
					that._trigger ("onLoad", null, eventData);
					//$.coral.refreshAllComponent(that.element);
				},
				error: function(xhr,st,err) {
					that._trigger ("onLoadError", null, [{xhr:xhr,st:st,err:err}]);
				},
				beforeSend: function(xhr, settings ) {
					
				}
			});
		}
		timer = null;
		if (this._isOpen) {
			if (this._moveToTop()) {
				if ($.inArray(that.options.wtype, ["dialog","alert", "confirm"]) > -1) {
					this._focusTabbable();
				}
			}
			return;
		}
		this._isOpen = true;
		this.opener = $(this.document[0].activeElement);

		this._size();
		if(this.animate){
			setTimeout(function(){
				that.uiDialog.addClass("in");
			},0)
		} else {
			this._position();
		}
		this._createOverlay();
		this._moveToTop(null, true);
		
		// Ensure the overlay is moved to the top with the dialog, but only when
		// opening. The overlay shouldn't move after the dialog is open so that
		// modeless dialogs opened after the modal dialog stack properly.
		if (this.overlay) {
			this.overlay.css("z-index", this.uiDialog.css("z-index") - 1);
			if(this.options.iframePanel){
				this.overlay.css("z-index", this.iframePanel.css("z-index") - 1);
			}
		}
		
		this._show (this.uiDialog, this.options.show, function() {
			if ($.inArray(that.options.wtype, ["dialog","alert", "confirm"]) > -1) {
				that._focusTabbable();
			}
			if (!canRequest) {
				$.coral.refreshAllComponent(that.element);//added 
			} else {
				$(that.element).loading("refresh");// 打开后重新设置对话框里面的loading的高度。
			}
			if(that.options.iframePanel){
				that.iframePanel.show();
				that.iframePanel.css("width",that.uiDialog.outerWidth());
			}
			that._trigger("onFocus");
		});
		// Track the dialog immediately upon openening in case a focus event
		// somehow occurs outside of the dialog before an element inside the
		// dialog is focused (#10152)
		this._makeFocusTarget();
		
		this._trigger("onOpen");
		
		if (!isNaN(this.options.timeOut) && this.options.timeOut > 0) {
			timer = setTimeout(_close, that.options.timeOut);
			
			this.uiDialog.hover(function() {
				if (timer) {
					clearTimeout(timer);
				}
			}, function() {
				timer = setTimeout(_close, that.options.timeOut);
			});
		}
		
		function _close () {
			that.close();
		}
	},

	_focusTabbable: function() {
		// Set focus to the first match:
		// 1. An element that was focused previously
		// 2. First element inside the dialog matching [autofocus]
		// 3. Tabbable element inside the content element
		// 4. Tabbable element inside the buttonpane
		// 5. The close button
		// 6. The dialog itself
		
		var hasFocus = this._focusedElement;
		if (this.options.focusInput === true) {
			this._focusFirst();
			return;
		}
		if (!hasFocus) {
			hasFocus = this.element.find( "[autofocus]" );
		}
		if (!hasFocus.length) {
			hasFocus = this.element.find(":tabbable");
		}
		if (!hasFocus.length && this.uiDialogButtonPane) {
			hasFocus = this.uiDialogButtonPane.find(":tabbable");
		}
		if (!hasFocus.length && this.uiDialogTitlebarClose) {
			hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
		}
		if (!hasFocus.length) {
			hasFocus = this.uiDialog;
		}
		hasFocus.eq(0).focus();
	},
	_findFields : function(){
		return $.coral.findComponent(".ctrl-form-element", this.element);
	},
	_focusFirst: function() {
		var that = this,
			fields = this._findFields();
		
		for (var i in fields) {
			var instance = fields[i];
			if (instance.focus && true == instance.focus()) return;		
		}
	},
	_keepFocus: function(event) {
		function checkFocus() {
			var activeElement = this.document[0].activeElement,
				isActive = this.uiDialog[0] === activeElement ||
					$.contains(this.uiDialog[0], activeElement);
			if (!isActive) {
				this._focusTabbable();
			}
		}
		event.preventDefault();
		checkFocus.call(this);
		this._delay(checkFocus);
	},

	_createWrapper: function() {
		this.uiDialog = $("<div>")
			.addClass("coral-dialog coral-component coral-component-content coral-corner-all coral-front " +
				this.options.dialogClass)
			.hide()
			.attr({
				tabIndex: -1,
				role: "dialog"
			})
			//.appendTo( this._appendTo() );
			.appendTo( this.element.parent() );
		if(this.animate){
			this.uiDialog.addClass(this.options.animateType);
		}
		if (this.options.iframePanel) {
			this.iframePanel = $("<iframe class='coral-dialog-iframePanel' style='position:absolute;'></iframe>")
			.hide()
			.appendTo(this._appendTo());
		}
		if (this.options.zIndex) {
			this.uiDialog.css("z-index", this.options.zIndex);
			if (this.options.iframePanel) {
				this.iframePanel.css("z-index", this.options.zIndex);
			}
		}

		this._on(this.uiDialog, {
			keydown: function(event) {
				if (this.options.closeOnEscape && !event.isDefaultPrevented() && 
						event.keyCode && event.keyCode === $.coral.keyCode.ESCAPE) {
					event.preventDefault();
					this.close(event);
					return;
				}

				if (event.keyCode !== $.coral.keyCode.TAB || event.isDefaultPrevented()) {
					return;
				}
				var tabbables = this.uiDialog.find(":tabbable"),
					first = tabbables.filter(":first"),
					last  = tabbables.filter(":last");

				if ((event.target === last[0] || event.target === this.uiDialog[0] ) && 
						!event.shiftKey) {
					this._delay(function() {
						first.focus();
					});
					event.preventDefault();
				} else if ((event.target === first[0] || event.target === this.uiDialog[0]) && 
						event.shiftKey) {
					this._delay(function() {
						last.focus();
					});
					event.preventDefault();
				}
			},
			mousedown: function (event) {
				if ( this._moveToTop(event)) {
					this._focusTabbable();
				}
			}
		});

		if (!this.element.find("[aria-describedby]").length) {
			this.uiDialog.attr({
				"aria-describedby": this.element.uniqueId().attr("id")
			});
		}
	},
	_createTitlebar: function() {
		var options = this.options,
			uiDialogTitle;
			
		this.uiDialogTitlebar = $("<div>")
			.addClass ("coral-dialog-titlebar coral-component-header coral-corner-all coral-helper-clearfix")
			.prependTo(this.uiDialog);
		this.uiDialogToolbar = $("<div>")
			.addClass ("coral-dialog-toolbar coral-corner-all coral-helper-clearfix")
			.appendTo (this.uiDialogTitlebar);
		this._on(this.uiDialogTitlebar, {
			mousedown: function(event) {
				if (!$(event.target).closest(".coral-dialog-toolbar-close") && 
					!$( event.target ).closest(".coral-dialog-toolbar-maximum")) {
					this.uiDialog.focus();
				}
			}
		});
		
		if (this.options.minimizable) {
			// 添加 最大化 功能
			this.uiDialogTitlebarMaximum = $("<button type='button'></button>")
				.button({
					label: "&nbsp;",
					icons: {
						primary: "cui-icon-minus3"
					},
					text: false
				})
				.addClass("coral-dialog-toolbar-minimize")
				.appendTo(this.uiDialogToolbar);
			/*this._on(this.uiDialogTitlebarMaximum, {
				click: function(event) {
					event.preventDefault();
					this.minimize();
				}
			});*/
		}
		
		if (this.options.maximizable) {
			// 添加 最大化 功能
			this.uiDialogTitlebarMaximum = $("<button type='button'></button>")
				.button({
					label: this.options.maximumText,
					icons: {
						primary: "cui-icon-enlarge7"
					},
					text: false
				})
				.addClass("coral-dialog-toolbar-maximum")
				.appendTo(this.uiDialogToolbar);
			/*this._on(this.uiDialogTitlebarMaximum, {
				click: function(event) {
					event.preventDefault();
					if (!this.uiDialog.hasClass( "coral-dialog-maximum")) {
						this.maximize();
					} else {
						this.restore();	
					}
					$.coral.refreshAllComponent(this.element);
				}
			});*/
		}
		
		// support: IE
		// Use type="button" to prevent enter keypresses in textboxes from closing the
		// dialog in IE (#9312)	
		if (this.options.closable) {
			this.uiDialogTitlebarClose = $("<button type='button'></button>")
				.button({
					label: this.options.closeText,
					icons: {
						primary: this.options.closeButtonClass
					},
					text: false
				})
				.addClass("coral-dialog-toolbar-close")
				.appendTo(this.uiDialogToolbar);
			/*this._on(this.uiDialogTitlebarClose, {
				click: function(event) {
					var $this = $(event.target); 
					$this.removeClass("coral-state-hover");
					event.preventDefault();
					this.close( event );
				}
			});*/
		}
		this._on(this.uiDialogTitlebar, {
			click: function(event) {
				if ($(event.target).closest(".coral-dialog-toolbar-minimize").length) {
					this.minimize();
				}
				if ($(event.target).closest(".coral-dialog-toolbar-close").length) {
					var $this = $(event.target); 
					$this.removeClass("coral-state-hover");
					event.preventDefault();
					this.close( event );
				}
				if ($(event.target).closest(".coral-dialog-toolbar-maximum").length) {
					if (!this.uiDialog.hasClass( "coral-dialog-maximum")) {
						this.maximize();
					} else {
						this.restore();	
					}
					$.coral.refreshAllComponent(this.element);
				}
			}
		});
		uiDialogTitle = $("<span>")
			.uniqueId()
			.addClass("coral-dialog-title")
			.prependTo( this.uiDialogTitlebar );
		this._title( uiDialogTitle );
		
		uiDialogsubTitle = $("<span>")
			.uniqueId()
			.addClass("coral-dialog-subTitle")
			.prependTo( this.uiDialogTitlebar );
	
		this._subTitle( uiDialogsubTitle );
		this.uiDialog.attr({
			"aria-labelledby": uiDialogTitle.attr("id")
		});
		// 初始化时，最大化 dialog
		if (this.options.maximizable && this.options.maximized) {
			this.maximize();
			$.coral.refreshAllComponent( this.element );
		}
	},
	
	maximize: function(isInit){
		var options = this.options;
		options.restoreHeight = options.height;
		options.restoreWidth = options.width;
		$(this.element).dialog("option", "width", $(window).width());
		$(this.element).dialog("option", "height", $(window).height());
		this.uiDialog.addClass("coral-dialog-maximum");
		this.uiDialogTitlebarMaximum
			.find(".cui-icon-enlarge7")
			.removeClass("cui-icon-enlarge7")
			.addClass("cui-icon-shrink7");
		if (this.options.iframePanel) {
			this.iframePanel.css({
				"width": $(window).width(),
				"height": $(window).height()
			})
		}
		this._trigger("onMaximize", null, {
			"width": $(window).outerWidth(),
			"height": $(window).outerHeight()
		} );
	},
	
	restore: function(){
		var that = this,
		options = this.options;
		
		$(that.element).dialog("option", "width", options.restoreWidth);
		$(that.element).dialog("option", "height", options.restoreHeight);
		that.uiDialog.removeClass("coral-dialog-maximum");
		if (this.options.iframePanel) {
			this.iframePanel.css({
				"width": options.restoreWidth,
				"height": options.restoreHeight
			});
			this.iframePanel.position(options.position);
		}
		this._resetMaximizeIcon();
		this._trigger("onRestore", null, {
			"width": $(window).outerWidth(),
			"height": $(window).outerHeight()
		} );
	},	
	_resetMaximizeIcon: function() {
		if (this.uiDialogTitlebarMaximum) {
			this.uiDialogTitlebarMaximum.find(".cui-icon-shrink7").removeClass("cui-icon-shrink7").addClass("cui-icon-enlarge7");
		}
	},
	_title: function( title ) {
		var formatterEvent = $.coral.toFunction(this.options.titleFormat);
		if ( !this.options.title ) {
			title.html("&#160;");
		}
		if (formatterEvent) {
			title.html( formatterEvent.call(this.element, this.options.title) );
		} else {
			title.text( this.options.title );
		}
	},
	
	_subTitle: function(subTitle){
		if( !this.options.subTitle ) {
			subTitle.html("&#160;");
		}
		subTitle.text( this.options.subTitle );
	},
	
	_createButtonPanel: function() {
		this.uiDialogButtonPane = $("<div>")
			.addClass("coral-dialog-buttonpane coral-component-content coral-helper-clearfix");

		this.uiButtonSet = $("<div>")
			.addClass("coral-dialog-buttonset")
			.appendTo( this.uiDialogButtonPane );

		this._createButtons();
	},

	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons,
			cancelEvent = $.noop,
			confirmEvent= $.noop;

		// 删除已有的按钮区
		this.uiDialogButtonPane.remove();
		this.uiButtonSet.empty();
		
		if ( $.isEmptyObject( buttons ) ) buttons = {};
		/*if (this.options.oncancel) {
			cancelEvent = function() { 
				that._trigger("onCancel");
				if (that._isOpen) that.close();
			};
			if ($.isArray( buttons )) {
				buttons.push({text : "取消", click: cancelEvent});
			} else {
				buttons["取消"] = cancelEvent;
			}
		}
		if (this.options.onConfirm) {
			confirmEvent = function() { 
				that._trigger("onConfirm");
				if (that._isOpen) that.close();
			};
			if ($.isArray( buttons )) {
				buttons.push({text : "确定", click: confirmEvent});
			} else {
				buttons["确定"] = confirmEvent;
			}
		}*/

		if ( ($.isArray( buttons ) && !buttons.length) ) {
			this.uiDialog.removeClass("coral-dialog-buttons");
			return;
		}
		var primary = true;
		$.each( buttons, function( name, props ) {
			var click, buttonOptions, btnPrimary = "coral-btn-primary";
			props = $.isFunction( props ) ? { click: props, text: name } : props;
			props = $.extend( { type: "button" }, props );
			
			click = props.click;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			
			buttonOptions = {
				icons: props.icons,
				icons: props.cls,
				countdown: props.countdown,
				text: props.showText
			};
			if ( props.id ) {
				buttonOptions.id = props.id;
			}
			if(primary){
				buttonOptions = $.extend({},buttonOptions,{cls: btnPrimary + " " + props.cls});
			} else {
				buttonOptions = $.extend({},buttonOptions,{cls: props.cls});
			}
			delete props.icons;
			delete props.cls;
			delete props.showText;
			$( "<button></button>", props ).button( buttonOptions ).appendTo( that.uiButtonSet );
			primary = false;
		});
		
		this.uiDialog.addClass("coral-dialog-buttons");
		this.uiDialogButtonPane.appendTo( this.uiDialog );
	},

	_makeDraggable: function() {
		var that = this,
			options = this.options;

		function filteredUi( ui ) {
			return {
				position: ui.position,
				offset: ui.offset
			};
		}

		this.uiDialog.draggable({
			cancel: ".coral-dialog-content, .coral-dialog-toolbar-close",
			handle: ".coral-dialog-titlebar",
			containment: "document",
			start: function( event, ui ) {
				$( this ).addClass("coral-dialog-dragging");
				that._blockFrames();
				if (that.options.iframePanel) {
					that.iframePanel.css(ui.position);
				}
				that._trigger( "onDragStart", event, filteredUi( ui ) );
			},
			drag: function( event, ui ) {
				if (that.options.iframePanel) {
					that.iframePanel.css(ui.position);
				}
				that._trigger( "onDrag", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var left = ui.offset.left - that.document.scrollLeft(),
					top = ui.offset.top - that.document.scrollTop();
				
				options.position = {
						my: "left top",
						at: "left" + (left >= 0 ? "+" : "") + left + " " +
							"top" + (top >= 0 ? "+" : "") + top,
						of: that.window
				};
				$( this ).removeClass("coral-dialog-dragging");
				if (that.options.iframePanel) {
					that.iframePanel.position(options.position);
				}
				that._unblockFrames();
				that._trigger( "onDragStop", event, filteredUi( ui ) );
			}
		});
	},

	_makeResizable: function() {
		var that = this,
			options = this.options,
			handles = options.resizable,
			position = this.uiDialog.css("position"),
			resizeHandles = typeof handles === "string" ?
				handles	:
				"n,e,s,w,se,sw,ne,nw";
		function filteredUi( ui ) {
			return {
				originalPosition: ui.originalPosition,
				originalSize: ui.originalSize,
				position: ui.position,
				size: ui.size
			};
		}

		this.uiDialog.resizable({
			cancel: ".coral-dialog-content",
			containment: "document",
			alsoResize: this.element,
			maxWidth: options.maxWidth,
			maxHeight: options.maxHeight,
			minWidth: options.minWidth,
			minHeight: this._minHeight(),
			handles: resizeHandles,
			start: function( event, ui ) {
				$( this ).addClass("coral-dialog-resizing");
				that.manualResize = true;
				if (that.options.iframePanel) {
					that.iframePanel.css(ui.position);
					that.iframePanel.css(ui.size);
				}
				that._blockFrames();
				that._trigger( "onResizeStart", event, filteredUi( ui ) );
			},
			resize: function( event, ui ) {
				if (that.options.iframePanel) {
					that.iframePanel.css(ui.position);
					that.iframePanel.css(ui.size);
				}
				$.coral.refreshAllComponent(that.element);
				that._trigger( "onResize", event, filteredUi( ui ) );
			},
			stop: function( event, ui ) {
				var offset = that.uiDialog.offset(),
					left = offset.left - that.document.scrollLeft(),
					top = offset.top - that.document.scrollTop();
				
				options.height = that.uiDialog.height();
				options.width = that.uiDialog.width();
				options.position = {
					my: "left top",
					at: "left" + (left >= 0 ? "+" : "") + left + " " +
						"top" + (top >= 0 ? "+" : "") + top,
					of: that.window
				};
				$( this ).removeClass("coral-dialog-resizing");
				if (that.options.iframePanel) {
					that.iframePanel.position(options.position);
					that.iframePanel.position(ui.size);
				}
				that._unblockFrames();
				that._trigger( "onResizeStop", event, filteredUi( ui ) );
			}
		})
		.css( "position", position );
	},
	
	_trackFocus: function() {
		this._on(this.component(), {
			focusin: function(event) {
				this._makeFocusTarget();
				this._focusedElement = $(event.target);
			}
		});
	},
	
	_makeFocusTarget: function() {
		this._untrackInstance();
		this._trackingInstances().unshift( this );
	},
	
	_untrackInstance: function() {
		var instances = this._trackingInstances(),
		exists = $.inArray( this, instances );
		if ( exists !== -1 ) {
			instances.splice( exists, 1 );
		}
	},
		
	_trackingInstances: function() {
		var instances = this.document.data( "coral-dialog-instances" );
		if ( !instances ) {
			instances = [];
			this.document.data( "coral-dialog-instances", instances );
		}
		return instances;
	},
	
	_minHeight: function() {
		var options = this.options;

		return options.height === "auto" ?
			options.minHeight :
			Math.min( options.minHeight, options.height );
	},

	_position: function() {
		var position = this.options.position,
			offset = [0,0],
			myAt = [],
			isVisiblePanel,
			isVisible;
		
		if ( position ) {
			if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
				myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
				if ( myAt.length === 1 ) {
					myAt[1] = myAt[0];
				}

				$.each( [ "left", "top" ], function( i, offsetPosition ) {
					if ( +myAt[ i ] === myAt[ i ] ) {
						offset[ i ] = myAt[ i ];
						myAt[ i ] = offsetPosition;
					}
				});

				position = {
					my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
						myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
					at: myAt.join(" ")
				};
			}

			position = $.extend( {}, $.coral.dialog.prototype.options.position, position );
		} else {
			position = $.coral.dialog.prototype.options.position;
		}	

		isVisible = this.uiDialog.is(":visible");
		if ( !isVisible ) {
			this.uiDialog.show();
		}
		if (this.options.iframePanel) {
			isVisiblePanel = this.iframePanel.is(":visible");
			if (!isVisiblePanel) {
				this.iframePanel.show();
			}
		}
		if ( this.options.queue ) {
			$("#coral-msgBox").position( position );
		} else {
			this.uiDialog.position( position );	
			if (this.options.iframePanel) {
				this.iframePanel.position( position );
			}
		}
		if ( !isVisible ) {
			this.uiDialog.hide();
		}
		if (this.options.iframePanel) {
			if (!isVisiblePanel) {
				this.iframePanel.hide();
			}
		}
	},

	_setOptions: function( options ) {
		var that = this,
			resize = false,
			resizableOptions = {};

		$.each( options, function( key, value ) {
			that._setOption( key, value );

			if ( key in sizeRelatedOptions ) {
				resize = true;
			}
			if ( key in resizableRelatedOptions ) {
				resizableOptions[ key ] = value;
			}
		});

		// 如果元素是隐藏状态设置的尺寸，则不进行调整，打开的时候会重新调整的。
		if ( resize && !$( that.element ).is(":hidden") ) {
			this._size();
			if(!that.animate){
				this._position();
			}
		}
		if ( this.uiDialog.is(":data(coral-resizable)") ) {
			this.uiDialog.resizable( "option", resizableOptions );
		}
	},

	_setOption: function( key, value ) {
		var isDraggable, isResizable,
			uiDialog = this.uiDialog;

		if ( key === "dialogClass" ) {
			uiDialog
				.removeClass( this.options.dialogClass )
				.addClass( value );
		}

		if ( key === "disabled" ) {
			return;
		}

		this._super( key, value );

		if ( key === "appendTo" ) {
			this.uiDialog.appendTo( this._appendTo() );
		}

		if ( key === "buttons" ) {
			this._createButtons();
		}
		
		if ( key === "maximumText" ) {
			this.uiDialogTitlebarMaximum.button({
				// 确保label为字符串
				label: "" + value
			});
		}

		if ( key === "closeText" ) {
			this.uiDialogTitlebarClose.button({
				// 确保label为字符串
				label: "" + value
			});
		}

		if ( key === "draggable" ) {
			isDraggable = uiDialog.is(":data(coral-draggable)");
			if ( isDraggable && !value ) {
				uiDialog.draggable("destroy");
				if(this.options.iframePanel){
					this.iframePanel.draggable("destroy")
				}
			}

			if ( !isDraggable && value ) {
				this._makeDraggable();
			}
		}

		if ( key === "position" ) {
			this._position();
		}
		if ( key === "resizable" ) {
			// currently resizable, becoming non-resizable
			isResizable = uiDialog.is(":data(coral-resizable)");
			if ( isResizable && !value ) {
				uiDialog.resizable("destroy");
				if(this.options.iframePanel){
					this.iframePanel.resizable("destroy");
				}
			}

			// currently resizable, changing handles
			if ( isResizable && typeof value === "string" ) {
				uiDialog.resizable( "option", "handles", value );
			}

			// currently non-resizable, becoming resizable
			if ( !isResizable && value !== false ) {
				this._makeResizable();
			}
		}

		if ( key === "title" ) {
			this._title( this.uiDialogTitlebar.find(".coral-dialog-title") );
		}
		if ( key === "subTitle" ) {
			this._subTitle( this.uiDialogTitlebar.find(".coral-dialog-subTitle") );
		}
		if ( key === "width" || key === "height" ) {
			// 当设置了高度或者宽度后，需要手动重置最大化按钮。
			this._resetMaximizeIcon();
			this.uiDialog.removeClass("coral-dialog-maximum");
		}
	},

	_size: function() {
		// If the user has resized the dialog, the .coral-dialog and .coral-dialog-content
		// divs will both have width and height set, so we need to reset them
		var nonContentHeight, minContentHeight, maxContentHeight,
			options = this.options;

		// Reset content sizing
		// 以防content里有其他的子元素高度撑开，所以此处先隐藏
		this.element.hide().css({
			width: "auto",
			minHeight: 0,
			maxHeight: "none",
			height: 0
		});
		if ( options.minWidth > options.width ) {
			options.width = options.minWidth;
		}

		// reset wrapper sizing
		// determine the height of all the non-content elements
		nonContentHeight = this.uiDialog.css({
				height: "auto",
				width: options.width
			})
			.outerHeight();
		// 等到dialog拿到nonContent高度后，显示element。 
		this.element.show();
		
		minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
		maxContentHeight = typeof options.maxHeight === "number" ?
			Math.max( 0, options.maxHeight - nonContentHeight ) :
			"none";

		if ( options.height === "auto" ) {
			this.element.css({
				minHeight: minContentHeight,
				maxHeight: maxContentHeight,
				height: "auto"
			});
		} else { // 20150120 如果height为百分比形式，则先转化为px
			var re =/^(\d|[1-9]\d|100)%$/;
			if( re.test( this.options.height ) ){
				this.options.percent = this.options.height;
				this.element.height( Math.max( 0, this._percentToPx() - nonContentHeight ) );
			} else {
				this.element.height( Math.max( 0, this.options.height - nonContentHeight ) );
			}
		}

		if (this.uiDialog.is(":data(coral-resizable)") ) {
			this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
		}
		if(this.options.iframePanel){
			this.iframePanel
				.css({
					width: this.uiDialog.outerWidth(),
					height: this.uiDialog.outerHeight()
				});
		}
	},

	_blockFrames: function() {
		this.iframeBlocks = this.document.find( "iframe" ).map(function() {
			var iframe = $( this );

			return $( "<div>" )
				.css({
					position: "absolute",
					width: iframe.outerWidth(),
					height: iframe.outerHeight()
				})
				.appendTo( iframe.parent() )
				.offset( iframe.offset() )[0];
		});
	},

	_unblockFrames: function() {
		if ( this.iframeBlocks ) {
			this.iframeBlocks.remove();
			delete this.iframeBlocks;
		}
	},

	_allowInteraction: function( event ) {
		if ( $( event.target ).closest(".coral-dialog").length ) {
			return true;
		}

		return !!$( event.target ).closest(".coral-datepicker").length;
	},

	_createOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		// We use a delay in case the overlay is created from an
		// event that we're going to be cancelling (#2804)
		var isOpening = true;
		this._delay(function() {
			isOpening = false;
		});
		
		if ( !this.document.data( "coral-dialog-overlays" ) ) {
		
			// Prevent use of anchors and inputs
			this._on( this.document, {
				focusin: function( event ) {
					if ( isOpening ) {
						return;
					}
			
					if ( !this._allowInteraction( event ) ) {
						event.preventDefault();
						
						var d = this.document.find( ".coral-dialog:visible:last .coral-dialog-content" )
											 .data( this.componentFullName );
						if (d && d._focusTabbable) {
							//d._focusTabbable();
							//TODO 注释掉的原因：在ie下面当点击dialog底部的按钮的时候，会产生聚焦异常，焦点不会停留在底部按钮区域
						}
					}
				}
			});
		}

		this.overlay = $("<div>")
			.addClass("coral-component-overlay coral-front")
			.appendTo( this._appendTo() );
		// -- 如果 appendTo 到非 body，position 不为 “fixed”
		if(this.options.appendTo == "parent"){
			this.overlay.css({
				position: "relative"
			});
		} else {
			if ($(this.options.appendTo)[0].tagName.toLowerCase() != "body") {
				this.overlay.css({
					position: "relative"
				});
			}
		}
		// --
		this._on( this.overlay, {
			mousedown: "_keepFocus"
		});
		this.document.data( "coral-dialog-overlays",
			(this.document.data( "coral-dialog-overlays" ) || 0) + 1 );
	},

	_destroyOverlay: function() {
		if ( !this.options.modal ) {
			return;
		}

		if ( this.overlay ) {
			var overlays = this.document.data( "coral-dialog-overlays" ) - 1;
			
			if ( !overlays ) {
				this.document
					.unbind( "focusin" )
					.removeData( "coral-dialog-overlays" );
			} else {
				this.document.data( "coral-dialog-overlays", overlays );
			}
			this.overlay.remove();
			this.overlay = null;
		}
	},
	// 按钮区面板
	buttonPanel : function () {
		return this.uiButtonSet;
	},
	// 隐藏对话框
	hide : function () {
		this._isOpen = false;
		this.component().hide();
	},
	_percentToPx : function(){
		var that = this,
			options = this.options,
			percent = options.percent,
			parent = $(window);
		
		maxHeight = parent.height() * parseInt(percent.substring(0, percent.length-1))/100;
		return maxHeight;
	},
	refresh : function(){
		var that = this,
			options = this.options,
			percent = options.percent;
		var re =/^(\d|[1-9]\d|100)%$/;
		if(re.test(percent)&&!options.manualResize){
			maxHeight = that._percentToPx();
			options.height = maxHeight;
			setTimeout(function(){
				$(that.element).dialog("option", "height", maxHeight);
			},0);
		} else {
			//$(that.element).dialog("option", "height", options.height);
		}
	}
	
});

}() );
;


$.messager = {
	/**
	 *  遮罩功能
	 */
	loading : {
		show: function($el) {
			if (! $el instanceof jQuery) {
				$el = $($el);
			}
			var loadingId = $el.attr("data-loading-id");
			if (!loadingId) {
				loadingId = new Date().getTime();
				$el.attr("data-loading-id", "loading_" + loadingId);
			}
			
			var $uiLoading = $("<div id='loading_"+ loadingId +"' class='coral-loading'><div class='coral-loading-zone'></div><span class='coral-loading-text'>加载中，请稍后...</span></div>");
			var $uiLoadingZone = $uiLoading.find(".coral-loading-zone");
			var $uiLoadingText = $uiLoading.find(".coral-loading-text");	
			
			$uiLoading.outerWidth($el.outerWidth());
			$uiLoading.outerHeight($el.outerHeight());
			$uiLoadingZone.outerWidth($el.outerWidth());
			$uiLoadingZone.outerHeight($el.outerHeight());
			
			$uiLoading.position({
				my: "left top",
				at: "left top",
				of: $el
			});	
			$(document.body).append($uiLoading);
			
			var loadingTextLeft = ( $uiLoading.outerWidth() - $uiLoadingText.outerWidth() ) / 2;
			$uiLoadingText.css({
				left: loadingTextLeft
			});
		},
		hide: function($el) {
			if (! $el instanceof jQuery) {
				$el = $($el);
			}
			var loadingId = $el.attr("data-loading-id");
			if (!loadingId) return;
			
			$("#" + loadingId).remove();
			$el.removeAttr("data-loading-id");
		}
	},
	_isType:function(options){
		var icons = "", typeCls = "",iconType,
			iconCls = options.iconCls,
			rep = $.inArray(options.cls, ["info", "success", "warning", "error", "question", "danger", "alert"]);
		if(options.cls && rep > -1){
			options.type = options.cls;
		}
		if(!options.type){
			options.type = "info";
		}
		var defaultIconCls = {
			warning: "cui-icon-warning2",
			danger: "cui-icon-cancel-circle2",
			error: "cui-icon-cancel-circle2",
			success: "cui-icon-checkmark4",
			alert: "cui-icon-notification2",
			info: "cui-icon-notification2",
			confirm:"cui-icon-question4"
		};
		if ( options.type == "alert" ) {
			typeCls = "coral-control-info ";
			iconType = defaultIconCls.alert;
		} else if ( options.type == "success" ) {
			typeCls = "coral-control-success ";
			iconType = defaultIconCls.success;
		} else if ( options.type =="danger" ) {
			typeCls = "coral-control-danger ";
			iconType = defaultIconCls.danger;
		} else if ( options.type =="info" ) {// info 用在message
			typeCls = "coral-control-info ";
			iconType = defaultIconCls.info;
		} else if ( options.type == "confirm" ) {
			typeCls = "coral-control-question ";
			iconType = defaultIconCls.confirm;
		}else if ( options.type == "warning" ) {
			typeCls = "coral-control-warning ";
			iconType = defaultIconCls.warning;
		}
		if(typeof iconCls === "boolean"){
			icons = iconCls === true ? 
					icons = "<span class='icon-control "+ typeCls + iconType +"'></span>" : "";
		}
		if(typeof iconCls === "string"){
			icons = "<span class='icon-control " + typeCls + options.iconCls +"'></span>";
		}
		return icons;
	},
	_init: function( dialog, options ){
		options.maximizable=false;
		if( options.queue === true ){
			if ( !$("#coral-msgBox").length ) {
				$("<div id='coral-msgBox' class='queueMessage'style='z-index:9999999999'></div>").appendTo("body");
			}
			options.appendTo = "#coral-msgBox";
		} 
		var icons = "", typeCls = "",iconType,
			iconCls = options.iconCls;
		if ( options.wtype == "messageBox" ) {
			dialog = $( "<div class='coral-messagerBox'>" +
				(options.iconCls || "") +
				"<span class='coral-messagerBox-content'>" +
				options.message + "</span></div>" ).appendTo( "body" );
		} else if ( options.wtype == "message" ) {
			icons = this._isType(options);
			var hasIcon = iconCls === false ? "" : "hasIcon ";
			dialog = $("<div class='"+ hasIcon + options.type +"' role='alert'>" +
					icons +
					"<span class='coral-alert-content'>" + options.message + "</span></div>").appendTo( "body" );
		} else if ( options.wtype == "progress" ) {
			icons = this._isType(options);
			dialog = $( "<div class='coral-messager-body coral-messager-progress'>"+icons +
				"<span class='coral-messager-content'>" +
				options.message + "</span><div class='coralui-progressbar'></div></div>" ).appendTo( "body" );
		}  else if ( typeof options.message !== "undefined" && options.wtype != "message" ) {
			icons = this._isType(options);
			dialog = $( "<div class='coral-messager-body'><span class='coral-messager-box'><span class='hasIcon coral-messager-box-content'>" +
				icons +
				"<span class='coral-messager-content'>" +
				options.message + "</span></span></span></div>" ).appendTo( "body" );
		} 
		return dialog;
	},
	/**
	 * 非模式窗口消息提示
	 * 
	 * options: 设置参数
	 * type: 消息类型
	 * fn: 消息回调
	 */
	message : function ( options, msgType, fn ) {
		if (typeof options === "string" || typeof options === "boolean" || typeof options === "number") {
			options = {message: options.toString(), wtype: "message"};
		} 
		if ( !fn && typeof msgType === "function") {
			fn = msgType;
			msgType = "info";
		}
		if ( !msgType || $.inArray(msgType, ["info", "success", "warning", "error", "question", "danger", "alert"]) < 0) {
			msgType = "info";
		}
		// 默认$.error和默认的方法冲突，只能用$.danger
		if ( msgType == "error" ) {
			msgType = "danger";
		}
		options = options || {};
		options = $.extend( true, {
			autoOpen: true,
			title: "消息提示",
			isMessage: true,//区别消息框和对话框
			show: "slideDown",
			hide: "slideUp",
			modal: false,
			queue: false,
			onClose: fn,
			draggable: false,
			resizable: false,
			width: "auto",
			maxWidth: 600,
			maxHeight: 600,
			wtype: "message",
			type: msgType,
			iconCls: true,
			timeOut: 2999
		}, $.message.defaults , $.messageQueue.defaults , options);
		
		var dialog = $.messager._init( dialog, options );
		dialog.css("max-width", options.maxWidth + "px");
		dialog.dialog(options);
		if (options.wtype === "message") {
			$.messager.messageInstances++;
			$.messager.messageHeights.push(dialog.outerHeight());
		}
	},
	messageBox: function( options, fn ) {
		/*if (typeof options === "string" && options == "close" ) {
			$(fn).dialog("close");
		}*/
		if (typeof options === "string" || typeof options === "boolean" || typeof options === "number") {
			options = {message: options.toString(), wtype: "messageBox"};
		} 
		options = options || {};
		options = $.extend( true, {
			autoOpen: true,
			title: "消息提示",
			show: "slideDown",
			hide: "slideUp",
			isMessage: true,//区别消息框和对话框
			modal: false,
			draggable: false,
			resizable: false,
			width: 200,
			wtype: "messageBox",
			timeOut: 2999
		}, $.messageBox.defaults , options);
		
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		return dialog;
	},
	messageQueue: function ( message, title, callback ) {
		var defaultTitle = "信息提示";
		var options = {};
		if (typeof message !== "string") {
			options = message || "";
			options.queue = true;
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if (typeof title === "function") {
			callback = title;
			title = defaultTitle;
		}
		if (title === undefined) {
			title = defaultTitle;
		}
		options = $.extend(true, {
			iconCls:true,
			queue:true,
			message: message.toString(),
			title: title.toString()
		}, $.messageQueue.defaults, options);
		$.messager.message( options );
		options.wtype = "message";
	},
	messageToast: function(message, title, callback){
		var defaultTitle = "信息提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			autoOpen: true,
			modal: false,
			show: "slideDown",
			hide: "slideUp",
			message: message.toString(),
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			draggable: false,
			resizable: false,
			iconCls:true,
			width: "auto",
			wtype: "message",
			timeOut: 2999
		}, $.messageToast.defaults, options );
		options.wtype = "message";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	// 模式窗口消息提示
	alert: function( message, title, callback ) {
		var defaultTitle = "信息提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 400,
			maxHeight:600,
			icons: "cui-icon-warning2",
			iconCls:true,
			wtype: "alert"
		}, $.alert.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "alert";
		options.type = "alert";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//错误提示窗口
	danger: function(message, title, callback){
		var defaultTitle = "错误提示";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 400,
			maxHeight: 600,
			iconCls:true,
			icons: "cui-icon-cancel-circle2",
			wtype: "danger"
		}, $.danger.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "danger";
		options.type = "danger";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//success
	success: function(message, title, callback){
		var defaultTitle = "Success";
		var options = {};
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			modal: true,
			message: message.toString(),
			timeOut: 0,
			title: title.toString(),
			isMessage: true,//区别消息框和对话框
			width: 400,
			maxHeight:600,
			iconCls:true,
			icons: "cui-icon-checkmark4",
			wtype: "success"
		}, $.success.defaults, options );
		
		if ((options.timeOut <= 0 || isNaN(options.timeOut)) && !options.buttons) {
			options.buttons = {
				"确定": function() {						
					$( this ).dialog( "close" );
					if (typeof callback === "function") {
						callback(true);
					}
					return true;
				}
			};
		}
		options.wtype = "success";
		options.type = "success";
		var dialog = $.messager._init( dialog, options );
		dialog.dialog(options);
		
		return dialog;
	},
	//确认窗口
	confirm: function(message, title, callback){
		var okText = "确定",
			cancelText = "取消",
			buttons = {}, options = {},
		    defaultTitle = "信息提示";
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
			okText = options.okText ? options.okText : okText;
			cancelText = options.cancelText ? options.cancelText : cancelText;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			autoOpen: true,
			title: "确认提示",
			message: message.toString(),
			title: title.toString(),
			iconCls:true,
			isMessage: true,//区别消息框和对话框
			width: 400,
			maxHeight:600,
			show: "slideDown",
			modal: true,
			icons: "cui-icon-question4",
			buttons: buttons
		}, $.confirm.defaults, options);
		buttons[okText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(true);
			}
			return false;
		};
		buttons[cancelText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(false);
			}
			return false;
		};
		options.type = "confirm";
		options.wtype= "confirm";
		var dialog = $.messager._init( dialog, options );
			dialog.dialog(options);
	
		return dialog;
	},
	//进度窗体
	progress: function(message, title, callback){
		if (message === "close") {
			$(".coral-messager-progress").dialog("close");
			var c = $(".coral-messager-progress").dialog("destroy");
			c.remove();
			return;
		}
		if (message === "progressbar") {
			return $(".coral-messager-progress .ctrl-init-progressbar");
		}
		var okText = "确定",
			cancelText = "取消",
			buttons = {}, options = {},
		    defaultTitle = "进度提示";
		if ( typeof message !== "string"  ) {
			options = message || "";
			callback = options.callback;
			title = options.title || defaultTitle;
			okText = options.okText ? options.okText : okText;
			cancelText = options.cancelText ? options.cancelText : cancelText;
		}
		if( typeof title === "function" ) {
			callback = title;
			title = defaultTitle;
		}
		if(title === undefined){
			title = defaultTitle;
		}
		options = $.extend( true, {
			autoOpen: true,
			message: message.toString(),
			title: title.toString(),
			iconCls:true,
			isMessage: false,//区别消息框和对话框
			width: 400,
			maxHeight:600,
			show: "slideDown",
			modal: true,
			icons: "cui-icon-question4"
		}, $.confirm.defaults, options);
		buttons[okText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(true);
			}
			return false;
		};
		buttons[cancelText] = function() {
			$( this ).dialog( "close" );
			if (typeof callback === "function") {
				callback(false);
			}
			return false;
		};
		options.type = "progress";
		options.wtype= "progress";
		var dialog = $.messager._init( dialog, options );
			dialog.dialog(options);
			$.parser.parse(dialog);
	
		return dialog;
	}
};
/*$.fn["messageBox"] = function ( options ) {
    return this.each(function () {
        if ( options && "hide" !== options ) {
    		$.messageBox( options );
        } else {
            if( "hide" === options ) { 
            	$(this).dialog("close"); 
            } else { 
            	$(this).dialog("open"); 
            }
        }
    });
};*/
$.messager.messageInstances = 0;
$.messager.messageHeights = [];
// 简化使用方式
$.message = $.messager.message;
$.messageQueue = $.messager.messageQueue;
$.messageBox = $.messager.messageBox;
$.messageToast = $.messager.messageToast;
$.alert = $.messager.alert;
$.danger = $.messager.danger;
$.success = $.messager.success;
$.confirm = $.messager.confirm;
$.progress = $.messager.progress;
$.message.defaults = {
	position: {
		my: "top",
		at: "top top+50",
		of: window
	}
};
$.messageQueue.defaults = {
	position: {
		my: "top",
		at: "top top+50",
		of: window
	}
};
$.messageBox.defaults = {
	position: {
		my: "right bottom",
		at: "right bottom",
		of: window
	}
};
$.messageToast.defaults = {
		position: {
			my: "top",
			at: "top top+50",
			of: window
		}
	};
$.alert.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.danger.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.success.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
$.confirm.defaults = {
	position: {
		my: "center",
		at: "center top+200",
		of: window
	}
};
;

/**
 *	Coral 4.0： form
 *
 * 	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *
 */
$.component( "coral.form",{
	version: "4.0.2",
	options: {
		disabled: null,
		ajaxSubmit: true, //Defines if to submit form with Ajax.
		novalidate: false, // false to validate the form
		context: "",
		separator: ",", //获取form数据，多选时返回的对象是分割符分割的字符串，其中的分隔符。
		container: "tooltip", // tooltip, popover, default
		requires: null,
		excluded: [":disabled", ":hidden", ":not(:visible)"],  // ":disabled,:hidden,:not(:visible)" 校验的时候排除不检验的元素
		errTipsType: "first", // "all", "first", "none"  显示全部校验提示，显示第一个，全部不显示
		onCreate: null,
		url: "",
		postData: {},
		target: "",
		focusFirst: false, // load之后focus第一个form元素
		showRequiredMark: null,
		hideRequiredMark: null,
		onChange: null,
		triggers: {
		},
		exclude: false // true 则排除 form 内的表单元素不校验
	},
	//创建组件
	_create: function () {
		var that = this;
		//创建组件外围元素
		this._initElement();
		this._bindEvents();
		
		$.data( this.element, "modifiedData", {} );
		$.data( this.element, "originalData", this._getForm() );
		
		this.element.validate({
			excluded: this.options.excluded,
			errorMode: this.options.errorMode,
			showRequiredMark: this.options.showRequiredMark,
			hideRequiredMark: this.options.hideRequiredMark
		});
		if (this.options.focusFirst) {
			this._focusFirst();
		}
		//只有一个输入框的时候，会刷新页面，所以在加上一个隐藏的输入框
		this.element.append($("<input type='text' style='display:none;'></input>"));
	},
	/**
	 * get Fields of form
	 */
	_getFields: function() {
		return this.element.find( ".ctrl-form-element" );
	},
	/**
	 * 获取校验组件的类型
	 * @param el 组件jquery对象
	 * @return {string} 组件类型
	 */
	_getFieldType: function(el) {
		var classArray = $(el)[0].className.split(" "),
			type = "";

		for ( var item in classArray ) {
			if ( classArray[item].indexOf( "coral-validation-" ) >=  0 ) {
				type = classArray[item].substr( classArray[item].indexOf( "coral-validation-" ) + 17 );
				return type;
			}
		}
		
		return null;
	},
	/**
	 * 绑定事件
	 */
	_bindEvents: function() {
		var that = this,
			opts = this.options,
			$fields = this._getFields();			
		
		$fields.each( function(index, field) {
			var $field = $(field);
			var	type = that._getFieldType($field);
			// 绑定组件的校验方法
			$field.off(".formonchange").on( type + "onchange.formonchange", function( event, ui ) {
				if (event.type.indexOf("onchange") != -1) {
					var name = $(this)[type]("option", "name"),
						value = $(this)[type]("getValue"),
						changeData = {};

					changeData[name] = value;
					that.updateCoralData(changeData);
					that._trigger("onChange", null, {field:this, type:type});
				}
			});
		});
	},
	//组件初始化
	_initElement: function () {
		var options = this.options;
		//添加组件外围元素
		this.element.addClass( options.cls );
		this.element.appendTo( this.uiBorder );
		this.element.addClass( "coral-form-default" );
		
		if ( options.id !== "" ) {
			this.element.attr( "id", options.id );
		}
		if ( options.name !== "" ) {
			this.element.attr( "name", options.name );
		}
		if ( options.action !== "") {
			this.element.attr( "action", options.action );
		}
		if ( options.method !== "" ) {
			this.element.attr( "method", options.method );
		}				
		if ( options.target !== "" ) {
			this.element.attr( "target", options.target );
		}		
		if ( options.context != "" ) {
			this.element.attr( "context", options.context );
		} else {
			this.element.attr( "context", "body" );
		}
		// 处理form下的label的颜色
		// this._initRequires();			
	},
	initRequires: function () {
		this._initRequires();
	},
	// 处理校验组件前面的 label 的颜色。
	_initRequires: function () {
		var 	that = this,
				requiredEls = this.element.find($("[class*='coral-validation-']")).parent(":visible").find($("[class*='coral-validation-']"));
		
		requiredEls.each( function () {
			var className = this.className, 
				coralType = "",
				clsArray = className.split(" ");
			
			for ( var item in clsArray ) {
				if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
					coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
					break;
				}
			}
			
			var required = $(this)[coralType]("option", "required"); 
			
			if ( typeof  required === "boolean" && required ) {
				if (coralType=="datepicker" ) {
					$(this)[coralType]("component", $(this)).parent("td").prev().addClass("require");
				}  else {
					$(this)[coralType]("component").parent("td").prev().addClass("require");						
				}
			}
		});
	},
	/**
	 * 根据选择器参数，获取组件类型
	 */
	_getCoralType: function (selector) {
		var 	clsArray = $(selector)[0].className.split(" "),
				coralType = "";
		
		for ( var item in clsArray ) {
			if ( clsArray[item].indexOf( "coral-validation-" ) >=  0 ) {
				coralType = clsArray[item].substr( clsArray[item].indexOf( "coral-validation-" ) + 17 );
				return coralType;
			}
		}
	},
	/**
	 * 校验组件动态改变 required = true 属性时，设置前面label的颜色为红色
	 */
	showRequire: function( selector) {
		var $el = $(selector),
			coralType = this._getCoralType( selector );
		
		$el[coralType]("component").parent("td").prev().addClass("require");
	},
	/**
	 * 校验组件动态改变 required = false 属性时，恢复前面label的颜色
	 */
	hideRequire: function( selector) {
		var $el = $(selector),
			coralType = this._getCoralType( selector );
		
		$el[coralType]("component").parent("td").prev().removeClass("require");
	},
	//设置属性处理
	_setOption: function( key, value ) {
		//默认属性不允许更改
		if (key == "id" || key == "name") {
			return;
		}
		
		this._super(key, value );
		
		return ;
	},
	/**
	 * 组件值初始化或取得默认值时候调用的方法
	 * coralData: {
	 * 	  "name": "value" // value = String "v1" || Array ["v1", "v2", "v3"]
	 * }
	 */
	saveOriginalCoralData: function ( coralData ) {
		var that = this;
		
		$.each ( coralData, function ( key, val ) {
			that._updateCoralData("original", key, val);
		});	
		
		return ;
	},
	/**
	 * 组件值更改的时候调用的方法
	 * coralData: {
	 * 	  "name": "value" // value = String "v1" || Array ["v1", "v2", "v3"]
	 * }
	 */
	updateCoralData: function ( coralData ) {
		var that = this;
		
		$.each ( coralData, function( key, val ) {
			that._updateCoralData( "modified", key, val );
		});		
		
		return ;
	},
	_updateCoralData: function ( dataType, key, val ) {
		var data = $.data( this.element, dataType + "Data" );
			
		data[key] = val;
		
		$.data( this.element, dataType + "Data", data );
		
		return ;
	},
	// 原生获取 form 序列化方法
	serialize: function () {
		return $(this.element).serialize();
	},
	//  原生获取 form json 对象方法
	serializeArray: function () {
		return $(this.element).serializeArray();
	},
	// modifiedData undefined 应该和false同样的效果，undefined不应该和true一个效果
	modifiedData: function ( isSerialize ) {
		if ( ( typeof isSerialize == "boolean" && isSerialize ) ) {
			return this._getSerialize( "modified" );
		} else {
			return $.data( this.element, "modifiedData" );
		} 
	},
	// originalData undefined 应该和false同样的效果，undefined不应该和true一个效果
	originalData: function ( isSerialize ) {
		if ( ( typeof isSerialize == "boolean" && isSerialize) ) {
			return this._getSerialize( "original" );
		} else {
			return $.data( this.element, "originalData" );
		}
	},
	// formData undefined 应该和false同样的效果，undefined不应该和true一个效果
	/**
	 * 取得表单的数据
	 * */
	formData: function () {
		return this._getForm();
	},
	/**
	 * 取得表单的数据
	 * */
	getData: function () {
		return this.formData();
	},
	//获取 modified/original 序列化字符串
	_getSerialize: function ( dataType ) {
		var data = $.data( this.element, dataType + "Data" ),
			serializeStr = "";
		$.each( data, function ( key, val) {
			if ( typeof val != "Object") {
				serializeStr += key + "=" + val + "&";
			} else {
				for ( var i in val ) {
					serializeStr += key + "=" + val[i] + "&"; 
				}
			}			
		});
		return serializeStr.substr( 0, serializeStr.length - 1 );
	},
	// 获取 form 元素数据对象，多选，复选情况下，用分隔符 separator 分割
	_getForm: function() {
		var	that = this,
			coralEl = {},
			nomarlEl = {},
			arr = $( this.element ).serializeArray();
		
		$( this.element ).find(".ctrl-form-element").each(function(){
			var type = $(this).attr("component-role"),
				name = $(this)[type]("option", "name");
			if (name) {
				if (type !== "checkbox" && type !== "radio") {
					if (coralEl[name]) {
						coralEl[name] = coralEl[name] + that.options.separator + $(this)[type]("getValue");
					} else {
						coralEl[name] = $(this)[type]("getValue");
					}
				} else {
					// checkbox组件处理了name重复的问题
					coralEl[name] = $(this)[type]("getValue");
				}
			}
		});
		$( arr ).each( function(index, item) {
			if (item.name) {
				// 如果是组件的name，则跳过。
				if (typeof(coralEl[item.name]) === "undefined") {
					// 如果是非组件的name，重复的name，则逗号分隔。
					if (nomarlEl[item.name]) {
						nomarlEl[item.name] = nomarlEl[item.name] + that.options.separator + item.value;
					} else {
						nomarlEl[item.name] = item.value;
					}
				}
			}
		});
		$.extend(coralEl, nomarlEl);
		return coralEl;
	}, 
	/*//获取 form Json格式
	_getFormJson: function () {
		var serializeObj = {},
			array = $( this.element ).serializeArray();

		$( array ).each( function () {
			if( serializeObj[this.name] ) {
				if ( $.isArray( serializeObj[this.name] ) ) {
					serializeObj[this.name].push( this.value );
				} else {
					serializeObj[this.name] = [serializeObj[this.name], this.value];
				}
			} else {
				serializeObj[this.name] = this.value;	
			}
		});
		
		return serializeObj;
	},*/
	_loadData: function ( data ) {
		var that = this;

		this._updateData( data, "modified" );
		this._updateData( data, "original" );
		
		if ( typeof data == "object" ) {
			$.each ( data, function ( i, d ) {
				if ( !that._loadCoralData( i, d ) ) {
					that._loadNormalData( i, d );
				}
			});
		}
	},
	_loadCoralData: function ( key, value ) {
		var that = this;
		value = value == null? "":value;
		var coralData = that._getCoralFormData();
		var isFind =  false;
		for ( var i in coralData ) {
			var item = coralData[i];
			var ctype = item.coralType;
			switch ( ctype ) {
				case "radio": 
					if ( key == item.name ) {
						isFind =  true;				
						if ( item.el[ctype]("option", "value") == value && value != null ) {
							item.el[ctype]( "check" );
						} else {
							item.el[ctype]( "uncheck" );
						}		
					}
					break;
				case "radiolist": 
					if ( key == item.name ) {
						isFind =  true;	
						if (value == null ) value = "";	
						item.el[ctype]( "setValue", value );
					}
					break;
				case "checkbox":
					if ( key == item.name ) {
						isFind =  true;	
						if ( value == null ) {
							value = [""];
						}
						if ( typeof value != "object" ) {
							if (typeof value === "string" ) {
								value = value.split(that.options.separator); // 给出的分割符需要跟form的separator一致
							} else {
								value = [value];
							}
						}
						for ( var a in value ) {
							if ( item.el[ctype]("option", "value") == value[a] ) {
								item.el[ctype]( "check" );
								break;
							} else {
								item.el[ctype]( "uncheck" );
							}
						}											
					}
					break;
				case "checkboxlist":
					if ( key == item.name ) {
						isFind =  true;	
						if ( key == item.name ) {
							if ( value == null ) value = "";
							item.el[ctype]( "setValue", value );
						} 
					}
					break;
				case "combobox": 
				case "combotree":
				case "combogrid": 
					if ( key == item.name ) {
						isFind =  true;
						if ( typeof value != "object" ) {
							if (typeof value === "string" ) {
								value = value.split(that.options.separator); // 给出的分割符需要跟form的separator一致
							} else {
								value = [value];
							}
						}
						if ( value != null ) {
							item.el[ctype]( "setValues", value );
						}						
					}
					break;
				case "datepicker": 
					if ( key == item.name ) {
						isFind =  true;	
						if ( value != null ) {
							item.el[ctype]( "option", "value", value );
						}
					}
					break;
				case "autocomplete": 
				case "autocompletetree": 
					if ( key == item.name ) {
						isFind =  true;	
						if ( value != null ) {
							item.el[ctype]( "option", "value", value );
						}
					}
					break;
				default:
					if ( key == item.name ) {
						isFind =  true;	
						if ( value != null ) {
							item.el[ctype]( "option", "value", value );
						}
					}
					break;
			}
		}

		return isFind;
	},
	_loadNormalData: function ( key, value ) {
		var that = this,
			normalData = that._getNomalFormElements();

		for ( var i in normalData ) {
			if ( key == normalData[i].attr( "name" ) ) {
				if ( undefined != normalData[i].attr( "type" ) && "radio" == normalData[i].attr( "type" ) ) {
					if ( value == normalData[i].attr( "value" ) ) {
						normalData[i][0].checked = true;
					} else {
						continue;
					}
				} else {
					if ( typeof value === "string" && value.indexOf( that.options.separator ) != -1 ) {
						value = value.split( that.options.separator ); // 给出的分割符需要跟form的separator一致
					}
					$( that.element.find("[name=" + key + "]") ).val( value );
				}
			}
		}	
		return ;
	},
	_getAllFromElements: function () {
		return this.element.find("[name]");
	},
	_getCoralFormData: function () {
		var coralData = [];
		this.element.find( ".ctrl-form-element" ).each ( function () {
			var element = $(this), name = null, i = 0,
				tArr = ["radio", "checkbox", "combobox", "combotree", "combogrid", "datepicker", "checkboxlist", "radiolist", "autocomplete", "textboxlist", "autocompletetree"],
			    type = element.attr( "component-role");
			/*for (; i < tArr.length; i++) {
				type = tArr[i];
				if ( element.attr( "component-role") == type ) {*/
			name = element[type]( "option", "name" );
			if ( null != name ) {
				coralData.push({
					el: element,
					name: name,
					coralType: type
				});
			}
			//break;
				/*}
			}*/
		});
		return coralData;
	},
	_getCoralFormElements: function () {
		return this.element.find( ".coral-form-element" );
	},
	_getCoralNameJson: function () {
		var that = this,
			nameJson = {};
		that._getCoralFormElements().each ( function () {
			var componentRole = $( this ).attr( "component-role" );
			$( this )[ componentRole ]( "option", "name" ) && (nameJson[ name ] = componentRole);
		});
		return nameJson;
	},
	_getNomalFormElements: function () {
		var that = this,
			normalArray = [],
			nameJson = that._getCoralNameJson();
		that._getAllFromElements().each( function () {
			if ( ! nameJson[$( this ).attr( "name" )] ) {
				normalArray.push( $( this ) );
			}
		});
		return normalArray;
	},
	//根据load的新数据,更新数据
	_updateData: function ( data, dataType ) {
		var Data = $.data( this.element, dataType + "Data" );
		
		if ( typeof data == "object" ) {
			$.each( data, function ( i, d ) {
				if ( "original" == dataType && typeof Data[i] != "undefined" ) {
					Data[i] = d;
				} else if ( "modified" == dataType && typeof Data[i] != "undefined" ) {
					delete Data[i];
				}
			});
		}
	},
	resetData: function () {
		this.reset();
	},
	getErrors: function () {
		var errorElements = this.component().find(".coral-validate-error"),
		    errors = [];
		errorElements.each(function(){
			var el = $(this).find(".ctrl-form-element"),
			    type = $(el).attr("component-role"),
			    elementError = {};
			elementError.errorText = $(this).find(".coral-errorIcon").attr("data-errors");
			elementError.required = $(el)[type]("option","required");
			elementError.id = $(el)[type]("option","id");
			elementError.validType = $(el)[type]("option","validType");
			elementError.value = $(el)[type]("getValue");
			elementError.element = el[0];
			elementError.requiredMsg = $(el)[type]("option","requiredMsg")||$.validate.options.requiredMsg;
			elementError.name = $(el)[type]("option","name");
			errors.push(elementError);
		})
		return errors;
	},
	reset: function () {
		var that = this;
		$( this.element ).find( ".ctrl-form-element" ).each(function(i){
			var type = $(this).attr( "component-role" );
			$(this)[ type ]( "reset" );
		});
		$.data( this.element, "modifiedData", {} );
	},
	_isExclud: function ( $component, excluded ) {
    	 if ( !excluded ) {
    		 return false;
    	 }
    	 
    	 var length = excluded.length;
         
    	 for ( var i = 0; i < length; i++ ) {
             if ( "string" === typeof excluded[i] && $component.is(excluded[i]) ){
                 return true;
             }
         }
    	 
    	 return false;
     },
	//clear
	clear: function (options) {
		var excluded = {};
		if (options && options.excluded && options.excluded instanceof Array) {
			for (var i in options.excluded) {
				var item = options.excluded[i];
				excluded[item] = item;
			}
		}

		$( this.element ).find( ".ctrl-form-element" ).each(function(i){
			var type = $(this).attr( "component-role" );
			if ( 
					($(this)[ type ]( "option", "readonly" ) && excluded["readonly"]) ||
					($(this)[ type ]( "option", "isLabel" ) && excluded["isLabel"]) ||
					($(this)[ type ]( "option", "disabled" ) && excluded["disabled"])
			 	) return ;
			
			switch (type) {
				case "radio":
				case "checkbox":
					$(this)[ type ]( "uncheck" );
					break;
				default:
					$(this)[ type ]("setValue", "");
					break;
			}
		});
		$.validate.clearErrors(this.element);
		$.data( this.element, "modifiedData", {} );
	},
	/**
	 * 根据url或者data重新加载form表单元素
	 */
	load: function ( url ) {
		var that = this,
			opts = {}, 
			data = [], 
			isUrl = false;
		if ( typeof( url ) == "undefined" ) return;
		if ( typeof( url ) !== "string" ) {
			// 传过来的是object，需要区别是data还是options
			// 如果是options，可能是options.data或者options.url ，否则才为data
			opts = url;
			if ( opts.data ) { //传进来的是options对象
				data = opts.data;
			} else if ( opts.url ) {// 传进来的是data对象
				url = opts.url;
				isUrl = true;
			} else {
				// url是object，且传进来的是data
				data = url;
			}
		} else {
			isUrl = true;
		}
		
		if ( isUrl ) {// url被重新设置过
			$.ajax({
				url: url,
				type: "POST",
				data: $.extend( true, {}, this.options.postData, opts.postData ),
				async: false,
				dataType: "json",
				success: function ( data ) {
					that._loadData( data );
					that._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [data] );
				},
				error: function () {  
					that._trigger("onLoadError", null, []);
				}
			});
		} else {
			this._loadData( data );
			this._trigger( $.isFunction( opts.onLoad )?opts.onLoad:"onLoad", null, [{content:data}] );
		/*if (that.options.focusFirst) {
			that._focusFirst();
		}  */
		}
	},
	/**
	 * 根据data对象重新加载form表单数据
	 */
	loadData: function ( data ) {
		this.load( data );
	},
	//提交表单
	/**
	 * TODO:submit 里面的postData是否要和loadData里面的postData区分开？
	 */
	submit: function ( opts ) {
		opts = opts || {};
		if ( false == this._trigger( $.isFunction( opts.onSubmit )?opts.onSubmit:"onSubmit", null, []) ) {
			return false;
		}
		if ( this.options.ajaxSubmit ) {
			$.ajax({
				type: 'post',
				url: $.extend( true, {}, this.options.url, opts.url ),
				data: $.extend( true, {}, this.options.postData, opts.postData, this.formData ),
				dataType: 'json',
				success: function(data) {
					this._trigger( $.isFunction( opts.onSuccess )?opts.onSuccess:"onSuccess", null, [{content:data}] );
				},
				error : function() {
				}
			});
		} else {
			if (  this.valid() ) {
				this.element.submit();
			} else {
				return false;
			}
		}
	},
	//校验方法
	valid: function () {
		if ( this.options.novalidate ) {
			return true;
		}
		return this.element.validate( "valid" );
	},
	// 统一去除校验组件的所有校验错误提示信息
	hideErrorTips: function () {
		$("div.coral-validate-state-error").remove();
	},
	/**
	 * focus form 的第一个可编辑form元素，优先focus 组件库表单元素
	 */
	_focusFirst: function() {
		/*
		if (this.options.focusFirst) {
			return;
		}
		var that = this,
			fields = this.findFields();
		
		for (var i in fields) {
			var instance = fields[i];
			
			if (fields[i] instanceof Array) {
				if ( true == $(instance[0].element)[instance[0].name]("focus") ) return;
			} else {
				if ( instance.focus && true == instance.focus() ) return;			
			}
		}
		
		// find normal form element
		var originalFields = this.element.find("[name]:not(:hidden,.ctrl-init,[readonly],[disabled])");
		if( originalFields.length ) {
			originalFields[0].focus();
		}*/
	},
	// 找到form下所有的组件元素
	findFields: function(){
		return $.coral.findComponent( ".ctrl-form-element", this.element );
	},
	setIsLabel: function(isSet){
		$.coral.setIsLabel(isSet, this.element);
	},
	setReadOnly: function(isSet){
		$.coral.setReadOnly(isSet, this.element);
	},
	refresh: function(opts){	
		var maxHeight,
		options = this.options,
		heightStyle = options.heightStyle,
		parent = this.component().parent();
		if ( heightStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			maxHeight = parent.height();
			this.component().siblings( ":visible" ).each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight( true );
			});
			this.element.height( Math.max( 0, maxHeight -
				this.element.innerHeight() + this.element.height() ) )
				//.css( "overflow", "auto" );
				.addClass( "coral-scroll" );
		} else if ( heightStyle === "auto" ) {
			this.element.height( "" );
		}
		$.coral.refreshChild(this.element);
	}
});
;

$.component( "coral.tabs", {
	version: "4.0.1",
	delay: 300,
	options: {
		active: 0,
		collapsible: false,
		event: "click",
		loadonce: true,
		renderPanelOnActivate: false,
		destroyAllonActive: false, // 默认激活某一个tab时，销毁其他tab的内容
		heightStyle: "content",
		hide: null,
		show: null,
		loadtext:"加载中，请耐心等候...",
		// 回调函数
		/*activate: null,
		beforeActivate: null,
		beforeLoad: null,
		load: null,*/
		
		//附加
		//ajax请求方式
		method : 'GET',
		newbtn : false,
		name : null,
		
		onTabNew: null,
		onActivate : null,
		onLoad : null,
		beforeActivate: null,
		beforeLoad: null,
		beforeTabClose : null,
		onTabClose : null
	},

	_create: function() {
		var that = this,
			options = this.options;
			
		// 处理回调重命名
		//options.activate = options.onActivate;
		//options.load = options.onLoad;
		//options.beforeActivate = options.beforeActivate;
		//options.beforeLoad = options.beforeLoad;
		//处理属性
		if(options.method!=null && options.method!=""){
			options.method=(options.method+"").toUpperCase();
		}else{
			options.method="GET";
		}


		this.running = false;
		this.element
			.addClass( "coral-tabs ctrl-init ctrl-init-tabs coral-component coral-component-content coral-corner-all" )
			.toggleClass( "coral-tabs-collapsible", options.collapsible )

		this._processTabs();
		//lihaibo add begin
		if ( typeof options.newbtn == "boolean" && options.newbtn ) {
			this.addnewbtn();
		}
		//lihaibo add end
		options.active = this._initialActive();
		
		// 通过设置class来禁用tabs
		if ( $.isArray( options.disabled ) ) {
			options.disabled = $.unique( options.disabled.concat(
				$.map( this.tabs.filter( ".coral-state-disabled" ), function( li ) {
					return that.tabs.index( li );
				})
			) ).sort();
		}
		// 检查长度，避免初始化一个空列表发生错误
		if ( this.options.active !== false && this.anchors.length ) {
			this.active = this._findActive( options.active );
		} else {
			this.active = $();
		}

		this._refresh();

		if ( this.active.length ) {
			this.load( options.active );
		}
		if(this.element.hasClass("coral-tabs-bottom")){
			$( ".coral-tabs-bottom .coral-tabs-nav, .coral-tabs-bottom .coral-tabs-nav > *" ).removeClass( "coral-corner-all coral-corner-top" ).addClass( "coral-corner-bottom" );
		} else if(this.element.hasClass("coral-tabs-right")){
			this.element.addClass( "coral-tabs-right coral-helper-clearfix" ).removeClass( "coral-corner-top" ).addClass( "coral-corner-left" );
		}else if(this.element.hasClass("coral-tabs-left")){
			this.element.removeClass( "coral-corner-top" ).addClass( "coral-tabs-left coral-helper-clearfix coral-corner-left" );
		}
	},
	_isLocal: (function() {
		var rhash = /#.*$/;
		
		return function( anchor ) {
			var anchorUrl, locationUrl;

			// support: IE7
			// IE7 doesn't normalize the href property when set via script (#9317)
			anchor = anchor.cloneNode( false );
		
			
			// modify by mengshuai begin
			return anchor.hash.length > 1 &&
			anchor.href.indexOf("#")!=-1;
			// modify by mengshuai end
			
			
			anchorUrl = anchor.href.replace( rhash, "" );
			locationUrl = location.href.replace( rhash, "" );

			// decoding may throw an error if the URL isn't UTF-8 (#9518)
			try {
				anchorUrl = decodeURIComponent( anchorUrl );
			} catch ( error ) {}
			try {
				locationUrl = decodeURIComponent( locationUrl );
			} catch ( error ) {}

			return anchor.hash.length > 1 && anchorUrl === locationUrl;
		};
	})(),
	_initialActive: function() {
		var active = this.options.active,
			collapsible = this.options.collapsible,
			locationHash = location.hash.substring( 1 );

		if ( active === null ) {
			// 检查URL中fragment的表示
			if ( locationHash ) {
				this.tabs.each(function( i, tab ) {
					if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
						active = i;
						return false;
					}
				});
			}
			// 通过检查class确定tab被标记为激活的
			if ( active === null ) {
				active = this.tabs.index( this.tabs.filter( ".coral-state-active" ) );
			}
			// 没有激活的tab，设置为false
			if ( active === null || active === -1 ) {
				active = this.tabs.length ? 0 : false;
			}
		}
		// 处理数字：负数，越界
		if ( active !== false ) {
			active = this.tabs.index( this.tabs.eq( active ) );
			if ( active === -1 ) {
				active = collapsible ? false : 0;
			}
		}

		// 不允许折叠的: false and active: false
		if ( !collapsible && active === false && this.anchors.length ) {
			active = 0;
		}

		return active;
	},

	_getCreateEventData: function() {
		return {
			tab: this.active,
			panel: !this.active.length ? $() : this._getPanelForTab( this.active )
		};
	},

	_tabKeydown: function( event ) {
		var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
			selectedIndex = this.tabs.index( focusedTab ),
			goingForward = true;

		if ( this._handlePageNav( event ) ) {
			return;
		}

		switch ( event.keyCode ) {
			case $.coral.keyCode.RIGHT:
			case $.coral.keyCode.DOWN:
				selectedIndex++;
				break;
			case $.coral.keyCode.UP:
			case $.coral.keyCode.LEFT:
				goingForward = false;
				selectedIndex--;
				break;
			case $.coral.keyCode.END:
				selectedIndex = this.anchors.length - 1;
				break;
			case $.coral.keyCode.HOME:
				selectedIndex = 0;
				break;
			case $.coral.keyCode.SPACE:
				// 只能活动的，不能颠倒
				event.preventDefault();
				clearTimeout( this.activating );
				this._activate( selectedIndex );
				return;
			case $.coral.keyCode.ENTER:
				// Toggle (cancel delayed activation, allow collapsing)
				event.preventDefault();
				clearTimeout( this.activating );
				// 判断是否为collapse或activate
				this._activate( selectedIndex === this.options.active ? false : selectedIndex );
				return;
			default:
				return;
		}

		// 聚焦弹出的tab, 基于按键按下
		event.preventDefault();
		clearTimeout( this.activating );
		selectedIndex = this._focusNextTab( selectedIndex, goingForward );

		// 预防control键自动活动
		if ( !event.ctrlKey ) {
			focusedTab.attr( "aria-selected", "false" );
			this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

			this.activating = this._delay(function() {
				this.option( "active", selectedIndex );
			}, this.delay );
		}
	},

	_panelKeydown: function( event ) {
		if ( this._handlePageNav( event ) ) {
			return;
		}

		// Ctrl+up移动交到到当前tab
		if ( event.ctrlKey && event.keyCode === $.coral.keyCode.UP ) {
			event.preventDefault();
			this.active.focus();
		}
	},

	// Alt+page up/down 移动焦点到 前一个/下一个 tab (活动的)
	_handlePageNav: function( event ) {
		if ( event.altKey && event.keyCode === $.coral.keyCode.PAGE_UP ) {
			this._activate( this._focusNextTab( this.options.active - 1, false ) );
			return true;
		}
		if ( event.altKey && event.keyCode === $.coral.keyCode.PAGE_DOWN ) {
			this._activate( this._focusNextTab( this.options.active + 1, true ) );
			return true;
		}
	},

	_findNextTab: function( index, goingForward ) {
		var lastTabIndex = this.tabs.length - 1;

		function constrain() {
			if ( index > lastTabIndex ) {
				index = 0;
			}
			if ( index < 0 ) {
				index = lastTabIndex;
			}
			return index;
		}

		while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
			index = goingForward ? index + 1 : index - 1;
		}

		return index;
	},

	_focusNextTab: function( index, goingForward ) {
		index = this._findNextTab( index, goingForward );
		this.tabs.eq( index ).focus();
		return index;
	},

	_setOption: function( key, value ) {
		if ( key === "active" ) {
			// _activate() 处理无效值 并更新this.options			
			if (typeof value === "string") {				
				this._activate( this._getIndex ( value) );
			} else {
				this._activate( value );
			}	
			return ;
		}
		
		if ( key === "disabled" ) {
			// 不使用 组件工厂的disabled
			this._setupDisabled( value );
			return;
		}

		this._super( key, value);

		if ( key === "collapsible" ) {
			this.element.toggleClass( "coral-tabs-collapsible", value );
			// 设置collapsible: false 为翻转; 打开第一个panel
			if ( !value && this.options.active === false ) {
				this._activate( 0 );
			}
		}

		if ( key === "event" ) {
			this._setupEvents( value );
		}

		if ( key === "heightStyle" ) {
			this._setupHeightStyle( value );
		}
	},

	_tabId: function( tab ) {
		return tab.attr( "aria-controls" ) || "coral-tabs-" + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
	},

	refresh: function() {
		var options = this.options,
			lis = this.tablist.children( ":has(a[href])" );

		// 通过html class属性取得tabs是否为禁用
		// 这个将会改变_refresh()中的一个布尔值
		options.disabled = $.map( lis.filter( ".coral-state-disabled" ), function( tab ) {
			return lis.index( tab );
		});

		this._processTabs();

		// 翻转的 或者没有tabs
		if ( options.active === false || !this.anchors.length ) {
			options.active = false;
			this.active = $();
		// 已激活完成的
		} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
			// 其余tabs将被禁用
			if ( this.tabs.length === options.disabled.length ) {
				options.active = false;
				this.active = $();
			// 激活先前一个tabs
			} else {
				this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
			}
		// 将会发生激活
		} else {
			// 确定激活的tabsIndex为正确的
			options.active = this.tabs.index( this.active );
		}

		this._refresh();
	},

	_refresh: function() {
		var $this=this;
		this._setupDisabled( this.options.disabled );
		this._setupEvents( this.options.event );

		this.tabs.not( this.active ).attr({
			"aria-selected": "false",
			"aria-expanded": "false",
			tabIndex: -1
		});
		
		
		this.panels.not( this._getPanelForTab( this.active ) )
			.hide()
			.attr({
				"aria-hidden": "true"
			});

		// Make sure one tab is in the tab order
		if ( !this.active.length ) {
			this.tabs.eq( 0 ).attr( "tabIndex", 0 );
		} else {
			this.active
				.addClass( "coral-tabs-active coral-state-active" )
				.attr({
					"aria-selected": "true",
					"aria-expanded": "true",
					tabIndex: 0
				});
			this._getPanelForTab( this.active )
				.show()
				.attr({
					"aria-hidden": "false"
				}).attr({
					"data-render": ""
				});
		}
		// the height of ul may be changed when the border of active li is not equal the default li.
		this._setupHeightStyle( this.options.heightStyle );
	},
	//增加Tab
	add: function(option) {
		option=option||{};
		var disabled = this.options.disabled, // 禁用则忽略操作
		panelId = null,
		tabId = option.tabId,
		li = null,
		label = option.label, 
		ariaControls = option.ariaControls, 
		isUrl = false,
		href = option.href,
		closeable=option.closeable==undefined?false:option.closeable,
		closespan=closeable===true?"<span class='coral-closable cui-icon-cross2'></span>":"",
		content = option.content;
		if ( disabled === true ) {
			return;
		}
		//lihaibo add begin
		if ( typeof this.options.newbtn == "boolean" && this.options.newbtn ) {
			this.tablist.find( "> li:last").remove();
		}		
		//lihaibo add end
		//获得uuid
		if( ariaControls ){
			panelId = ariaControls;
		} else if ( typeof href === "undefined" ) {
			panelId = $( {} ).uniqueId()[ 0 ].id;
		} else {
			panelId = href;
			if (panelId.indexOf("#") == 0) {
				panelId = panelId.substr(1);
			}else{
				isUrl = true;
			}
		}
		tabId = tabId ? "id=" + tabId : "";
		var tabTemplate="<li " + tabId +"><a href='#{href}'>"+label+"</a>{closespan}</li>";	
		
		tabTemplate=tabTemplate.replace( /\{closespan\}/g,closespan);	
		
		if (!isUrl) {
			li = $( tabTemplate.replace( /#\{href\}/g, "#" + panelId ));
		} else {
			li = $( tabTemplate.replace( /#\{href\}/g, panelId ));
			this.component().find( ">.coral-tabs-nav" ).append( li );
			this.component().tabs( "refresh" );
			return ;
		}
		if(ariaControls){
			li.attr("aria-controls",ariaControls);
		}
		//添加操作
		this.component().find( ">.coral-tabs-nav" ).append( li );
		// for tabs at bottom the content must before the nav
		if(this.element.hasClass("coral-tabs-bottom")){
			this.component().find( ">.coral-tabs-nav" ).before( "<div id='" + panelId + "'>"+content+"</div>" );
		}else{
			this.component().append( "<div id='" + panelId + "'>"+content+"</div>" );
		}
      	if ( typeof this.options.newbtn == "boolean" && this.options.newbtn ) {
      		this.addnewbtn();
		}
      	this.refresh();
	},
	//删除Tab
	remove : function(index){
		//禁用则忽略操作
		if ( this.options.disabled ) return;
				
		if (index instanceof Array) { // array of index or id
			for (var i in index) {
				this._remove(index[i]);
			}
		} else {
			this._remove(index);
		} 
		this.refresh();
	},
	_remove: function(index) {
		var removeIndex;
		
		if ( typeof index == "undefined" ) {
			removeIndex = this.options.active;
		} else if ( typeof index == "string" ) {
			removeIndex = this.getIndexById(index);
		} else {
			removeIndex = index;
		}
		
		var removeId=this._getList().find( "> li:has(a[href])" ).eq(removeIndex).attr("aria-controls");
		//删除操作
		this.component().find("li[aria-controls='"+removeId+"']").remove();
		this.component().find("div#"+removeId).remove();
	},
	//lihaibo add begin
	addnewbtn: function () {
		var that = this;
		var newbtn = $("<li class='coral-tabs-newbtn coral-corner-top'><a class='coral-tabs-anchor'><span class='cui-icon-plus-circle2'></span></a></li>");
		newbtn.unbind("click").bind("click", function ( event ) {
			if ( true === that.options.disabled ) {
				return ;
			}
			that._trigger("onTabNew", null, []);
		});
		this.tablist.append(newbtn);
		that._hoverable( newbtn );
	},
	//lihaibo add end
	_processTabs: function() {
		var that = this;
		
		this.tablist = this._getList()
		.addClass( "coral-tabs-nav coral-helper-reset coral-helper-clearfix coral-component-header coral-corner-all" )
		.attr( "role", "tablist" )

		// Prevent users from focusing disabled tabs via click
		.delegate( "> li", "mousedown" + this.eventNamespace, function( event ) {
			if ( $( this ).is( ".coral-state-disabled" ) ) {
				event.preventDefault();
			}
		})

		// support: IE <9
		// Preventing the default action in mousedown doesn't prevent IE
		// from focusing the element, so if the anchor gets focused, blur.
		// We don't have to worry about focusing the previously focused
		// element since clicking on a non-focusable element should focus
		// the body anyway.
		.delegate( ".coral-tabs-anchor", "focus" + this.eventNamespace, function() {
			if ( $( this ).closest( "li" ).is( ".coral-state-disabled" ) ) {
				this.blur();
			}
		});

		this.tabs = this.tablist.find( "> li:has(a[href])" )
			.addClass( "coral-state-default coral-corner-top" )
			.attr({
				role: "tab",
				tabIndex: -1
			});
		this.tabs = this.tabs.filter(function(){
			if ($(this).data("authority") == false){
				$(this).remove();
				var hreff = $(this).find(">a").attr("href");
				if ( hreff.slice(0,1) == "#") {
					$("body").find(hreff).remove();
				}
				return false
			} else return true
		})
		
		this.anchors = this.tabs.map(function() {
				return $( "a", this )[ 0 ];
			})
			.addClass( "coral-tabs-anchor" )
			.attr({
				role: "presentation",
				tabIndex: -1
			});

		this.panels = $();

		this.anchors.each(function( i, anchor ) {
			var selector, panel, panelId,
				anchorId = $( anchor ).uniqueId().attr( "id" ),
				tab = $( anchor ).closest( "li" ),
				originalAriaControls = tab.attr( "aria-controls" );

			tab.find(".coral-closable").addClass("cui-icon-cross2");
			// 内嵌 tab
			if ( that._isLocal( anchor ) ) {
				selector = anchor.hash;
				panelId = selector.substring( 1 );
				panel = that.element.find( that._sanitizeSelector( selector ) );
				if (that.options.renderPanelOnActivate) {
					panel.attr( "data-render", "false" );
				}
			// 远程 tab
			} else {
				// If the tab doesn't already have aria-controls,
				// generate an id by using a throw-away element
				panelId = tab.attr( "aria-controls" ) || $( {} ).uniqueId()[ 0 ].id;
				selector = "#" + panelId;
				panel = that.element.find( selector );
				if ( !panel.length ) {
					panel = that._createPanel( panelId );
					// modify by mengshuai begin
					if(that.element.hasClass("coral-tabs-bottom")){
						panel.insertBefore( that.panels[ i - 1 ] || that.tablist );
					}else{
						panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
					}
					// modify by mengshuai end
				}
				panel.attr( "aria-live", "polite" );
			}

			if ( panel.length) {
				that.panels = that.panels.add( panel );
			}
			if ( originalAriaControls ) {
				tab.data( "coral-tabs-aria-controls", originalAriaControls );
			}
			tab.attr({
				"aria-controls": panelId,
				"aria-labelledby": anchorId
			});
			panel.attr( "aria-labelledby", anchorId );
		});

		this.panels
			.addClass( "coral-tabs-panel coral-component-content coral-corner-bottom" )
			.attr( "role", "tabpanel" );
	},
	// allow overriding how to find the list for rare usage scenarios (#7715)
	_getList: function() {
		return this.tablist || this.element.find( ">ol,>ul" ).eq( 0 );
	},

	_createPanel: function( id ) {
		return $( "<div>" )
			.attr( "id", id )
			.addClass( "coral-tabs-panel coral-component-content coral-corner-bottom" )
			.data( "coral-tabs-destroy", true );
	},

	_setupDisabled: function( disabled ) {
		if ( $.isArray( disabled ) ) {
			if ( !disabled.length ) {
				disabled = false;
			} else if ( disabled.length === this.anchors.length ) {
				disabled = true;
			}
		}

		// 禁用 tabs
		for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
			if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
				$( li )
					.addClass( "coral-state-disabled" )
					.attr( "aria-disabled", "true" );
			} else {
				$( li )
					.removeClass( "coral-state-disabled" )
					.removeAttr( "aria-disabled" );
			}
		}

		this.options.disabled = disabled;
	},

	_setupEvents: function( event ) {
		var that = this;
		var events = {};
		if ( event ) {
			$.each( event.split(" "), function( index, eventName ) {
				events[ eventName ] = "_eventHandler";
			});
		}

		this._off( this.anchors.add( this.tabs ).add( this.panels ).add(this.tabs.children("span.cui-icon-cross2")) );
		// Always prevent the default action, even when disabled
		this._on( true, this.anchors, {
			click: function( event ) {
				event.preventDefault();
			}
		});
		this._on( this.anchors, events );
		this._on( this.tabs.children("span.coral-closable"), { click: "_tabClose" } );
		this._on( this.panels, { keydown: "_panelKeydown" } );
		this._on( this.tabs, { keydown: "_tabKeydown" } );
		this._focusable( this.tabs );
		this._hoverable( this.tabs );
	},
	_tabClose: function(e){
		var that = this;
		if ( that.options.disabled === true ) {return;	}
		
		var closeTab = $(e.target),
			currentTab = closeTab.closest( "li" ),
			panelId = currentTab.attr( "aria-controls" ),
			currentPanel=that._getPanelForTab(currentTab),
			eventData={"currentTab":currentTab,"currentPanel":currentPanel,"panelId":panelId};
		// trigger beforeTabClose
		if(that._trigger("beforeTabClose",e,eventData) === false)return;
		
		currentTab.remove();
 		that.element.find( "#" + panelId ).remove();
  		
  		// trigger onTabClose
  		that._trigger("onTabClose",e,eventData);
  		
  		that.refresh();
	},
	_setupHeightStyle: function( heightStyle ) {
		var maxHeight,
		 	maxWidth,
		 	isVertival = false,
			parent = this.element.parent();

		if ( heightStyle === "fill" ) {
			$.coral.fitParent(this.component(), true);
			maxHeight = parent.height();
			maxWidth = parent.width();
			parent.addClass("coral-noscroll");
			maxHeight -= this.element.outerHeight() - this.element.height();
			// added .not("script") by @haibo lee
			this.element.siblings( ":visible" ).not("script").each(function() {
				var elem = $( this ),
					position = elem.css( "position" );

				if ( position === "absolute" || position === "fixed" ) {
					return;
				}
				maxHeight -= elem.outerHeight(  );
			});

			this.element.children().not( this.panels ).each(function() {
				// add by mengshuai begin
				// if tabs is vertical then do not minus the height of nav 
				if($(this).parent().hasClass("coral-tabs-right")||$(this).parent().hasClass("coral-tabs-left")){
					var position =  $( this ).css( "position" );
					isVertival = true;
					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxWidth -= $( this ).outerWidth( true );
					return;
				}
				// add by mengshuai end
				maxHeight -= $( this ).outerHeight( true );
			});
			var border;
			var vPanel = this.panels.filter(":visible");
				// if panel has border then minus the border
			border = vPanel.outerHeight() - vPanel.innerHeight();
			this.panels.each(function() {
				$( this ).height( Math.max( 0, maxHeight - border -
						$( this ).innerHeight() + $( this ).height() ) );
			});
			if(isVertival){
				var nav = this.element.children("ul");
				nav.height(Math.max( 0, maxHeight -
						nav.innerHeight() + nav.height() ));
			}
		} else if ( heightStyle === "auto" ) {
			maxHeight = 0;
			this.panels.each(function() {
				maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				$( this ).width("");
			}).height( maxHeight );
		}
		this.panels.each(function() {
			if ($(this).is(":visible")) {
				$.coral.refreshAllComponent($( this ));
			}
		});
	},

	_eventHandler: function( event ) {
		var options = this.options,
			active = this.active,
			anchor = $( event.currentTarget ),
			tab = anchor.closest( "li" ),
			clickedIsActive = tab[ 0 ] === active[ 0 ],
			collapsing = clickedIsActive && options.collapsible,
			toShow = collapsing ? $() : this._getPanelForTab( tab ),
			toHide = !active.length ? $() : this._getPanelForTab( active ),
			eventData = {
				oldTab: active,
				oldPanel: toHide,
				newTab: collapsing ? $() : tab,
				newPanel: toShow
			};

		event.preventDefault();

		if ( tab.hasClass( "coral-state-disabled" ) ||
				// tab已加载完毕
				tab.hasClass( "coral-tabs-loading" ) ||
				// 动画中不能切换
				this.running ||
				// 单击活动header，但不会翻转
				( clickedIsActive && !options.collapsible ) ||
				// 允许取消激活
				( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
			return;
		}

		options.active = collapsing ? false : this.tabs.index( tab );

		this.active = clickedIsActive ? $() : tab;
		if ( this.xhr ) {
			this.xhr.abort();
		}

		if ( !toHide.length && !toShow.length ) {
			$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
		}

		if ( toShow.length ) {
			this.load( this.tabs.index( tab ), event );
		}
		this._toggle( event, eventData );
	},

	// 处理选中的tab的show/hide 
	_toggle: function( event, eventData ) {
		var that = this,
			toShow = eventData.newPanel,
			toHide = eventData.oldPanel;

		this.running = true;

		function complete() {
			that.running = false;
			that._trigger( "onActivate", event, eventData );
			if (toShow.attr("data-render") === "false") {
				coral.render(toShow);
			} else {
				$.coral.refreshAllComponent(toShow);
			}
		}

		function show() {
			eventData.newTab.closest( "li" ).addClass( "coral-tabs-active coral-state-active" );

			if ( toShow.length && that.options.show ) {
				that._show( toShow, that.options.show, complete );
			} else {
				toShow.show();
				complete();
			}
		}
		// 处理 隐藏，显示，完成
		if ( toHide.length && this.options.hide ) {
			this._hide( toHide, this.options.hide, function() {
				eventData.oldTab.closest( "li" ).removeClass( "coral-tabs-active coral-state-active" );
				show();
			});
		} else {
			eventData.oldTab.closest( "li" ).removeClass( "coral-tabs-active coral-state-active" );
			toHide.hide();
			show();
		}

		toHide.attr( "aria-hidden", "true" );
		eventData.oldTab.attr({
			"aria-selected": "false",
			"aria-expanded": "false"
		});
		// If we're switching tabs, remove the old tab from the tab order.
		// If we're opening from collapsed state, remove the previous tab from the tab order.
		// If we're collapsing, then keep the collapsing tab in the tab order.
		if ( toShow.length && toHide.length ) {
			eventData.oldTab.attr( "tabIndex", -1 );
		} else if ( toShow.length ) {
			this.tabs.filter(function() {
				return $( this ).attr( "tabIndex" ) === 0;
			})
			.attr( "tabIndex", -1 );
		}

		toShow.attr( "aria-hidden", "false" );
		eventData.newTab.attr({
			"aria-selected": "true",
			"aria-expanded": "true",
			tabIndex: 0
		});
	},
	_activate: function( index ) {
		//如果没有该索引
		if ( index == -1 ) {
			return ;
		}
		var anchor, active = this._findActive( index );
		// 尝试激活已激活的panel
		if ( active[ 0 ] === this.active[ 0 ] ) {
			return;
		}
		// 尝试翻转，模仿点击当前活动的header
		if ( !active.length ) {
			active = this.active;
		}

		anchor = active.find( ".coral-tabs-anchor" )[ 0 ];
		this._eventHandler({
			target: anchor,
			currentTarget: anchor,
			preventDefault: $.noop
		});
	},

	_findActive: function( index ) {
		return index === false ? $() : this.tabs.eq( index );
	},
	/**
	 * 
	 * @param index : href
	 * @returns index
	 */
	_getIndex: function( index ) {
		// 给用户选择提供一个href字符串，来代替数字索引
		if ( typeof index === "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
		}

		return index;
	},
	/**
	 * 根据 index 获取 id
	 */
	getIdByIndex: function ( index ) {
		var lis = this.tablist.children("li").filter( function() {
			return $(this).hasClass("coral-state-default");
		});
		return lis.eq( index ).attr( "aria-controls" );
	}, 
	/**
	 * 根据 id 获取 index 
	 */
	getIndexById: function ( id ) {
		var lis = this.tablist.children("li").filter( function() {
			return $(this).hasClass("coral-state-default");
		});
		return lis.index( lis.filter( "[aria-controls$='" + id + "']" ) );
	},
	getIndexByTabId: function ( id ) {
		 var lis = this.tablist.children("li").filter( function() {
			 return $(this).hasClass("coral-state-default");
		 });
		 return lis.index( lis.filter( "#" + id ) );
	},
	/**
	 * 获取 tabs 的所有 tab 的 id 列表
	 * @returns {Array}
	 */
	getAllTabId: function () {
		return this.getPanelIds();
	},
	getPanelIds: function(){
		var idList = [];

		this.tabs.filter( "[aria-controls]" ).each( function() {
			var id = $( this ).attr( "aria-controls" );
			
			if ( "" != id ) {
				idList.push( id );
			}
		});
		
		return idList;
	},
	getTabIds: function(){
		var idList = [];
		var lis = this.tablist.children("li").each( function() {
			var id = $( this ).attr( "id" );
			
			if ( "" != id ) {
				idList.push( id );
			}
		});
		return idList;
	},
	getTabEl: function(){
		var lis = this.tablist.children("li.coral-state-default");
		return lis;
	},
	getPanelEl: function(){
        // TODO
		return {};
	},
	getLength: function(){
	    return this.tabs.find( "[aria-controls]" ).length;
	},
	_destroy: function() {
		if ( this.xhr ) {
			this.xhr.abort();
		}

		this.element.removeClass( "coral-tabs coral-component coral-component-content coral-corner-all coral-tabs-collapsible" );

		this.tablist
			.removeClass( "coral-tabs-nav coral-helper-reset coral-helper-clearfix coral-component-header coral-corner-all" )
			.removeAttr( "role" );

		this.anchors
			.removeClass( "coral-tabs-anchor" )
			.removeAttr( "role" )
			.removeAttr( "tabIndex" )
			.removeUniqueId();

		this.tablist.unbind( this.eventNamespace );
		
		this.tabs.add( this.panels ).each(function() {
			if ( $.data( this, "coral-tabs-destroy" ) ) {
				$( this ).remove();
			} else {
				$( this )
					.removeClass( "coral-state-default coral-state-active coral-state-disabled " +
						"coral-corner-top coral-corner-bottom coral-component-content coral-state-active coral-tabs-panel" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-live" )
					.removeAttr( "aria-busy" )
					.removeAttr( "aria-selected" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "role" );
			}
		});

		this.tabs.each(function() {
			var li = $( this ),
				prev = li.data( "coral-tabs-aria-controls" );
			if ( prev ) {
				li
					.attr( "aria-controls", prev )
					.removeData( "coral-tabs-aria-controls" );
			} else {
				li.removeAttr( "aria-controls" );
			}
		});

		this.panels.show();

		if ( this.options.heightStyle !== "content" ) {
			this.panels.css( "height", "" );
		}
	},

	enable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === false ) {
			return;
		}

		if ( index === undefined ) {
			disabled = false;
		} else {
			index = this._getIndex( index );
			if ( $.isArray( disabled ) ) {
				disabled = $.map( disabled, function( num ) {
					return num !== index ? num : null;
				});
			} else {
				disabled = $.map( this.tabs, function( li, num ) {
					return num !== index ? num : null;
				});
			}
		}
		this._setupDisabled( disabled );
	},

	disable: function( index ) {
		var disabled = this.options.disabled;
		if ( disabled === true ) {
			return;
		}

		if ( index === undefined ) {
			disabled = true;
		} else {
			index = this._getIndex( index );
			if ( $.inArray( index, disabled ) !== -1 ) {
				return;
			}
			if ( $.isArray( disabled ) ) {
				disabled = $.merge( [ index ], disabled ).sort();
			} else {
				disabled = [ index ];
			}
		}
		this._setupDisabled( disabled );
	},
	// 20150116 destroyAllonActive 属性为true时，点击tab时，移除其他tab内容 移除其他tab panel内的dom 元素
	_destroyOtherTabs: function( index ) {
		var id = this._getList().find( "> li:has(a[href])" ).eq(index).attr("aria-controls");
		
		this.component().children("div:not(#" + id + ")").empty();
	},
	load: function( index, event ) {
		index = this._getIndex( index );
		var that = this,
			tab = this.tabs.eq( index ),
			anchor = tab.find( ".coral-tabs-anchor" ),
			panel = this._getPanelForTab( tab ),
			eventData = {
				tab: tab,
				panel: panel
			};		
		// 20150116 destroyAllonActive 属性为true时，点击tab时，移除其他tab内容
		if ( this.options.destroyAllonActive ) {
			that._destroyOtherTabs( index );
		}
		// 非远程 lihaibo changed begin
		if ( that._isLocal( anchor[ 0 ] ) || $.data( anchor[0], "cache") ) {
			return ;
		} else if ( this.options.loadonce ) {
			$.data( anchor[0], "cache", true);
		}
		//lihaibo changed end

		this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );
		// 支持: jQuery <1.8
		// jQuery <1.8 在beforeSend方法被取消后返回false
		// 但是1.8起，$.ajax()通常返回jqXHR 
		if ( this.xhr && this.xhr.statusText !== "canceled" ) {
			tab.addClass( "coral-tabs-loading" );
			panel.attr( "aria-busy", "true" );
			panel.loading({
				position:   "inside",
				text:       "加载中，请耐心等候..."
			});
			this.xhr
				.success(function( response ) {
					// 支持: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						panel.html( response );
						if( $.coral.openTag === true ){
							$.parser.parse(panel);
						}
						that._trigger( "onLoad", event, eventData );
					}, 1 );
				})
				.complete(function( jqXHR, status ) {
					// 支持: jQuery <1.8
					// http://bugs.jquery.com/ticket/11778
					setTimeout(function() {
						if ( status === "abort" ) {
							that.panels.stop( false, true );
						}

						tab.removeClass( "coral-tabs-loading" );
						panel.removeAttr( "aria-busy" );

						if ( jqXHR === that.xhr ) {
							delete that.xhr;
						}
					}, 1 );
				});
		}
	},

	_ajaxSettings: function( anchor, event, eventData ) {
		var that = this;
		return {
			url: anchor.attr( "href" ),
			beforeSend: function( jqXHR, settings ) {
				return that._trigger( "beforeLoad", event,
					$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
			},
			// 修改ajax请求方式
			type : that.options.method
		};
	},

	_getPanelForTab: function( tab ) {
		var id = $( tab ).attr( "aria-controls" );
		return this.element.find( this._sanitizeSelector( "#" + id ) );
	},
	getPanelForTab: function( tab ) {
		return this._getPanelForTab( tab );
	}
});
;

/**
 * 组件库4.0：树
 * 
 * 依赖JS文件:
 * jquery.parser.js
 * 
 * 
 */	
var _final = {
	className: {
		BUTTON: "button",
		LEVEL: "level",
		ICO_LOADING: "ico_loading",
		SWITCH: "switch"
	},
	editIcon: "cui-icon-pencil7",
	removeIcon: "cui-icon-cross2",
	event: {
		NODECREATED: "tree_nodeCreated",
		CLICK: "tree_click",
		EXPAND: "tree_expand",
		COLLAPSE: "tree_collapse",
		ASYNC_SUCCESS: "tree_async_success",
		ASYNC_ERROR: "tree_async_error",
		REMOVE: "tree_remove",
		CHECK: "tree_check",
		DRAG: "tree_drag",
		DROP: "tree_drop",
		RENAME: "tree_rename",
		DRAGMOVE:"tree_dragmove"
	},
	id: {
		A: "_a",
		ICON: "_ico",
		SPAN: "_span",
		SWITCH: "_switch",
		UL: "_ul",
		CHECK: "_check",
		EDIT: "_edit",
		INPUT: "_input",
		REMOVE: "_remove"
	},
	line: {
		CENTER: "centerDottedLine",
		BOTTOM: "bottomDottedLine",
		ROOTS: "topDottedLine",
		NOLINE: "noline",
		LINE: "dottedLine"
	},
	folder: {
		OPEN: "folderOpen",
		CLOSE: "folderClose",
		FILE: "file",
		DOCU: "docu"
	},
	arrow: {
		RIGHT: "arrowRight1",
		DOWN: "arrowDown1"
	},
	node: {
		CURHOVER: "coral-state-hover",
		CURSELECTED: "curSelectedNode",
		CURSELECTED_EDIT: "curSelectedNode_Edit",
		TMPTARGET_TREE: "tmpTargetTree",
		TMPTARGET_NODE: "tmpTargetNode"
	},		
	checkbox: {
		STYLE: "checkbox",
		DEFAULT: "coral-state-default",
		DISABLED: "coral-state-disabled",
		FALSE: "false",
		TRUE: "true",
		UNCHECKED:"unchecked",
		CHECKED: "checked",
		PARTIAL: "Partical",
		FOCUS: "coral-state-focus"
	},
	radio: {
		STYLE: "radio",
		TYPE_ALL: "all",
		TYPE_LEVEL: "level"
	},
	move: {
		TYPE_INNER: "inner",
		TYPE_PREV: "prev",
		TYPE_NEXT: "next"
	},
};
var settings = {}, roots = {}, caches = {};
//树组件静态常量
$.component("coral.tree",{
	castProperties : ['data','fontCss', 'rootNode', 'chkboxType','formatter','showIcon','addDiyDom','beforeDrag','onDrag','onDrop'],
	version: "4.0.2",
	componentName: "tree",
	componentFullName: "coral-tree",	
//树组件属性
	options : {
		treeId: "",//Tree的唯一标识，初始化后，等于 用户定义的 Tree 容器的 id 属性值。
		treeObj: null,//Tree 容器的 jQuery 对象
		//view
		clickExpand: false,
		disabledMessage : "the node is disabled",
		disabled: false,
		addDiyDom: null,//用于在节点上固定显示用户自定义控件
		autoCancelSelected: true,//点击节点时，按下 Ctrl 或 Cmd 键是否允许取消选择操作
		dblClickExpand: true,//双击节点时，是否自动展开父节点的标识
		expandSpeed: "fast",//节点展开、折叠时的动画速度，设置方法同 JQuery 动画效果中 speed 参数
		fontCss: {},//个性化文字样式，只针对 Tree 在节点上显示的<A>对象。
		iconUrl: true,//自定义图标是用url还是用fonts里的图标
		nameIsHTML: false,//设置 name 属性是否支持 HTML 脚本
		selectedMulti: true,//设置是否允许同时选中多个节点
		showIcon: true,//设置 Tree 是否显示节点的图标
		showLine: false,//设置 Tree 是否显示节点之间的连线
		showTitle: true,//设置 Tree 是否显示节点的 title 提示信息(即节点 DOM 的 title 属性)
		txtSelectedEnable: false,//设置 Tree 是否允许可以选择 Tree DOM 内的文本
		rootInNode : false,//是否在data属性中提取根节点
		showRootNode : true,//是否显示根节点
		rootNode: false,//设置根节点 boolean或者json节点类型 如果是true则将树的nodes的根作为根节点，如果是json，则将传进来的node作为根节点
		//this._key
		keyChildren: "children",//Tree 节点数据中保存子节点数据的属性名称
		keyName: "name",//Tree 节点数据保存节点名称的属性名称
		keyTitle: "",//Tree 节点数据保存节点提示信息的属性名称
		keyUrl: "url",//Tree 节点数据保存节点链接的目标 URL 的属性名称
		//this._simpleData
		simpleDataEnable: false,//Nodes 数据是否采用简单数据模式
		simpleDataIdKey: "id",//节点数据中保存唯一标识的属性名称
		simpleDataPIdKey: "pId",//节点数据中保存其父节点唯一标识的属性名称
		simpleDataRootPId: null,//用于修正根节点父节点数据，即 pIdKey 指定的属性值
		//this._keep
		keepParent: false,//Tree 的节点父节点属性锁，是否始终保持 isParent = true
		keepLeaf: false,//Tree 的节点叶子节点属性锁，是否始终保持 isParent = false
		//async
		asyncEnable: false,//设置 Tree 是否开启异步加载模式
		asyncContentType: "application/x-www-form-urlencoded",//Ajax 提交参数的数据类型
		asyncType: "post",//Ajax 的 http 请求模式
		asyncDataType: "text",//Ajax 获取的数据类型
		asyncUrl: "",//Ajax 获取数据的 URL 地址
		asyncAutoParam: [],//异步加载时需要自动提交父节点属性的参数
		asyncOtherParam: [],//Ajax 请求提交的静态参数键值对
		asyncDataFilter: null,//用于对 Ajax 返回数据进行预处理的函数
		
		//多选树属性
		checkable: false,//设置 Tree 的节点上是否显示 checkbox / radio
		autoCheckTrigger: false,//设置自动关联勾选时是否触发 beforeCheck / onCheck 事件回调函数
		chkStyle: _final.checkbox.STYLE,//勾选框类型(checkbox 或 radio）
		nocheckInherit: false,//当父节点设置 nocheck = true 时，设置子节点是否自动继承 nocheck = true 
		chkDisabledInherit: false,//当父节点设置 chkDisabled = true 时，设置子节点是否自动继承 chkDisabled = true 
		radioType: _final.radio.TYPE_LEVEL,//radio 的分组范围 level / all
		chkboxType: {//勾选 checkbox 对于父子节点的关联关系
			"Y": "ps",
			"N": "ps"
		},
		//this._key
		keyChecked: "checked",//Tree 节点数据中保存 check 状态的属性名称
		//可编辑状态的属性
		editable: false,//设置 Tree 是否处于编辑状态
		editNameSelectAll: false,//节点编辑名称 input 初次显示时,设置 txt 内容是否为全选状态
		showRemoveBtn: true,//设置是否显示删除按钮
		showRenameBtn: true,//设置是否显示编辑名称按钮
		removeTitle: "remove",//删除按钮的 Title 辅助信息
		renameTitle: "rename",//编辑名称按钮的 Title 辅助信息
		//edit.drag
		dragStyle: "line", //"line" 拖动节点时的提示方式，是箭头提示还是线形提示
		dragAutoExpandTrigger: false,//拖拽时父节点自动展开是否触发 onExpand 事件回调函数
		dragIsCopy: true,//拖拽时, 设置是否允许复制节点
		dragIsMove: true,//拖拽时, 设置是否允许移动节点
		dragPrev: true,//拖拽到目标节点时，设置是否允许移动到目标节点前面的操作
		dragNext: true,//拖拽到目标节点时，设置是否允许移动到目标节点后面的操作
		dragInner: true,//拖拽到目标节点时，设置是否允许成为目标节点的子节点
		dragMinMoveSize: 5,//判定是否拖拽操作的最小位移值 (单位：px)
		dragBorderMax: 10,//拖拽节点成为根节点时的 Tree 内边界范围 (单位：px)
		dragBorderMin: -5,//拖拽节点成为根节点时的 Tree 外边界范围 (单位：px)
		dragMaxShowNodeNum: 5,//拖拽多个兄弟节点时，浮动图层中显示的最大节点数
		dragAutoOpenTime: 500,//拖拽时父节点自动展开的延时间隔
		//view
		addHoverDom: null,//用于当鼠标移动到节点上时，显示用户自定义控件
		removeHoverDom: null,//用于当鼠标移出节点时，隐藏用户自定义控件
		//回调函数
		beforeDrag:null,//用于捕获节点被拖拽之前的事件回调函数，并且根据返回值确定是否允许开启拖拽操作
		beforeDragOpen:null,//用于捕获拖拽节点移动到折叠状态的父节点后，即将自动展开该父节点之前的事件回调函数，并且根据返回值确定是否允许自动展开操作
		beforeDrop:null,//用于捕获节点拖拽操作结束之前的事件回调函数，并且根据返回值确定是否允许此拖拽操作
		beforeEditName:null,//用于捕获节点编辑按钮的 click 事件，并且根据返回值确定是否允许进入名称编辑状态
		beforeReName:null,//用于捕获节点编辑名称结束,更新节点名称数据之前的事件回调函数
		onDrag:null,//用于捕获节点被拖拽的事件回调函数
		onDragMove:null,//用于捕获节点被拖拽过程中移动的事件回调函数
		onDrop:null,//用于捕获节点拖拽操作结束的事件回调函数
		onReName:null,//用于捕获节点编辑名称结束之后的事件回调函数		
		//callback
		beforeCheck:null,//用于捕获 勾选 或 取消勾选 之前的事件回调函数，并且根据返回值确定是否允许 勾选 或 取消勾选 
		onCheck:null,//用于捕获 checkbox / radio 被勾选 或 取消勾选的事件回调函数		
		//callback
		beforeAsync:null,//用于捕获异步加载之前的事件回调函数，Tree 根据返回值确定是否允许进行异步加载
		beforeClick:null,//用于捕获单击节点之前的事件回调函数，并且根据返回值确定是否允许单击操作
		beforeDblClick:null,//用于捕获 Tree 上鼠标双击之前的事件回调函数，并且根据返回值确定触发 onDblClick 事件回调函数
		beforeRightClick:null,//用于捕获 Tree 上鼠标右键点击之前的事件回调函数，并且根据返回值确定触发 onRightClick 事件回调函数
		beforeMouseDown:null,//用于捕获 Tree 上鼠标按键按下之前的事件回调函数，并且根据返回值确定触发 onMouseDown 事件回调函数
		beforeMouseUp:null,//用于捕获 Tree 上鼠标按键松开之前的事件回调函数，并且根据返回值确定触发 onMouseUp 事件回调函数
		beforeExpand:null,//用于捕获父节点展开之前的事件回调函数，并且根据返回值确定是否允许展开操作
		beforeCollapse:null,//用于捕获父节点折叠之前的事件回调函数，并且根据返回值确定是否允许折叠操作
		beforeRemove:null,//用于捕获节点被删除之前的事件回调函数，并且根据返回值确定是否允许删除操作	
		onLoadError:null,//用于捕获异步加载出现异常错误的事件回调函数
		onLoad:null,//用于捕获异步加载正常结束的事件回调函数
		onNodeCreated:null,//用于捕获节点生成 DOM 后的事件回调函数
		onClick:null,//用于捕获节点被点击的事件回调函数
		onDblClick:null,//用于捕获 Tree 上鼠标双击之后的事件回调函数
		onRightClick:null,//用于捕获 Tree 上鼠标右键点击之后的事件回调函数
		onMouseDown:null,//用于捕获 Tree 上鼠标按键按下后的事件回调函数
		onMouseUp:null,//用于捕获 Tree 上鼠标按键松开后的事件回调函数
		onExpand:null,//用于捕获节点被展开的事件回调函数
		onCollapse:null,//用于捕获节点被折叠的事件回调函数
		onRemove:null//用于捕获删除节点之后的事件回调函数			
	},
	 _create: function () {
		 var settings = {}, roots = {}, caches = {};
		 var options = this.options,
		     obj = this.element;
		 var returnValue = this;
		 this._initTree();
		 
	},
	_getTreeObj: function(treeId) {
		var o = this._getTreeTools(treeId);
		return o ? o : null;
	},
	_initTree: function() {
		
		var obj = this.element;
		var nodeData = this.options.data;
			//添加tree组件样式
		if(!obj.hasClass("coral-tree")) obj.addClass("coral-tree");
		obj.attr("component-role", "tree");
//		var comp  ="<div></div>";
//		this.compContent = $(this.comp);
//		this.compContent.append(obj);
	    var opts = this.options;
		opts.treeId = obj.uniqueId().attr("id");
		opts.treeObj = obj;
		opts.treeObj.empty();
		settings[opts.treeId] = opts;
		if ( opts.cls ) {
			obj.addClass( opts.cls );
		}
		if ( opts.componentCls ){
			obj.addClass( opts.componentCls );
		}
		//For some older browser,(e.g., ie6)
		if(typeof document.body.style.maxHeight === "undefined") {
			opts.expandSpeed = "";
		}
		this._initNodeBind = {
				bind: [this._coreBindEvent,this._checkBindEvent,this._editBindEvent],
				unbind: [this._coreUnbindEvent,this._checkUnbindEvent,this._editUnbindEvent],
				caches: [this._coreInitCache,this._checkInitCache,this._editInitCache],
				nodes: [this._coreInitNode,this._checkInitNode,this._editInitNode],
				proxys: [this._checkEventProxy,this._coreEventProxy,this._editEventProxy],
				roots: [this._coreInitRoot,this._checkInitRoot,this._editInitRoot],
				beforeA: [this._beforeA],
				afterA: [],
				innerBeforeA: [],
				innerAfterA: [],
				treeTools: [this._checkTreeTools,this._editTreeTools]
		};
		this._initRoot(opts);
		var root = this._getRoot(opts),
		childKey = opts.keyChildren;
		nodeData = nodeData ? this._clone(this._isArray(nodeData)? nodeData : [nodeData]) : [];
		nodeData = this._createRootNodes(opts, nodeData );
		if (opts.simpleDataEnable) {
			root[childKey] = this._transformToTreeFormat(opts, nodeData);
		} else {
			root[childKey] = nodeData;
		}
		this._initCache(opts);
		this._unbindTree(opts);
		this._bindTree(opts);
		this._unbindEvent(opts);
		this._bindEvent(opts);
		if ( opts.disabled ) {
			this.disable();
		} else{
			this.enable();
		}
		// // 20140108 lihaibo added
		opts.isInit = true;
		opts.dataLoaded = false;
		opts.rootReload = true;
		// // 20140108 lihaibo added
		if (root[childKey] && root[childKey].length > 0) {
			this._createNodes(opts, 0, root[childKey]);
			opts.treeObj.trigger(_final.event.ASYNC_SUCCESS, [opts.treeId, null, root[childKey]]);
		} else if (opts.asyncEnable && opts.asyncUrl && opts.asyncUrl !== '') {
			this._asyncNode(opts);	
		}
	},
	_setOption: function( key, value ) {
		var options = key,
			opts = this.options;
		this._super(key, value );
		if ( key === "disabled" ) {
			if ( value ) {
				$("#"+opts.treeId).prepend("<div class='coral-state-disabled tree-disabled'></div>");
			} else {
				$("#"+opts.treeId+" .tree-disabled").remove();
			}
		}
	},
	_destroy: function() {
		var opts = this.options;
		if (!opts) return;
		this._initCache(opts);
		this._initRoot(opts);
		this._unbindTree(opts);
		this._unbindEvent(opts);
		this.element.empty();
		delete settings[this.options.treeId];
	},
	// 初始化搜索引擎，创建拼音搜索索引
	/**
	 * key 如： 
	 * dataArr 如： [{id:'1', name:'节点1'},{id:'2', name:'节点2'}]
	 */
	_pinyinEngine: function () {
		return new pinyinEngine();
	},
	_pinyinSetCache: function (engine, key, dataArr) {
		for (var i in dataArr) {
			// @param	{Array}	标签
			// @param	{Any}	被索引的内容
			engine.setCache ([dataArr[i][key]], dataArr[i]);
		}	
		return engine;
	},
	_pinyinSearch: function (engine, keyword, callback) {
		var dataResult = [];	
		engine.search (keyword, function (data) {
			dataResult.push (data);
		});	
		callback (dataResult);
	},
	// lihaibo add  exhide.js
	/**
	 * keysObj ({id:testId, name:testName, ... })
	 */			
	filterNodesByParam:  function (keysObj) {
		var that = this,
			nodes = that.getNodes(),
			nodesArr = [],
			nodesFilter = [];		
		that.expandAll (true);
		nodesArr = that.transformToArray (nodes);	
		var engine = that._pinyinEngine ();
			engine = that._pinyinSetCache (engine, "name", nodesArr);						
		that.hideNodes (nodesArr);	
		if ( typeof keysObj === "object" ) {
			$.each( keysObj, function (k, v) {
				//nodesFilter = nodesFilter.concat( that.getNodesByParamFuzzy (k, v) );
				if (k == "name") {
					that._pinyinSearch(engine, v, function (dataFilter) { that.showNodes (dataFilter, {showParents: true});	});
				}  
			});
		}
	},
	disable: function(){
		return this._setOption("disabled", true );
	},
	enable: function(){
		return this._setOption("disabled", false );
	},
	showNodes: function(nodes, options) {
		var opts = this.options;
		this._showNodes(opts, nodes, options);
	},
	showNode: function(node) {
		var opts = this.options;
		if (!node) {
			return;
		}
		this._showNodes(opts, [node], opts);
	},
	hideNodes: function(nodes) {
		var opts = this.options;
		this._hideNodes(opts, nodes, opts);
	},
	hideNode: function(node) {
		var opts = this.options;
		if (!node) {
			return;
		}
		this._hideNodes(opts, [node], opts);
	},
	// lihaibo add end
	//删除节点
	removeNode: function(node, callbackFlag) {
		var opts = this.options;
		if (!node) return;
		callbackFlag = !!callbackFlag;
		if (callbackFlag && this._apply(opts.beforeRemove, [opts.treeId, node, opts], true) == false) return;
		this._removeNode(opts, node);
		if (callbackFlag) {
			opts.treeObj.trigger(_final.event.REMOVE, [opts.treeId, node]);
		}
	},
	//选中指定节点
	selectNode: function(node, addFlag) {
		var opts = this.options;
		if (!node) return;
		if (this._uCanDo(opts)) {
			addFlag = opts.selectedMulti && addFlag;
			if (node.parentTId) {
				this._expandCollapseParentNode(opts, node.getParentNode(), true, false, function() {
					try{this._$(node, opts).focus().blur();}catch(e){}
				});
			} else {
				try{this._$(node, opts).focus().blur();}catch(e){}
			}
			this._selectNode(opts, node, addFlag);
		}
	},
	//将简单 Array 格式数据转换为 Tree 使用的标准 JSON 嵌套数据格式
	transformToTreeNodes: function(simpleNodes) {
		var opts = this.options;
		return this._transformToTreeFormat(opts, simpleNodes);
	},
	//将 Tree 使用的标准 JSON 嵌套格式的数据转换为简单 Array 格式
	transformToArray: function(nodes) {
		var opts = this.options;
		return this._transformToArrayFormat(opts, nodes);
	},
	//添加节点
	addNodes: function(parentNode, newNodes, isSilent) {
		var opts = this.options;
		var that = this;
		var oldLevel = parentNode != null ? (typeof(parentNode.level)=="undefined" ? 0 : parentNode.level) : null;
		if (!newNodes) return null;
		if (!parentNode) parentNode = null;
		if (parentNode && !parentNode.isParent && opts.keepLeaf) return null;
		var xNewNodes = that._clone(that._isArray(newNodes)? newNodes: [newNodes]);
		function addCallback() {
			that._addNodes(opts, parentNode, xNewNodes, (isSilent==true));
		}

		if (that._canAsync(opts, parentNode)) {
			that._asyncNode(opts, parentNode, isSilent, addCallback);
		} else {
			addCallback();
		}
		this._addLine(opts, parentNode,oldLevel);
		return xNewNodes;
	},
	//取消节点的选中状态
	cancelSelectedNode: function(node) {
		var opts = this.options;
		this._cancelPreSelectedNode(opts, node);
	},
	//销毁 Tree 的方法
	
	//展开 / 折叠 全部节点
	expandAll: function(expandFlag) {
		var opts = this.options;
		expandFlag = !!expandFlag;
		this._expandCollapseSonNode(opts, null, expandFlag, true);
		return expandFlag;
	},
	//展开 / 折叠 指定的节点
	expandNode: function(node, expandFlag, sonSign, focus, callbackFlag) {
		var opts = this.options;
		if (!node || !node.isParent) return null;
		if (expandFlag !== true && expandFlag !== false) {
			expandFlag = !node.open;
		}
		callbackFlag = !!callbackFlag;

		if (callbackFlag && expandFlag && (this._apply(opts.beforeExpand, [opts.treeId, node, opts], true) == false)) {
			return null;
		} else if (callbackFlag && !expandFlag && (this._apply(opts.beforeCollapse, [opts.treeId, node, opts], true) == false)) {
			return null;
		}
		if (expandFlag && node.parentTId) {
			this._expandCollapseParentNode(opts, node.getParentNode(), expandFlag, false);
		}
		if (expandFlag === node.open && !sonSign) {
			return null;
		}
		this._getRoot(opts).expandTriggerFlag = callbackFlag;
		if (!this._canAsync(opts, node) && sonSign) {
			this._expandCollapseSonNode(opts, node, expandFlag, true, function() {
				if (focus !== false) {try{this._$(node, opts).focus().blur();}catch(e){}}
			});
		} else {
			node.open = !expandFlag;
			this._switchNode(opts, node);
			if (focus !== false) {try{this._$(node, opts).focus().blur();}catch(e){}}
		}
		return expandFlag;
	},
	//获取 Tree 的全部节点数据
	getNodes: function() {
		var opts = this.options;
		return this._getNodes(opts);
	},
	//根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象
	getNodeByParam: function(key, value, parentNode) {
		var opts = this.options;
		if (!key) return null;
		return this._getNodeByParam(opts, parentNode?parentNode[opts.keyChildren]:this._getNodes(opts), key, value);
	},
	//根据 Tree 的唯一标识 tId 快速获取节点 JSON 数据对象
	getNodeByTId: function(tId) {
		var opts = this.options;
		return this._getNodeCache(opts, tId);
	},
	//根据节点数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象集合
	getNodesByParam: function(key, value, parentNode) {
		var opts = this.options;
		if (!key) return null;
		return this._getNodesByParam(opts, parentNode?parentNode[opts.keyChildren]:this._getNodes(opts), key, value);
	},
	//根据节点数据的属性搜索，获取条件模糊匹配的节点数据 JSON 对象集合
	getNodesByParamFuzzy: function(key, value, parentNode) {
		var opts = this.options;
		if (!key) return null;
		return this._getNodesByParamFuzzy(opts, parentNode?parentNode[opts.keyChildren]:this._getNodes(opts), key, value);
	},
	//根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据
	getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {
		var opts = this.options;
		isSingle = !!isSingle;
		if (!filter || (typeof filter != "function")) return (isSingle ? null : []);
		return this._getNodesByFilter(opts, parentNode?parentNode[opts.keyChildren]:this._getNodes(opts), filter, isSingle, invokeParam);
	},
	//获取某节点在同级节点中的序号（从0开始）
	getNodeIndex: function(node) {
		var opts = this.options;
		if (!node) return null;
		var childKey = opts.keyChildren,
		parentNode = (node.parentTId) ? node.getParentNode() : this._getRoot(opts);
		for (var i=0, l = parentNode[childKey].length; i < l; i++) {
			if (parentNode[childKey][i] == node) return i;
		}
		return -1;
	},
	//获取 Tree 当前被选中的节点数据集合
	getSelectedNodes: function() {
		var opts = this.options;
		var r = [], list = this._getRoot(opts).curSelectedList;
		for (var i=0, l=list.length; i<l; i++) {
			r.push(list[i]);
		}
		return r;
	},
	//是否选中节点
	isSelectedNode: function(node) {
		var opts = this.options;
		return this._isSelectedNode(opts, node);
	},
	//强行异步加载父节点的子节点
	reAsyncChildNodes: function(parentNode, reloadType, isSilent, opts) {
		var options = this.options;
		if (!this.options.asyncEnable) return;
		var isRoot = !parentNode;
		if (isRoot) {
			parentNode = this._getRoot(options);
		}
		if (reloadType=="refresh") {
			var childKey = this.options.keyChildren;
			for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
				this._removeNodeCache(options, parentNode[childKey][i]);
			}
			this._removeSelectedNode(options);
			parentNode[childKey] = [];
			if (isRoot) {
				this.options.treeObj.empty();
			} else {
				var ulObj = this._$(parentNode, _final.id.UL, options);
				ulObj.empty();
			}
		}
		this._asyncNode(this.options, isRoot? null:parentNode, !!isSilent, null, opts);
	},
	// 是reAsyncChildNodes的数组reload版
	reLoadChildNodes: function(parentNode, reloadType, isSilent, newNodes) {
		var opts = this.options;
		//if (this.setting.asyncEnable) return;
		var isRoot = !parentNode;
		if (isRoot) {
			parentNode = this._getRoot(opts);
		}
		if (reloadType=="refresh") {
			var childKey = opts.keyChildren;
			for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {
				this._removeNodeCache(opts, parentNode[childKey][i]);
			}
			this._removeSelectedNode(opts);
			parentNode[childKey] = [];
			if (isRoot) {
				this.element.empty();
			} else {
				var ulObj = this._$(parentNode, _final.id.UL, opts);
				ulObj.empty();
			}
		}
		if (opts.isInit ){
			newNodes = this._createRootNodes(opts,newNodes);
		}
		this.addNodes(isRoot? null:parentNode, newNodes, !!isSilent);
	},
	//刷新 Tree 
	refresh: function() {
		var opts = this.options;
		opts.treeObj.empty();
		var root = this._getRoot(opts),
		nodes = root[opts.keyChildren]
		this._initRoot(opts);
		root[opts.keyChildren] = nodes
		this._initCache(opts);
		this._createNodes(opts, 0, root[opts.keyChildren]);
	},
	/**
	 * 重载 Tree，支持数组
	 * 
	 * url不能传进来，因为如果是异步树，点击节点的时候则会请求之前的url
	 */
	reload: function(opts) {
		var options = this.options;
		this.options.isInit = true;
		if(opts){// 有参数的时候
			opts = opts || {};
			var that = this,
				nodes = [], 
				isUrl = false;
			if ( typeof( opts ) !== "string" ) {
				// 传过来的是object，需要区别是data还是options
				// 如果是options，可能是options.data或者options.url ，否则才为data
				if ( opts.data ) { //传进来的是options对象
					nodes = opts.data;
				} else {
					if(opts instanceof Array){
						nodes = opts;
					} else {
						if ( opts.asyncUrl ) {
							this.options.asyncUrl = opts.asyncUrl;
						}
						isUrl = true;
					}
				}
			} else {
				isUrl = true;
				this.options.asyncUrl = opts;
			}
			if ( isUrl && this.options.asyncEnable) {
				this.reAsyncChildNodes( null, "refresh", null, opts );
			} else {
				this.reLoadChildNodes( null, "refresh", null, nodes );
				this._apply(options.onLoad, [null, this.options.treeId]);
				if ( opts.onLoad ) {
					this._apply(options.onLoad, [options.treeId, null, nodes]);
				} else {
					options.treeObj.trigger(_final.event.ASYNC_SUCCESS, [options.treeId, null, nodes]);
				}
			}
		} else if ( this.options.asyncEnable ){// 无参数的时候
			opts = opts || {};
			this.reAsyncChildNodes( null, "refresh", null, opts );
		}
	},
	//清空某父节点的子节点
	removeChildNodes: function(node) {
		var opts = this.options;
		if (!node) return null;
		var childKey = opts.keyChildren,
		nodes = node[childKey];
		this._removeChildNodes(opts, node);
		return nodes ? nodes : null;
	},	
	//树组件使用root来保存全部数据
	//普通树初始化root
	_coreInitRoot : function (opts) {
		var opts = this.options;
		var root = this._getRoot(opts);
		if (!root) {
			root ={};
			this._setRoot(opts, root);
		}
		root[opts.keyChildren] = [];
		root.expandTriggerFlag = false;
		root.curSelectedList = [];
		root.noSelection = true;
		root.createdNodes = [];
		root.zId = 0;
		root._ver = (new Date()).getTime();
	},
	//多选树初始化root
	_checkInitRoot : function (opts) {
		var opts = this.options;
		var root = this._getRoot(opts);
		root.radioCheckedList = [];
	},
	//可编辑树初始化root
	_editInitRoot : function (opts) {
		var opts = this.options;
		var root = this._getRoot(opts), roots = this._getRoots();
		root.curEditNode = null;
		root.curEditInput = null;
		root.curHoverNode = null;
		root.dragFlag = 0;
		root.dragNodeShowBefore = [];
		root.dragMaskList = new Array();
		roots.showHoverDom = true;
	},
	//普通树初始化cache
	_coreInitCache : function(opts) {
		var opts = this.options;
		var cache = this._getCache(opts);
		if (!cache) {
			cache = {};
			this._setCache(opts, cache);
		}
		cache.nodes = [];
		cache.doms = [];
	},
	//多选树初始化cache
	_checkInitCache : function(treeId) {},
	//可编辑树初始化cache
	_editInitCache : function(treeId) {},
	//普通树绑定事件
	_coreBindEvent : function(opts) {
		var opts = this.options;
		var that = this;
		//bind = this._init.bind;
		var treeObj = opts.treeObj,
		cache = _final.event;
		treeObj.bind(cache.NODECREATED, function (event, treeId, node) {
			that._trigger("onNodeCreated", null, [treeId, node, opts]);
		});

		treeObj.bind(cache.CLICK, function (event, srcEvent, treeId, node, clickFlag) {
			if (node.nodeDisabled==true)return false;
			that._trigger("onClick", null, [treeId, node, clickFlag, opts]);
		});

		treeObj.bind(cache.EXPAND, function (event, treeId, node) {
			that._trigger("onExpand", null, [treeId, node, opts]);
		});

		treeObj.bind(cache.COLLAPSE, function (event, treeId, node) {
			that._trigger("onCollapse", null, [treeId, node, opts]);
		});

		treeObj.bind(cache.ASYNC_SUCCESS, function (event, treeId, node, msg) {
			that._trigger("onLoad", null,[treeId, node, msg, opts]);
		});

		treeObj.bind(cache.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {
			that._trigger("onLoad", null, [treeId, node, XMLHttpRequest, textStatus, errorThrown, opts]);
		});

		treeObj.bind(cache.REMOVE, function (event, treeId, treeNode) {
			that._trigger("onRemove", null, [treeId, treeNode, opts]);
		});
	},
	//多选树绑定事件
	_checkBindEvent : function(opts) {
		var treeObj = this.element,
			that = this;
		cache = _final.event;
		treeObj.bind(cache.CHECK, function (event, srcEvent, treeId, node) {
			event.srcEvent = srcEvent;
			that._trigger("onCheck", null, [treeId, node, opts]);
		});
	},
	//可编辑树绑定事件
	_editBindEvent : function(opts) {
		var treeObj = this.element;
		var cache = _final.event;
		var that = this;
		treeObj.bind(cache.RENAME, function (event, treeId, treeNode, isCancel) {
			that._trigger("onReName", null, [treeId, treeNode, isCancel, opts]);
		});

		treeObj.bind(cache.DRAG, function (event, srcEvent, treeId, treeNodes) {
			that._trigger("onDrag", null, [treeId, treeNodes, opts]);
		});

		treeObj.bind(cache.DRAGMOVE,function(event, srcEvent, treeId, treeNodes){
			that._trigger("onDragMove", null, [treeId, treeNodes, opts]);
		});

		treeObj.bind(cache.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {
			that._trigger("onDrop", null, [treeId, treeNodes, targetNode, moveType, isCopy, opts]);
		});
	},
	//普通树松绑事件
	_coreUnbindEvent : function(opts) {
		var treeObj = this.element,
		cache = _final.event;
		treeObj.unbind(cache.NODECREATED)
		.unbind(cache.CLICK)
		.unbind(cache.EXPAND)
		.unbind(cache.COLLAPSE)
		.unbind(cache.ASYNC_SUCCESS)
		.unbind(cache.ASYNC_ERROR)
		.unbind(cache.REMOVE);
	},
	//多选树松绑事件
	_checkUnbindEvent : function(opts) {
		var treeObj = this.element;
		var cache = _final.event;
		treeObj.unbind(cache.CHECK);
	},
	//可编辑树松绑事件
	_editUnbindEvent : function(opts) {
		var treeObj = this.element;
		var cache = _final.event;
		treeObj.unbind(cache.RENAME);
		treeObj.unbind(cache.DRAG);
		treeObj.unbind(cache.DRAGMOVE);
		treeObj.unbind(cache.DROP);
	},
	//普通树代理事件
	_coreEventProxy : function(event) {
		var target = event.target,
		opts = this._getSetting(this.options.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;

		if (this._eqs(event.type, "mousedown")) {
			treeEventType = "mousedown";
		} else if (this._eqs(event.type, "mouseup")) {
			treeEventType = "mouseup";
		} else if (this._eqs(event.type, "contextmenu")) {
			treeEventType = "contextmenu";
		} else if (this._eqs(event.type, "click")) {
			if (this._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ _final.id.SWITCH) !== null) {
				tId = this._getNodeMainDom(target).id;
				nodeEventType = "switchNode";
			} else {
				tmp = this._getMDom(opts, target, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
				if (tmp) {
					tId = this._getNodeMainDom(tmp).id;
					nodeEventType = "clickNode";
				}
			}
		} else if (this._eqs(event.type, "dblclick")) {
			treeEventType = "dblclick";
			tmp = this._getMDom(opts, target, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
			if (tmp) {
				tId = this._getNodeMainDom(tmp).id;
				nodeEventType = "switchNode";
			}
		}
		if (treeEventType.length > 0 && tId.length == 0) {
			tmp = this._getMDom(opts, target, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
			if (tmp) {tId = this._getNodeMainDom(tmp).id;}
		}
		// event to node
		if (tId.length>0) {
			node = this._getNodeCache(opts, tId);
			switch (nodeEventType) {
				case "switchNode" :
					if (!node.isParent) {
						nodeEventType = "";
					} else if (this._eqs(event.type, "click")
						|| (this._eqs(event.type, "dblclick") && this._apply(opts.dblClickExpand, [opts.treeId, node, opts], opts.dblClickExpand))) {
						nodeEventCallback = this._onSwitchNode;
					} else {
						nodeEventType = "";
					}
					break;
				case "clickNode" :
					nodeEventCallback = this._onClickNode;
					break;
			}
		}
		// event to Tree
		switch (treeEventType) {
			case "mousedown" :
				treeEventCallback = this._onTreeMousedown;
				break;
			case "mouseup" :
				treeEventCallback = this._onTreeMouseup;
				break;
			case "dblclick" :
				treeEventCallback = this._onTreeDblclick;
				break;
			case "contextmenu" :
				treeEventCallback = this._onTreeContextmenu;
				break;
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//多选树代理事件
	_checkEventProxy : function(e) {
		var target = e.target,
		opts = this._getSetting(this.options.treeId),
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null;
		if (this._eqs(e.type, "mouseover")) {
			if (opts.checkable && this._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ _final.id.CHECK) !== null) {
				tId = this._getNodeMainDom(target).id;
				nodeEventType = "mouseoverCheck";
			}
		} else if (this._eqs(e.type, "mouseout")) {
			if (opts.checkable && this._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ _final.id.CHECK) !== null) {
				tId = this._getNodeMainDom(target).id;
				nodeEventType = "mouseoutCheck";
			}
		} else if (this._eqs(e.type, "click")) {
			if (opts.checkable && this._eqs(target.tagName, "span") && target.getAttribute("treeNode"+ _final.id.CHECK) !== null) {
				tId = this._getNodeMainDom(target).id;
				nodeEventType = "checkNode";
			}
		}
		if (tId.length>0) {
			node = this._getNodeCache(opts, tId);
			switch (nodeEventType) {
				case "checkNode" :
					nodeEventCallback = this._onCheckNode;
					break;
				case "mouseoverCheck" :
					nodeEventCallback = this._onMouseoverCheck;
					break;
				case "mouseoutCheck" :
					nodeEventCallback = this._onMouseoutCheck;
					break;
			}
		}
		var proxyResult = {
			stop: nodeEventType === "checkNode",
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//可编辑树代理事件
	_editEventProxy : function(e) {
		var target = e.target,
		opts = this._getSetting(this.options.treeId),
		relatedTarget = e.relatedTarget,
		tId = "", node = null,
		nodeEventType = "", treeEventType = "",
		nodeEventCallback = null, treeEventCallback = null,
		tmp = null;
		if (this._eqs(e.type, "mouseover")) {
			tmp = this._getMDom(opts, target, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
			if (tmp) {
				tId = this._getNodeMainDom(tmp).id;
				nodeEventType = "hoverOverNode";
			}
		} else if (this._eqs(e.type, "mouseout")) {
			tmp = this._getMDom(opts, relatedTarget, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
			if (!tmp) {
				tId = "remove";
				nodeEventType = "hoverOutNode";
			}
		} else if (this._eqs(e.type, "mousedown")) {
			tmp = this._getMDom(opts, target, [{tagName:"a", attrName:"treeNode"+_final.id.A}]);
			if (tmp) {
				tId = this._getNodeMainDom(tmp).id;
				nodeEventType = "mousedownNode";
			}
		}
		if (tId.length>0) {
			node = this._getNodeCache(opts, tId);
			switch (nodeEventType) {
				case "mousedownNode" :
					nodeEventCallback = this._onMousedownNode;
					break;
				case "hoverOverNode" :
					nodeEventCallback = this._onHoverOverNode;
					break;
				case "hoverOutNode" :
					nodeEventCallback = this._onHoverOutNode;
					break;
			}
		}
		var proxyResult = {
			stop: false,
			node: node,
			nodeEventType: nodeEventType,
			nodeEventCallback: nodeEventCallback,
			treeEventType: treeEventType,
			treeEventCallback: treeEventCallback
		};
		return proxyResult
	},
	//多选树节点前插入dom元素
	_beforeA : function(opts, node, html) {
		var checkedKey = opts.keyChecked;
		if (opts.checkable) {
			this._makeChkFlag(opts, node);
			html.push("<span ID='", node.tId, _final.id.CHECK, "' class='", this._makeChkClass(opts, node), "' treeNode", _final.id.CHECK, (node.nocheck === true?" style='display:none;'":""),"></span>");
		}
	},	
	//普通树初始化节点
	_coreInitNode : function(opts, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		var r = this._getRoot(opts),
		    that = this,
		    childKey = opts.keyChildren;
		node.level = level;
		node.tId = opts.treeId + "_" + (++r.zId);
		node.parentTId = parentNode ? parentNode.tId : null;
		node.open = (typeof node.open == "string") ? that._eqs(node.open, "true") : !!node.open;
		if (node[childKey] && node[childKey].length > 0) {
			node.isParent = true;
			node.zAsync = true;
		} else {
			node.isParent = (typeof node.isParent == "string") ? that._eqs(node.isParent, "true") : !!node.isParent;
			node.open = (node.isParent && !opts.asyncEnable) ? node.open : false;
			node.zAsync = !node.isParent;
		}
		node.isFirstNode = isFirstNode;
		node.isLastNode = isLastNode;
		node.getParentNode = function() {return that._getNodeCache(opts, node.parentTId);};
		node.getPreNode = function() {return that._getPreNode(opts, node);};
		node.getNextNode = function() {return that._getNextNode(opts, node);};
		node.isAjaxing = false;
		that._fixPIdKeyValue(opts, node);
	},	
	//多选树初始化节点
	_checkInitNode : function(opts, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		if (node.nodeDisabled == true){
			node.chkDisabled = true
		}
		var checkedKey = opts.keyChecked;
		var that = this;
		if (typeof node[checkedKey] == "string") node[checkedKey] = that._eqs(node[checkedKey], "true");
		node[checkedKey] = !!node[checkedKey];
		node.checkedOld = node[checkedKey];
		if (typeof node.nocheck == "string") node.nocheck = that._eqs(node.nocheck, "true");
		node.nocheck = !!node.nocheck || (opts.nocheckInherit && parentNode && !!parentNode.nocheck);
		if (typeof node.chkDisabled == "string") node.chkDisabled = that._eqs(node.chkDisabled, "true");
		node.chkDisabled = !!node.chkDisabled || (opts.chkDisabledInherit && parentNode && !!parentNode.chkDisabled);
		if (typeof node.halfCheck == "string") node.halfCheck = that._eqs(node.halfCheck, "true");
		node.halfCheck = !!node.halfCheck;
		node.check_Child_State = -1;
		node.check_Focus = false;
		node.getCheckStatus = function() {return that._getCheckStatus(opts, node);};
		if (opts.chkStyle == _final.radio.STYLE && opts.radioType == _final.radio.TYPE_ALL && node[checkedKey] ) {
			var r = that._getRoot(opts);
			r.radioCheckedList.push(node);
		}
	},
	//可编辑树初始化节点
	_editInitNode : function(opts, level, node, parentNode, isFirstNode, isLastNode, openFlag) {
		if (!node) return;
		node.isHover = false;
		node.editNameFlag = false;
	},
	//更新 TreeObj, 增加部分多选树的工具方法
	_checkTreeTools : function(opts, treeTools) {
	},
	checkNode: function(node, checked, checkTypeFlag, callbackFlag) {
		var checkedKey = this.options.keyChecked;
		var that = this,opts = this.options;
		if (node.chkDisabled === true) return;
		if (checked !== true && checked !== false) {
			checked = !node[checkedKey];
		}
		callbackFlag = !!callbackFlag;

		if (node[checkedKey] === checked && !checkTypeFlag) {
			return;
		} else if (callbackFlag && that._apply(opts.beforeCheck, [opts.treeId, node,opts], true) == false) {
			return;
		}
		if (this._uCanDo(opts) && opts.checkable && node.nocheck !== true) {
			node[checkedKey] = checked;
			var checkObj = this._$(node, _final.id.CHECK, opts);
			if (checkTypeFlag || opts.chkStyle === _final.radio.STYLE) this._checkNodeRelation(opts, node);
			this._setChkClass(opts, checkObj, node);
			this._repairParentChkClassWithSelf(opts, node);
			if (callbackFlag) {
				opts.treeObj.trigger(_final.event.CHECK, [null, opts.treeId, node]);
			}
		}
	},
	//更新 TreeObj, 增加部分可编辑树的工具方法
	_editTreeTools : function(opts, treeTools) {
		treeTools.cancelEditName = function(newName) {
			var root = this._getRoot(this.opts);
			if (!root.curEditNode) return;
			this._cancelCurEditNode(this.opts, newName?newName:null, true);
		}
		
	},
	copyNode: function(targetNode, node, moveType, isSilent) {
		if (!node) return null;
		var opts = this.options,that = this;
		if (targetNode && !targetNode.isParent && opts.keepLeaf && moveType === _final.move.TYPE_INNER) return null;
		var newNode = this._clone(node);
		if (!targetNode) {
			targetNode = null;
			moveType = _final.move.TYPE_INNER;
		}
		if (moveType == _final.move.TYPE_INNER) {
			function copyCallback() {
				this._addNodes(opts, targetNode, [newNode], isSilent);
			}

			if (this._canAsync(opts, targetNode)) {
				this._asyncNode(opts, targetNode, isSilent, copyCallback);
			} else {
				copyCallback();
			}
		} else {
			this._addNodes(opts, targetNode.parentNode, [newNode], isSilent);
			this._moveNode(opts, targetNode, newNode, moveType, false, isSilent);
		}
		return newNode;
	},
	editName: function(node) {
		var opts = this.options;
		if (!node || !node.tId || node !== this._getNodeCache(opts, node.tId)) return;
		if (node.parentTId) this._expandCollapseParentNode(opts, node.getParentNode(), true);
		this._editNode(opts, node)
	},
	moveNode: function(targetNode, node, moveType, isSilent) {
		if (!node) return node;
		var opts = this.options;
		if (targetNode && !targetNode.isParent && opts.keepLeaf && moveType === _final.move.TYPE_INNER) {
			return null;
		} else if (targetNode && ((node.parentTId == targetNode.tId && moveType == _final.move.TYPE_INNER) || this._$(node, opts).find("#" + targetNode.tId).length > 0)) {
			return null;
		} else if (!targetNode) {
			targetNode = null;
		}
		function moveCallback() {
			this._moveNode(opts, targetNode, node, moveType, false, isSilent);
		}
		if (this._canAsync(opts, targetNode) && moveType === _final.move.TYPE_INNER) {
			this._asyncNode(opts, targetNode, isSilent, moveCallback);
		} else {
			moveCallback();
		}
		return node;
	},
	setEditable: function(editable) {
		var opts = this.options;
		opts.editable = editable;
		return this.refresh();
	},
	checkAllNodes: function(checked) {
		this._repairAllChk(this.options, !!checked);
	},
	getCheckedNodes: function(checked) {
		var childKey = this.options.keyChildren;
		checked = (checked !== false);
		return this._getTreeCheckedNodes(this.options, this._getRoot(this.options)[childKey], checked);
	},
	getChangeCheckedNodes: function() {
		var childKey = this.options.keyChildren;
		return this._getTreeChangeCheckedNodes(this.options, this._getRoot(this.options)[childKey]);
	},
	setChkDisabled: function(node, disabled, inheritParent, inheritChildren) {
		disabled = !!disabled;
		inheritParent = !!inheritParent;
		inheritChildren = !!inheritChildren;
		this._repairSonChkDisabled(this.options, node, disabled, inheritChildren);
		this._repairParentChkDisabled(this.options, node.getParentNode(), disabled, inheritParent);
	},
	updateNode: function(node, checkTypeFlag) {
		var _updateNode = this.options.updateNode;
		var opts = this.options;
		if (!node) return;
		var nObj = this._$(node, opts);
		if (nObj.get(0) && this._uCanDo(opts)) {
			this._setNodeName(opts, node);
			this._setNodeTarget(opts, node);
			this._setNodeUrl(opts, node);
			this._setNodeLineIcos(opts, node);
			this._setNodeFontCss(opts, node);
		}
		if (!node || !this.options.checkable) return;
		var nObj = this._$(node, this.options);
		if (nObj.get(0) && this._uCanDo(this.options)) {
			var checkObj = this._$(node, _final.id.CHECK, this.options);
			if (checkTypeFlag == true || this.options.chkStyle === _final.radio.STYLE) this._checkNodeRelation(this.options, node);
			this._setChkClass(this.options, checkObj, node);
			this._repairParentChkClassWithSelf(this.options, node);
		}
	},
	//method of operate data
	_addNodeCache: function(opts, node) {
		this._getCache(opts).nodes[this._getNodeCacheId(node.tId)] = node;
	},
	_getNodeCacheId: function(tId) {
		return tId.substring(tId.lastIndexOf("_")+1);
	},
	_addNodesData: function(opts, parentNode, nodes) {
		var childKey = opts.keyChildren;
		if (!parentNode[childKey]) parentNode[childKey] = [];
		if (parentNode[childKey].length > 0) {
			parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;
			this._setNodeLineIcos(opts, parentNode[childKey][parentNode[childKey].length - 1]);
		}
		parentNode.isParent = true;
		// rootNode根节点设置了为true，并且不显示根节点的时候需要处理node
		// TODO: rootNode 为数组的时候reload是否会报错
		/*if( setting.isInit && !setting.showRootNode && setting.rootNode ){
			var children = (nodes.length&&nodes[0][childKey])?nodes[0][childKey]:[];
			if ( children.length > 0 )
				parentNode[childKey] = parentNode[childKey].concat(children);
		} else {
			parentNode[childKey] = parentNode[childKey].concat(nodes);
		}*/
		parentNode[childKey] = parentNode[childKey].concat(nodes);
	},
	_addSelectedNode: function(opts, node) {
		var root = this._getRoot(opts);
		if (!this._isSelectedNode(opts, node)) {
			root.curSelectedList.push(node);
		}
	},
	_addCreatedNode: function(opts, node) {
		if (!!opts.onNodeCreated || !!opts.addDiyDom) {
			var root = this._getRoot(opts);
			root.createdNodes.push(node);
		}
	},

	_fixPIdKeyValue: function(opts, node) {
		if (opts.simpleDataEnable) {
			node[opts.simpleDataPIdKey] = node.parentTId ? node.getParentNode()[opts.simpleDataIdKey] : opts.simpleDataRootPId;
		}
	},
	_getAfterA: function(opts, node, array) {
		for (var i=0, j=this._initNodeBind.afterA.length; i<j; i++) {
			this._initNodeBind.afterA[i].apply(this, arguments);
		}
	},
	_getBeforeA: function(opts, node, array) {
		for (var i=0, j=this._initNodeBind.beforeA.length; i<j; i++) {
			this._initNodeBind.beforeA[i].apply(this, arguments);
		}
	},
	_getInnerAfterA: function(opts, node, array) {
		for (var i=0, j=this._initNodeBind.innerAfterA.length; i<j; i++) {
			this._initNodeBind.innerAfterA[i].apply(this, arguments);
		}
	},
	_getInnerBeforeA: function(opts, node, array) {
		for (var i=0, j=this._initNodeBind.innerBeforeA.length; i<j; i++) {
			this._initNodeBind.innerBeforeA[i].apply(this, arguments);
		}
	},
	_getCache: function(opts) {
		return caches[opts.treeId];
	},
	_getNextNode: function(opts, node) {
		if (!node) return null;
		var childKey = opts.keyChildren,
		p = node.parentTId ? node.getParentNode() : this._getRoot(opts);
		for (var i=0, l=p[childKey].length-1; i<=l; i++) {
			if (p[childKey][i] === node) {
				return (i==l ? null : p[childKey][i+1]);
			}
		}
		return null;
	},
	_getNodeByParam: function(opts, nodes, key, value) {
		if (!nodes || !key) return null;
		var childKey = opts.keyChildren;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i][key] == value) {
				return nodes[i];
			}
			var tmp = this._getNodeByParam(opts, nodes[i][childKey], key, value);
			if (tmp) return tmp;
		}
		return null;
	},
	_getNodeCache: function(opts, tId) {
		if (!tId) return null;
		var n = caches[opts.treeId].nodes[this._getNodeCacheId(tId)];
		return n ? n : null;
	},
	_getNodeName: function(opts, node) {
		var nameKey = opts.keyName;
		return "" + node[nameKey];
	},
	_getNodeTitle: function(opts, node) {
		var t = opts.keyTitle === "" ? opts.keyName : opts.keyTitle;
		return "" + node[t];
	},
	_getNodes: function(opts) {
		return this._getRoot(opts)[opts.keyChildren];
	},
	_getNodesByParam: function(opts, nodes, key, value) {
		if (!nodes || !key) return [];
		var childKey = opts.keyChildren,
		result = [];
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i][key] == value) {
				result.push(nodes[i]);
			}
			result = result.concat(this._getNodesByParam(opts, nodes[i][childKey], key, value));
		}
		return result;
	},
	_getNodesByParamFuzzy: function(opts, nodes, key, value) {
		if (!nodes || !key) return [];
		var childKey = opts.keyChildren,
		result = [];
		value = value.toLowerCase();
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (typeof nodes[i][key] == "string" && nodes[i][key].toLowerCase().indexOf(value)>-1) {
				result.push(nodes[i]);
			}
			result = result.concat(this._getNodesByParamFuzzy(opts, nodes[i][childKey], key, value));
		}
		return result;
	},
	_getNodesByFilter: function(opts, nodes, filter, isSingle, invokeParam) {
		if (!nodes) return (isSingle ? null : []);
		var childKey = opts.keyChildren,
		result = isSingle ? null : [];
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (this._apply(filter, [nodes[i], invokeParam], false)) {
				if (isSingle) {return nodes[i];}
				result.push(nodes[i]);
			}
			var tmpResult = this._getNodesByFilter(opts, nodes[i][childKey], filter, isSingle, invokeParam);
			if (isSingle && !!tmpResult) {return tmpResult;}
			result = isSingle ? tmpResult : result.concat(tmpResult);
		}
		return result;
	},
	_getPreNode: function(opts, node) {
		if (!node) return null;
		var childKey = opts.keyChildren,
		p = node.parentTId ? node.getParentNode() : this._getRoot(opts);
		for (var i=0, l=p[childKey].length; i<l; i++) {
			if (p[childKey][i] === node) {
				return (i==0 ? null : p[childKey][i-1]);
			}
		}
		return null;
	},
	_getRadioCheckedList: function(opts) {
		var checkedList = this._getRoot(opts).radioCheckedList;
		for (var i=0, j=checkedList.length; i<j; i++) {
			if(!this._getNodeCache(opts, checkedList[i].tId)) {
				checkedList.splice(i, 1);
				i--; j--;
			}
		}
		return checkedList;
	},
	_getCheckStatus: function(opts, node) {
		if (!opts.checkable || node.nocheck || node.chkDisabled) return null;
		var checkedKey = opts.keyChecked,
		r = {
			checked: node[checkedKey],
			half: node.halfCheck ? node.halfCheck : (opts.chkStyle == _final.radio.STYLE ? (node.check_Child_State === 2) : (node[checkedKey] ? (node.check_Child_State > -1 && node.check_Child_State < 2) : (node.check_Child_State > 0)))
		};
		return r;
	},
	_getTreeCheckedNodes: function(opts, nodes, checked, results) {
		if (!nodes) return [];
		var childKey = opts.keyChildren,
		checkedKey = opts.keyChecked,
		onlyOne = (checked && opts.chkStyle == _final.radio.STYLE && opts.radioType == _final.radio.TYPE_ALL);
		results = !results ? [] : results;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {
				results.push(nodes[i]);
				if(onlyOne) {
					break;
				}
			}
			this._getTreeCheckedNodes(opts, nodes[i][childKey], checked, results);
			if(onlyOne && results.length > 0) {
				break;
			}
		}
		return results;
	},
	_getTreeChangeCheckedNodes: function(opts, nodes, results) {
		if (!nodes) return [];
		var childKey = opts.keyChildren,
		checkedKey = opts.keyChecked;
		results = !results ? [] : results;
		for (var i = 0, l = nodes.length; i < l; i++) {
			if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {
				results.push(nodes[i]);
			}
			this._getTreeChangeCheckedNodes(opts, nodes[i][childKey], results);
		}
		return results;
	},
	_getRoot: function(opts) {
		return opts ? roots[opts.treeId] : null;
	},
	_getRoots: function() {
		return roots;
	},
	_getSetting: function(treeId) {
		return settings[treeId];
	},
	_getSettings: function() {
		return settings;
	},
	_getTreeTools: function(treeId) {
		var r = this._getRoot(this._getSetting(treeId));
		return r ? r.treeTools : null;
	},
	_initCache: function(opts) {
		for (var i=0, j=this._initNodeBind.caches.length; i<j; i++) {
			this._initNodeBind.caches[i].apply(this, arguments);
		}
	},
	_initNode: function(opts, level, node, parentNode, preNode, nextNode) {
		for (var i=0, j=this._initNodeBind.nodes.length; i<j; i++) {
			this._initNodeBind.nodes[i].apply(this, arguments);
		}
	},
	_initRoot: function(opts) {
		for (var i=0, j=this._initNodeBind.roots.length; i<j; i++) {
			this._initNodeBind.roots[i].apply(this, arguments);
		}
	},
	_isSelectedNode: function(opts, node) {
		var root = this._getRoot(opts);
		for (var i=0, j=root.curSelectedList.length; i<j; i++) {
			if(node === root.curSelectedList[i]) return true;
		}
		return false;
	},
	_removeNodeCache: function(opts, node) {
		var childKey = opts.keyChildren;
		if (node[childKey]) {
			for (var i=0, l=node[childKey].length; i<l; i++) {
				this._removeNodeCache(opts, node[childKey][i]);
			}
		}
		this._getCache(opts).nodes[this._getNodeCacheId(node.tId)] = null;
	},
	_removeSelectedNode: function(opts, node) {
		var root = this._getRoot(opts);
		for (var i=0, j=root.curSelectedList.length; i<j; i++) {
			if(node === root.curSelectedList[i] || !this._getNodeCache(opts, root.curSelectedList[i].tId)) {
				root.curSelectedList.splice(i, 1);
				i--;j--;
			}
		}
	},
	_setCache: function(opts, cache) {
		caches[opts.treeId] = cache;
	},
	_setRoot: function(opts, root) {
		roots[opts.treeId] = root;
	},
	_setTreeTools: function(opts, treeTools) {
		for (var i=0, j=this._initNodeBind.treeTools.length; i<j; i++) {
			this._initNodeBind.treeTools[i].apply(this, arguments);
		}
	},
	_makeChkFlag: function(opts, node) {
		if (!node) return;
		var childKey = opts.keyChildren,
		checkedKey = opts.keyChecked,
		chkFlag = -1;
		if (node[childKey]) {
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				var cNode = node[childKey][i];
				var tmp = -1;
				if (opts.chkStyle == _final.radio.STYLE) {
					if (cNode.nocheck === true || cNode.chkDisabled === true) {
						tmp = cNode.check_Child_State;
					} else if (cNode.halfCheck === true) {
						tmp = 2;
					} else if (cNode[checkedKey]) {
						tmp = 2;
					} else {
						tmp = cNode.check_Child_State > 0 ? 2:0;
					}
					if (tmp == 2) {
						chkFlag = 2; break;
					} else if (tmp == 0){
						chkFlag = 0;
					}
				} else if (opts.chkStyle == _final.checkbox.STYLE) {
					if (cNode.nocheck === true || cNode.chkDisabled === true) {
						tmp = cNode.check_Child_State;
					} else if (cNode.halfCheck === true) {
						tmp = 1;
					} else if (cNode[checkedKey] ) {
						tmp = (cNode.check_Child_State === -1 || cNode.check_Child_State === 2) ? 2 : 1;
					} else {
						tmp = (cNode.check_Child_State > 0) ? 1 : 0;
					}
					if (tmp === 1) {
						chkFlag = 1; break;
					} else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {
						chkFlag = 1; break;
					} else if (chkFlag === 2 && tmp > -1 && tmp < 2) {
						chkFlag = 1; break;
					} else if (tmp > -1) {
						chkFlag = tmp;
					}
				}
			}
		}
		node.check_Child_State = chkFlag;
	},
	_setSonNodeLevel: function(opts, parentNode, node) {
		if (!node) return;
		var childKey = opts.keyChildren;
		node.level = (parentNode)? parentNode.level + 1 : 0;
		if (!node[childKey]) return;
		for (var i = 0, l = node[childKey].length; i < l; i++) {
			if (node[childKey][i]) this._setSonNodeLevel(opts, node, node[childKey][i]);
		}
	},
	_transformToArrayFormat: function (opts, nodes) {
		if (!nodes) return [];
		var childKey = opts.keyChildren,
		r = [];
		if (this._isArray(nodes)) {
			for (var i=0, l=nodes.length; i<l; i++) {
				r.push(nodes[i]);
				if (nodes[i][childKey])
					r = r.concat(this._transformToArrayFormat(opts, nodes[i][childKey]));
			}
		} else {
			r.push(nodes);
			if (nodes[childKey])
				r = r.concat(this._transformToArrayFormat(opts, nodes[childKey]));
		}
		return r;
	},
	_transformToTreeFormat: function(opts, sNodes) {
		var i,l,
		key = opts.simpleDataIdKey,
		parentKey = opts.simpleDataPIdKey,
		childKey = opts.keyChildren;
		if (!key || key=="" || !sNodes) return [];

		if (this._isArray(sNodes)) {
			var r = [];
			var tmpMap = [];
			for (i=0, l=sNodes.length; i<l; i++) {
				tmpMap[sNodes[i][key]] = sNodes[i];
			}
			for (i=0, l=sNodes.length; i<l; i++) {
				if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {
					if (!tmpMap[sNodes[i][parentKey]][childKey])
						tmpMap[sNodes[i][parentKey]][childKey] = [];
					tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);
				} else {
					r.push(sNodes[i]);
				}
			}
			return r;
		}else {
			return [sNodes];
		}
	},
	//以下是事件代理方法
	_bindEvent: function(opts) {
		for (var i=0, j=this._initNodeBind.bind.length; i<j; i++) {
			this._initNodeBind.bind[i].apply(this, arguments);
		}
	},
	_unbindEvent: function(opts) {
		for (var i=0, j=this._initNodeBind.unbind.length; i<j; i++) {
			this._initNodeBind.unbind[i].apply(this, arguments);
		}
	},
	_bindTree: function(opts) {
		var eventParam = {
			treeId: opts.treeId
		},
		    that = this;
		treeObj = this.element;
		if (!opts.txtSelectedEnable) {
			// for can't select text
			treeObj.bind('selectstart', function(e){
				var node
				var n = e.originalEvent.srcElement.nodeName.toLowerCase();
				return (n === "input" || n === "textarea" );
			}).css({
				"-moz-user-select":"-moz-none"
			});
		}
		this._on(treeObj, {
			//debugger;
			"click" : function(event) {
				that._proxy(event);
			},
			'dblclick': function(event) {
				that._proxy(event);
			},
			'mouseover': function(event) {
				that._proxy(event);
			},
			'mouseout': function(event) {
				that._proxy(event);
			},
			'mousedown': function(event) {
				that._proxy(event);
			},
			'mouseup': function(event) {
				that._proxy(event);
			},
			'contextmenu': function(event){
				that._proxy(event);
			}
		})
	},
	_unbindTree: function(opts) {
		var treeObj = this.element;
		treeObj.unbind('click', this._proxy);
		treeObj.unbind('dblclick', this._proxy);
		treeObj.unbind('mouseover', this._proxy);
		treeObj.unbind('mouseout', this._proxy);
		treeObj.unbind('mousedown', this._proxy);
		treeObj.unbind('mouseup', this._proxy);
		treeObj.unbind('contextmenu', this._proxy);
	},
	_doProxy: function(e) {
		var results = [];
		for (var i=0, j=this._initNodeBind.proxys.length; i<j; i++) {
			var proxyResult = this._initNodeBind.proxys[i].apply(this, arguments);
			results.push(proxyResult);
			if (proxyResult.stop) {
				break;
			}
		}
		return results;
	},
	_proxy: function(e) {
		var opts = this._getSetting(this.options.treeId);
		var that = this;
		if (!this._uCanDo(opts, e)) return true;
		var results = this._doProxy(e),
		r = true, x = false;
		for (var i=0, l=results.length; i<l; i++) {
			var proxyResult = results[i];
			if (proxyResult.nodeEventCallback) {
				x = true;
				r = proxyResult.nodeEventCallback.apply(proxyResult, [that, proxyResult.node, e]) && r;
			}
			if (proxyResult.treeEventCallback) {
				x = true;
				r = proxyResult.treeEventCallback.apply(proxyResult, [that, proxyResult.node,e]) && r;
			}
		}
		return r;
	},
	//method of event handler
	_onSwitchNode: function (that, node) {
		var opts = that.options;
		var setting = that._getSetting(opts.treeId);
		if (node.open) {
			if (that._apply(setting.beforeCollapse,[setting.treeId, node, setting], true) == false) return true;
			that._getRoot(setting).expandTriggerFlag = true;
			that._switchNode(setting, node);
		} else {
			if (that._apply(setting.beforeExpand, [setting.treeId, node, setting]) == false) return true;
			that._getRoot(setting).expandTriggerFlag = true;
			that._switchNode(setting, node);
		}
		return true;
	},
	_onClickNode: function (that, node, e) {
		var opts = that.options;
		var event = e || window.event;
		//var that = this;
		//var setting = opts._getSetting(opts.treeId),
		clickFlag = ( (opts.autoCancelSelected && (event.ctrlKey || event.metaKey)) && that._isSelectedNode(opts, node)) ? 0 : (opts.autoCancelSelected && (event.ctrlKey || event.metaKey) && opts.selectedMulti) ? 2 : 1;
		if (that._apply(opts.beforeClick, [opts.treeId, node, clickFlag, opts], true) == false) return true;
		if (clickFlag === 0) {
			that._cancelPreSelectedNode(opts, node);
		} else {
			that._selectNode(opts, node, clickFlag === 2);
		}
		opts.treeObj.trigger(_final.event.CLICK, [event, opts.treeId, node, clickFlag]);
		if ( opts.clickExpand ){
			$(opts.treeObj).tree("expandNode", node, null, null, null, true);
		}
		return true;
	},
	_onTreeMousedown: function(that, node) {
		var opts = that._getSetting(that.options.treeId);
		if (that._apply(opts.beforeMouseDown, [opts.treeId, node, opts], true)) {
			that._trigger("onMouseDown", null, [opts.treeId, node, opts]);
		}
		return true;
	},
	_onTreeMouseup: function(that, node) {
		var opts = that._getSetting(that.options.treeId);
		if (that._apply(opts.beforeMouseUp, [opts.treeId, node, opts], true)) {
			that._trigger("onMouseUp", null, [opts.treeId, node, opts]);
		}
		return true;
	},
	_onTreeDblclick: function(that, node) {
		var opts = that._getSetting(that.options.treeId);
		if (that._apply(opts.beforeDblClick, [opts.treeId, node, opts], true)) {
			that._trigger("onDblClick", null, [opts.treeId, node, opts]);
		}
		return true;
	},
	_onTreeContextmenu: function(that, node) {
		var opts = that._getSetting(that.options.treeId);
		if (that._apply(opts.beforeRightClick, [opts.treeId, node, opts], true)) {
			that._trigger("onRightClick", null, [opts.treeId, node, opts]);
		}
		return (typeof opts.onRightClick) != "function";
	},
	_onCheckNode: function (that, node, e) {
		var opts = that.options;
		var event = e || window.event;
		if (node.chkDisabled === true) return false;
		var setting = that._getSetting(opts.treeId),
		checkedKey = setting.keyChecked;
		if (that._apply(setting.beforeCheck, [setting.treeId, node, setting], true) == false) return true;
		node[checkedKey] = !node[checkedKey];
		that._checkNodeRelation(setting, node);
		var checkObj = that._$(node, _final.id.CHECK, setting);
		that._setChkClass(setting, checkObj, node);
		that._repairParentChkClassWithSelf(setting, node);
		that.element.trigger(_final.event.CHECK, [event, setting.treeId, node]);
		return true;
	},
	_onMouseoverCheck: function(that, node) {
		var opts = that.options;
		if (node.chkDisabled === true) return false;
		var setting = that._getSetting(opts.treeId),
		checkObj = that._$(node, _final.id.CHECK, setting);
		node.check_Focus = true;
		that._setChkClass(setting, checkObj, node);
		return true;
	},
	_onMouseoutCheck: function(that, node) {
		var opts = that.options;
		if (node.chkDisabled === true) return false;
		var setting = that._getSetting(opts.treeId),
		checkObj = that._$(node, _final.id.CHECK, setting);
		node.check_Focus = false;
		that._setChkClass(setting, checkObj, node);
		return true;
	},
	_onHoverOverNode: function(that, node) {
		var opts = that.options;
		var setting = that._getSetting(opts.treeId),
		root = that._getRoot(setting);
		if (root.curHoverNode != node) {
			that._onHoverOutNode(that);
		}
		root.curHoverNode = node;
		that._addHoverDom(setting, node);
	},
	_onHoverOutNode: function(that, node) {
		var opts = that.options;
		var setting = that._getSetting(opts.treeId),
		root = that._getRoot(setting);
		if (root.curHoverNode && !that._isSelectedNode(setting, root.curHoverNode)) {
			that._removeTreeDom(setting, root.curHoverNode);
			root.curHoverNode = null;
		}
	},
	_onMousedownNode: function(that, _node, e) {
		var opts = that.options;
		var event = e;
		var i,l,
		setting = that._getSetting(opts.treeId),
		root = that._getRoot(setting), roots = that._getRoots();
		//右击鼠标不能拖、拽
		if (event.button == 2 || !setting.editable || (!setting.dragIsCopy && !setting.dragIsMove)) return true;

		//节点名称处于可编辑状态下不能拖、拽
		var target = event.target,
		_nodes = that._getRoot(setting).curSelectedList,
		nodes = [];
		if (!that._isSelectedNode(setting, _node)) {
			nodes = [_node];
		} else {
			for (i=0, l=_nodes.length; i<l; i++) {
				if (_nodes[i].editNameFlag && that._eqs(target.tagName, "input") && target.getAttribute("treeNode"+_final.id.INPUT) !== null) {
					return true;
				}
				nodes.push(_nodes[i]);
				if (nodes[0].parentTId !== _nodes[i].parentTId) {
					nodes = [_node];
					break;
				}
			}
		}
		that._editNodeBlur = true;
		that._cancelCurEditNode(setting);
		var doc = $(that.element.get(0).ownerDocument),
		body = $(that.element.get(0).ownerDocument.body), curNode, tmpArrow, tmpTarget,
		isOtherTree = false,
		targetSetting = setting,
		sourceSetting = setting,
		preNode, nextNode,
		preTmpTargetNodeId = null,
		preTmpMoveType = null,
		tmpTargetNodeId = null,
		moveType = _final.move.TYPE_INNER,
		mouseDownX = that.clientX,
		mouseDownY = that.clientY,
		startTime = (new Date()).getTime();
		if (that._uCanDo(setting)) {
			doc.bind("mousemove", _docMouseMove);
		}
		function _docMouseMove(event) {
			//避免拖拽节点后，再次点击节点
			if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.dragMinMoveSize
				&& Math.abs(mouseDownY - event.clientY) < setting.dragMinMoveSize) {
				return true;
			}
			var i, l, tmpNode, tmpDom, tmpNodes,
			childKey = setting.keyChildren;
			body.css("cursor", "pointer");

			if (root.dragFlag == 0) {
					if (that._apply(setting.beforeDrag, [setting.treeId, nodes, setting], true) == false) {
					_docMouseUp(event);
					return true;
				}

				for (i=0, l=nodes.length; i<l; i++) {
					if (i==0) {
						root.dragNodeShowBefore = [];
					}
					tmpNode = nodes[i];
					if (tmpNode.isParent && tmpNode.open) {
						that._expandCollapseNode(setting, tmpNode, !tmpNode.open);
						root.dragNodeShowBefore[tmpNode.tId] = true;
					} else {
						root.dragNodeShowBefore[tmpNode.tId] = false;
					}
				}
				root.dragFlag = 1;
				roots.showHoverDom = false;
				that._showIfameMask(setting, true);
				//sort
				var isOrder = true, lastIndex = -1;
				if (nodes.length>1) {
					var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : that._getNodes(setting);
					tmpNodes = [];
					for (i=0, l=pNodes.length; i<l; i++) {
						if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {
							if (isOrder && lastIndex > -1 && (lastIndex+1) !== i) {
								isOrder = false;
							}
							tmpNodes.push(pNodes[i]);
							lastIndex = i;
						}
						if (nodes.length === tmpNodes.length) {
							nodes = tmpNodes;
							break;
						}
					}
				}
				if (isOrder) {
					preNode = nodes[0].getPreNode();
					nextNode = nodes[nodes.length-1].getNextNode();
				}
				//设置节点为选中状态
				//curNode = that._$("<ul class='treeDragUL'></ul>", setting);
				for (i=0, l=nodes.length; i<l; i++) {
					tmpNode = nodes[i];
					tmpNode.editNameFlag = false;
					that._selectNode(setting, tmpNode, i>0);
					that._removeTreeDom(setting, tmpNode);

					if (i > setting.dragMaxShowNodeNum-1) {
						continue;
					}

					tmpDom = that._$("<li id='"+ tmpNode.tId +"_tmp'></li>", setting);
					tmpDom.append(that._$(tmpNode, _final.id.A, setting).clone());
					tmpDom.css("padding", "0");
					tmpDom.children("#" + tmpNode.tId + _final.id.A).removeClass(_final.node.CURSELECTED);
					//curNode.append(tmpDom);
					if (i == setting.dragMaxShowNodeNum-1) {
						tmpDom = that._$("<li id='"+ tmpNode.tId +"_moretmp'><a>  ...  </a></li>", setting);
						//curNode.append(tmpDom);
					}
				}
				//curNode.attr("id", nodes[0].tId + _final.id.UL + "_tmp");
				//curNode.addClass(that.element.attr("class"));
				//curNode.appendTo(body);

				tmpArrow = that._$("<span class='tmpTreeMove_arrow'></span>", setting);
				tmpArrow.attr("id", "treeMove_arrow_tmp");
				tmpArrow.appendTo(body);
				that.element.trigger(_final.event.DRAG, [event, setting.treeId, nodes]);
			}
			if (root.dragFlag == 1) {
				if (tmpTarget && tmpArrow.attr("id") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft()+2) > ($("#" + tmpTargetNodeId + _final.id.A, tmpTarget).offset().left)) {
					var xT = $("#" + tmpTargetNodeId + _final.id.A, tmpTarget);
					event.target = (xT.length > 0) ? xT.get(0) : event.target;
				} else if (tmpTarget) {
					tmpTarget.removeClass(_final.node.TMPTARGET_TREE);
					if (tmpTargetNodeId) $("#" + tmpTargetNodeId + _final.id.A, tmpTarget).removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_PREV)
						.removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_NEXT).removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_INNER);
				}
				tmpTarget = null;
				tmpTargetNodeId = null;

				//在多选树中判断拖、拽
				isOtherTree = false;
				targetSetting = setting;
				var settings = that._getSettings();
				for (var s in settings) {
					if (settings[s].treeId && settings[s].editable && settings[s].treeId != setting.treeId
						&& (event.target.id == settings[s].treeId || $(event.target).parents("#" + settings[s].treeId).length>0)) {
						isOtherTree = true;
						targetSetting = settings[s];
					}
				}
				var docScrollTop = doc.scrollTop(),
				docScrollLeft = doc.scrollLeft(),
				treeOffset = targetSetting.treeObj.offset(),
				scrollHeight = targetSetting.treeObj.get(0).scrollHeight,
				scrollWidth = targetSetting.treeObj.get(0).scrollWidth,
				dTop = (event.clientY + docScrollTop - treeOffset.top),
				dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),
				dLeft = (event.clientX + docScrollLeft - treeOffset.left),
				dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),
				isTop = (dTop < setting.dragBorderMax && dTop > setting.dragBorderMin),
				isBottom = (dBottom < setting.dragBorderMax && dBottom > setting.dragBorderMin),
				isLeft = (dLeft < setting.dragBorderMax && dLeft > setting.dragBorderMin),
				isRight = (dRight < setting.dragBorderMax && dRight > setting.dragBorderMin),
				isTreeInner = dTop > setting.dragBorderMin && dBottom > setting.dragBorderMin && dLeft > setting.dragBorderMin && dRight > setting.dragBorderMin,
				isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),
				isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height()+10) >= scrollHeight),
				isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),
				isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width()+10) >= scrollWidth);
				if (event.target && that._isChildOrSelf(event.target, targetSetting.treeId)) {
					//获取树节点中  <li> 元素dom
					var targetObj = event.target;
					while (targetObj && targetObj.tagName && !that._eqs(targetObj.tagName, "li") && targetObj.id != targetSetting.treeId) {
						targetObj = targetObj.parentNode;
					}
					var canMove = true;
					//不能移动到自身，或自身的子节点中
					for (i=0, l=nodes.length; i<l; i++) {
						tmpNode = nodes[i];
						if (targetObj.id === tmpNode.tId) {
							canMove = false;
							break;
						} else if (that._$(tmpNode, setting).find("#" + targetObj.id).length > 0) {
							canMove = false;
							break;
						}
					}
					if (canMove && event.target && that._isChildOrSelf(event.target, targetObj.id + _final.id.A)) {
						tmpTarget = $(targetObj);
						tmpTargetNodeId = targetObj.id;
					}
				}
				//鼠标移动到树组件区域
				tmpNode = nodes[0];
				if (isTreeInner && that._isChildOrSelf(event.target, targetSetting.treeId)) {
					//判断鼠标移动至根节点
					if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {
						tmpTarget = targetSetting.treeObj;
					}
					//自动滚动到顶部
					if (isTop) {
						targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()-10);
					} else if (isBottom)  {
						targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop()+10);
					}
					if (isLeft) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()-10);
					} else if (isRight) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+10);
					}
					//auto scroll left
					if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {
						targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft()+ tmpTarget.offset().left - targetSetting.treeObj.offset().left);
					}
				}
				/*curNode.css({
					"top": (event.clientY + docScrollTop + 3) + "px",
					"left": (event.clientX + docScrollLeft + 3) + "px"
				});*/
				var dX = 0;
				var dY = 0;
				if (tmpTarget && tmpTarget.attr("id")!=targetSetting.treeId) {
					var tmpTargetNode = tmpTargetNodeId == null ? null: that._getNodeCache(targetSetting, tmpTargetNodeId),
					isCopy = ((event.ctrlKey || event.metaKey) && setting.dragIsMove && setting.dragIsCopy) || (!setting.dragIsMove && setting.dragIsCopy),
					isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),
					isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),
					isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),
					canPrev = (isCopy || !isNext) && that._apply(targetSetting.dragPrev, [targetSetting.treeId, nodes, tmpTargetNode, targetSetting], !!targetSetting.dragPrev),
					canNext = (isCopy || !isPrev) && that._apply(targetSetting.dragNext, [targetSetting.treeId, nodes, tmpTargetNode, targetSetting], !!targetSetting.dragNext),
					canInner = (isCopy || !isInner) && !(targetSetting.keepLeaf && !tmpTargetNode.isParent) && that._apply(targetSetting.dragInner, [targetSetting.treeId, nodes, tmpTargetNode, targetSetting], !!targetSetting.dragInner);
					if (!canPrev && !canNext && !canInner) {
						tmpTarget = null;
						tmpTargetNodeId = "";
						moveType = _final.move.TYPE_INNER;
						/*tmpArrow.css({
							"display":"none"
						});*/
						if (window.TreeMoveTimer) {
							clearTimeout(window.TreeMoveTimer);
							window.TreeMoveTargetNodeTId = null
						}
					} else {
						var tmpTargetA = $("#" + tmpTargetNodeId + _final.id.A, tmpTarget),
						tmpNextA = tmpTargetNode.isLastNode ? null : $("#" + tmpTargetNode.getNextNode().tId + _final.id.A, tmpTarget.next()),
						tmpTop = tmpTargetA.offset().top,
						tmpLeft = tmpTargetA.offset().left,
						prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1) ) : -1,
						nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0) ) : -1,
						dY_percent = (event.clientY + docScrollTop - tmpTop)/tmpTargetA.height();
						if ((prevPercent==1 ||dY_percent<=prevPercent && dY_percent>=-.2) && canPrev) {
							dX = 1 - tmpArrow.width();
							dY = tmpTop - tmpArrow.height()/2;
							moveType = _final.move.TYPE_PREV;
						} else if ((nextPercent==0 || dY_percent>=nextPercent && dY_percent<=1.2) && canNext) {
							dX = 1 - tmpArrow.width();
							dY = (tmpNextA == null || (tmpTargetNode.isParent && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height()/2) : (tmpNextA.offset().top - tmpArrow.height()/2);
							moveType = _final.move.TYPE_NEXT;
						}else {								
							dX = 5 - tmpArrow.width();
							dY = tmpTop;
							moveType = _final.move.TYPE_INNER;								
						}
						tmpArrow.css({
							"display":"block",
							"top": dY + "px",
							"left": (tmpLeft + dX) + "px"
						});
						// 如果dragStyle配置为线形的提示，则显示线性 begin lihaibo added
						if (setting.dragStyle == "line") {
							if ( _final.move.TYPE_INNER == moveType) {
								tmpArrow.removeClass("preNext_line").addClass("inner_line");
							} else {
								tmpArrow.removeClass("inner_line").addClass("preNext_line");
							}
						}
						// 如果dragStyle配置为线形的提示，则显示线性 end
						tmpTargetA.addClass(_final.node.TMPTARGET_NODE + "_" + moveType);

						if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {
							startTime = (new Date()).getTime();
						}
						if (tmpTargetNode && tmpTargetNode.isParent && moveType == _final.move.TYPE_INNER) {
							var startTimer = true;
							if (window.TreeMoveTimer && window.TreeMoveTargetNodeTId !== tmpTargetNode.tId) {
								clearTimeout(window.TreeMoveTimer);
								window.TreeMoveTargetNodeTId = null;
							}else if (window.TreeMoveTimer && window.TreeMoveTargetNodeTId === tmpTargetNode.tId) {
								startTimer = false;
							}
							if (startTimer) {
								window.TreeMoveTimer = setTimeout(function() {
									if (moveType != _final.move.TYPE_INNER) return;
									if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.dragAutoOpenTime
										&& that._apply(targetSetting.beforeDragOpen, [targetSetting.treeId, tmpTargetNode, targetSetting], true)) {
										that._switchNode(targetSetting, tmpTargetNode);
										if (targetSetting.dragAutoExpandTrigger) {
											targetSetting.treeObj.trigger(_final.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);
										}
									}
								}, targetSetting.dragAutoOpenTime+50);
								window.TreeMoveTargetNodeTId = tmpTargetNode.tId;
							}
						}
					}
				} else {
					moveType = _final.move.TYPE_INNER;
					if (tmpTarget && that._apply(targetSetting.dragInner, [targetSetting.treeId, nodes, null, targetSetting], !!targetSetting.dragInner)) {
						tmpTarget.addClass(_final.node.TMPTARGET_TREE);
					} else {
						tmpTarget = null;
					}
					tmpArrow.css({
						"display":"none"
					});
					if (window.TreeMoveTimer) {
						clearTimeout(window.TreeMoveTimer);
						window.TreeMoveTargetNodeTId = null;
					}
				}
				preTmpTargetNodeId = tmpTargetNodeId;
				preTmpMoveType = moveType;

				that.element.trigger(_final.event.DRAGMOVE, [event, setting.treeId, nodes]);
			}
			return false;
		}
		doc.bind("mouseup", _docMouseUp);
		function _docMouseUp(event) {
			if (window.TreeMoveTimer) {
				clearTimeout(window.TreeMoveTimer);
				window.TreeMoveTargetNodeTId = null;
			}
			preTmpTargetNodeId = null;
			preTmpMoveType = null;
			doc.unbind("mousemove", _docMouseMove);
			doc.unbind("mouseup", _docMouseUp);
			doc.unbind("selectstart", _docSelect);
			body.css("cursor", "auto");
			if (tmpTarget) {
				tmpTarget.removeClass(_final.node.TMPTARGET_TREE);
				if (tmpTargetNodeId) $("#" + tmpTargetNodeId + _final.id.A, tmpTarget).removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_PREV)
						.removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_NEXT).removeClass(_final.node.TMPTARGET_NODE + "_" + _final.move.TYPE_INNER);
			}
			that._showIfameMask(setting, false);

			roots.showHoverDom = true;
			if (root.dragFlag == 0) return;
			root.dragFlag = 0;

			var i, l, tmpNode;
			for (i=0, l=nodes.length; i<l; i++) {
				tmpNode = nodes[i];
				if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {
					that._expandCollapseNode(setting, tmpNode, !tmpNode.open);
					delete root.dragNodeShowBefore[tmpNode.tId];
				}
			}
			//if (curNode) curNode.remove();
			if (tmpArrow) tmpArrow.remove();
			var isCopy = ((event.ctrlKey || event.metaKey) && setting.dragIsMove && setting.dragIsCopy) || (!setting.dragIsMove && setting.dragIsCopy);
			if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId==nodes[0].parentTId && moveType == _final.move.TYPE_INNER) {
				tmpTarget = null;
			}
			if (tmpTarget) {
				var dragTargetNode = tmpTargetNodeId == null ? null: that._getNodeCache(targetSetting, tmpTargetNodeId);
				if (that._apply(opts.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy,setting], true) == false) {
					that._selectNodes(sourceSetting, nodes);
					return;
				}
				var newNodes = isCopy ? that._clone(nodes) : nodes;

				function dropCallback() {
					if (isOtherTree) {
						if (!isCopy) {
							for(var i=0, l=nodes.length; i<l; i++) {
								that._removeNode(setting, nodes[i]);
							}
						}
						if (moveType == _final.move.TYPE_INNER) {
							that._addNodes(targetSetting, dragTargetNode, newNodes);
						} else {
							that._addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
							if (moveType == _final.move.TYPE_PREV) {
								for (i=0, l=newNodes.length; i<l; i++) {
									that._moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
								}
							} else {
								for (i=-1, l=newNodes.length-1; i<l; l--) {
									that._moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
								}
							}
						}
					} else {
						if (isCopy && moveType == _final.move.TYPE_INNER) {
							that._addNodes(targetSetting, dragTargetNode, newNodes);
						} else {
							if (isCopy) {
								that._addNodes(targetSetting, dragTargetNode.getParentNode(), newNodes);
							}
							if (moveType != _final.move.TYPE_NEXT) {
								for (i=0, l=newNodes.length; i<l; i++) {
									that._moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);
								}
							} else {
								for (i=-1, l=newNodes.length-1; i<l; l--) {
									that._moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);
								}
							}
						}
					}
					that._selectNodes(targetSetting, newNodes);
					that._$(newNodes[0], setting).focus().blur();

					that.element.trigger(_final.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);
				}
				if (moveType == _final.move.TYPE_INNER && that._canAsync(targetSetting, dragTargetNode)) {
					that._asyncNode(targetSetting, dragTargetNode, false, dropCallback);
				} else {
					dropCallback();
				}
			} else {
				that._selectNodes(sourceSetting, nodes);
				that.element.trigger(_final.event.DROP, [event, setting.treeId, nodes, null, null, null]);
			}
		}
		doc.bind("selectstart", _docSelect);
		function _docSelect() {
			return false;
		}
		//Avoid FireFox's Bug
		//If Tree Div CSS set 'overflow', so drag node outside of Tree, and event.target is error.
		if(that.preventDefault) {
			that.preventDefault();
		}
		return true;
	},	
	//以下是树组件工具方法
	_apply: function(fun, param, defaultValue) {	
		if( fun == defaultValue && !$.isFunction(fun) ) {
			return defaultValue;
		}
		
		
		if( typeof(fun) =="undefined" || fun == null){
			return defaultValue;
		}
		var _fn,ret,t;
		 _fn = $.coral.toFunction(fun);
		
		if (!$.isFunction(_fn)) {
			return defaultValue;
		}
		ret = _fn.apply(t||this,param ? param : []);
		
		return typeof(ret)=="undefined"?defaultValue:ret;
	},
	_canAsync: function(opts, node) {
		var childKey = opts.keyChildren;
		return (opts.asyncEnable && node && node.isParent && !(node.zAsync || (node[childKey] && node[childKey].length > 0)));
	},
	_clone: function (obj){
		var that = this;
		if (obj === null) return null;
		var o = that._isArray(obj) ? [] : {};
		for(var i in obj){
			o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === "object" ? this._clone(obj[i]) : obj[i]);
		}
		return o;
	},
	_eqs: function(str1, str2) {
		return str1.toLowerCase() === str2.toLowerCase();
	},
	_isArray: function(arr) {
		return Object.prototype.toString.apply(arr) === "[object Array]";
	},
	_$: function(node, exp, opts) {
		if (!!exp && typeof exp != "string") {
			opts = exp;
			exp = "";
		}
		if (typeof node == "string") {
			return $(node, opts ? this.element.get(0).ownerDocument : null);
		} else {
			return $("#" + node.tId + exp, opts ? this.element : null);
		}
	},
	_getMDom: function (opts, curDom, targetExpr) {
		if (!curDom) return null;
		while (curDom && curDom.id !== opts.treeId) {
			for (var i=0, l=targetExpr.length; curDom.tagName && i<l; i++) {
				if (this._eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {
					return curDom;
				}
			}
			curDom = curDom.parentNode;
		}
		return null;
	},
	_getNodeMainDom: function(target) {
		return ($(target).parent("li").get(0) || $(target).parentsUntil("li").parent().get(0));
	},
	_isChildOrSelf: function(dom, parentId) {
		return ( $(dom).closest("#" + parentId).length> 0 );
	},
	/*_uCanDo: function(setting, e) {
		return true;
	},*/
	_getAbs: function (obj) {
		var oRect = obj.getBoundingClientRect(),
		scrollTop = document.body.scrollTop+document.documentElement.scrollTop,
		scrollLeft = document.body.scrollLeft+document.documentElement.scrollLeft;
		return [oRect.left+scrollLeft,oRect.top+scrollTop];
	},
	_inputFocus: function(inputObj) {
		if (inputObj.get(0)) {
			inputObj.focus();
			this._setCursorPosition(inputObj.get(0), inputObj.val().length);
		}
	},
	_inputSelect: function(inputObj) {
		if (inputObj.get(0)) {
			inputObj.focus();
			inputObj.select();
		}
	},
	_setCursorPosition: function(obj, pos){
		if(obj.setSelectionRange) {
			obj.focus();
			obj.setSelectionRange(pos,pos);
		} else if (obj.createTextRange) {
			var range = obj.createTextRange();
			range.collapse(true);
			range.moveEnd('character', pos);
			range.moveStart('character', pos);
			range.select();
		}
	},
	_showIfameMask: function(opts, showSign) {
		var root = this._getRoot(opts);
		//clear full mask
		while (root.dragMaskList.length > 0) {
			root.dragMaskList[0].remove();
			root.dragMaskList.shift();
		}
		if (showSign) {
			//show mask
			var iframeList = this._$("iframe", opts);
			for (var i = 0, l = iframeList.length; i < l; i++) {
				var obj = iframeList.get(i),
				r = this._getAbs(obj),
				dragMask = this._$("<div id='treeMask_" + i + "' class='treeMask' style='top:" + r[1] + "px; left:" + r[0] + "px; width:" + obj.offsetWidth + "px; height:" + obj.offsetHeight + "px;'></div>", opts);
				dragMask.appendTo(this._$("body", opts));
				root.dragMaskList.push(dragMask);
			}
		}
	},
	//以下是操作树形结构中dom元素的方法
	_addNodes: function(opts, parentNode, newNodes, isSilent) {
		if (opts.keepLeaf && parentNode && !parentNode.isParent) {
			return;
		}
		if (!this._isArray(newNodes)) {
			newNodes = [newNodes];
		}
		if (opts.simpleDataEnable) {
			newNodes = this._transformToTreeFormat(opts, newNodes);
		}
		if (parentNode) {
			var target_switchObj = this._$(parentNode, _final.id.SWITCH, opts),
			target_icoObj = this._$(parentNode, _final.id.ICON, opts),
			target_ulObj = this._$(parentNode, _final.id.UL, opts);

			if (!parentNode.open) {
				this._replaceSwitchClass(parentNode, target_switchObj, _final.arrow.RIGHT);
				this._replaceIcoClass(parentNode, target_icoObj, _final.folder.CLOSE );
				parentNode.open = false;
				target_ulObj.css({
					"display": "none"
				});
			}

			this._addNodesData(opts, parentNode, newNodes);
			this._createNodes(opts, parentNode.level + 1, newNodes, parentNode);
			if (!isSilent) {
				this._expandCollapseParentNode(opts, parentNode, true);
			}
		} else {
			this._addNodesData(opts, this._getRoot(opts), newNodes);
			this._createNodes(opts, 0, newNodes, null);
		}
	},
	_appendNodes1: function(opts, level, nodes, parentNode, initFlag, openFlag) {
		if (!nodes) return [];
		var html = [],
		childKey = opts.keyChildren;
		for (var i = 0, l = nodes.length; i < l; i++) {
			var node = nodes[i];
			if (initFlag) {
				var tmpPNode = (parentNode) ? parentNode: this._getRoot(opts),
				tmpPChild = tmpPNode[childKey],
				isFirstNode = ((tmpPChild.length == nodes.length) && (i == 0)),
				isLastNode = (i == (nodes.length - 1));
				this._initNode(opts, level, node, parentNode, isFirstNode, isLastNode, openFlag);
				this._addNodeCache(opts, node);
			}			
			var childHtml = [];
			if (node[childKey] && node[childKey].length > 0) {
				//make child html first, because checkType
				childHtml = this._appendNodes(opts, level + 1, node[childKey], node, initFlag, openFlag && node.open);
			}
			if (openFlag) {
				this._makeDOMNodeMainBefore(html, opts, node);
				this._makeDOMNodeNameBefore(html, opts, node);
				this._addDiyDom(html, opts, node);
				this._makeDOMNodeLine(html, opts, node);
				this._getBeforeA(opts, node, html);
				this._getInnerBeforeA(opts, node, html);
				this._makeDOMNodeIcon(html, opts, node);
				this._getInnerAfterA(opts, node, html);
				this._makeDOMNodeNameAfter(html, opts, node);
				this._getAfterA(opts, node, html);
				if (node.isParent && node.open) {
					this._makeUlHtml(opts, node, html, childHtml.join(''));
				}
				this._makeDOMNodeMainAfter(html, opts, node);
				this._addCreatedNode(opts, node);
			}
		}
		return html;
	},
	_appendParentULDom: function(opts, node) {
		var html = [],
		nObj = this._$(node, opts);
		if (!nObj.get(0) && !!node.parentTId) {
			this._appendParentULDom(opts, node.getParentNode());
			nObj = this._$(node, opts);
		}
		var ulObj = this._$(node, _final.id.UL, opts);
		if (ulObj.get(0)) {
			ulObj.remove();
		}
		var childKey = opts.keyChildren,
		childHtml = this._appendNodes(opts, node.level+1, node[childKey], node, false, true);
		this._makeUlHtml(opts, node, html, childHtml.join(''));
		nObj.append(html.join(''));
	},
	/**
	 * :TODO: 为了不改变结构，临时添加opts参数，待以后改进。
	 */
	_asyncNode: function(setting, node, isSilent, callback, opts) {
		var opts = opts || {};
		var that = this;
		var i, l;
		var isInit = setting.isInit;
		if (node && !node.isParent) {
			this._apply(callback);
			return false;
		} else if (node && node.isAjaxing) {
			return false;
		} else if (that._apply(setting.beforeAsync, [setting.treeId, node, setting], true) == false) {
			this._apply(callback);
			return false;
		}
		if (node) {
			node.isAjaxing = true;
			var icoObj = that._$(node, _final.id.ICON, setting);
			icoObj.attr({"style":"", "class":_final.className.BUTTON + " " + _final.className.ICO_LOADING});
		}
		var tmpParam = {},
			asyncOtherParam = opts.asyncOtherParam || setting.asyncOtherParam;
		//通过标签传递的参数为字符串类型，需要转换为一个数组对象
		//var autoParams = (new Function('return ' + setting.asyncAutoParam))();
		var autoParams = setting.asyncAutoParam.split(",");
		var isInit = setting.isInit;
		for (i = 0, l = autoParams.length; node && i < l; i++) {
			var pKey = autoParams[i].split("="), spKey = pKey;
			if (pKey.length>1) {
				spKey = pKey[1];
				pKey = pKey[0];
			}
			tmpParam[spKey] = node[pKey];
		}
		if (this._isArray(asyncOtherParam)) {
			for (i = 0, l = asyncOtherParam.length; i < l; i += 2) {
				tmpParam[asyncOtherParam[i]] = asyncOtherParam[i + 1];
			}
		} else {
			for (var p in asyncOtherParam) {
				tmpParam[p] = asyncOtherParam[p];
			}
		}
		var _tmpV = this._getRoot(setting)._ver,
			asyncUrl = this._apply(setting.asyncUrl, [setting.treeId, node, opts], setting.asyncUrl);
		$.ajax({
			contentType: setting.asyncContentType,
			type: setting.asyncType,
			url: asyncUrl,
			data: tmpParam,
			dataType: setting.asyncDataType,
			success: function(msg) {
				if (_tmpV != that._getRoot(setting)._ver) {
					return;
				}
				var newNodes = [];
				try {
					if (!msg || msg.length == 0) {
						newNodes = [];
					} else if (typeof msg == "string") {
						newNodes = eval("(" + msg + ")");
					} else {
						newNodes = msg;
					}
				} catch(err) {
					newNodes = msg;
				}

				if (node) {
					node.isAjaxing = null;
					node.zAsync = true;
				}
				that._setNodeLineIcos(setting, node);
				if (newNodes && newNodes !== "") {
					if ( isInit ){
						newNodes = that._createRootNodes(setting,newNodes);
					}
					newNodes = that._apply(setting.asyncDataFilter, [setting.treeId, node, newNodes, setting], newNodes);
					that._addNodes(setting, node, !!newNodes ? that._clone(newNodes) : [], !!isSilent);
				} else {
					if ( isInit ){
						newNodes = that._createRootNodes(setting,newNodes);
					}
					that._addNodes(setting, node, rootNodes, !!isSilent);
				}
				if ( opts.onLoad ) {
					that._apply( opts.onLoad, [setting.treeId, node, msg]);
				} else {
					that.element.trigger(_final.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);
				}
				that._apply(callback);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				if (_tmpV != that._getRoot(setting)._ver) {
					return;
				}
				if (node) node.isAjaxing = null;
				that._setNodeLineIcos(setting, node);
				that.element.trigger(_final.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);
			}
		});
		return true;
	},
	_addEditBtn: function(opts, node) {
		var that = this;
		if (node.editNameFlag || this._$(node, _final.id.EDIT, opts).length > 0) {
			return;
		}
		if (!this._apply(opts.showRenameBtn, [opts.treeId, node, opts], opts.showRenameBtn)) {
			return;
		}
		var aObj = this._$(node, _final.id.A, opts),
		editStr = "<span class='" + _final.className.BUTTON + " " + _final.editIcon +" edit' id='" + node.tId + _final.id.EDIT + "' title='"+this._apply(opts.renameTitle, [opts.treeId, node, opts], opts.renameTitle)+"' treeNode"+_final.id.EDIT+" style='display:none;'></span>";
		aObj.append(editStr);

		this._$(node, _final.id.EDIT, opts).bind('click',
			function() {
				if (!that._uCanDo(opts) || that._apply(opts.beforeEditName, [opts.treeId, node, opts], true) == false) return false;
				that._editNode(opts, node);
				return false;
			}
			).show();
	},
	_addRemoveBtn: function(opts, node) {
		var that = this;
		if (node.editNameFlag || this._$(node, _final.id.REMOVE, opts).length > 0) {
			return;
		}
		if (!this._apply(opts.showRemoveBtn, [opts.treeId, node, opts], opts.showRemoveBtn)) {
			return;
		}
		var aObj = this._$(node, _final.id.A, opts),
		removeStr = "<span class='" + _final.className.BUTTON + " " + _final.removeIcon + " remove' id='" + node.tId + _final.id.REMOVE + "' title='"+this._apply(opts.removeTitle, [opts.treeId, node, opts], opts.removeTitle)+"' treeNode"+_final.id.REMOVE+" style='display:none;'></span>";
		aObj.append(removeStr);

		this._$(node, _final.id.REMOVE, opts).bind('click',
			function() {
				if (!that._uCanDo(opts) || that._apply(opts.beforeRemove, [opts.treeId, node, opts], true) == false) return false;
				that._removeNode(opts, node);
				that.element.trigger(_final.event.REMOVE, [opts.treeId, node]);
				return false;
			}
			).bind('mousedown',
			function(that) {
				return true;
			}
			).show();
	},
	_addHoverDom: function(opts, node) {
		if (this._getRoots().showHoverDom) {
			node.isHover = true;
			if (opts.editable) {
				this._addEditBtn(opts, node);
				this._addRemoveBtn(opts, node);
			}
			this._$(node, _final.id.A, opts).addClass(_final.node.CURHOVER);
			this._apply(opts.addHoverDom, [opts.treeId, node, opts]);
		}
	},	
	_cancelPreSelectedNode1: function (opts, node) {
		var list = this._getRoot(opts).curSelectedList;
		for (var i=0, j=list.length-1; j>=i; j--) {
			if (!node || node === list[j]) {
				this._$(list[j], _final.id.A, opts).removeClass(_final.node.CURSELECTED);
				if (node) {
					this._removeSelectedNode(opts, node);
					break;
				}
			}
		}
		if (!node) this._getRoot(opts).curSelectedList = [];
	},
	_createNodeCallback: function(opts) {
		if (!!opts.onNodeCreated || !!opts.addDiyDom) {
			var root = this._getRoot(opts);
			while (root.createdNodes.length>0) {
				var node = root.createdNodes.shift();
				this._apply(opts.addDiyDom, [opts.treeId, node, opts]);
				if (!!opts.onNodeCreated) {
					this.element.trigger(_final.event.NODECREATED, [opts.treeId, node]);
				}
			}
		}
	},
	/**
	 * @param setting
	 * @param nodes
	 * 
	 * @returns nodes 新构造的树节点（可能带有根节点）
	 */
	_createRootNodes: function( opts, nodes ) {
		if (opts.simpleDataEnable) {
			nodes = this._transformToTreeFormat(opts, nodes);
		}
		//if ( setting.isInit ) {
		if(opts.showRootNode == true){
			//指定根节点的情况
			if ( opts.rootNode && typeof ( opts.rootNode ) !== "boolean" ) {
				opts.rootNode.children = nodes;
				nodes = [opts.rootNode];		
			}
		} else //showRootNode == false: 隐藏根节点
		{
			//如果rootNode为true，则根节点在nodes中取得
			//且根节点只有一层的时候 
			//且children必须大于1
			if ( typeof ( opts.rootNode ) == "boolean" && 
				opts.rootNode ) {
				if ( nodes.length >= 1 ) {
					if ( nodes[0].children && nodes[0].children.length > 0 ) {
						nodes = nodes[0].children;
					} else {
						nodes = [];
					}
				}
			}
		}		
		return nodes;
	},
	/**
	 * @param setting
	 * @param level
	 * @param nodes
	 * @param parentNode
	 * 
	 */
	_createNodes1: function( opts, level, nodes, parentNode ) {
		//初始化的时候处理根节点的显示或者隐藏
		//nodes = this._createRootNodes(setting, nodes );		
		if (!nodes || nodes.length == 0) return;
		var root = this._getRoot(opts),
		childKey = opts.keyChildren,
		openFlag = !parentNode || parentNode.open || !!this._$(parentNode[childKey][0], opts).get(0);
		root.createdNodes = [];
		var treeHtml = this._appendNodes(opts, level, nodes, parentNode, true, openFlag);
		if (!parentNode) {
			this.element.append(treeHtml.join(''));
		} else {
			var ulObj = this._$(parentNode, _final.id.UL, opts);
			if (ulObj.get(0)) {
				ulObj.append(treeHtml.join(''));
			}
		}
		// // 20140108 lihaibo added
		opts.isInit = false;
		// // 20140108 lihaibo added
		this._createNodeCallback(opts);
	},
	_checkNodeRelation: function(opts, node) {
		var pNode, i, l,
		childKey = opts.keyChildren,
		checkedKey = opts.keyChecked,
		r = _final.radio;
		if (opts.chkStyle == r.STYLE) {
			var checkedList = this._getRadioCheckedList(opts);
			if (node[checkedKey]) {
				if (opts.radioType == r.TYPE_ALL) {
					for (i = checkedList.length-1; i >= 0; i--) {
						pNode = checkedList[i];
						if (pNode[checkedKey] && pNode != node) {
							pNode[checkedKey] = false;
							checkedList.splice(i, 1);
							this._setChkClass(opts, this._$(pNode, _final.id.CHECK, opts), pNode);
							if (pNode.parentTId != node.parentTId) {
								this._repairParentChkClassWithSelf(opts, pNode);
							}
						}
					}
					checkedList.push(node);
				} else {
					var parentNode = (node.parentTId) ? node.getParentNode() : this._getRoot(opts);
					for (i = 0, l = parentNode[childKey].length; i < l; i++) {
						pNode = parentNode[childKey][i];
						if (pNode[checkedKey] && pNode != node) {
							pNode[checkedKey] = false;
							this._setChkClass(opts, this._$(pNode, _final.id.CHECK, opts), pNode);
						}
					}
				}
			} else if (opts.radioType == r.TYPE_ALL) {
				for (i = 0, l = checkedList.length; i < l; i++) {
					if (node == checkedList[i]) {
						checkedList.splice(i, 1);
						break;
					}
				}
			}

		} else {
			if (node[checkedKey] && (!node[childKey] || node[childKey].length==0 || opts.chkboxType.Y.indexOf("s") > -1)) {
				this._setSonNodeCheckBox(opts, node, true);
			}
			if (!node[checkedKey] && (!node[childKey] || node[childKey].length==0 || opts.chkboxType.N.indexOf("s") > -1)) {
				this._setSonNodeCheckBox(opts, node, false);
			}
			if (node[checkedKey] && opts.chkboxType.Y.indexOf("p") > -1) {
				this._setParentNodeCheckBox(opts, node, true);
			}
			if (!node[checkedKey] && opts.chkboxType.N.indexOf("p") > -1) {
				this._setParentNodeCheckBox(opts, node, false);
			}
		}
	},
	_cancelCurEditNode: function (opts, forceName, isCancel) {
		var root = this._getRoot(opts),
		nameKey = opts.keyName,
		node = root.curEditNode;
		if (node) {
			var inputObj = root.curEditInput,
			newName = forceName ? forceName:(isCancel ? node[nameKey]: inputObj.val());
			if (this._apply(opts.beforeReName, [opts.treeId, node, newName, isCancel, opts], true) === false) {
				return false;
			} else {
				node[nameKey] = newName;
				this.element.trigger(_final.event.RENAME, [opts.treeId, node, isCancel]);
			}
			var aObj = this._$(node, _final.id.A, opts);
			aObj.removeClass(_final.node.CURSELECTED_EDIT);
			inputObj.unbind();
			this._setNodeName(opts, node);
			node.editNameFlag = false;
			root.curEditNode = null;
			root.curEditInput = null;
			this._selectNode(opts, node, false);
		}
		root.noSelection = true;
		return true;
	},
	_editNode: function(opts, node) {
		var that = this;
		var root = this._getRoot(opts);
		this._editNodeBlur = false;
		if (this._isSelectedNode(opts, node) && root.curEditNode == node && node.editNameFlag) {
			setTimeout(function() {this._inputFocus(root.curEditInput);}, 0);
			return;
		}
		var nameKey = opts.keyName;
		node.editNameFlag = true;
		this._removeTreeDom(opts, node);
		this._cancelCurEditNode(opts);
		this._selectNode(opts, node, false);
		this._$(node, _final.id.SPAN, opts).html("<input type=text class='rename' id='" + node.tId + _final.id.INPUT + "' treeNode" + _final.id.INPUT + " >");
		var inputObj = this._$(node, _final.id.INPUT, opts);
		inputObj.attr("value", node[nameKey]);
		if (opts.editNameSelectAll) {
			this._inputSelect(inputObj);
		} else {
			this._inputFocus(inputObj);
		}

		inputObj.bind('blur', function(event) {
			if (!that._editNodeBlur) {
				that._cancelCurEditNode(opts);
			}
		}).bind('keydown', function(event) {
			if (event.keyCode=="13") {
				that._editNodeBlur = true;
				that._cancelCurEditNode(opts);
			} else if (event.keyCode=="27") {
				that._cancelCurEditNode(opts, null, true);
			}
		}).bind('click', function(event) {
			return false;
		}).bind('dblclick', function(event) {
			return false;
		});
		this._$(node, _final.id.A, opts).addClass(_final.node.CURSELECTED_EDIT);
		root.curEditInput = inputObj;
		root.noSelection = false;
		root.curEditNode = node;
	},
	_expandCollapseNode: function(opts, node, expandFlag, animateFlag, callback) {
		var that = this;
		var root = this._getRoot(opts),
		childKey = opts.keyChildren;
		if (!node) {
			that._apply(callback, []);
			return;
		}
		if (root.expandTriggerFlag) {
			var _callback = callback;
			callback = function(){
				if (_callback) _callback();
				if (node.open) {
					that.element.trigger(_final.event.EXPAND, [opts.treeId, node]);
				} else {
					that.element.trigger(_final.event.COLLAPSE, [opts.treeId, node]);
				}
			};
			root.expandTriggerFlag = false;
		}
		if (!node.open && node.isParent && ((!this._$(node, _final.id.UL, opts).get(0)) || (node[childKey] && node[childKey].length>0 && !this._$(node[childKey][0], opts).get(0)))) {
			this._appendParentULDom(opts, node);
			this._createNodeCallback(opts);
		}
		if (node.open == expandFlag) {
			this._apply(callback, []);
			return;
		}
		var ulObj = this._$(node, _final.id.UL, opts),
		switchObj = this._$(node, _final.id.SWITCH, opts),
		icoObj = this._$(node, _final.id.ICON, opts);
		if (node.isParent) {
			node.open = !node.open;
			if (node.iconOpen && node.iconClose) {
				icoObj.attr("style", this._makeNodeIcoStyle(opts, node));
			}
			if (node.open) {
				this._replaceSwitchClass(node, switchObj, _final.arrow.DOWN);
				this._replaceIcoClass(node, icoObj, _final.folder.OPEN);
				if (animateFlag == false || opts.expandSpeed == "") {
					ulObj.show();
					this._apply(callback, []);
				} else {
					if (node[childKey] && node[childKey].length > 0) {
						ulObj.slideDown(opts.expandSpeed, callback);
					} else {
						ulObj.show();
						this._apply(callback, []);
					}
				}
			} else {
				this._replaceSwitchClass(node, switchObj, _final.arrow.RIGHT);
				this._replaceIcoClass(node, icoObj, _final.folder.CLOSE );
				if (animateFlag == false || opts.expandSpeed == "" || !(node[childKey] && node[childKey].length > 0)) {
					ulObj.hide();
					this._apply(callback, []);
				} else {
					ulObj.slideUp(opts.expandSpeed, callback);
				}
			}
		} else {
			this._apply(callback, []);
		}
	},
	_expandCollapseParentNode: function(opts, node, expandFlag, animateFlag, callback) {
		if (!node) return;
		if (!node.parentTId) {
			this._expandCollapseNode(opts, node, expandFlag, animateFlag, callback);
			return;
		} else {
			this._expandCollapseNode(opts, node, expandFlag, animateFlag);
		}
		if (node.parentTId) {
			this._expandCollapseParentNode(opts, node.getParentNode(), expandFlag, animateFlag, callback);
		}
	},
	_expandCollapseSonNode: function(opts, node, expandFlag, animateFlag, callback) {
		var root = this._getRoot(opts),
		childKey = opts.keyChildren,
		treeNodes = (node) ? node[childKey]: root[childKey],
		selfAnimateSign = (node) ? false : animateFlag,
		expandTriggerFlag = this._getRoot(opts).expandTriggerFlag;
		this._getRoot(opts).expandTriggerFlag = false;
		if (treeNodes) {
			for (var i = 0, l = treeNodes.length; i < l; i++) {
				if (treeNodes[i]) this._expandCollapseSonNode(opts, treeNodes[i], expandFlag, selfAnimateSign);
			}
		}
		this._getRoot(opts).expandTriggerFlag = expandTriggerFlag;
		this._expandCollapseNode(opts, node, expandFlag, animateFlag, callback );
	},
	_makeDOMNodeIcon: function(html, opts, node) {
		var nameStr = this._getNodeName(opts, node),
		name = opts.nameIsHTML ? nameStr : nameStr.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
		if ( opts.formatter ) {
			name = this._apply(opts.formatter, [opts,node,name, opts],opts.formatter);
		}
		html.push("<span id='", node.tId, _final.id.ICON,
			"' title='' treeNode", _final.id.ICON," class='", this._makeNodeIcoClass(opts, node),
			"' style='", this._makeNodeIcoStyle(opts, node), "'></span><span id='", node.tId, _final.id.SPAN, 
			"' class='coral-tree-node-name'>",name,"</span>");
	},
	_makeDOMNodeLine: function(html, opts, node) {
		html.push("<span id='", node.tId, _final.id.SWITCH,	"' title='' class='", this._makeNodeLineClass(opts, node), "' treeNode", _final.id.SWITCH,"></span>");
	},
	_makeDOMNodeMainAfter: function(html, opts, node) {
		html.push("</li>");
	},
	/*_makeDOMNodeMainBefore: function(html, setting, node) {
		html.push("<li id='", node.tId, "' class='", _final.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
	},*/
	_makeDOMNodeMainBefore: function(html, opts, node) {
		html.push("<li ", (node.hidden ? "style='display:none;' " : ""), "id='", node.tId, "' class='", _final.className.LEVEL, node.level,"' tabindex='0' hidefocus='true' treenode>");
	},
	_makeDOMNodeNameAfter: function(html, opts, node) {
		html.push("</a>");
	},
	_makeDOMNodeNameBefore: function(html, opts, node) {
		var title = this._getNodeTitle(opts, node),
		url = this._makeNodeUrl(opts, node),
		fontcss = this._makeNodeFontCss(opts, node),
		fontStyle = [];
		for (var f in fontcss) {
			fontStyle.push(f, ":", fontcss[f], ";");
		}
		html.push("<a id='", node.tId, _final.id.A, "' class='", _final.className.LEVEL, node.level, (node.nodeDisabled===true?" coral-state-disabled":""),"' treeNode", _final.id.A," onclick=\"", (node.click || ''),
			"\" ",(node.nodeDisabled==true ? "title='" + opts.disabledMessage + "'" : ""), ((url != null && url.length > 0) ? "href='" + url + "'" : ""), " target='",this._makeNodeTarget(node),"' style='", fontStyle.join(''),
			"'");
		if (this._apply(node.nodeDisabled==true||opts.showTitle, [opts.treeId, node, opts], opts.showTitle) && title) {
			html.push("title='", title.replace(/'/g,"&#39;").replace(/</g,'&lt;').replace(/>/g,'&gt;'),"'");
		}
		html.push(">");
	},
	_addDiyDom : function( html,opts,node ) {
		if (node.level > 0) {
			html.push(this._getIndent(opts,node));
		}
	},
	_getIndent: function(opts, node){
		var spaceWidth = 16;
		if (node.getParentNode()) {
			var html = "", lineCss, lineClass = ["cui-icon"];
			if (node.getParentNode().getNextNode()) {
				if (opts.showLine) {
					lineClass.push(_final.line.LINE);
				} else {
					lineClass.push(_final.line.NOLINE);
				}
				html = "<span class='treeLine "+ lineClass.join("-") + "' style='width:" + spaceWidth + "px;'></span>";	
			} else {
				html = "<span class='treeIndent' style='width:" + spaceWidth + "px;'></span>";
			}
			return this._getIndent(opts,node.getParentNode()) + html;
		} else {
			return "";
		}
	},
	_makeNodeFontCss: function(opts, node) {
		var fontCss = this._apply(opts.fontCss, [opts.treeId, node, opts], opts.fontCss);
		return (fontCss && ((typeof fontCss) != "function")) ? fontCss : {};
	},
	_makeNodeIcoClass: function(opts, node) {
		var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon,
			nodeIcon = node.isParent ? " coral-tree-icon-parent" : " coral-tree-icon-leaf";
		if( !icon ){
			var icoCss = ["cui-icon"];
			if (!node.isAjaxing) {
				icoCss[0] = (node.iconSkin ? node.iconSkin + "-" : "") + icoCss[0];
				if (opts.showIcon) {
					if (node.isParent) {
						icoCss.push(node.open ? _final.folder.OPEN : _final.folder.CLOSE);
					} else {
						icoCss.push(_final.folder.FILE);
					}
				}
			} 
			return _final.className.BUTTON + nodeIcon + " " + icoCss.join('-');
		} else {
			if(opts.iconUrl == true){
				return _final.className.BUTTON;
			} else {
				return _final.className.BUTTON + " " + icon;
			}
		}
	},
	_makeNodeIcoStyle: function(opts, node) {
		var icoStyle = [];
		if (!node.isAjaxing) {
			var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
			if (icon) {
				if (opts.iconUrl == true) {
					icoStyle.push("background:url(", icon, ") 0 0 no-repeat;");
				} else {
					this._makeNodeIcoClass(opts,node);
				}
			}
				
			if (opts.showIcon == false || !this._apply(opts.showIcon, [opts.treeId, node, opts], true)) {
				icoStyle.push("width:0px;height:0px;display:none");
			}
		}
		return icoStyle.join('');
	},
	_makeNodeLineClass: function(opts, node) {
		var lineClass = [],	classPix = "cui-icon-";
		if (opts.showLine == true) {
			if (node.isParent) {
				lineClass.push(node.open ? _final.arrow.DOWN : _final.arrow.RIGHT );
			} else if(node.isLastNode) {
				lineClass.push(_final.line.BOTTOM);
				classPix = "cui-icon-";
			} else {
				lineClass.push(_final.line.CENTER);
				classPix = "cui-icon-";
			}
		} else {
			if (node.isParent) {
				lineClass.push(node.open ? _final.arrow.DOWN : _final.arrow.RIGHT );
			} else {
				lineClass.push(_final.folder.DOCU);
			}
		}
		return this._makeNodeLineClassEx(node) + classPix + lineClass.join('-');
	},
	_makeNodeLineClassEx: function(node) {
		return _final.className.BUTTON + " " + _final.className.LEVEL + node.level + " " + _final.className.SWITCH + " ";
	},
	_makeNodeTarget: function(node) {
		return (node.target || "_blank");
	},
	_makeNodeUrl1: function(opts, node) {
		var urlKey = opts.keyUrl;
		return node[urlKey] ? node[urlKey] : null;
	},
	_makeUlHtml: function(opts, node, html, content) {
		html.push("<ul id='", node.tId, _final.id.UL, "' class='", _final.className.LEVEL, node.level, " ", this._makeUlLineClass(opts, node), "' style='display:", (node.open ? "block": "none"),"'>");
		html.push(content);
		html.push("</ul>");
	},
	_makeUlLineClass: function(opts, node) {
		return ((opts.showLine && !node.isLastNode) ? _final.line.LINE : "");
	},
	_makeChkClass: function(opts, node) {
		var checkedKey = opts.keyChecked,chkName,
		c = _final.checkbox, r = _final.radio,
		fullStyle = "", stateCls = "";
		if (opts.chkStyle == r.STYLE) {
			fullStyle = (node.check_Child_State < 1)? c.CHECKED:c.PARTIAL;
			chkName = "cui-icon-" + opts.chkStyle + "-" + (node[checkedKey] ? c.CHECKED : c.UNCHECKED);
			chkName += fullStyle == c.PARTIAL ? c.PARTIAL : "";
		} else {
			if (node.halfCheck) {
				fullStyle = c.PARTIAL;
			} else {
				fullStyle = node[checkedKey] ? ((node.check_Child_State === 2 || node.check_Child_State === -1) ? c.CHECKED:c.PARTIAL) : ((node.check_Child_State < 1)? c.UNCHECKED:c.PARTIAL);
			}
			chkName = "cui-icon-" + opts.chkStyle + "-" + (fullStyle == c.PARTIAL ? ((node[checkedKey] ? c.CHECKED : c.UNCHECKED) + c.PARTIAL ) : fullStyle);
		}
		stateCls = (node.check_Focus && node.chkDisabled !== true) ? c.FOCUS : (node.chkDisabled == true ? c.DISABLED : c.DEFAULT);
		return _final.className.BUTTON + " " + stateCls  + " " + chkName;
	},
	//增加treeLine上的线
	_addLine: function(opts, node, oldLevel) {
		var i= typeof(oldLevel)=="undefined" ? 1: 0 ; 
		var diff = "";
		var arr = this._transformToArrayFormat(opts, node);
		if (oldLevel != null && node.level != null) {
			diff = (typeof(oldLevel)=="undefined" ? 0: oldLevel) - (typeof(node.level)=="undefined" ? 0: node.level);
		} 
		for (i; i < arr.length; i++) {
			this._$(arr[i], _final.id.A, opts).find("span:lt("+ (arr[i].level + diff) +")").remove();
			this._$(arr[i], _final.id.A, opts).prepend(this._getIndent(opts, arr[i]));
		}
	},
	//判断switchClass的类型
	_lineClass: function(node,showLine){
		var lineClass = [];
		if (node.isParent) {
			lineClass = node.open ? _final.arrow.DOWN : _final.arrow.RIGHT;
		} else {
			if (showLine) {
				if (node.level == 0 && node.isLastNode && node.isFirstNode) {
					lineClass = _final.line.NOLINE;
				} else if (node.level == 0 && node.isFirstNode && !node.isLastNode) {
					lineClass = _final.line.ROOTS;
				} else if (node.isLastNode) {
					lineClass = _final.line.BOTTOM;
				} else {
					lineClass = _final.line.CENTER;
				}
			} else {
				lineClass = _final.line.NOLINE;
			}
		}
		return lineClass;
	},
	_moveNode: function(opts, targetNode, node, moveType, animateFlag, isSilent) {
		var root = this._getRoot(opts),html=[],
		childKey = opts.keyChildren;
		if (targetNode == node) return;
		if (opts.keepLeaf && targetNode && !targetNode.isParent && moveType == _final.move.TYPE_INNER) return;
		var oldParentNode = (node.parentTId ? node.getParentNode(): root),
			oldLevelP = oldParentNode.level;
		targetNodeIsRoot = (targetNode === null || targetNode == root);
		if (targetNodeIsRoot && targetNode === null) targetNode = root;
		if (targetNodeIsRoot) moveType = _final.move.TYPE_INNER;
		var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);

		if (moveType != _final.move.TYPE_PREV && moveType != _final.move.TYPE_NEXT) {
			moveType = _final.move.TYPE_INNER;
		}

		if (moveType == _final.move.TYPE_INNER) {
			if (targetNodeIsRoot) {
				//根节点的父TId是 null
				node.parentTId = null;
			} else {
				if (!targetNode.isParent) {
					targetNode.isParent = true;
					targetNode.open = !!targetNode.open;
					this._setNodeLineIcos(opts, targetNode);
				}
				node.parentTId = targetNode.tId;
			}
		}
		//移动节点 Dom元素
		var targetObj, target_ulObj;
		if (targetNodeIsRoot) {
			targetObj = this.element;
			target_ulObj = targetObj;
		} else {
			if (!isSilent && moveType == _final.move.TYPE_INNER) {
				this._expandCollapseNode(opts, targetNode, true, false);
			} else if (!isSilent) {
				this._expandCollapseNode(opts, targetNode.getParentNode(), true, false);
			}
			targetObj = this._$(targetNode, opts);
			target_ulObj = this._$(targetNode, _final.id.UL, opts);
			if (!!targetObj.get(0) && !target_ulObj.get(0)) {
				var ulstr = [];
				this._makeUlHtml(opts, targetNode, ulstr, '');
				targetObj.append(ulstr.join(''));
			}
			target_ulObj = this._$(targetNode, _final.id.UL, opts);
		}
		var nodeDom = this._$(node, opts);
		if (!nodeDom.get(0)) {
			nodeDom = this._appendNodes(opts, node.level, [node], null, false, true).join('');
		} else if (!targetObj.get(0)) {
			nodeDom.remove();
		}
		if (target_ulObj.get(0) && moveType == _final.move.TYPE_INNER) {
			target_ulObj.append(nodeDom);
		} else if (targetObj.get(0) && moveType == _final.move.TYPE_PREV) {
			targetObj.before(nodeDom);
		} else if (targetObj.get(0) && moveType == _final.move.TYPE_NEXT) {
			targetObj.after(nodeDom);
		}
		//移动节点后，更新相关节点的数据
		var i,l,
		lineClass = [],
		tmpSrcIndex = -1,
		tmpTargetIndex = 0,
		oldNeighbor = null,
		newNeighbor = null,
		oldNeighborLevel = null,
		newNeighborLevel = null,
		oldLevel = node.level;
		if (node.isFirstNode) {
			tmpSrcIndex = 0;
			if (oldParentNode[childKey].length > 1 ) {
				oldNeighbor = oldParentNode[childKey][1];
				oldNeighbor.isFirstNode = true;
				oldNeighborLevel = oldNeighbor.level;
			}
		} else if (node.isLastNode) {
			tmpSrcIndex = oldParentNode[childKey].length -1;
			oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];
			oldNeighbor.isLastNode = true;
			oldNeighborLevel = oldNeighbor.level;
		} else {
			for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {
				if (oldParentNode[childKey][i].tId == node.tId) {
					tmpSrcIndex = i;
					break;
				}
			}
		}
		if (tmpSrcIndex >= 0) {
			oldParentNode[childKey].splice(tmpSrcIndex, 1);
		}
		if (moveType != _final.move.TYPE_INNER) {
			for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {
				if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;
			}
		}
		if (moveType == _final.move.TYPE_INNER) {
			if (!targetNode[childKey]) targetNode[childKey] = new Array();
			if (targetNode[childKey].length > 0) {
				newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];
				newNeighbor.isLastNode = false;
				newNeighborLevel = newNeighbor.level;
			}
			targetNode[childKey].splice(targetNode[childKey].length, 0, node);
			node.isLastNode = true;
			node.isFirstNode = (targetNode[childKey].length == 1);
		} else if (targetNode.isFirstNode && moveType == _final.move.TYPE_PREV) {
			targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
			newNeighbor = targetNode;
			newNeighbor.isFirstNode = false;
			newNeighborLevel = newNeighbor.level;
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = true;
			node.isLastNode = false;
		} else if (targetNode.isLastNode && moveType == _final.move.TYPE_NEXT) {
			targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
			newNeighbor = targetNode;
			newNeighbor.isLastNode = false;
			newNeighborLevel = newNeighbor.level;
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = false;
			node.isLastNode = true;
		} else {
			if (moveType == _final.move.TYPE_PREV) {
				targetParentNode[childKey].splice(tmpTargetIndex, 0, node);
			} else {
				targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);
			}
			node.parentTId = targetNode.parentTId;
			node.isFirstNode = false;
			node.isLastNode = false;
		}
		this._fixPIdKeyValue(opts, node);
		this._setSonNodeLevel(opts, node.getParentNode(), node);
		//更新被移动的节点数据
		var nodeObj = this._$(node, _final.id.SWITCH, opts);
		this._setNodeLineIcos(opts, node);
		this._repairNodeLevelClass(opts, node, oldLevel);
		this._addLine(opts, node,oldLevel);
		lineClass = this._lineClass(node, opts.showLine);
		this._replaceSwitchClass(node, nodeObj, lineClass);
		//更新被移动节点的原来父节点的 dom 元素
		if (!opts.keepParent && oldParentNode[childKey].length < 1) {
			//如果原来的父节点没有子节点元素
			oldParentNode.isParent = false;
			oldParentNode.open = false;
			var tmp_ulObj = this._$(oldParentNode, _final.id.UL, opts),
			tmp_switchObj = this._$(oldParentNode, _final.id.SWITCH, opts),
			tmp_icoObj = this._$(oldParentNode, _final.id.ICON, opts);
			lineClass = this._lineClass(oldParentNode, opts.showLine);
			this._replaceSwitchClass(oldParentNode, tmp_switchObj, lineClass);
			this._replaceIcoClass(oldParentNode, tmp_icoObj, _final.folder.FILE);
			tmp_ulObj.css("display", "none");
			this._addLine(opts, oldParentNode,oldLevelP);
		} else if (oldNeighbor) {
			//原来的相邻节点
			this._setNodeLineIcos(opts, oldNeighbor);
			this._addLine(opts, oldNeighbor,oldNeighborLevel);
		}
		//新的相邻节点
		if (newNeighbor) {
			tmp_switchObj = this._$(newNeighbor, _final.id.SWITCH, opts);
			this._setNodeLineIcos(opts, newNeighbor);
			this._addLine(opts, newNeighbor,newNeighborLevel);
			lineClass = this._lineClass(newNeighbor, opts.showLine);
			this._replaceSwitchClass(newNeighbor, tmp_switchObj, lineClass);
		}
		//移动后更新 checkbox / radio
		if (!!opts.check && opts.checkable && this._repairChkClass) {
			this._repairChkClass(opts, oldParentNode);
			this._repairParentChkClassWithSelf(opts, oldParentNode);
			if (oldParentNode != node.parent)
				this._repairParentChkClassWithSelf(opts, node);
		}
		//移动后展开父节点
		if (!isSilent) {
			this._expandCollapseParentNode(opts, node.getParentNode(), true, animateFlag);
		}
	},
	_removeChildNodes: function(opts, node) {
		if (!node) return;
		var childKey = opts.keyChildren,
		nodes = node[childKey];
		if (!nodes) return;

		for (var i = 0, l = nodes.length; i < l; i++) {
			this._removeNodeCache(opts, nodes[i]);
		}
		this._removeSelectedNode(opts);
		delete node[childKey];
		if (!opts.keepParent) {
			node.isParent = false;
			node.open = false;
			var tmp_switchObj = this._$(node, _final.id.SWITCH, opts),
			tmp_icoObj = this._$(node, _final.id.ICON, opts);
			this._replaceSwitchClass(node, tmp_switchObj, _final.line.CENTER);
			this._replaceIcoClass(node, tmp_icoObj, _final.line.CENTER);
			this._$(node, _final.id.UL, opts).remove();
		} else {
			this._$(node, _final.id.UL, opts).empty();
		}
	},
	// lihaibo add
	_showNode: function(opts, node, options) {
		node.hidden = false;
		this._initShowForExCheck(opts, node);
		this._$(node, opts).show();		
		if ( typeof options !== "undefined" && typeof options.showParents !== "undefined" && options.showParents && null !== node.getParentNode() ) {
			this._showNode (opts, node.getParentNode(), options);
		}
	},
	_initShowForExCheck: function(opts, n) {
		if (!n.hidden && opts.checkable) {
			if(typeof n._nocheck != "undefined") {
				n.nocheck = n._nocheck;
				delete n._nocheck;
			}
			if (this._setChkClass) {
				var checkObj = this._$(n, _final.id.CHECK, opts);
				this._setChkClass(opts, checkObj, n);
			}
			if (this._repairParentChkClassWithSelf) {
				this._repairParentChkClassWithSelf(opts, n);
			}
		}
	},
	_showNodes: function(opts, nodes, options) {
		if (!nodes || nodes.length == 0) {
			return;
		}
		var pList = {}, i, j;
		for (i=0, j=nodes.length; i<j; i++) {
			var n = nodes[i];
			if (!pList[n.parentTId]) {
				var pn = n.getParentNode();
				pList[n.parentTId] = (pn === null) ? this._getRoot(opts) : n.getParentNode();
			}
			this._showNode(opts, n, options);
		}
		for (var tId in pList) {
			var children = pList[tId][opts.keyChildren];
			this._setFirstNodeForShow(opts, children);
			this._setLastNodeForShow(opts, children);
		}
	},
	_setFirstNodeForShow: function(opts, nodes) {
		var n,i,j, first, old;
		for(i=0, j=nodes.length; i<j; i++) {
			n = nodes[i];
			if (!first && !n.hidden && n.isFirstNode) {
				first = n;
				break;
			} else if (!first && !n.hidden && !n.isFirstNode) {
				n.isFirstNode = true;
				first = n;
				this._setNodeLineIcos(opts, n);
			} else if (first && n.isFirstNode) {
				n.isFirstNode = false;
				old = n;
				this._setNodeLineIcos(opts, n);
				break;
			} else {
				n = null;
			}
		}
		return {"new":first, "old":old};
	},
	_setLastNodeForShow: function(opts, nodes) {
		var n,i,j, last, old;
		for (i=nodes.length-1; i>=0; i--) {
			n = nodes[i];
			if (!last && !n.hidden && n.isLastNode) {
				last = n;
				break;
			} else if (!last && !n.hidden && !n.isLastNode) {
				n.isLastNode = true;
				last = n;
				this._setNodeLineIcos(opts, n);
			} else if (last && n.isLastNode) {
				n.isLastNode = false;
				old = n;
				this._setNodeLineIcos(opts, n);
				break;
			} else {
				n = null;
			}
		}
		return {"new":last, "old":old};
	},
	_hideNode: function(opts, node, options) {
		node.hidden = true;
		node.isFirstNode = false;
		node.isLastNode = false;
		this._initHideForExCheck(opts, node);
		this._cancelPreSelectedNode(opts, node);
		this._$(node, opts).hide();
	},
	_initHideForExCheck: function(opts, n) {
		if (n.hidden && opts.checkable) {
			if(typeof n._nocheck == "undefined") {
				n._nocheck = !!n.nocheck
				n.nocheck = true;
			}
			n.check_Child_State = -1;
			if (this._repairParentChkClassWithSelf) {
				this._repairParentChkClassWithSelf(opts, n);
			}
		}
	},
	_hideNodes: function(opts, nodes, options) {
		if (!nodes || nodes.length == 0) {
			return;
		}
		var pList = {}, i, j;
		for (i=0, j=nodes.length; i<j; i++) {
			var n = nodes[i];
			if ((n.isFirstNode || n.isLastNode) && !pList[n.parentTId]) {
				var pn = n.getParentNode();
				pList[n.parentTId] = (pn === null) ? this._getRoot(opts) : n.getParentNode();
			}
			this._hideNode(opts, n, options);
		}
		for (var tId in pList) {
			var children = pList[tId][opts.keyChildren];
			this._setFirstNodeForHide(opts, children);
			this._setLastNodeForHide(opts, children);
		}
	},
	_setFirstNodeForHide: function(opts, nodes) {
		var n,i,j;
		for (i=0, j=nodes.length; i<j; i++) {
			n = nodes[i];
			if (n.isFirstNode) {
				break;
			}
			if (!n.hidden && !n.isFirstNode) {
				n.isFirstNode = true;
				this._setNodeLineIcos(opts, n);
				break;
			} else {
				n = null;
			}
		}
		return n;
	},
	_setLastNodeForHide: function(opts, nodes) {
		var n,i;
		for (i=nodes.length-1; i>=0; i--) {
			n = nodes[i];
			if (n.isLastNode) {
				break;
			}
			if (!n.hidden && !n.isLastNode) {
				n.isLastNode = true;
				this._setNodeLineIcos(opts, n);
				break;
			} else {
				n = null;
			}
		}
		return n;
	},
	// lihaibo add end
	_setFirstNode: function(opts, parentNode) {
		var childKey = opts.keyChildren, childLength = parentNode[childKey].length;
		if ( childLength > 0) {
			parentNode[childKey][0].isFirstNode = true;
		}
	},
	_setLastNode: function(opts, parentNode) {
		var childKey = opts.keyChildren, childLength = parentNode[childKey].length;
		if ( childLength > 0) {
			parentNode[childKey][childLength - 1].isLastNode = true;
		}
	},
	_removeNode2: function(opts, node) {
		var root = this._getRoot(opts),lineClass=[],
		childKey = opts.keyChildren,
		oldLevel = node.level,
		prevNode = node.getPreNode(),
		nextNode = node.getNextNode(),
		parentNode = (node.parentTId) ? node.getParentNode() : root,
		parentNodeOldlevel = parentNode.level;
		node.isFirstNode = false;
		node.isLastNode = false;
		node.getPreNode = function() {return null;};
		node.getNextNode = function() {return null;};
		if (!this._getNodeCache(opts, node.tId)) {
			return;
		}
		this._$(node, opts).remove();
		this._removeNodeCache(opts, node);
		this._removeSelectedNode(opts, node);

		for (var i = 0, l = parentNode[childKey].length; i < l; i++) {
			if (parentNode[childKey][i].tId == node.tId) {
				parentNode[childKey].splice(i, 1);
				break;
			}
		}
		this._setFirstNode(opts, parentNode);
		this._setLastNode(opts, parentNode);
		var tmp_ulObj,tmp_switchObj,tmp_icoObj,
		childLength = parentNode[childKey].length;
		//删除节点后更新原来的父节点
		if (!opts.keepParent && childLength == 0) {
			//如果原来的父节点没有子节点
			parentNode.isParent = false;
			parentNode.open = false;
			tmp_ulObj = this._$(parentNode, _final.id.UL, opts);
			tmp_switchObj = this._$(parentNode, _final.id.SWITCH, opts);
			tmp_icoObj = this._$(parentNode, _final.id.ICON, opts);
			lineClass = this._lineClass(parentNode, opts.showLine);
			this._replaceSwitchClass(parentNode, tmp_switchObj, lineClass);
			this._replaceIcoClass(parentNode, tmp_icoObj, _final.folder.FILE);
			tmp_ulObj.css("display", "none");
		} else if (opts.showLine && childLength > 0) {
			//如果原来的父节点有子节点
			var newLast = parentNode[childKey][childLength - 1];
			tmp_ulObj = this._$(newLast, _final.id.UL, opts);
			tmp_switchObj = this._$(newLast, _final.id.SWITCH, opts);
			tmp_icoObj = this._$(newLast, _final.id.ICON, opts);
			if (parentNode == root) {
				if (parentNode[childKey].length == 1) {
					//如果移除的是树的根节点，并且该树只有这一个根节点时
					this._replaceSwitchClass(newLast, tmp_switchObj, _final.arrow.DOWN);
				} else {
					var tmp_first_switchObj = this._$(parentNode[childKey][0], _final.id.SWITCH, opts);
					this._replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, (parentNode[childKey][0].isParent ? (parentNode[childKey][0].open == true ? _final.arrow.DOWN: _final.arrow.RIGHT) : _final.line.ROOTS));
					if( !newLast.isParent){
						this._replaceSwitchClass(newLast, tmp_switchObj, _final.line.BOTTOM);
					} else {
						this._replaceSwitchClass(newLast, tmp_switchObj,(node.open == true ? _final.arrow.DOWN: _final.arrow.RIGHT) );
					}
				}
			} else {
				if (newLast.isParent) {
					this._replaceSwitchClass(newLast, tmp_switchObj, (newLast.open ? _final.arrow.DOWN: _final.arrow.RIGHT ));
				} else {
					this._replaceSwitchClass(newLast, tmp_switchObj, _final.line.BOTTOM);
				}
			}
			this._addLine(opts, parentNode, parentNodeOldlevel);
			tmp_ulObj.removeClass(_final.line.LINE);
		}
	},
	_replaceIcoClass: function(node, obj, newName) {
		var icon = (node.isParent && node.iconOpen && node.iconClose) ? (node.open ? node.iconOpen : node.iconClose) : node.icon;
		if (!obj || node.isAjaxing) return;
		var tmpName = obj.attr("class");
		if (tmpName == undefined) return;
		var tmpList = tmpName.split("-");
		switch (newName) {
			case _final.folder.OPEN:
			case _final.folder.CLOSE:
			case _final.folder.FILE:
			case _final.line.CENTER:
			case _final.line.BOTTOM:
			case _final.line.LINE:
				if (icon) {
					obj.attr("class", tmpList);
				} else {
					tmpList[tmpList.length-1] = newName
					obj.attr("class", tmpList.join("-"));
				}
				break;
		}
	},
	_replaceSwitchClass: function(node, obj, newName) {
		if (!obj) return;
		var tmpName = obj.attr("class");
		if (tmpName == undefined) return;
		var tmpList = tmpName.split("-");
		switch (newName) {
			case _final.arrow.DOWN:
			case _final.arrow.RIGHT:
			case _final.line.NOLINE:
				tmpList[tmpList.length-1] = newName;
				break;
			case _final.folder.OPEN:
			case _final.folder.CLOSE:
			case _final.line.ROOTS:
			case _final.line.CENTER:
			case _final.line.BOTTOM:
			case _final.folder.DOCU:
			case _final.line.LINE:
				tmpList[tmpList.length-1] = newName;
				break;
		}
		obj.attr("class", tmpList.join("-"));
		if (newName !== _final.folder.DOCU) {
			obj.removeAttr("disabled");
		} else {
			obj.attr("disabled", "disabled");
		}
	},	
	_repairAllChk: function(opts, checked) {
		if (opts.checkable && opts.chkStyle === _final.checkbox.STYLE) {
			var checkedKey = opts.keyChecked,
			childKey = opts.keyChildren,
			root = this._getRoot(opts);
			for (var i = 0, l = root[childKey].length; i<l ; i++) {
				var node = root[childKey][i];
				if (node.nocheck !== true && node.chkDisabled !== true) {
					node[checkedKey] = checked;
				}
				this._setSonNodeCheckBox(opts, node, checked);
			}
		}
	},
	_repairChkClass: function(opts, node) {
		if (!node) return;
		this._makeChkFlag(opts, node);
		if (node.nocheck !== true) {
			var checkObj = this._$(node, _final.id.CHECK, opts);
			this._setChkClass(opts, checkObj, node);
		}
	},
	_repairParentChkClass: function(opts, node) {
		if (!node || !node.parentTId) return;
		var pNode = node.getParentNode();
		this._repairChkClass(opts, pNode);
		this._repairParentChkClass(opts, pNode);
	},
	_repairParentChkClassWithSelf: function(opts, node) {
		if (!node) return;
		var childKey = opts.keyChildren;
		if (node[childKey] && node[childKey].length > 0) {
			this._repairParentChkClass(opts, node[childKey][0]);
		} else {
			this._repairParentChkClass(opts, node);
		}
	},
	_repairSonChkDisabled: function(opts, node, chkDisabled, inherit) {
		if (!node) return;
		var childKey = opts.keyChildren;
		if (node.chkDisabled != chkDisabled) {
			node.chkDisabled = chkDisabled;
		}
		this._repairChkClass(opts, node);
		if (node[childKey] && inherit) {
			for (var i = 0, l = node[childKey].length; i < l; i++) {
				var sNode = node[childKey][i];
				this._repairSonChkDisabled(opts, sNode, chkDisabled, inherit);
			}
		}
	},
	_repairParentChkDisabled: function(opts, node, chkDisabled, inherit) {
		if (!node) return;
		if (node.chkDisabled != chkDisabled && inherit) {
			node.chkDisabled = chkDisabled;
		}
		this._repairChkClass(opts, node);
		this._repairParentChkDisabled(opts, node.getParentNode(), chkDisabled, inherit);
	},	
	_selectNode1: function(opts, node, addFlag) {
		if (!addFlag) {
			this._cancelPreSelectedNode(opts);
		}
		//$$(node, _final.id.A, setting).addClass(_final.node.CURSELECTED);
		this._$(node, _final.id.A, opts).addClass(_final.node.CURSELECTED);
		this._addSelectedNode(opts, node);
	},
	_setNodeFontCss: function(opts, treeNode) {
		var aObj = this._$(treeNode, _final.id.A, opts),
		fontCss = this._makeNodeFontCss(opts, treeNode);
		if (fontCss) {
			aObj.css(fontCss);
		}
	},
	_setNodeLineIcos: function(opts, node) {
		if (!node) return;
		var switchObj = this._$(node, _final.id.SWITCH, opts),
		ulObj = this._$(node, _final.id.UL, opts),
		icoObj = this._$(node, _final.id.ICON, opts),
		ulLine = this._makeUlLineClass(opts, node);
		if (ulLine.length==0) {
			ulObj.removeClass(_final.line.LINE);
		} else {
			ulObj.addClass(ulLine);
		}
		switchObj.attr("class", this._makeNodeLineClass(opts, node));
		if (node.isParent) {
			switchObj.removeAttr("disabled");
		} else {
			switchObj.attr("disabled", "disabled");
		}
		icoObj.removeAttr("style");
		icoObj.attr("style", this._makeNodeIcoStyle(opts, node));
		icoObj.attr("class", this._makeNodeIcoClass(opts, node));
	},
	_setNodeName: function(opts, node) {
		var title = this._getNodeTitle(opts, node),
		nObj = this._$(node, _final.id.SPAN, opts);
		nObj.empty();
		var names = "";
		if ( opts.formatter ) {
			names = this._apply(opts.formatter, [opts,node, opts],opts.formatter);
		} else {
			names = this._getNodeName(opts, node);
		}
		if (opts.nameIsHTML) {
			nObj.html(names);
		} else {
			nObj.text(names);
		}
		if (this._apply(opts.showTitle, [opts.treeId, node, opts], opts.showTitle)) {
			var aObj = this._$(node, _final.id.A, opts);
			aObj.attr("title", !title ? "" : title);
		}
	},
	_setNodeTarget: function(opts, node) {
		var aObj = this._$(node, _final.id.A, opts);
		aObj.attr("target", this._makeNodeTarget(node));
	},
	_setNodeUrl: function(opts, node) {
		var aObj = this._$(node, _final.id.A, opts),
		url = this._makeNodeUrl(opts, node);
		if (url == null || url.length == 0) {
			aObj.removeAttr("href");
		} else {
			aObj.attr("href", url);
		}
	},
	_switchNode: function(opts, node) {
		if (node.open || !this._canAsync(opts, node)) {
			this._expandCollapseNode(opts, node, !node.open);
		} else if (opts.asyncEnable) {
			if (!this._asyncNode(opts, node)) {
				this._expandCollapseNode(opts, node, !node.open);
				return;
			}
		} else if (node) {
			this._expandCollapseNode(opts, node, !node.open);
		}
	},
	_setChkClass: function(opts, obj, node) {
		if (!obj) return;
		if (node.nocheck === true) {
			obj.hide();
		} else {
			obj.show();
		}
        obj.attr('class', this._makeChkClass(opts, node));
	},
	_setParentNodeCheckBox: function(opts, node, value, srcNode) {
		var childKey = opts.keyChildren,
		checkedKey = opts.keyChecked,
		checkObj = this._$(node, _final.id.CHECK, opts);
		if (!srcNode) srcNode = node;
		this._makeChkFlag(opts, node);
		if (node.nocheck !== true && node.chkDisabled !== true) {
			node[checkedKey] = value;
			this._setChkClass(opts, checkObj, node);
			if (opts.autoCheckTrigger && node != srcNode) {
				this.element.trigger(_final.event.CHECK, [null, opts.treeId, node]);
			}
		}
		if (node.parentTId) {
			var pSign = true;
			if (!value) {
				var pNodes = node.getParentNode()[childKey];
				for (var i = 0, l = pNodes.length; i < l; i++) {
					if ((pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey])
					|| ((pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0)) {
						pSign = false;
						break;
					}
				}
			}
			if (pSign) {
				this._setParentNodeCheckBox(opts, node.getParentNode(), value, srcNode);
			}
		}
	},
	_setSonNodeCheckBox: function(opts, node, value, srcNode) {
		if (!node) return;
		var childKey = opts.keyChildren,
		checkedKey = opts.keyChecked,
		checkObj = this._$(node, _final.id.CHECK, opts);
		if (!srcNode) srcNode = node;
		var hasDisable = false;
		if (node[childKey]) {
			for (var i = 0, l = node[childKey].length; i < l && node.chkDisabled !== true; i++) {
				var sNode = node[childKey][i];
				this._setSonNodeCheckBox(opts, sNode, value, srcNode);
				if (sNode.chkDisabled === true) hasDisable = true;
			}
		}
		if (node != this._getRoot(opts) && node.chkDisabled !== true) {
			if (hasDisable && node.nocheck !== true) {
				this._makeChkFlag(opts, node);
			}
			if (node.nocheck !== true && node.chkDisabled !== true) {
				node[checkedKey] = value;
				if (!hasDisable) node.check_Child_State = (node[childKey] && node[childKey].length > 0) ? (value ? 2 : 0) : -1;
			} else {
				node.check_Child_State = -1;
			}
			this._setChkClass(opts, checkObj, node);
			if (opts.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {
				this.element.trigger(_final.event.CHECK, [null, opts.treeId, node]);
			}
		}

	},
	_removeEditBtn: function(opts, node) {
		this._$(node, _final.id.EDIT, opts).unbind().remove();
	},
	_removeRemoveBtn: function(opts, node) {
		this._$(node, _final.id.REMOVE, opts).unbind().remove();
	},
	_removeTreeDom: function(opts, node) {
		node.isHover = false;
		this._removeEditBtn(opts, node);
		this._removeRemoveBtn(opts, node);
		this._$(node, _final.id.A, opts).removeClass(_final.node.CURHOVER);
		this._apply(opts.removeHoverDom, [opts.treeId, node, opts]);
	},
	_repairNodeLevelClass: function(opts, node, oldLevel) {
		if (oldLevel === node.level) return;
		var liObj = this._$(node, opts),
		aObj = this._$(node, _final.id.A, opts),
		ulObj = this._$(node, _final.id.UL, opts),
		oldClass = _final.className.LEVEL + oldLevel,
		newClass = _final.className.LEVEL + node.level;
		liObj.removeClass(oldClass);
		liObj.addClass(newClass);
		aObj.removeClass(oldClass);
		aObj.addClass(newClass);
		ulObj.removeClass(oldClass);
		ulObj.addClass(newClass);
	},
	_selectNodes : function(opts, nodes) {
		for (var i=0, l=nodes.length; i<l; i++) {
			this._selectNode(opts, nodes[i], i>0);
		}
	},
	_createNodes: function(opts, level, nodes, parentNode) {
		var _createNodes = this._createNodes1;
		if (_createNodes) _createNodes.apply(this, arguments);
		if (!nodes) return;
		//checkTree
		//this._repairParentChkClassWithSelf(setting, parentNode);
		//editTree
		if (this._repairParentChkClassWithSelf) {
			this._repairParentChkClassWithSelf(opts, parentNode);
		}
	},
	_removeNode1: function(opts, node) {
		var _removeNode2 = this._removeNode2;
		var parentNode = node.getParentNode();
		if (_removeNode2) _removeNode2.apply(this, arguments);
		if (!node || !parentNode) return;
		this._repairChkClass(opts, parentNode);
		this._repairParentChkClass(opts, parentNode);
	},	
	_appendNodes: function(opts, level, nodes, parentNode, initFlag, openFlag) {
		var _appendNodes = this._appendNodes1;
		var html = "";
		if (_appendNodes) {
			html = _appendNodes.apply(this, arguments);
		}
		if (parentNode) {
			this._makeChkFlag(opts, parentNode);
		}
		return html;
	},	
	//override 可编辑树复写部分普通树的方法
	_cancelPreSelectedNode: function (opts, node) {
		_cancelPreSelectedNode = this._cancelPreSelectedNode1;
		var list = this._getRoot(opts).curSelectedList;
		for (var i=0, j=list.length; i<j; i++) {
			if (!node || node === list[i]) {
				this._removeTreeDom(opts, list[i]);
				if (node) break;
			}
		}
		if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(this, arguments);
	},	
	_makeNodeUrl: function(opts, node) {
		var _makeNodeUrl = this._makeNodeUrl1;
		return opts.editable ? null : (_makeNodeUrl.apply(this, arguments));
	},	
	_removeNode: function(opts, node) {
		var _removeNode1 = this._removeNode1;
		var root = this._getRoot(opts);
		if (root.curEditNode === node) root.curEditNode = null;
		if (_removeNode1) {
			_removeNode1.apply(this, arguments);
		}
	},	
	_selectNode: function(opts, node, addFlag) {
		var _selectNode = this._selectNode1;
		var root = this._getRoot(opts);
		if (this._isSelectedNode(opts, node) && root.curEditNode == node && node.editNameFlag) {
			return false;
		}
		if (_selectNode) _selectNode.apply(this, arguments);
		this._addHoverDom(opts, node);
		return true;
	},
	_uCanDo1: function(opts, e) {
		return true;
	},
	_uCanDo: function(opts, e) {
		var _uCanDo = this._uCanDo1;
		var root = this._getRoot(opts);
		if (e && (this._eqs(e.type, "mouseover") || this._eqs(e.type, "mouseout") || this._eqs(e.type, "mousedown") || this._eqs(e.type, "mouseup"))) {
			return true;
		}
		if (root.curEditNode) {
			this._editNodeBlur = false;
			root.curEditInput.focus();
		}
		return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply(this, arguments) : true);
	}
})		
;


$.component("coral.layout", {
	version: "4.1.4",
	options:{
		onCreate: null,
		fit : false
	},
	layoutPanelDefault: {
		region: null,
		split: false,
		showSplitIcon:false,
		collapsedSize: 30,
		minWidth: 10,
		minHeight: 10,
		maxWidth: 10000,
		maxHeight: 10000
	},	
	resizing: false,//当分割条在被拖动时,值为true
	_resizeLayout: function() {
		var that = this,
			el = this.element,
			layoutOptions = that.options,
			layoutPanels = that.panels,
			cc = $(el);
		if (el[0].tagName.toLowerCase() == "body") {
			this._fit();
		} else {
			layoutOptions.fit ? cc.css(this._fit()) : this._fit(false);
		}
		// split为false的时候，不加分割线和箭头，故宽高为0
		var splitN = cc.find(">.coral-layout-split-north").height() || 0,
			splitS = cc.find(">.coral-layout-split-south").height() || 0,
			splitW = cc.find(">.coral-layout-split-west").width() || 0,
			splitE = cc.find(">.coral-layout-split-east").width() || 0;
		//设置中央panel的默认尺寸大小
		var centerPanelSize = {
			top: 0,
			left: 0,
			width: cc.width() - splitW - splitE,
			height: cc.height() - splitS - splitN
		};
		resizePanelVertical(this._isPanelVisible(layoutPanels.expandNorth) ? 
			layoutPanels.expandNorth : layoutPanels.north, "n");
		resizePanelVertical(this._isPanelVisible(layoutPanels.expandSouth) ? 
			layoutPanels.expandSouth : layoutPanels.south, "s");
		resizePanelHorizontal(this._isPanelVisible(layoutPanels.expandEast) ? 
			layoutPanels.expandEast : layoutPanels.east, "e");
		resizePanelHorizontal(this._isPanelVisible(layoutPanels.expandWest) ? 
			layoutPanels.expandWest : layoutPanels.west, "w");
		layoutPanels.center.panel("resize", centerPanelSize);
		function _getHeight(pp) {
			var _c = pp.panel("getOptions");
			return Math.min(Math.max(_c.height, _c.minHeight), _c.maxHeight);
		};
		function _getWidth(pp) {
			var _e = pp.panel("getOptions");
			return Math.min(Math.max(_e.width, _e.minWidth), _e.maxWidth);
		};
		//设置南、北panel尺寸大小
		function resizePanelVertical(pp, dir) {
			if (!pp.length || !that._isPanelVisible(pp)) {
				return;
			}
			var panelOpts = pp.panel("getOptions"),
				pHeight = _getHeight(pp),
				region = (dir == "n" ? "north":"south"),
				oldPanel = cc.find(">.coral-layout-panel-" + region).children(".ctrl-init-panel"),
				oldPanelOpts = oldPanel.panel("getOptions");
			centerPanelSize.height -= pHeight;
			if (dir == "n") {
				var splitNorth = cc.find(">.coral-layout-split-north");
				centerPanelSize.top += pHeight + splitN;//中间面板的top需要再加上分割箭头的高度
				if (!oldPanelOpts.split && panelOpts.border) {
					centerPanelSize.top--;
				}
				splitNorth.css({
					top: pHeight,
					left: 0
				})
			} else {
				var splitSouth = cc.find(">.coral-layout-split-south");
				splitSouth.css({
					top: cc.height() - pHeight - splitS,
					left: 0
				})
			}
			pp.panel("resize", {
				width : cc.width(),
				height : pHeight,
				left : 0,
				top : (dir == "n" ? 0 : cc.height() - pHeight)
			});
			if (!oldPanelOpts.split && panelOpts.border) {
				centerPanelSize.height++;
			}
			if (panelOpts.border && !$.support.boxSizing) {//在IE7下height不对，多了边框的高度
				centerPanelSize.height-2;
			}
		};
		//设置东、西panel尺寸大小
		function resizePanelHorizontal(pp, dir) {
			if (!pp.length || !that._isPanelVisible(pp)) {
				return;
			}
			var panelOpts = pp.panel("getOptions"),
				region = (dir == "e" ? "east":"west"),
				oldPanel = cc.find(">.coral-layout-panel-" + region).children(".ctrl-init-panel"),
				oldPanelOpts = oldPanel.panel("getOptions");
			var pWidth = _getWidth(pp);
			pp.panel("resize", {
				width : pWidth,
				height : centerPanelSize.height,
				left : (dir == "e" ? cc.width() - pWidth : 0),
				top : centerPanelSize.top
			});
			centerPanelSize.width -= pWidth;
			if (dir == "w") {
				var splitWest = cc.find(">.coral-layout-split-west");
				centerPanelSize.left += pWidth + splitW;
				splitWest.css({
					height: centerPanelSize.height ,
					top: centerPanelSize.top,
					left: pWidth
				})
				if (!oldPanelOpts.split && panelOpts.border) {
					centerPanelSize.left--;
				}
			} else {
				var splitEast = cc.find(">.coral-layout-split-east");
				splitEast.css({
					height: centerPanelSize.height,
					top: centerPanelSize.top,
					left: cc.width() - pWidth - splitE
				})
			}
			if (!oldPanelOpts.split && panelOpts.border) {
				centerPanelSize.width++;
			}
			if (!$.support.boxSizing) {
				centerPanelSize.width-2;
			}
		};
	},
	_splitLayout: function (region, isSplit) {
		var p = $(this.element).layout("panel", region);
		p.panel("options").split = isSplit;
		var cls = "layout-split-" + region;
		var pElement = p.panel("panel").removeClass(cls);
		if (isSplit) {
			pElement.addClass(cls);
		}
		pElement.resizable({
			disabled : (!isSplit)
		});
		this._resizeLayout();
	},
	_create : function () {
		//layout对象初始化五个方向的panel对象
		this.panels = {
			center : $(),
			north : $(),
			south : $(),
			east : $(),
			west : $()
		};
		var that = this;
		var el = this.element;
		var cc = $(el);
		cc.addClass("coral-layout");
		this.component().attr("component-id", this.options.id);
		//为layout中各个方向的div初始化panel
		function createLayoutPanels(cc) {
			cc.children("div").each(function() {
				var options = $.parser.parseOptions(this,[]);
				if ("north,south,east,west,center".indexOf(options.region) >= 0) {
					that._addPanel(el, options, this);
					var p = cc.layout("panel", options.region);
					if(p.panel("option").split){
						that._addSplitIcon(el,options,this);
					}
				}
			});
		};
		cc.children("form").length ? createLayoutPanels(cc.children("form")) : createLayoutPanels(cc);
		//layout中添加竖向和横向分割条div
		cc.append("<div class=\"coral-layout-split-proxy-h\"></div><div class=\"coral-layout-split-proxy-v\"></div>");
		//刷新layout中各个panel的尺寸大小
		this._resizeLayout();
		//初始化panel的折叠
		this._initCollapse();
		//箭头上绑定事件，实现伸缩的功能
		this._on({
			"click.splitIcon" : function(e) {
				var dir = $(e.target).attr("data-dir");
				if(that.panels[dir].is( ":visible" )){
					this._collapse(dir);
				} else {
					this._expand(dir);
				}
				return false;
			}
		});
	},
	_addSplitIcon: function (el,options,element) {
		var that = this,
		 	cc = $(el),
		 	dir = options.region,
		 	p = cc.layout("panel", dir),
		 	pp = $(element),
		 	par = $(element).parent(),
		 	panelObj = pp.panel("component"),
		 	elementCls = "coral-layout-split-" + dir,
		 	splitDiv = "<div id='layout-split-"+ dir +"Id' class='layout-split "+ elementCls +"'>",
			panelBtnDirSet = {
				north : "up5",
				south : "down5",
				east : "right5",
				west : "left5"
			};
		if (!panelBtnDirSet[dir]) {
			return;
		}
		if (!pp.length) {
			par = cc.find(">.coral-layout-panel-" + dir);
		}
		//showSplitIcon为true的时候加上箭头
		if(p.panel("option").showSplitIcon){
			var arrowCls = "splitIcon cui-icon-arrow-" + panelBtnDirSet[dir],
				icons = "<div class='"+ arrowCls +"' data-dir='"+dir+"'></div>";
			splitDiv += icons + "</div>";
		} else {
			splitDiv +="</div>";
		}
		var tt = $(splitDiv);
		par.after(tt);
	},
	_addPanel: function (el, options, ele) {
		var that = this;
		options.region = options.region || "center";
		var panels = this.panels;
		var cc = $(el);
		var dir = options.region;
		if (panels[dir].length) {
			return;
		}
		//panel元素对象
		var pp = $(ele);
		if (!pp.length) {
			pp = $("<div></div>").appendTo(cc);
		}
		var panelBtnDirSet = {
				north : "up3",
				south : "down3",
				east : "right3",
				west : "left3"
			};
		var arrowCls = "cui-icon-arrow-" + panelBtnDirSet[dir];
		var optionsData = ["title", "->"];
		var panelBtnDirSet = {
				north : "up3",
				south : "down3",
				east : "right3",
				west : "left3"
			};
		var arrowCls = "cui-icon-arrow-" + panelBtnDirSet[dir];
		if (panelBtnDirSet[dir]) {
			optionsData.push({
				icons: arrowCls,
				label: dir,
				text: false,
				onClick: function(e) {
					that._collapse(dir);
				}
			});
		}
		//创建panel的options属性
		var setting = $.extend( {}, this.layoutPanelDefault, {
			width: (pp.length ? 
				parseInt(pp[0].style.width) || pp.outerWidth() : "auto"),
			height: (pp.length ? 
				parseInt(pp[0].style.height) || pp.outerHeight() : "auto"),
			doSize: false,
			//collapsible: true,
			componentCls: ("coral-layout-panel coral-layout-panel-" + dir),
			bodyCls : "coral-layout-body",
			toolbarOptions: {
				data: optionsData
			},
			//初始化时展开的panel，onOpen回调中绑定_collapse方法
			onOpen : function() {
			}
		}, options);
		// fixed: region是center的时候，split设置为true会报错。
		if (setting.region === "center") {
			setting.split = false;
		}
		pp.panel(setting);
		panels[dir] = pp;
		//panel之间是否有分割条
		var panelObj = pp.panel("component");
		var panelHandlesDirSet = {
			north: "s",
			south: "n",
			east: "w",
			west: "e"
		};
		if (pp.panel("option").split) {
			//panelObj.addClass("coral-layout-split-" + dir);//面板之间有分割了，不需要在panel上加该
		
			// 分割条拖动事件：
			// 使用resizable组件使得panel组件可拖放大小
			// layout: true，告知resizable组件中_mouseDrag方法在拖动时不改变
			// panel的大小，_mouseStop时才改变panel的大小
			panelObj.resizable($.extend({
				handles: (panelHandlesDirSet[dir] || ""),
				disabled : (!pp.panel("option").split),
				start: function(e) {
					that.resizing = true;
					if (dir == "north" || dir == "south") {
						var lSplit = $( ">div.coral-layout-split-proxy-v", el );
					} else {
						var lSplit = $( ">div.coral-layout-split-proxy-h", el );
					}
					var top = 0,
						pos = {
							display : "block"
						};
					if (dir == "north") {
						pos.top = parseInt( panelObj.css("top") ) + 
							panelObj.outerHeight() - lSplit.height();
						pos.left = parseInt( panelObj.css("left"));
						pos.width = panelObj.outerWidth();
						pos.height = lSplit.height();
					} else {
						if (dir == "south") {
							pos.top = parseInt( panelObj.css("top"));
							pos.left = parseInt( panelObj.css("left"));
							pos.width = panelObj.outerWidth();
							pos.height = lSplit.height();
						} else {
							if (dir == "east") {
								pos.top = parseInt(panelObj.css("top")) || 0;
								pos.left = parseInt(panelObj.css("left")) || 0;
								pos.width = lSplit.width();
								pos.height = panelObj.outerHeight();
							} else {
								if (dir == "west") {
									pos.top = parseInt(panelObj.css("top")) || 0;
									pos.left = panelObj.outerWidth()- lSplit.width();
									pos.width = lSplit.width();
									pos.height = panelObj.outerHeight();
								}
							}
						}
					}
					lSplit.css(pos);
					$("<div class=\"coral-layout-mask\"></div>")
						.css({
							left: 0,
							top: 0,
							width: cc.width(),
							height: cc.height()
						}).appendTo(cc);
				},
				resize: function(e) {
					if (dir == "north" || dir == "south") {
						var lSplit = $(">div.coral-layout-split-proxy-v", el);
						lSplit.css( "top", e.pageY - $(el).offset().top - 
							lSplit.height() / 2);
					} else {
						var lSplit = $(">div.coral-layout-split-proxy-h", el);
						lSplit.css("left", e.pageX - $(el).offset().left - 
							lSplit.width() / 2);
					}
					return false;
				},
				helper: "coral-resizable-helper",
				stop: function(e,ui) {
					cc.children("div.coral-layout-split-proxy-v,div.coral-layout-split-proxy-h").hide();
					pp.panel("resize", ui.size);
					that._resizeLayout();
					that.resizing = false;
					cc.find(">div.coral-layout-mask").remove();
				}
			}, options));
		}
		
	},
	// 删除region对应的panel（折叠与非折叠状态的panel）
	_remove: function (region) {
		var panels = this.panels,el = this.element;
		var splitIcon = $(el).find(".coral-layout-split-"+ region),
			arrowIcon = splitIcon.find(".splitIcon");
		if (panels[region].length) {
			panels[region].panel("destroy");
			// destroy can't remove panel element
			$(panels[region]).remove();
			panels[region] = $();
			var expandRegion = "expand" + region.substring(0, 1).toUpperCase()
					+ region.substring(1);
			if (panels[expandRegion]) {
				panels[expandRegion].panel("destroy");
				// destroy can't remove panel element
				$(panels[region]).remove();
				panels[expandRegion] = undefined;
			}
			if (splitIcon.length) {
				$(splitIcon).remove();
				splitIcon = $();
			}
		}
	},
	//调整折叠后的splitIcon的位置和样式
	_collapseSplitIcon: function (region,styleC){
		var that = this,icoClass,
			el = this.element,
			p = this.panels[region],
			panelOpts = p.panel("getOptions"),
			collapsedSize = panelOpts.collapsedSize;
		var splitIcon = $(el).find(".coral-layout-split-"+ region),
			arrowIcon = splitIcon.find(".splitIcon");
			if(region == "east"){
				icoClass = "cui-icon-arrow-left5";
				arrowIcon.removeClass("cui-icon-arrow-right5").addClass(icoClass);
				splitIcon.css({
					left: styleC.expandP.left - splitIcon.width()
				})
			} else if(region == "west"){
				icoClass = "cui-icon-arrow-right5";
				arrowIcon.removeClass("cui-icon-arrow-left5").addClass(icoClass);
				splitIcon.css({
					left: styleC.expandP.width
				})
			} else if(region == "north"){
				icoClass = "cui-icon-arrow-down5";
				arrowIcon.removeClass("cui-icon-arrow-up5").addClass(icoClass);
				splitIcon.css({
					top: styleC.expandP.height
				});
				$(el).find(".coral-layout-split-west").css({
					top: styleC.expandP.height + splitIcon.height(),
					height: styleC.resizeC.height
				});
				$(el).find(".coral-layout-split-east").css({
					top: styleC.expandP.height + splitIcon.height(),
					height: styleC.resizeC.height
				})
			} else if(region == "south"){
				icoClass = "cui-icon-arrow-up5";
				arrowIcon.removeClass("cui-icon-arrow-down5").addClass(icoClass);
				var iconTop = styleC.expandP.top - splitIcon.height();
				splitIcon.css({
					top: iconTop
				})
				$(el).find(".coral-layout-split-west").css({
					height: styleC.resizeC.height
				});
				$(el).find(".coral-layout-split-east").css({
					height: styleC.resizeC.height
				})
			}
	},
	//折叠panel(折叠的panel与展开的panel是两个div)
	_collapse: function (region, speed) {
		var that = this,
			el = this.element;
		if (speed == undefined) {
			speed = "normal";
		}
		var panels = this.panels;
		var p = panels[region];
		var panelOpts = p.panel("getOptions");
		if (panelOpts.beforeCollapse.call(p) == false) {
			return;
		}
		
		var expandRegion = "expand" + region.substring(0, 1).toUpperCase()
				+ region.substring(1);
		if (!panels[expandRegion]) {
			panels[expandRegion] = _createCollapsedPanel(region);
			panels[expandRegion].panel("component").bind("click", function(e) {
				if ($(e.target).closest(".collapseIcon").length) return false;
				var styleC = _getStyleC();
				p.panel("expand", false).panel("open").panel("resize", styleC.collapse);
				p.panel("component").animate(styleC.expand, function() {
					$(this).unbind(".layout").bind("mouseleave.layout", {region: region}, function(e) {
						//当分割条在被拖动时，鼠标离开panel不触发折叠事件
						if (that.resizing == true) {
							return;
						}
						that._collapse(e.data.region);
					});
				});
				return false;
			});
		}
		var styleC = _getStyleC();
		if (!this._isPanelVisible(panels[expandRegion])) {
			panels.center.panel("resize", styleC.resizeC);
		}
		//折叠当前panel的动画效果
		p.panel("component").animate(styleC.collapse, speed, function() {
			p.panel("collapse", false).panel("close");
			panels[expandRegion].panel("open").panel("resize", styleC.expandP);
			$(this).unbind(".layout");
		});
		this._collapseSplitIcon(region,styleC);
		//创建折叠后的panel
		function _createCollapsedPanel(dir) {
			var iconClass = "";
			if (dir == "east") {
				iconClass += "cui-icon-arrow-left3";
			} else {
				if (dir == "west") {
					iconClass += "cui-icon-arrow-right3";
				} else {
					if (dir == "north") {
						iconClass += "cui-icon-arrow-down3";
					} else {
						if (dir == "south") {
							iconClass += "cui-icon-arrow-up3";
						}
					}
				}
			}
			var p = $("<div></div>").appendTo(el);
			var toolbarData = ["->", "->", {
				icons: iconClass,
				componentCls: "collapseIcon",
				label: region,
				text: false,
				onClick: function(e) {
					that._expand(region);
				}
			}];
			// 由于east和west的收缩图标需要放在左边，不需要添加分组符号
			if (dir == "east" || dir == "west") {
				toolbarData = [{
					icons: iconClass,
					componentCls: "collapseIcon",
					label: region,
					text: false,
					onClick: function(e) {
						that._expand(region);
					}
				}];
			}
			p.panel($.extend( {}, that.layoutPanelDefault,{
				componentCls : ("coral-layout-expand coral-layout-expand-" + dir),
				title: "&nbsp;",
				showTitle: false,
				closed: true,
				minWidth: 0,
				minHeight: 0,
				doSize: false,
				toolbarOptions: {
					isOverflow: false,
					data: toolbarData
				}
			}));
			p.panel("component").hover(function() {
				$(this).addClass("coral-layout-expand-over");
			}, function() {
				$(this).removeClass("coral-layout-expand-over");
			});
			return p;
		};
		//获得尺寸大小及位置
		function _getStyleC() {
			var cc = $(el);
			var centerOpt = panels.center.panel("getOptions");
			var collapsedSize = panelOpts.collapsedSize;
			if (region == "east") {
				var ww = centerOpt.width + panelOpts.width - collapsedSize;
				/*if (panelOpts.split || !panelOpts.border) {
					ww++;
				}*/
				var s = 0;
				if (!panelOpts.split) {
					s = 1;
				}
				return {
					resizeC: {
						width : ww
					},
					expand: {
						left : cc.width() - panelOpts.width
					},
					expandP: {
						top : centerOpt.top ,
						left : cc.width() - collapsedSize,
						width : collapsedSize,
						height : centerOpt.height
					},
					collapse : {
						left : cc.width(),
						top : centerOpt.top,
						height : centerOpt.height
					}
				};
			} else {
				if (region == "west") {
					var ww = centerOpt.width + panelOpts.width - collapsedSize;
					var splitWestIcon = cc.find(">.coral-layout-split-west");
					/*if (panelOpts.split || !panelOpts.border) {
						ww++;
					}*/
					var s = 0;
					if (!panelOpts.split) {
						s = 1;
					}
					return {
						resizeC : {
							width : ww,
							left : collapsedSize + splitWestIcon.width() - s
						},
						expand : {
							left : 0
						},
						expandP : {
							left : 0,
							top : centerOpt.top,
							width : collapsedSize,
							height : centerOpt.height
						},
						collapse : {
							left : -panelOpts.width,
							top : centerOpt.top,
							height : centerOpt.height
						}
					};
				} else {
					if (region == "north") {
						var hh = centerOpt.height;
						var splitNorthIcon = cc.find(">.coral-layout-split-north");
						if (!that._isPanelVisible(panels.expandNorth)) {
							hh += panelOpts.height - collapsedSize;
						}
						panels.east.add(panels.west).add(panels.expandEast).add(
								panels.expandWest).panel("resize", {
							top : collapsedSize + splitNorthIcon.height(),
							height : hh
						});
						return {
							resizeC : {
								top : collapsedSize + splitNorthIcon.height(),
								height : hh
							},
							expand : {
								top : 0
							},
							expandP : {
								top : 0,
								left : 0,
								width : cc.width(),
								height : collapsedSize
							},
							collapse : {
								top : -panelOpts.height,
								width : cc.width()
							}
						};
					} else {
						if (region == "south") {
							var hh = centerOpt.height;
							if (!that._isPanelVisible(panels.expandSouth)) {
								hh += panelOpts.height - collapsedSize;
							}
							panels.east.add(panels.west).add(panels.expandEast).add(
									panels.expandWest).panel("resize", {
								height : hh
							});
							return {
								resizeC : {
									height : hh
								},
								expand : {
									top : cc.height() - panelOpts.height
								},
								expandP : {
									top : cc.height() - collapsedSize,
									left : 0,
									width : cc.width(),
									height : collapsedSize
								},
								collapse : {
									top : cc.height(),
									width : cc.width()
								}
							};
						}
					}
				}
			}
		};
	},
	_expandSplitIcon: function(region) {
		var that = this,icoClass,
			el = this.element;
		var splitIcon = $(el).find(".coral-layout-split-"+ region),
			arrowIcon = splitIcon.find(".splitIcon");
		if(region == "east"){
			icoClass = "cui-icon-arrow-right5";
			arrowIcon.removeClass("cui-icon-arrow-left5").addClass(icoClass);
		} else if(region == "west"){
			icoClass = "cui-icon-arrow-left5";
			arrowIcon.removeClass("cui-icon-arrow-right5").addClass(icoClass);
		} else if(region == "north"){
			icoClass = "cui-icon-arrow-up5";
			arrowIcon.removeClass("cui-icon-arrow-down5").addClass(icoClass);
		} else if(region == "south"){
			icoClass = "cui-icon-arrow-down5";
			arrowIcon.removeClass("cui-icon-arrow-up5").addClass(icoClass);
		}
	},
	//展开panel
	_expand: function (region) {
		var that = this,
			el = this.element,
			panels = this.panels,
			p = panels[region],
			panelOpts = p.panel("getOptions");
		if (panelOpts.beforeExpand.call(p) == false) {
			return;
		}
		var styleE = getBeginEndPos();
		var expandRegion = "expand" + 
			region.substring(0, 1).toUpperCase() + 
			region.substring(1);
		if (panels[expandRegion]) {
			panels[expandRegion].panel("close");
			p.panel("component").stop(true, true);
			p.panel("expand", false).panel("open")
				.panel("resize", styleE.collapse);
			p.panel("component").animate(styleE.expand, function() {
				that._resizeLayout();
			});
			this._expandSplitIcon(region);
		}
		//获得尺寸大小及位置
		function getBeginEndPos() {
			var cc = $(el);
			var centerOpt = panels.center.panel("getOptions");
			if (region == "east" && panels.expandEast) {
				return {
					collapse : {
						left : cc.width(),
						top : centerOpt.top,
						height : centerOpt.height
					},
					expand : {
						left : cc.width() - panels["east"].panel("getOptions").width
					}
				};
			} else {
				if (region == "west" && panels.expandWest) {
					return {
						collapse : {
							left : -panels["west"].panel("getOptions").width,
							top : centerOpt.top,
							height : centerOpt.height
						},
						expand : {
							left : 0
						}
					};
				} else {
					if (region == "north" && panels.expandNorth) {
						return {
							collapse : {
								top : -panels["north"].panel("getOptions").height,
								width : cc.width()
							},
							expand : {
								top : 0
							}
						};
					} else {
						if (region == "south" && panels.expandSouth) {
							return {
								collapse: {
									top: cc.height(),
									width: cc.width()
								},
								expand: {
									top: cc.height()
											- panels["south"].panel("getOptions").height,
									height: panels["south"].panel("getOptions").height
								}
							};
						}
					}
				}
			}
		};
	},
	_isPanelVisible: function (pp) {
		if (!pp) {
			return false;
		}
		if (pp.length) {
			return pp.panel("component").is(":visible");
		} else {
			return false;
		}
	},
	//layout初始化时，折叠collapse=true的panel
	_initCollapse: function () {
		var panels = this.panels;
		if (panels.east.length && panels.east.panel("getOptions").collapsed) {
			this._collapse("east", 0);
		}
		if (panels.west.length && panels.west.panel("getOptions").collapsed) {
			this._collapse("west", 0);
		}
		if (panels.north.length && panels.north.panel("getOptions").collapsed) {
			this._collapse("north", 0);
		}
		if (panels.south.length && panels.south.panel("getOptions").collapsed) {
			this._collapse("south", 0);
		}
	},
	//layout大小自适应外层html元素
	_fit: function (fit) {
		return $.coral.panel.fit(this.element, fit);
	},
	// 销毁layout
	_destroy: function () {
		//this.panels.north.panel("destroy");
		//this.panels.south.panel("destroy");
		//this.panels.west.panel("destroy");
		//this.panels.east.panel("destroy");
		//this.panels.center.panel("destroy");
		this.element.children().remove();
		this.element.detach();
	},
	// 刷新layout
	refresh: function() {
		this._resizeLayout();
	},
	// 获得layout中对应方位region的panel
	panel: function(region) {
		return this.panels[region];
	},
	// 折叠layout中对应方位region的panel
	collapse: function(region) {
		this._collapse(region);
	},
	// 展开layout中对应方位region的panel
	expand: function(region) {
		this._expand(region);
	},
	// 添加layout中对应方位region的panel
	add: function(options) {
		this._addPanel(this.element, options);
		this._addSplitIcon(this.element, options);
		this._resizeLayout();
		if (this.panels[options.region]
				.panel("getOptions").collapsed) {
			this._collapse(options.region, 0);
		}
	},
	//删除layout中对应方位region的panel
	remove: function(region) {
		this._remove(region);
		this._resizeLayout();
	},
	split: function(region) {
		this._splitLayout(region, true);
	},
	unsplit: function(region) {
		this._splitLayout(region, false);
	},
	//改变layout中对应方位region的大小
	resize: function(pos, region){
		// TODO:
		var props = pos;
		var el = this.element;
		if(region !== undefined){
			var pp = this.panels[region];
			var oldHeight = pp.panel('component').outerHeight();
			var oldWidth = pp.panel('component').outerWidth();
			pp.panel('resize', pos);
			var newHeight = pp.panel('component').outerHeight();
			var newWidth = pp.panel('component').outerWidth();
			
			props.height = $(el).height() + newHeight - oldHeight;
			props.width = $(el).width() + newWidth - oldWidth;
		}
		$(el).css(props);
		this._resizeLayout();
	}
});
;

$.component("coral.basemenu", {
	castProperties : ["data"],
        options: {
        	 responsive : false,
          	 minmenu : false,
        	 onLoad : null,
        	 singleOpen : false,
        	 collapseButton : false,
        	 collapseIcon : "cui-icon-arrow-left3",
        	 expandIcon : "cui-icon-arrow-right3",
        	 simpleDataIdKey : "id",
        	 firstIsactive : false,
        	 isactiveField : "isactive",
        	 nameField : "name",
        	 simpleDataPIdKey : "pId",
        	 vertical : false,
             autoDisplay: true,   
             popup: false,
             trigger: null,
             my: 'left top',
             at: 'left bottom',
             simpleDataEnable : false,
             of: null, /* menu定位依据的元素 */
             triggerEvent: 'click',
             data : null,//外部传入数据用于初始化
             onClick : null,//菜单鼠标点击回调方法
             onCreate : null,//父类中实现
             url : null,//数据调用的url
             method : "post"//url调用方式
        },
        _create: function() {
            if(this.options.popup) {
                this._initPopup();
            }
        },
        //reload方法，可以接收json格式的url，也可以无参数
        reload : function (url,param) {
        	var isUrl = false,
        	    data = [],
        	    that = this,
        	    opts = {};
        	if ( !url && !that.options.url ){
    			url = [];
    		} else if (!url && that.options.url){
    			url = that.options.url;
    		}
        	if (typeof(url) !== "string") {

    	    	
    		// 传过来的是object，需要区别是data还是options
    		// 如果是options，可能是options.data或者options.url ，否则才为data
    		    opts = url;
    		    if (opts.data) { //传进来的是options对象
    			    data = opts.data;			    
    		    } else if (opts.url) {// 传进来的是data对象
    			    url = opts.url;
    			    that.options.url = opts.url;
    			    isUrl = true;
    		    } else if (opts instanceof Array) {
    			    data = url;
    		    } else if (!opts.url && !opts.data && !that.options.url) {
    		    	data = [];
    		    } else if (!opts.url && !opts.data && that.options.url) {
    		    	url = that.options.url ;
    		    	isUrl = true;
    		    }
    	    } else {
    	    	that.options.url = url;
    		    isUrl = true;
    	    }
        	if (isUrl){
        		var html="";
        		$.ajax({
        			type : this.options.method,
        			url : that.options.url,
        			async : false,
        			data : null,
        			dataType : "json",
        			success : function (data) {
        				var html = "";
        				html=that._generateHTML(html,data);
						if(html.length>7){
		        			html=html.substring(4);
		        			html=html.substring(0,html.length-5);
		        		}
						that.element.empty();
		        		that.element.html(html);
		        		that._trigger($.isFunction( opts.onLoad ) ? opts.onLoad:"onLoad", null, [data]);
        			}
        		})
    	     } else{
    	    	 var html = "";
 				 html=that._generateHTML(html,data);
				 if(html.length>7){
        			html=html.substring(4);
        			html=html.substring(0,html.length-5);
        		 }
				 that.element.empty();
        		 that.element.html(html);
        		 that._trigger($.isFunction( opts.onLoad ) ? opts.onLoad:"onLoad", null, [data]);
    	     }
        	that._render();
        },
        //如果目标ul下没有元素，而data下有数据，则将data数据添加到目标UL下
        //如果目标ul下没有元素，而url下有数据，则将url数据添加到目标UL下
        _generateULContent : function(){
        	var $this=this;
        	if(this.element.children().length==0 && this.options.data!=null){
        		var html="";
        		var data = this.options.data;
        		html=this._generateHTML(html,data);
        		if(html.length>7){
        			html=html.substring(4);
        			html=html.substring(0,html.length-5);
        		}
        		this.element.html(html);
        	}else if(this.element.children().length==0 && this.options.url!=null){
        		var html="";
	        	$.ajax({
					type: this.options.method,
					url:  $this.options.url,
					async : false,
					data: null,
					dataType: 'json',
					success: function(data){
						var html="";
						html=$this._generateHTML(html,data);
						if(html.length>7){
		        			html=html.substring(4);
		        			html=html.substring(0,html.length-5);
		        		}
		        		$this.element.html(html);
					},
					error: function(){
					}
				});
        	}
        },
        // 由简单数据格式data生成一般数据格式data
        _transformToSimpleData : function (opts,sData){
        	if (!sData) return[];
        	var i,k,r=[],tmp=[],
        	    simpleDataIdKey = this.options.simpleDataIdKey,
        	    simpleDataPIdKey = this.options.simpleDataPIdKey;
			for (i=0, k=sData.length; i<k; i++) {
				tmp[sData[i][simpleDataIdKey]] = sData[i];
			}
			for (i=0, k=sData.length; i<k; i++) {
				if (tmp[sData[i][simpleDataPIdKey]] && sData[i][simpleDataIdKey] != sData[i][simpleDataPIdKey]) {
					if (!tmp[sData[i][simpleDataPIdKey]]["items"])
						tmp[sData[i][simpleDataPIdKey]]["items"] = [];
					tmp[sData[i][simpleDataPIdKey]]["items"].push(sData[i]);
				} else {
					r.push(sData[i]);
				}
			}
			return r;
        },
        // 由一般数据格式data生成简单数据格式data
        _transformToGeneralData : function(opts,sData){
        	
        },
        //根据data生成HTML
        _generateHTML : function(html,data){
        	var orData=[],opts=this.options;
        	var simpleDataIdKey = opts.simpleDataIdKey;
    		if (this.options.simpleDataEnable) {
    			orData = this._transformToSimpleData(opts,data)
    		} else {
    			orData = data;
    		}
    		data = orData;
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
	        	// modified by @lhb @20150317
	        	html+="<li"
	        	if (data[i][simpleDataIdKey] != "") {
	        		html+=" data-id=\""+data[i][simpleDataIdKey]+"\" id=\"menubar-"+data[i][simpleDataIdKey]+"\"";
	        	}
	        	if (data[i].path){
	        		html+=" data-path=\""+data[i].path+"\"";
	        	}
	        	html+=">";
				html+=this._generateANode(data[i]);
				var items=data[i].items;
				if(typeof items !== "undefined" && items instanceof Array && items.length>0 ){
					html=this._generateHTML(html,items);
				}
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //生成A元素
        _generateANode : function(node){
        	var str="<a",
        	    simpleDataIdKey = this.options.simpleDataIdKey,
        	    isactiveField = this.options.isactiveField,
        	    nameField = this.options.nameField;
			if(node.iconclass!=""){
				str+=" data-icon='"+node.iconclass+"'";
			}
			if(node[nameField]!=""){
				str+=" data-name='"+node[nameField]+"'";
			}
			if(node.disabled){
				str+=" data-disabled='"+node.disabled+"'";
			}
			if(node.url){
				/*if (node.response == "click") {
					str+="";
				} else {
					str+=" href='"+node.url+"'";
				}*/
				str+=" data-url='"+node.url+"'";
			}
			if(node.target){
				str+=" data-target='"+node.target+"'";
			}
			if(node[isactiveField]){
				str+=" data-isactive='"+node[isactiveField]+"'";
			}
			str+=">";
			if(node[nameField]!=""){
				str+=node[nameField];
			}
			str+="</a>";
			return str;
        },
        _initPopup: function() {
            var $this = this;
			//处理trigger类型转换
            this.options.trigger=typeof this.options.trigger==="string" ? $('#'+this.options.trigger):this.options.trigger;
            this.element.closest('.coral-menu').addClass('coral-menu-dynamic coral-shadow').appendTo(document.body);
            // 如果of属性定义，则定位于of，否则定位依据trigger
            this.positionConfig = {
                my: this.options.my,
                at: this.options.at,
                of: this.options.of ? this.options.of : this.options.trigger
            };

            this.options.trigger.on(this.options.triggerEvent + '.coral-menu', function(e) {
            	//禁用对trigger的事件触发
            	if($this.options.disabled===true)return ;
                var trigger = $(this);
                if($this.element.is(':visible')) {
                    $this.hide();
                }
                else {
                    $this.show();
                }
                
                e.preventDefault();
            });

            //hide overlay on document click
            $(document.body).on('click.coral-menu', function (e) {
                var popup = $this.element.closest('.coral-menu');
                if(popup.is(":hidden")) {
                    return;
                }

                //do nothing if mousedown is on trigger
                var target = $(e.target);
                if(target.is($this.options.trigger.get(0))||$this.options.trigger.has(target).length > 0) {
                    return;
                }

                //hide if mouse is outside of overlay except trigger
                var offset = popup.offset();
                if(e.pageX < offset.left ||
                    e.pageX > offset.left + popup.width() ||
                    e.pageY < offset.top ||
                    e.pageY > offset.top + popup.height()) {

                    $this.hide(e);
                }
            });

            //Hide overlay on resize
            $(window).on('resize.coral-menu', function() {
                if($this.element.closest('.coral-menu').is(':visible')) {
                    $this.align();
                }
            });
        },
                
        show: function() {
            this.align();
            this.element.closest('.coral-menu').css('z-index', ++$.coral.zindex).show();
        },

        hide: function() {
            this.element.closest('.coral-menu').fadeOut('fast');
        },

        align: function() {
            this.element.closest('.coral-menu').css({left:'', top:''}).position({
            	my: this.options.my,
                at: this.options.at,
                of: this.options.of ? this.options.of : this.options.trigger
            });
        },
        //方法调用
        _apply : function(callback,obj,datas){
        	if(typeof callback ==="string"){        		
				return window[callback].apply(obj, [datas]);
			}else if($.isFunction( callback )){
				return callback.apply(obj, [datas]);
			}
        },
        //设置每个菜单是否为禁用
        _setMenuItemLinkDisabled : function(menuitemLink){
        	if(menuitemLink.data('disabled')===true){
				menuitemLink.toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
            }else{
             	menuitemLink.toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
            }
        },
        
        _setMenuItemIsOpen : function(listItem,menuItemLink) {
        	var isOpen = $(menuItemLink).data("isopen"),
        	    singleOpen = this.options.singleOpen,
        	    elseOpen = this.element.find(".coral-menuitem-open").length;
        	if ((!singleOpen || !elseOpen) && isOpen) {
        		listItem.addClass("coral-menuitem-open");
        		listItem.children("ul").css({"display":"block"})
        	}
        },
        
        setMenuItemIsactive : function(menuItemLink){
        	if (typeof menuItemLink == "string") {
        		menuItemLink = this.element.find("#menubar-"+menuItemLink).children();
        		$(menuItemLink).parents("li").addClass("coral-menuitem-active");
        		$(menuItemLink).parent().parents("li").addClass("coral-menuitem-open ");
        		$(menuItemLink).parents("ul.coral-menu-child").css({"display":"block"});
        	} else {
        		var isactive = $(menuItemLink).data("isactive");
        		if (isactive) {
        			$(menuItemLink).parents("li").addClass("coral-menuitem-active");
        			$(menuItemLink).parent().parents("li").addClass("coral-menuitem-open ");
        			$(menuItemLink).parents("ul.coral-menu-child").css({"display":"block"});
        		}
        	}
        },
        //绑定菜单点击事件
        _bindMenuItemClick : function($this){
        	var click=$this.options.onClick;
            //if(click!=null){
            	$this.links.on('click',function(){
            		if($this.options.disabled===true)return ;
            		var datas={};
            		
            		if($(this).parent("li").attr("data-id")!=null){
            			datas.id=$(this).parent("li").attr("data-id");
            		}
            		if($(this).attr("data-target")!=null){
            			datas.target=$(this).attr("data-target");
            		}
            		if($(this).attr("data-name")!=null){
            			datas.name=$(this).attr("data-name");
            		}
            		/*if($(this).attr("href")!=null){
            			datas.href=$(this).attr("href");
            		}*/
            		if($(this).attr("data-url")!=null){
            			datas.url=$(this).attr("data-url");
            		}
            		if($(this).find(":checkbox,:radio").length>0){
            			datas.hasChk=true;
            			datas.checked=$(this).find(":checkbox,:radio").prop('checked');
            		}else{
            			datas.hasChk=false;
            		}
            		var event={
						target: $this,
						currentTarget: $this,
						preventDefault: $.noop
					}
					$this._trigger( "onClick", event, datas );
	            	//$this._apply(click,this,datas);
	            });
            //}
        },
        setActiveMenu : function(menuNames){
        	var $this = this;
        	if(menuNames==null || menuNames.length==0)return ;
        	
        	$.each(menuNames,function(){
        		var aEle=$this.element.find("[data-name='"+this+"']");
        		aEle.parent().addClass("coral-menuitem-current");
        	});
        },
        setCurrenMenu : function(menuNames){
        	if(menuNames==null || menuNames.length==0)return ;
        	this.element.find(">li>a").each(function() {
				var elem = $( this ),
					dn = elem.attr( "data-name" );

				if ( dn !== menuNames) {
					return;
				}
				elem.parent().addClass("coral-menuitem-current");
				$(this).parent().siblings().removeClass("coral-menuitem-current");
			});
        }
    });



$.component("coral.navigationmenu", $.coral.basemenu,{

	castProperties : ["title"],
	options: {
    	collapsible: true,
    	active: 0,
    	textAlign: "left",
    	role: "navigationmenu",
    	menus: "ul",
    	title: null,
    	icons: {
    		activeHeader: "cui-icon-arrow-down",
			header: "cui-icon-arrow-right2"
    	},
    	header: "> li > :first-child,> :not(li):even"
    },
    _activate: function( index ) {
		var active = this._findActive( index )[ 0 ];

		if ( active === this.active[ 0 ] ) {
			return;
		}

		active = active || this.active[ 0 ];

		this._eventHandler({
			target: active,
			currentTarget: active,
			preventDefault: $.noop
		});
	},

	_findActive: function( selector ) {
		return typeof selector === "number" ? this.headers.eq( selector ) : $();
	},
	
	_setOption: function( key, value ){
		if ( key === "active" ) {
			this._activate( value );
			return;
		}
		this._super(key, value );
	},
	
    _create: function() {
    	var that = this;
        this._generateULContent();
    	
        this._render();
        
	    
        this.links = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');
        this._on({
			// Prevent focus from sticking to links inside menu after clicking
			// them (focus should always stay on UL during navigation).
			"mousedown .coral-navigationmenu-header": function( event ) {
				event.preventDefault();
			},
			// 第一级的处理
			"click .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" ),
					parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					parent.siblings().find(">ul").attr( "aria-expanded", false ).slideUp();
						parent.find(">.icon").removeClass( that.options.icons.activeHeader )
						.addClass( that.options.icons.header );
					// Only set the mouseHandled flag if the event will bubble, see #9469.
					if ( !event.isPropagationStopped() ) {
						this.mouseHandled = true;
					}
					var targetUl = parent.find(">ul");
					// Open submenu on click
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						this.oldActive = this.active || $();
						this.active = target;
						this.oldActive.removeClass( "coral-state-highlight" );
						ui = { item: this.active, target: this.active.attr("href") };
						this.active.addClass( "coral-state-highlight" )
						this._trigger( "onSelect", event, ui );
					} else {
						if ( targetUl.attr( "aria-expanded" ) == "true" ){
							targetUl.attr( "aria-expanded", false ).slideUp();
						} else {
							targetUl.attr( "aria-expanded", true ).slideDown();
							parent.find(">.icon").removeClass( that.options.icons.header )
								.addClass( that.options.icons.activeHeader );
						}
					}
				}
			},
			"mouseenter .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" );
				var parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						target.addClass("coral-state-hover")
					}
					this._updateTitle();
				}
			},
			"mouseleave .coral-menuitem-link": function( event ) {
				event.preventDefault();
				var target = $( event.target ).closest( ".coral-menuitem-link" );
				var parent = $( event.target ).closest( ".coral-menu-parent" );
				if ( parent.not( ".coral-state-disabled" ).length ) {
					
					if ( !target.parent().hasClass( "coral-menu-parent") ){
						target.removeClass( "coral-state-hover" )
					}
				}
			}
        });
        
        this._super();
    },
    _updateTitle: function(){
    	this.element.find("li>a").each(function() {
			var elem = $( this ),
				dn = elem.find(".coral-menuitem-text").text();
			var widthDiv = $("<span style = 'visibility: hidden'>"+ dn +"</span>").appendTo("body");
			if(elem.width() < widthDiv.width()){
	    		elem.attr( "title", dn);
	    	}
			widthDiv.remove();
		});
    },
    _processPanels: function() {
    	 this.headers = this.element.find( this.options.header )
 		.addClass( "coral-navigationmenu-header coral-state-default" );
	},
    _render: function() {
    	var $this=this;
        this.element.addClass('coral-helper-reset coral-navigationmenu coral-menu').attr("role","navigationmenu");
        
        this.element.uniqueId();
        this.options.id = this.element.attr('id');

        this._processPanels();
        submenus = this.element.find( this.options.menus );
        submenus.filter( ":not(.coral-menu)" )
			.addClass( "coral-menu-list coral-helper-reset" )
			/*.hide()*/
			.attr({
				role: this.options.role,
				"aria-hidden": "true",
				"aria-expanded": "false"
			})
			.each(function() {
				var menu = $( this ),
					item = menu.parent();
	
				item.attr( "aria-haspopup", "true" );
				menu.attr( "aria-labelledby", item.attr( "id" ) );
			});

		menus = submenus.add( this.element );
		items = menus.find( this.options.items );
	
		// Initialize menu-items containing spaces and/or dashes only as dividers
		items.not( ".coral-menu-item" ).each(function() {
			var item = $( this );
			if ( that._isDivider( item ) ) {
				item.addClass( "coral-component-content coral-menu-divider" );
			}
		});
		
        this.element.find('li').each(function() {
	        var listItem = $(this),
		        menuitemLink = listItem.children('a'),
		        icon = menuitemLink.data('icon'),
		        level = typeof(listItem.parent().parent("li").attr("data-level"))=="undefined"?
		        		0:parseInt(listItem.parent().parent("li").attr("data-level"))+1;
	        menuitemLink.addClass('coral-menuitem-link coral-state-default coral-corner-all');
	        menuitemLink.contents().filter(function(i, item){
	        	if (item.tagName) return false;
	        	return true;
	        }).wrap("<span class='coral-menuitem-text'/>");
	        // coral-navigationmenu-item-inner控制item不换行，出现ellipsis
	        menuitemLink.html('<div class="coral-navigationmenu-item-inner">'+menuitemLink.html()+'</div>');
	        listItem.addClass('coral-menuitem coral-component coral-corner-all')
	        	.attr("data-level", level).addClass("level"+level);
	        /*if(icon) {
	        	menuitemLink.prepend('<span class="menu-icon ' + icon + '"></span>');
	        }*/
	        if(listItem.children('ul').length > 0) {
	        	//submenus = this.element.find( this.options.menus );
	        	var submenus = listItem.children('ul');
	            listItem.addClass('coral-menu-parent');
	            submenus.addClass('coral-menu-list coral-helper-reset');
	            menuitemLink.prepend('<span class="coral-navigationmenu-item-arrow cui-icon-arrow-down3"></span>');
	        } else if($this.options.textAlign == 'right'){
	           // menuitemLink.find(".coral-navigationmenu-item-inner").prepend('<span style="visibility:hidden;" class="coral-navigationmenu-item-arrow cui-icon-arrow-down3"></span>');
	        }
	        
	        if($this.options.textAlign == 'right'){
	            $("<span class='coral-empty' style='width:"+level*16+"px;height:"+16+"px;'></span>").prependTo(menuitemLink.find(".coral-navigationmenu-item-inner"));
	        }

        });
        
        var selector = ".coral-navigationmenu li > a[data-target=\'" + this.options.active + "\']," +
        " .coral-navigationmenu li > a[href=\'" + this.options.active + "\']";

        var active = $( selector );
        active.parents('ul').show();
        if( !active.parent().hasClass("coral-menu-parent")){
        	active.addClass("coral-state-highlight");
        	this.oldActive = active;
			this.active = active;
        }
    }
});
/**
 * CoralUI Menu component
 */
$.component( "coral.menu", {
		version: "4.0.2",
		defaultElement: "<ul>",
		delay: 300,
		options: {
			icons: {
				submenu: "coral-icon-carat-1-e"
			},
			items: "> *",
			menus: "ul",
			position: {
				my: "left-1 top",
				at: "right top"
			},
			role: "menu",

			// callbacks
			onBlur: null,
			onFocus: null,
			onSelect: null
		},

		_create: function() {
			this.activeMenu = this.element;

			// Flag used to prevent firing of the click handler
			// as the event bubbles up through nested menus
			this.mouseHandled = false;
			this.element
				.uniqueId()
				.addClass( "coral-menu coral-component coral-component-content" )
				.toggleClass( "coral-menu-icons", !!this.element.find( ".coral-icon" ).length )
				.attr({
					role: this.options.role,
					tabIndex: 0
				});

			if ( this.options.disabled ) {
				this.element
					.addClass( "coral-state-disabled" )
					.attr( "aria-disabled", "true" );
			}

			this._on({
				// Prevent focus from sticking to links inside menu after clicking
				// them (focus should always stay on UL during navigation).
				"mousedown .coral-menu-item": function( event ) {
					event.preventDefault();
				},
				"click .coral-menu-item": function( event ) {
					var target = $( event.target );
					if ( !this.mouseHandled && target.not( ".coral-state-disabled" ).length ) {
						this.select( event );

						// Only set the mouseHandled flag if the event will bubble, see #9469.
						if ( !event.isPropagationStopped() ) {
							this.mouseHandled = true;
						}

						// Open submenu on click
						if ( target.has( ".coral-menu" ).length ) {
							this.expand( event );
						} else if ( !this.element.is( ":focus" ) && $( this.document[ 0 ].activeElement ).closest( ".coral-menu" ).length ) {

							// Redirect focus to the menu
							this.element.trigger( "focus", [ true ] );

							// If the active item is on the top level, let it stay active.
							// Otherwise, blur the active item since it is no longer visible.
							if ( this.active && this.active.parents( ".coral-menu" ).length === 1 ) {
								clearTimeout( this.timer );
							}
						}
					}
				},
				"mouseenter .coral-menu-item": function( event ) {
					// Ignore mouse events while typeahead is active, see #10458.
					// Prevents focusing the wrong item when typeahead causes a scroll while the mouse
					// is over an item in the menu
					if ( this.previousFilter ) {
						return;
					}
					var target = $( event.currentTarget );
					// Remove coral-state-active class from siblings of the newly focused menu item
					// to avoid a jump caused by adjacent elements both having a class with a border
					target.siblings( ".coral-state-active" ).removeClass( "coral-state-active" );
					this.focus( event, target );
				},
				mouseleave: "collapseAll",
				"mouseleave .coral-menu": "collapseAll",
				focus: function( event, keepActiveItem ) {
					// If there's already an active item, keep it active
					// If not, activate the first item
					var item = this.active || this.element.find( this.options.items ).eq( 0 );

					if ( !keepActiveItem ) {
						this.focus( event, item );
					}
				},
				blur: function( event ) {
					this._delay(function() {
						if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
							this.collapseAll( event );
						}
					});
				},
				keydown: "_keydown"
			});

			this.refresh();

			// Clicks outside of a menu collapse any open menus
			this._on( this.document, {
				click: function( event ) {
					if ( this._closeOnDocumentClick( event ) ) {
						this.collapseAll( event );
					}

					// Reset the mouseHandled flag
					this.mouseHandled = false;
				}
			});
		},

		_destroy: function() {
			// Destroy (sub)menus
			this.element
				.removeAttr( "aria-activedescendant" )
				.find( ".coral-menu" ).addBack()
					.removeClass( "coral-menu coral-component coral-component-content coral-menu-icons coral-front" )
					.removeAttr( "role" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-disabled" )
					.removeUniqueId()
					.show();

			// Destroy menu items
			this.element.find( ".coral-menu-item" )
				.removeClass( "coral-menu-item" )
				.removeAttr( "role" )
				.removeAttr( "aria-disabled" )
				.removeUniqueId()
				.removeClass( "coral-state-hover" )
				.removeAttr( "tabIndex" )
				.removeAttr( "role" )
				.removeAttr( "aria-haspopup" )
				.children().each( function() {
					var elem = $( this );
					if ( elem.data( "coral-menu-submenu-carat" ) ) {
						elem.remove();
					}
				});

			// Destroy menu dividers
			this.element.find( ".coral-menu-divider" ).removeClass( "coral-menu-divider coral-component-content" );
		},

		_keydown: function( event ) {
			var match, prev, character, skip,
				preventDefault = true;

			switch ( event.keyCode ) {
			case $.coral.keyCode.PAGE_UP:
				this.previousPage( event );
				break;
			case $.coral.keyCode.PAGE_DOWN:
				this.nextPage( event );
				break;
			case $.coral.keyCode.HOME:
				this._move( "first", "first", event );
				break;
			case $.coral.keyCode.END:
				this._move( "last", "last", event );
				break;
			case $.coral.keyCode.UP:
				this.previous( event );
				break;
			case $.coral.keyCode.DOWN:
				this.next( event );
				break;
			case $.coral.keyCode.LEFT:
				this.collapse( event );
				break;
			case $.coral.keyCode.RIGHT:
				if ( this.active && !this.active.is( ".coral-state-disabled" ) ) {
					this.expand( event );
				}
				break;
			case $.coral.keyCode.ENTER:
			case $.coral.keyCode.SPACE:
				this._activate( event );
				break;
			case $.coral.keyCode.ESCAPE:
				this.collapse( event );
				break;
			default:
				preventDefault = false;
				prev = this.previousFilter || "";
				character = String.fromCharCode( event.keyCode );
				skip = false;

				clearTimeout( this.filterTimer );

				if ( character === prev ) {
					skip = true;
				} else {
					character = prev + character;
				}

				match = this._filterMenuItems( character );
				match = skip && match.index( this.active.next() ) !== -1 ?
					this.active.nextAll( ".coral-menu-item" ) :
					match;

				// If no matches on the current filter, reset to the last character pressed
				// to move down the menu to the first item that starts with that character
				if ( !match.length ) {
					character = String.fromCharCode( event.keyCode );
					match = this._filterMenuItems( character );
				}

				if ( match.length ) {
					this.focus( event, match );
					this.previousFilter = character;
					this.filterTimer = this._delay(function() {
						delete this.previousFilter;
					}, 1000 );
				} else {
					delete this.previousFilter;
				}
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		},

		_activate: function( event ) {
			if ( !this.active.is( ".coral-state-disabled" ) ) {
				if ( this.active.is( "[aria-haspopup='true']" ) ) {
					this.expand( event );
				} else {
					this.select( event );
				}
			}
		},

		refresh: function() {
			var menus, items,
				that = this,
				icon = this.options.icons.submenu,
				submenus = this.element.find( this.options.menus );

			this.element.toggleClass( "coral-menu-icons", !!this.element.find( ".coral-icon" ).length );

			// Initialize nested menus
			submenus.filter( ":not(.coral-menu)" )
				.addClass( "coral-menu coral-component coral-component-content coral-front" )
				.hide()
				.attr({
					role: this.options.role,
					"aria-hidden": "true",
					"aria-expanded": "false"
				})
				.each(function() {
					var menu = $( this ),
						item = menu.parent(),
						submenuCarat = $( "<span>" )
							.addClass( "coral-menu-icon coral-icon " + icon )
							.data( "coral-menu-submenu-carat", true );

					item
						.attr( "aria-haspopup", "true" )
						.prepend( submenuCarat );
					menu.attr( "aria-labelledby", item.attr( "id" ) );
				});

			menus = submenus.add( this.element );
			items = menus.find( this.options.items );

			// Initialize menu-items containing spaces and/or dashes only as dividers
			items.not( ".coral-menu-item" ).each(function() {
				var item = $( this );
				if ( that._isDivider( item ) ) {
					item.addClass( "coral-component-content coral-menu-divider" );
				}
			});

			// Don't refresh list items that are already adapted
			items.not( ".coral-menu-item, .coral-menu-divider" )
				.addClass( "coral-menu-item" )
				.uniqueId()
				.attr({
					tabIndex: -1,
					role: this._itemRole()
				});

			// Add aria-disabled attribute to any disabled menu item
			items.filter( ".coral-state-disabled" ).attr( "aria-disabled", "true" );

			// If the active item has been removed, blur the menu
			if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				this.blur();
			}
		},

		_itemRole: function() {
			return {
				menu: "menuitem",
				listbox: "option"
			}[ this.options.role ];
		},

		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.element.find( ".coral-menu-icon" )
					.removeClass( this.options.icons.submenu )
					.addClass( value.submenu );
			}
			if ( key === "disabled" ) {
				this.element
					.toggleClass( "coral-state-disabled", !!value )
					.attr( "aria-disabled", value );
			}
			this._super( key, value );
		},

		focus: function( event, item ) {
			var nested, focused;
			this.blur( event, event && event.type === "focus" );

			this._scrollIntoView( item );

			this.active = item.first();
			focused = this.active.addClass( "coral-state-focus" ).removeClass( "coral-state-active" );
			// Only update aria-activedescendant if there's a role
			// otherwise we assume focus is managed elsewhere
			if ( this.options.role ) {
				this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
			}

			// Highlight active parent menu item, if any
			this.active
				.parent()
				.closest( ".coral-menu-item" )
				.addClass( "coral-state-active" );

			if ( event && event.type === "keydown" ) {
				this._close();
			} else {
				this.timer = this._delay(function() {
					this._close();
				}, this.delay );
			}

			nested = item.children( ".coral-menu" );
			if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {
				this._startOpening(nested);
			}
			this.activeMenu = item.parent();

			this._trigger( "onFocus", event, { item: item } );
		},

		_scrollIntoView: function( item ) {
			var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
			if ( this._hasScroll() ) {
				borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
				paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
				offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
				scroll = this.activeMenu.scrollTop();
				elementHeight = this.activeMenu.height();
				itemHeight = item.outerHeight();

				if ( offset < 0 ) {
					this.activeMenu.scrollTop( scroll + offset );
				} else if ( offset + itemHeight > elementHeight ) {
					this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
				}
			}
		},

		blur: function( event, fromFocus ) {
			if ( !fromFocus ) {
				clearTimeout( this.timer );
			}

			if ( !this.active ) {
				return;
			}

			this.active.removeClass( "coral-state-focus" );
			this.active = null;

			this._trigger( "onBlur", event, { item: this.active } );
		},

		_startOpening: function( submenu ) {
			clearTimeout( this.timer );

			// Don't open if already open fixes a Firefox bug that caused a .5 pixel
			// shift in the submenu position when mousing over the carat icon
			if ( submenu.attr( "aria-hidden" ) !== "true" ) {
				return;
			}

			this.timer = this._delay(function() {
				this._close();
				this._open( submenu );
			}, this.delay );
		},

		_open: function( submenu ) {
			var position = $.extend({
				of: this.active
			}, this.options.position );

			clearTimeout( this.timer );
			this.element.find( ".coral-menu" ).not( submenu.parents( ".coral-menu" ) )
				.hide()
				.attr( "aria-hidden", "true" );

			submenu
				.show()
				.removeAttr( "aria-hidden" )
				.attr( "aria-expanded", "true" )
				.position( position );
		},

		collapseAll: function( event, all ) {
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				// If we were passed an event, look for the submenu that contains the event
				var currentMenu = all ? this.element :
					$( event && event.target ).closest( this.element.find( ".coral-menu" ) );

				// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
				if ( !currentMenu.length ) {
					currentMenu = this.element;
				}

				this._close( currentMenu );

				this.blur( event );
				this.activeMenu = currentMenu;
			}, this.delay );
		},

		// With no arguments, closes the currently active menu - if nothing is active
		// it closes all menus.  If passed an argument, it will search for menus BELOW
		_close: function( startMenu ) {
			if ( !startMenu ) {
				startMenu = this.active ? this.active.parent() : this.element;
			}

			startMenu
				.find( ".coral-menu" )
					.hide()
					.attr( "aria-hidden", "true" )
					.attr( "aria-expanded", "false" )
				.end()
				.find( ".coral-state-active" ).not( ".coral-state-focus" )
					.removeClass( "coral-state-active" );
		},

		_closeOnDocumentClick: function( event ) {
			return !$( event.target ).closest( ".coral-menu" ).length;
		},

		_isDivider: function( item ) {

			// Match hyphen, em dash, en dash
			return !/[^\-\u2014\u2013\s]/.test( item.text() );
		},

		collapse: function( event ) {
			var newItem = this.active &&
				this.active.parent().closest( ".coral-menu-item", this.element );
			if ( newItem && newItem.length ) {
				this._close();
				this.focus( event, newItem );
			}
		},

		expand: function( event ) {
			var newItem = this.active &&
				this.active
					.children( ".coral-menu " )
					.find( this.options.items )
					.first();

			if ( newItem && newItem.length ) {
				this._open( newItem.parent() );

				// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
				this._delay(function() {
					this.focus( event, newItem );
				});
			}
		},

		next: function( event ) {
			this._move( "next", "first", event );
		},

		previous: function( event ) {
			this._move( "prev", "last", event );
		},

		isFirstItem: function() {
			return this.active && !this.active.prevAll( ".coral-menu-item" ).length;
		},

		isLastItem: function() {
			return this.active && !this.active.nextAll( ".coral-menu-item" ).length;
		},

		_move: function( direction, filter, event ) {
			var next;
			if ( this.active ) {
				if ( direction === "first" || direction === "last" ) {
					next = this.active
						[ direction === "first" ? "prevAll" : "nextAll" ]( ".coral-menu-item" )
						.eq( -1 );
				} else {
					next = this.active
						[ direction + "All" ]( ".coral-menu-item" )
						.eq( 0 );
				}
			}
			if ( !next || !next.length || !this.active ) {
				next = this.activeMenu.find( this.options.items )[ filter ]();
			}

			this.focus( event, next );
		},

		nextPage: function( event ) {
			var item, base, height;

			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isLastItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.nextAll( ".coral-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base - height < 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items )
					[ !this.active ? "first" : "last" ]() );
			}
		},

		previousPage: function( event ) {
			var item, base, height;
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isFirstItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.prevAll( ".coral-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base + height > 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.find( this.options.items ).first() );
			}
		},

		_hasScroll: function() {
			return this.element.outerHeight() < this.element.prop( "scrollHeight" );
		},

		select: function( event ) {
			// TODO: It should never be possible to not have an active item at this
			// point, but the tests don't trigger mouseenter before click.
			this.active = this.active || $( event.target ).closest( ".coral-menu-item" );
			var ui = { item: this.active };
			if ( !this.active.has( ".coral-menu" ).length ) {
				this.collapseAll( event, true );
			}
			this._trigger( "onSelect", event, ui );
		},

		_filterMenuItems: function(character) {
			var escapedCharacter = character.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" ),
				regex = new RegExp( "^" + escapedCharacter, "i" );

			return this.activeMenu
				.find( this.options.items )

				// Only match on items, not dividers or other content (#10571)
				.filter( ".coral-menu-item" )
				.filter(function() {
					return regex.test( $.trim( $( this ).text() ) );
				});
		}
	});


/**
 * CoralUI BreadCrumb component
 */


    $.component("coral.breadcrumb", {
        
        _create: function() {
            this.element.wrap('<div class="coral-breadcrumb coral-module coral-component coral-component-header coral-helper-clearfix coral-corner-all" role="menu">');
            
            this.element.children('li').each(function(index) {
                var listItem = $(this);
                
                listItem.attr('role', 'menuitem');
                var menuitemLink = listItem.children('a');
                menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                if(index > 0)
                    listItem.before('<li class="coral-breadcrumb-chevron menu-rightArrow cui-icon-arrowDown1"></li>');
                else
                    menuitemLink.addClass('coral-icon coral-icon-home');
            });
        }
    });




/*
 * CoralUI TieredMenu component
 */


    $.component("coral.tieredmenu", $.coral.basemenu, {
        
        options: {
            autoDisplay: true
        },
        
        _create: function() {
        	       	
        	this._generateULContent();
        	this.element.wrap('<div class="coral-tieredmenu coral-menu coral-component coral-component-content coral-corner-all coral-helper-clearfix" />');
        	
            this._render();
            
            this.links = this.element.find('.coral-menuitem-link');
            
            this.lis = this.element.find(".coral-menuitem");
            
            this.menuitems = this.element.children("li.coral-menuitem");

            this._bindEvents();
            
            this._super();
        },
         
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset');
            
          /*  if (this.options.id){
            	this.element.parent().attr('id', this.options.id);
        	} else {
        		this.element.parent().uniqueId();
        		this.options.id = this.element.parent().attr('id');
        	}*/
        	this.element.find('li').each(function(i) {
        		var listItem = $(this),
	        		menuitemLink = listItem.children('a'),
	        		icon = menuitemLink.data('icon');
        		//禁用个别菜单
        		$this._setMenuItemLinkDisabled(menuitemLink);
        		//设置某个菜单是否展开
                $this._setMenuItemIsOpen(listItem,menuitemLink);
                //设置某个叶子菜单是否处于选中状态
                $this.setMenuItemIsactive(menuitemLink);
        		
        		menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
        		
        		if(icon) {
        			menuitemLink.prepend('<span class="menu-icon ' + icon + '"></span>');
        		}
        		
        		listItem.addClass('coral-menuitem coral-component coral-corner-all');
        		if(listItem.children('ul').length > 0 ){
        			listItem.addClass('coral-menu-parent');
        			listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
        			menuitemLink.prepend('<span class="menu-rightArrow cui-icon-arrowDown1"></span>');
        		}
        		
        		
        	});
        },
                
        _bindEvents: function() {        
            this._bindItemEvents();
        
            this._bindDocumentHandler();
        },
        /**
         * 为每个菜单绑定点击事件，覆盖父组件方法
         * @param $this {object} : current object
         * @param containRootLink {boolean} : 是否包含根菜单链接
         * @return ;
         */
        _bindMenuItemClick: function ($this, containRootLink) {
        	var rootLinks = [];
        	
        	$this._on({
        		'click.coral-menuitem-link' : function(e){
        			var link = $(e.target).closest("a");
        			if ($this.options.disabled === true || link.hasClass("coral-state-disabled")) return ;
        			if (typeof containRootLink === "boolean" && !containRootLink){
        				if (link.parent().parent().hasClass("ctrl-init")) return
        			}
            		var datas={};
            		var isParent = link.closest("li").hasClass("coral-menu-parent");
            		if(link.parent("li").attr("data-id")!=null){
            			datas.id=link.parent("li").attr("data-id");
            		}
            		if(link.parent("li").attr("data-path")){
            			datas.path = link.parent("li").attr("data-path");
            		}
            		if(link.attr("data-target")!=null){
            			datas.target=link.attr("data-target");
            		}
            		if(link.attr("data-name")!=null){
            			datas.name=link.attr("data-name");
            		}
            		if(link.attr("data-url")!=null){
            			datas.url=link.attr("data-url");
            		}
            		if(link.find(":checkbox,:radio").length>0){
            			datas.hasChk=true;
            			datas.checked=link.find(":checkbox,:radio").prop('checked');
            		}else{
            			datas.hasChk=false;
            		}
            		var event={
    					target: e.target,
    					currentTarget: $this,
    					preventDefault: $.noop
    				}
            		datas.isParent = isParent;
            		datas.target = e.target;
    				$this._trigger( "onClick", event, datas );
        		}
        	})
        },
        _bindItemEvents: function() {
            var $this = this;     
            
            this._on({
            	"mouseenter.coral-menuitem-link":function(e){
            		var target = e.target;
                	if (this.options.vertical || $(window).width()<900 ) return ;
                	if (this.options.disabled === true|| $(target).hasClass("coral-state-disabled")) return ;
                    var link = $(target),
    	                menuitem = link.parent(),
    	                autoDisplay = this.options.autoDisplay,
    	                activeSibling = menuitem.siblings('li').children(".coral-state-hover");
                    
                    if(activeSibling.length === 1) {
                        this._deactivate(activeSibling);
                    }
                    if(autoDisplay||this.active) {
                        this._activate(menuitem);
                    } else {
                        this._highlight(menuitem);
                    }
            	}
            })
            
            this._on({
            	"mouseleave.coral-menuitem":function(e){
            		var target = $(e.target).closest("li");
            		if (this.options.vertical || $(window).width()<900) return ;
            		if (this.options.disabled === true|| $(e.target).closest("a").hasClass("coral-state-disabled")) return ;
            		$(target).find("ul").hide();
            		$(target).children("a").removeClass("coral-state-hover");
            	},
            	"mouseleave" : function(e) {
            		if (this.options.vertical || !this.options.autoDisplay || $(window).width()<900) return
            		this.element.find("ul").hide();
            		this.element.find(".coral-state-hover").removeClass("coral-state-hover");
            	},
            	"click.coral-menuitem" : function(e){
            		var menuitem = $(e.target).closest("li");
            		if (this.options.disabled === true|| $(menuitem).find(">a").hasClass("coral-state-disabled")) return ;
            		if (!this.options.vertical && $(window).width()>900) {
            			if (menuitem.find("li").length == 0) {
            				if (!menuitem.hasClass("coral-menuitem-active")){
                        		$this.element.find(".coral-menuitem-active").removeClass("coral-menuitem-active");
                        		menuitem.addClass("coral-menuitem-active");
                        		menuitem.parents("li").addClass("coral-menuitem-active");
                        	} 
            			}
            		}
            		/*if ((!this.options.vertical && $(window).width()>900) ||
            				(this.element.parent().hasClass("coral-menu-min") && !$(menuitem).parents("ul").hasClass("coral-menu-child")) ) return*/
            		if (!this.options.vertical && $(window).width()>900) return;//忘了上面后面那一半是干嘛用的，想起来再说
                    if (menuitem.find("li").length){    //当li有子元素li时，即当li下面有ul时
                    	if (menuitem.hasClass("coral-menuitem-open")){
                    		menuitem.children("ul").css({"display":"none"});
                    		menuitem.removeClass("coral-menuitem-open");
                    	} else {
                    		if (this.options.singleOpen) {
                    			this.element.find(".coral-menu-child").css({"display":"none"});
                    			this.element.find(".coral-menuitem-open").removeClass("coral-menuitem-open");
                    			menuitem.parents(".coral-menu-child").css({"display":"block"});
                    			menuitem.parents(".coral-menu-child").closest("li").addClass("coral-menuitem-open");
                    		}
                    		menuitem.children("ul").css({"display":"block"});
                    		menuitem.addClass("coral-menuitem-open");
                    	}
                    } else {
                    	if (!menuitem.hasClass("coral-menuitem-active")){
                    		$this.element.find(".coral-menuitem-active").removeClass("coral-menuitem-active");
                    		menuitem.addClass("coral-menuitem-active");
                    		menuitem.parents("li").addClass("coral-menuitem-active");
                    	} 
                    }
                    
                    e.stopPropagation();
                        
            	}
            	
            })
            /*
             * 给expendstyle=click的menubar增加click事件，当点击非叶子节点时可以实现展开和收起，点击叶子节点时加一个class“coral-menu-active”
             * 并且叶子结点的所有祖先节点加class“coral-menu-active”
             */
            if(this.options.autoDisplay === false) {
                this.rootLinks = this.element.find('> .coral-menuitem > .coral-menuitem-link');
                this.rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);
                
                this._on(this.rootLinks,{
                	"click" : function(e){
                		var link = $(e.target).closest("a");
                    	if($this.options.disabled===true || link.hasClass("coral-state-disabled") )return ;
                        var menuitem = link.parent(),
                            submenu = menuitem.children('ul.coral-menu-child');

                        if(submenu.length === 1) {
                            if(submenu.is(':visible')) {
                                $this.active = false;
                                $this._deactivate(menuitem);
                            }
                            else {                                        
                                $this.active = true;
                                $this._highlight(menuitem);
                                $this._showSubmenu(menuitem, submenu);
                            }
                        }
                        
                		var datas={};
                		if(link.parent("li").attr("data-id")!=null){
                			datas.id=link.parent("li").attr("data-id");
                		}
                		if(link.attr("data-target")!=null){
                			datas.target=link.attr("data-target");
                		}
                		if(link.attr("data-name")!=null){
                			datas.name=link.attr("data-name");
                		}
                		if(link.attr("data-url")!=null){
                			datas.url=link.attr("data-url");
                		}
                		if(link.find(":checkbox,:radio").length>0){
                			datas.hasChk=true;
                			datas.checked=link.find(":checkbox,:radio").prop('checked');
                		} else {
                			datas.hasChk=false;
                		}
                		var event = {
    						target: $this,
    						currentTarget: $this,
    						preventDefault: $.noop
    					}
    					$this._trigger( "onClick", event, datas );
                		// 如果li没有子元素，则隐藏
                		if (!link.parent("li").hasClass("coral-menu-parent")) {
                			$this.hide();
                		}
                	}
                })
                
                this._bindMenuItemClick($this,false);
            } else {
            	this._bindMenuItemClick($this,true);	
            }
            
/*            this.element.parent().on('mouseleave.coral-menu','ul.coral-menu-list', function(e) {
                if($this.activeitem) {
                    $this._deactivate($this.activeitem);
                }
                if (!$this.element.parent().hasClass("coral-menubar-horizontal")){
                	e.stopPropagation();
                }
            });*/
            this._on(this.element.parent().find("ul.coral-menu-list"),{
            	"mouseleave" : function(e){
                    if($this.activeitem) {
                        $this._deactivate($this.activeitem);
                    }
                    if (!$this.element.parent().hasClass("coral-menubar-horizontal")){
                    	e.stopPropagation();
                    }
            	}
            })
        },
        /**
         * 根据父id或者根菜单的索引添加项
         * @param key { string, number } : 父id，根菜单index
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @return ;
         */
        add: function (key, data) {
        	if ( (typeof key !== "string" && typeof key !== "number" && key !== null) || (typeof data !== "object" ) ) {
        		return;
        	}
        	
        	var that = this;
        	if (typeof key === "string" || key == null) {
        		this._addByParentId(key, data);
        	} else if (typeof key === "number") {
        		this._addByIndex(key, data);
        	}
        },
        /**
         * 根据父id添加项
         * @param pid { string } : 父id
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @return ;
         */
        _addByParentId: function(pid, data) {
        	var that = this,
        		$pNode = this.element.find(".coral-menuitem").filter("[data-id$='" + pid + "']");
        	
        	if (!$pNode.length && pid !== null) {
        		return ; 
    		}
        	// 如果pid为null，则添加到根菜单下，否则根据pid添加
        	if (pid === null) {
        		this.element.append( this._getAddHTML(data,false) );
        		var $rootLinks = this._renderAddHTML();
        		this._bindAddItemEvents($rootLinks);
        		this._bindLinkRootEvents( $($rootLinks[0]) );
        	} else {
        		if (this._hasChildren($pNode)) {
        			$pNode.children("ul").append( this._getAddHTML(data,false) );
        		} else {
        			$pNode.append( this._getAddHTML(data, true) );
        		}
        		
        		var $links = this._renderAddHTML($pNode);
        		this._bindAddItemEvents($links);
        	}
        },
        
        /**
         * 生成添加项需要的html字符串
         * @param data { {},[{}] } : 要添加的项的数据对象，可为一个菜单，也可为多个菜单
         * @param hasUL { boolean } : 是否创建ul元素
         * @return html { string } : 构造出来的要添加到页面中的html元素字符串
         */
        _getAddHTML: function(data, hasUL) {
        	var html = "",
        	    simpleDataIdKey = this.options.simpleDataIdKey;
        	// 如果data不是数组，先转换成数组
        	if ( !(data instanceof Array) ) {
        		data = [data];
        	}
        	if (typeof hasUL === "boolean" && hasUL) {
        		html+="<ul>";        		
        	}
	        for(var i=0;i<data.length;i++){
	        	if (data[i][simpleDataIdKey] != "") {
	        		html+="<li data-id=\""+data[i][simpleDataIdKey]+"\">";
	        	} else {
	        		html+="<li>";
	        	}
				html+=this._generateANode(data[i]);
				var items=data[i].items;
				if(items.length>0){
					html=this._generateHTML(html,items);
				}
				html+="</li>"
			}
	        if (typeof hasUL === "boolean" && hasUL) {
	        	html+="</ul>";		
        	}
			
			return html;
        },
        /**
         * 渲染生成的html
         * @param $pNode { jquery{} } : 找到的父元素li
         * @return  { jquery{} } : 返回$pNode下的所有a元素，以便后面绑定事件用
         */
        _renderAddHTML: function($pNode) {
        	var $this = this,
        		$links = this.element.find('li').not(".coral-menuitem");
        	
        	if( $pNode && !$pNode.children('ul').hasClass("coral-menu-list")) {
        		$pNode.addClass('coral-menu-parent');
        		$pNode.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
        		$pNode.children("a").prepend('<span class="menu-rightArrow cui-icon-arrowDown1"></span>');
            }
        	
        	$links.each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    
                    icon = menuitemLink.data('icon');
                    //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                    
                     
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="menu-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="menu-rightArrow cui-icon-arrowDown1"></span>');
                    }
            });
            
            return $links.find('.coral-menuitem-link');
        },
        /**
         * 给根菜单绑定事件，用以显示子菜单
         * @param $rootLinks { jquery [{}] } : 根菜单a元素s
         * @return ;
         */
        _bindLinkRootEvents: function ($rootLinks) {
        	var $this = this;
        	$rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);

        	this._on($rootLinks,{
        		"click" : function(e){
        			var link = $(e.target).closest("a");
	        		if($this.options.disabled === true || link.hasClass("coral-state-disabled") ) return ;
	                var menuitem = link.parent(),
	                    submenu = menuitem.children('ul.coral-menu-child');
	
	                if(submenu.length === 1) {
	                    if(submenu.is(':visible')) {
	                        $this.active = false;
	                        $this._deactivate(menuitem);
	                    } else {                                        
	                        $this.active = true;
	                        $this._highlight(menuitem);
	                        $this._showSubmenu(menuitem, submenu);
	                    }
	                }
        		}
        	})
        },
        /**
         * 给新增的菜单项绑定事件
         * @param $$links { jquery [{}] } : 菜单a元素s
         * @return ;
         */
        _bindAddItemEvents: function($links) {
        	var $this = this;
        	
/*        	this.element.on('click',$links,function(e){
        		var datas = {},
        		    link = $(e.target).closest("a");
        		if($this.options.disabled === true || link.hasClass("coral-state-disabled"))return ;
        		if(link.parent("li").attr("data-id")!=null){
        			datas.id=link.parent("li").attr("data-id");
        		}
        		if(link.attr("data-target")!=null){
        			datas.target=link.attr("data-target");
        		}
        		if(link.attr("data-name")!=null){
        			datas.name=link.attr("data-name");
        		}
        		if(link.attr("data-url")!=null){
        			datas.url=link.attr("data-url");
        		}
        		if(link.find(":checkbox,:radio").length>0){
        			datas.hasChk=true;
        			datas.checked=link.find(":checkbox,:radio").prop('checked');
        		} else {
        			datas.hasChk=false;
        		}
        		var event = {
					target: $this,
					currentTarget: $this,
					preventDefault: $.noop
				};        		
				$this._trigger( "onClick", event, datas );
				$this.hide();
            });*/
        	this._on($links,{
        		"click" : function(e){
        			var datas = {},
        		    link = $(e.target).closest("a");
	        		if($this.options.disabled === true || link.hasClass("coral-state-disabled"))return ;
	        		if(link.parent("li").attr("data-id")!=null){
	        			datas.id=link.parent("li").attr("data-id");
	        		}
	        		if(link.attr("data-target")!=null){
	        			datas.target=link.attr("data-target");
	        		}
	        		if(link.attr("data-name")!=null){
	        			datas.name=link.attr("data-name");
	        		}
	        		if(link.attr("data-url")!=null){
	        			datas.url=link.attr("data-url");
	        		}
	        		if(link.find(":checkbox,:radio").length>0){
	        			datas.hasChk=true;
	        			datas.checked=link.find(":checkbox,:radio").prop('checked');
	        		} else {
	        			datas.hasChk=false;
	        		}
	        		var event = {
						target: $this,
						currentTarget: $this,
						preventDefault: $.noop
					};        		
					$this._trigger( "onClick", event, datas );
					$this.hide();
        		}
        	})
        	
        	$links.on('mouseenter',function() {
        		if($this.options.disabled===true || $(this).hasClass("coral-state-disabled") )return ;
                var link = $(this),
                menuitem = link.parent(),
                autoDisplay = $this.options.autoDisplay;
                
                var activeSibling = menuitem.siblings('.coral-menuitem-active');
                if(activeSibling.length === 1) {
                    $this._deactivate(activeSibling);
                }

                if(autoDisplay||$this.active) {
                    if(menuitem.hasClass('coral-menuitem-active')) {
                        $this._reactivate(menuitem);
                    } else {
                        $this._activate(menuitem);
                    }  
                } else {
                    $this._highlight(menuitem);
                }
            });            
            
            $links.parents("li").find('ul.coral-menu-list').on('mouseleave.coral-menu', function(e) {
                if ($this.activeitem) {
                    $this._deactivate($this.activeitem);
                }
           
                e.stopPropagation();
            });
        },
        /**
         * 判断菜单项li是否有子菜单
         * @param $li { jquery{} } : 要判断的菜单项li元素
         * @return { boolean } : true - 有子菜单；false - 无子菜单
         */        
        _hasChildren: function($li) {
        	if ($li.hasClass("coral-menu-parent")) {
        		return true;
        	} else {
        		return false;
        	}
        },
        /**
         * 获取根菜单个数
         * @return { number } : number of root menuItems
         */
        _getLength: function () {
        	return this.element.children("li").length;
        },
        /**
         * 根据根菜单索引添加项
         * @param index { number } : 根菜单索引
         * @return ;
         */
        _addByIndex: function(index, data) {
        	var that = this,
				idx = parseInt( index );
			
			if ( idx < 0 || idx > this._getLength() ) {				
				return ;
			}
			
			if (this._getLength() == 0 || idx == this._getLength() ) {
				this.element.append( this._getAddHTML(data,false) );
			} else {
				this.element.children("li:eq("+idx+")").before(this._getAddHTML(data,false));
			}
			
    		var $rootLinks = this._renderAddHTML();
    		this._bindAddItemEvents($rootLinks);
    		this._bindLinkRootEvents( $($rootLinks[0]) );
        },
        /**
         * 删除所有项
         * @return ;
         */
		remove: function ( ) {
			var node = this.element.children("li");
			
			if ( !node.length ) {
				return ;
			}
			
			node.remove();
		},
        /**
         * 根据id或者根菜单索引删除项
         * @param key { string,number } : id，根菜单索引
         * @return ;
         */
		removeItem: function ( key ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				this._removeById( key );
			} else {
				this._removeByIndex( key );
			}			
		},
		/**
		 * 根据id删除项
		 * @param id { string } : id
         * @return ;
		 */
		_removeById: function (id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			if (!node.length) {
				return ;
			}
			// 如果父元素没有子元素，则将父元素也删除
			if (!node.siblings("li").length) {
				node.parent("ul").remove();
			} else {
				node.remove();
			}
		},
		/**
		 * 根据根菜单index删除项
		 * @param index { number } :根菜单索引
         * @return ;
		 */
		_removeByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var $removeNode = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!$removeNode.length) {
				return ;
			}
			
			$removeNode.remove();
		},
		/**
	     * 根据id或者根菜单索引修改项的文本
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
		updateItem: function ( key, label ) {
			var that = this;
			
			if ( typeof key === "string" ) {
				this._updateById( key, label );
			} else {
				this._updateByIndex( key, label );
			}
		},
		/**
		 * 根据id修改项的文本
		 * @param id { string } : id
         * @return ;
		 */
		_updateById: function ( id, label ) {
			var nodeUpdate = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !nodeUpdate.length ) {
				return ;
			}
			
			nodeUpdate.children(".coral-menuitem-link").children( ".coral-menuitem-text" ).html( label );	
		},
		/**
		 * 根据根菜单index修改项的文本
		 * @param index { number } :根菜单索引
         * @return ;
		 */
		_updateByIndex: function ( index, label ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var nodeUpdate = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!nodeUpdate.length) {
				return ;
			}
			
			nodeUpdate.children(".coral-menuitem-link").children( ".coral-menuitem-text" ).html( label );
		},
        _bindDocumentHandler: function() {
            var $this = this;

            $(document.body).on('click.coral-menu', function(e) {
                var target = $(e.target);
                if(target.data('primecoral-tieredmenu-rootlink') === $this.options.id) {
                    return;
                }
                    
                $this.active = false;
                //当点击的是叶子节点，或者expendStyle是click时return
                if (target.closest("li").find("ul").length != 0 || $this.element.parent().hasClass("coral-menubar-vertical")) return;
                $this.element.find('li.coral-menuitem-active').each(function() {
                    $this._deactivate($(this), true);
                });
            });
        },
        /**
         * 启用所有的菜单项
         * @return ;
         */
        enable: function() {
        	var node = this.element.find(".coral-menuitem");
			
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
        },
        /**
	     * 根据id或者根菜单索引，启用
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        enableItem: function(key) {
        	var that = this;
			
			if ( typeof key === "string" ) {
				this._enableItemById( key );
			} else {
				this._enableItemByIndex( key );
			}
        },
        /**
		 * 根据id，启用
		 * @param id { string } : id
         * @return ;
		 */
        _enableItemById: function(id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
						
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );        	
        },
        /**
	     * 根据根菜单索引，启用
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
        _enableItemByIndex: function(index) {
        	var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", false ).attr( "aria-disabled", false );
        },
        /**
         * 禁用所有的菜单项
         * @return ;
         */
        disable: function() {
        	var node = this.element.find(".coral-menuitem");
			
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
        },
        /**
	     * 根据id或者根菜单索引，禁用
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        disableItem: function(key) {
        	var that = this;
			
			if ( typeof key === "string" ) {
				return this._disableItemById( key );
			} else {
				return this._disableItemByIndex( key );
			}
        },
        /**
		 * 根据id，禁用
		 * @param id { string } : id
         * @return ;
		 */
        _disableItemById: function(id) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
						
			if ( !node.length ) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );        	
        },
        /**
	     * 根据根菜单索引，禁用
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
        _disableItemByIndex: function(index) {
        	var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.children(".coral-menuitem-link").toggleClass( this.componentFullName + "-disabled coral-state-disabled", true ).attr( "aria-disabled", true );
        },
        /**
         * 隐藏所有的菜单项
         * @return ;
         */
        hideAll: function () {
        	var node = this.element.children("li");
        	
        	if ( !node.length ) {
        		return ;
        	}
        	
        	node.hide();
        },
        /**
	     * 根据id或者根菜单索引，隐藏
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
        hideItem: function ( key ) {
        	var that = this;
        	
        	if ( typeof key === "string" ) {
        		return that._hideById( key );
        	} else {
        		return that._hideByIndex( key );
        	}
        },
        /**
		 * 根据id，隐藏
		 * @param id { string } : id
         * @return ;
		 */
        _hideById: function ( id ) {
        	var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !node.length ) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", true );
		},
		/**
	     * 根据根菜单索引，隐藏
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
		_hideByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", true );
		},
		/**
         * 显示所有的菜单项
         * @return ;
         */
		showAll: function () {
			var node = this.element.children("li");
			
			if ( !node.length ) {
				return ;
			}
			
			node.show();
		},
		/**
	     * 根据id或者根菜单索引，显示
	     * @param key { string,number } : id，根菜单索引
	     * @return ;
	     */
		showItem: function ( key ) {
			var that = this;
			
			if (typeof key === "string" ) {
				return that._showById(key);
			} else {
				return that._showByIndex(key);
			}
		},
		 /**
		 * 根据id，显示
		 * @param id { string } : id
         * @return ;
		 */
		_showById: function ( id ) {
			var node = this.element.find(".coral-menuitem").filter("[data-id$='" + id + "']");
			
			if ( !node.length ) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", false );	
		},
		/**
	     * 根据根菜单索引，显示
	     * @param index { number } : 根菜单索引
	     * @return ;
	     */
		_showByIndex: function ( index ) {
			var idx = parseInt( index );
			
			if ( idx < 0 || idx > (this._getLength()-1) ) {
				return ;
			}
			var node = this.element.children("li.coral-menuitem:eq("+idx+")");
			
			if (!node.length) {
				return ;
			}
			
			node.toggleClass( "coral-tieredmenu-hidden", false );	
		},
        _deactivate: function(menuitem, animate) {
            this.activeitem = null;
            menuitem.children('a.coral-menuitem-link').removeClass('coral-state-hover');
 //           menuitem.removeClass('coral-menuitem-active');

            if(animate)
                menuitem.children('ul.coral-menu-child:visible').fadeOut('fast');
            else
                menuitem.children('ul.coral-menu-child:visible').hide();
        },

        _activate: function(menuitem) {
            this._highlight(menuitem);

            var submenu = menuitem.children('ul.coral-menu-child');
            if(submenu.length === 1) {
                this._showSubmenu(menuitem, submenu);//menuba组件调这个方法，调用的是menubar里的那一个——showSunmenu方法
            }
        },

        _reactivate: function(menuitem) {
            this.activeitem = menuitem;
            var submenu = menuitem.children('ul.coral-menu-child'),
            activeChilditem = submenu.children('li.coral-menuitem-active:first'),
            _self = this;

            if(activeChilditem.length === 1) {
                _self._deactivate(activeChilditem);
            }
        },

        _highlight: function(menuitem) {
            this.activeitem = menuitem;
            menuitem.children('a.coral-menuitem-link').addClass('coral-state-hover');
 //           menuitem.addClass('coral-menuitem-active');
        },
                
        _showSubmenu: function(menuitem, submenu) {
        	// 如果子元素中都是隐藏的元素，则返回。
        	if (!submenu.children("li:not(.coral-tieredmenu-hidden)").length) return;
        	//禁用对trigger的事件触发
            if(this.options.disabled===true)return ;
            submenu.css({
                'left': menuitem.outerWidth(),
                'top': 0,
                'z-index': ++$.coral.zindex
            });

            submenu.show();
        }
            
    });


/**
 * CoralUI Menubar component
 */



    $.component("coral.menubar", $.coral.tieredmenu, {
        
        options: {

        },
        component: function(){
        	return this.element.parent();
        },
        _create: function() {
        	//this._generateULContent();
        	this._super();
        	// 继承 tieredmenu 父方法中给 parent 元素赋了跟 element 一样的 id。
            if (!this.options.vertical){
            	this.element.parent().removeClass('coral-tieredmenu').addClass('coral-menubar').addClass("coral-menubar-horizontal");
            } else if (this.options.vertical){
            	this.element.parent().addClass("coral-menubar-vertical").removeClass('coral-tieredmenu');
            }
            this.element.find(">li>ul").addClass('coral-dropdown-menu');
            if (this.options.responsive) {
            	this.component().addClass("menu-responsive")
            }
            if (this.options.minmenu) {
            	this.component().addClass("coral-menu-min");
            }
            if (this.options.collapseButton) {
            	$("<div class='coral-menubar-toggle coral-menubar-collapse'><a href='javascript:void(0)' class='coral-menubar-collapseButton "+this.options.collapseIcon+"'></a></div>")
            	.insertAfter(this.element);
            }
            var that=this;
            this.component().find(".coral-menubar-collapseButton").click(function(){
            	if ($(this).hasClass(that.options.collapseIcon)){
            		$(this).removeClass(that.options.collapseIcon).addClass(that.options.expandIcon);
            		$(this).parents(".coral-menu").removeClass("coral-menu-min").addClass("coral-menu-min");
            	} else if ($(this).hasClass(that.options.expandIcon)){
            		$(this).removeClass(that.options.expandIcon).addClass(that.options.collapseIcon)
            		$(this).parents(".coral-menu").removeClass("coral-menu-min");
            	}
            })
            if(this.options.firstIsactive){
            	var menuItem = this.element.find("li") ;
            	menuItem=menuItem.filter(function(i){
            		if ($(menuItem[i]).hasClass("coral-menu-parent")){
            			return false;
            		} else return true;
            	})
            	var menuItemLink = $(menuItem.get(0)).children("a");
            	menuItemLink.data("isactive",true)
            	this.setMenuItemIsactive(menuItemLink);
            }
            if (this.options.openFirst) {
            	var menuItem = this.element.find("li:first") ;
            	
            	var menuItemLink = menuItem.children("a");
            	menuItemLink.next("ul.coral-menu-child").css({"display":"block"});
            }
        },
        _setOption: function(key,value) {
        	this._super(key, value);
        	if (key=="minmenu") {
        		if (value) {
        			this.component().removeClass("coral-menu-min").addClass("coral-menu-min");
        		} else if (!value) {
        			this.component().removeClass("coral-menu-min");
        		}
        	}
        },
        _showSubmenu: function(menuitem, submenu) {
            var win = $(window),
            submenuOffsetTop = null,
            submenuCSS = {
                'z-index': ++$.coral.zindex
            };

            if(menuitem.parent().hasClass('coral-menu-child')) {
            	submenuCSS.left = menuitem.outerWidth();
                submenuCSS.top = 0; 
                submenuOffsetTop = menuitem.offset().top - win.scrollTop();
            } 
            else {
                submenuCSS.left = 0;
                if (menuitem.parent().parent().hasClass("coral-menu-min")){
                	submenuCSS.top = menuitem.outerHeight()+37; 
                } else {
                	submenuCSS.top = menuitem.outerHeight()
                }
                submenuOffsetTop = menuitem.offset().top + submenuCSS.top - win.scrollTop();
            }

            //adjust height within viewport
            submenu.css('height', 'auto');
            if((submenuOffsetTop + submenu.outerHeight()) > win.height()) {
                submenuCSS.overflow = 'auto';
                submenuCSS.height = win.height() - (submenuOffsetTop + 20);
            }
            submenu.css(submenuCSS).show();
        }       
    });



/*
 * CoralUI SlideMenu component
 */



    $.component("coral.slidemenu", $.coral.basemenu, {
                
        _create: function() {
        	//this.options.popup=false;
        	this._generateULContent();
            
            this._render();
        
            //elements
            this.rootList = this.element;
            this.content = this.element.parent();
            this.wrapper = this.content.parent();
            this.container = this.wrapper.parent();
            this.submenus = this.container.find('ul.coral-menu-list');
            
            this.links = this.element.find('a.coral-menuitem-link:not(.coral-state-disabled)');
            this.backward = this.wrapper.children('div.coral-slidemenu-backward');

            //config
            this.stack = [];
            this.jqWidth = this.container.width();

            var $this = this;

            if(!this.element.hasClass('coral-menu-dynamic')) {
                this._applyDimensions();
            }
            this._super();

            this._bindEvents();
        },
        
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-menu coral-slidemenu coral-component coral-component-content coral-corner-all coral-helper-clearfix"/>').
                    wrap('<div class="coral-slidemenu-wrapper" />').
                    after('<div class="coral-slidemenu-backward coral-component-header coral-corner-all coral-helper-clearfix">\n\
                    <span class="coral-icon coral-icon-triangle-1-w"></span>Back</div>').
                    wrap('<div class="coral-slidemenu-content" />');
            
            this.element.parent().uniqueId();
            this.options.id = this.element.parent().attr('id');
          
            this.element.find('li').each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                     //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                    
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="menu-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="menu-rightArrow cui-icon-arrowDown1"></span>');
                    }
                
            
            });
        },
              
        _bindEvents: function() {
            var $this = this;
            
            //为每个菜单绑定点击事件
            this._bindMenuItemClick($this)

            this.links.on('mouseenter.coral-menu',function() {
               $(this).addClass('coral-state-hover'); 
            })
            .on('mouseleave.coral-menu',function() {
               $(this).removeClass('coral-state-hover'); 
            })
            .on('click.coral-menu',function() {
               var link = $(this),
               submenu = link.next();

               if(submenu.length == 1) {
                   $this._forward(submenu);
               }
            });

            this.backward.on('click.coral-menu',function() {
                $this._back();
            });
       },

       _forward: function(submenu) {
            var $this = this;

            this._push(submenu);

            var rootLeft = -1 * (this._depth() * this.jqWidth);

            submenu.show().css({
                left: this.jqWidth
            });

            this.rootList.animate({
                left: rootLeft
            }, 300, 'easeInOutCirc', function() {
                if($this.backward.is(':hidden')) {
                    $this.backward.fadeIn('fast');
                }
            });
       },

       _back: function() {
            var $this = this,
            last = this._pop(),
            depth = this._depth();

            var rootLeft = -1 * (depth * this.jqWidth);

            this.rootList.animate({
                left: rootLeft
            }, 300, 'easeInOutCirc', function() {
                last.hide();

                if(depth === 0) {
                    $this.backward.fadeOut('fast');
                }
            });
       },

       _push: function(submenu) {
             this.stack.push(submenu);
       },
    
       _pop: function() {
             return this.stack.pop();
       },

       _last: function() {
            return this.stack[this.stack.length - 1];
        },

       _depth: function() {
            return this.stack.length;
        },

       _applyDimensions: function() {
            this.submenus.width(this.container.width());
            this.wrapper.height(this.rootList.outerHeight(true) + this.backward.outerHeight(true));
            this.content.height(this.rootList.outerHeight(true));
            this.rendered = true;
        },

       show: function() {                
            this.align();
            this.container.css('z-index', ++$.coral.zindex).show();

            if(!this.rendered) {
                this._applyDimensions();
            }
        }        
    });




/**
 * CoralUI Context Menu component
 */



    $.component("coral.contextmenu", $.coral.tieredmenu, {
        
        options: {
            autoDisplay: true,
            target: null,
            event: 'contextmenu'
        },
        
        _create: function() {
        	//this._generateULContent();
            this._super();
            this.element.parent().removeClass('coral-tieredmenu').
                    addClass('coral-contextmenu coral-menu-dynamic coral-shadow coral-contextmenu');
            
            var $this = this;
			//处理如果是字符串的target属性
            this.options.target = typeof this.options.target==="string" ?$('#'+this.options.target):this.options.target
            this.options.target = this.options.target||$(document);

            if(!this.element.parent().parent().is(document.body)) {
                this.element.parent().appendTo('body');
            }
            
            this.options.target.on(this.options.event + '.coral-contextmenu' , function(e){
                    $this.show(e);
            });   
        },        

        _bindItemEvents: function() {
            this._super();

            var $this = this;

            //hide menu on item click
            this.links.bind('click', function() {
            	// lihaibo add
            	/*if ($(this).siblings("ul").length != 0) {
            		return ;
            	} */ 
            	//
            	if($(this).parent().hasClass("coral-menu-parent"))
            		return false;
            	$this._hide();
            });
        },

        _bindDocumentHandler: function() {
            var $this = this;

            //hide overlay when document is clicked
            $(document.body).bind('click.coral-contextmenu', function (e) {
                if($this.element.parent().is(":hidden")) {
                    return;
                }
                // lihaibo 注释                
                $this._hide();
                //
            });
        },

        show: function(e) { 
        	if(this.options.disabled===true){
        		e.preventDefault();
           		e.stopPropagation();
        		return;
        	}
            //hide other contextmenus if any
            $(document.body).children('.coral-contextmenu:visible').hide();

            var win = $(window),
            left = e.pageX,
            top = e.pageY,
            width = this.element.parent().outerWidth(),
            height = this.element.parent().outerHeight();

            //collision detection for window boundaries
            if((left + width) > (win.width())+ win.scrollLeft()) {
                left = left - width;
            }
            if((top + height ) > (win.height() + win.scrollTop())) {
                top = top - height;
            }

            if(this.options.beforeShow) {
                this.options.beforeShow.call(this);
            }

            this.element.parent().css({
                'left': left,
                'top': top,
                'z-index': ++$.coral.zindex
            }).show();

            e.preventDefault();
            e.stopPropagation();
        },

        _hide: function() {
            var $this = this;

            //hide submenus
            this.element.parent().find('li.coral-menuitem-active').each(function() {
                $this._deactivate($(this), true);
            });

            this.element.parent().fadeOut('fast');
        },

        isVisible: function() {
            return this.element.parent().is(':visible');
        },

        getTarget: function() {
            return this.jqTarget;
        }              
              
    });


/**
 * CoralUI NavigateMenuBase component
 */


    $.component("coral.navigatemenubase", $.coral.basemenu, {
        
        options: {
            autoDisplay: true    
        },
        
        _create: function() {
        	       	
        	this._generateULContent();
        	
            this._render();
            
            this.links = this.element.find('.coral-menuitem-link:not(.coral-state-disabled)');

            this._bindEvents();
            
            this._super();
        },
                
        _render: function() {
        	var $this=this;
            this.element.addClass('coral-menu-list coral-helper-reset').
                    wrap('<div class="coral-tieredmenu coral-menu coral-component coral-component-content coral-corner-all coral-helper-clearfix" />');
            
            this.element.parent().uniqueId();
            this.options.id = this.element.parent().attr('id');
          
            this.element.find('li').each(function() {
                    var listItem = $(this),
                    menuitemLink = listItem.children('a'),
                    icon = menuitemLink.data('icon');
                    //禁用个别菜单
                    $this._setMenuItemLinkDisabled(menuitemLink);
                     
                    menuitemLink.addClass('coral-menuitem-link coral-corner-all').contents().wrap('<span class="coral-menuitem-text" />');
                    
                    if(icon) {
                        menuitemLink.prepend('<span class="menu-icon ' + icon + '"></span>');
                    }
                    
                    listItem.addClass('coral-menuitem coral-component coral-corner-all');
                    if(listItem.children('ul').length > 0) {
                        listItem.addClass('coral-menu-parent');
                        //子菜单不会移动
                        listItem.css('position','static');
                        //子菜单宽度100%
     					listItem.children('ul').css('width','100%');
     					//子菜单底部对齐
     					//listItem.children('ul').css('margin-top','0px');
     					//子菜单横排
     					listItem.find('ul li').css('width','auto');
     					//子菜单A元素宽度自适应
     					listItem.find('ul li a').css('width','auto');
                        listItem.children('ul').addClass('coral-component-content coral-menu-list coral-corner-all coral-helper-clearfix coral-menu-child coral-shadow');
                        menuitemLink.prepend('<span class="menu-rightArrow cui-icon-arrowDown1"></span>');
                    }
                
            
            });
        },
                
        _bindEvents: function() {        
            this._bindItemEvents();
        
            this._bindDocumentHandler();
        },
    
        _bindItemEvents: function() {
            var $this = this;
            
            //为每个菜单绑定点击事件
            this._bindMenuItemClick($this);

           
            this.links.on('mouseenter.coral-menu',function() {
            	if($this.options.disabled===true){
            		return ;
            	}
                var link = $(this),
                menuitem = link.parent(),
                autoDisplay = $this.options.autoDisplay;

                var activeSibling = menuitem.siblings('.coral-menuitem-active');
                if(activeSibling.length === 1) {
                    $this._deactivate(activeSibling);
                }

                if(autoDisplay||$this.active) {
                	
                    if(menuitem.hasClass('coral-menuitem-active')) {
                        $this._reactivate(menuitem);
                    }
                    else {
                        $this._activate(menuitem);
                    }  
                }
                else {
                    $this._highlight(menuitem);
                }
            });

            if(this.options.autoDisplay === false) {
                this.rootLinks = this.element.find('> .coral-menuitem > .coral-menuitem-link');
                this.rootLinks.data('primecoral-tieredmenu-rootlink', this.options.id).find('*').data('primecoral-tieredmenu-rootlink', this.options.id);

                this.rootLinks.on('click.coral-menu', function(e) {
                    var link = $(this),
                    menuitem = link.parent(),
                    submenu = menuitem.children('ul.coral-menu-child');

                    if(submenu.length === 1) {
                        if(submenu.is(':visible')) {
                            $this.active = false;
                            $this._deactivate(menuitem);
                        }
                        else {                                        
                            $this.active = true;
                            $this._highlight(menuitem);
                            $this._showSubmenu(menuitem, submenu);
                        }
                    }
                });
            }
            
            this.element.parent().find('ul.coral-menu-list').on('mouseleave.coral-menu', function(e) {
                if($this.activeitem) {
                	//禁止隐藏
                    //$this._deactivate($this.activeitem);

                }
                e.stopPropagation();
            });
        },
       
        _bindDocumentHandler: function() {
            var $this = this;

            $(document.body).on('click.coral-menu ', function(e) {
                var target = $(e.target);
                if(target.data('primecoral-tieredmenu-rootlink') === $this.options.id) {
                    return;
                }
                //如果点击checkbox不要隐藏菜单
                if(target.is("[type='checkbox']"))return ;  
                $this.active = false;

                $this.element.find('li.coral-menuitem-active').each(function() {
                	//fixmenu来隐藏
                	if($this.options.fixmenu==="false"){
                    	$this._deactivate($(this), true);
                	}
                });
            });
        },
    
        _deactivate: function(menuitem, animate) {
            this.activeitem = null;
            menuitem.children('a.coral-menuitem-link').removeClass('coral-state-hover');
            menuitem.removeClass('coral-menuitem-active');

            if(animate)
                menuitem.children('ul.coral-menu-child:visible').fadeOut('fast');
            else
                menuitem.children('ul.coral-menu-child:visible').hide();
        },
        _activate: function(menuitem) {
            this._highlight(menuitem);

            var submenu = menuitem.children('ul.coral-menu-child');
            if(submenu.length === 1) {
                this._showSubmenu(menuitem, submenu);
            }
        },

        _reactivate: function(menuitem) {
            this.activeitem = menuitem;
            var submenu = menuitem.children('ul.coral-menu-child'),
            activeChilditem = submenu.children('li.coral-menuitem-active:first'),
            _self = this;

            if(activeChilditem.length === 1) {
                _self._deactivate(activeChilditem);
            }
        },

        _highlight: function(menuitem) {
            this.activeitem = menuitem;
            menuitem.children('a.coral-menuitem-link').addClass('coral-state-hover');
            menuitem.addClass('coral-menuitem-active');
        },
                
        _showSubmenu: function(menuitem, submenu) {
        	//禁用对trigger的事件触发
            if(this.options.disabled===true)return ;
            submenu.css({
                'left': menuitem.outerWidth(),
                'top': 0,
                'z-index': ++$.coral.zindex
            });

            submenu.show();
        }
            
    });



/**
 * CoralUI Navigate menu component
 */


    $.component("coral.navigatemenu",$.coral.navigatemenubase, {
        
        options: {
            autoDisplay: true,
            checkable : null,//是否支持多选
            fixmenu : null//是否固定底层菜单
        },
        //重写，递归调用改为只解析2层
        _generateHTML : function(html,data){
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
				html+="<li>"
				html+=this._generateANode(data[i]);
				var name=data[i].name;
				var items=data[i].items;
				if(items.length>0){
					html=this._generateLast(html,items,name);
				}
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //解析下层
        _generateLast : function(html,data,name){
        	html+="<ul>";
	        for(var i=0;i<data.length;i++){
				html+="<li>"
				html+=this._generateChbNode(data[i],name);
				html+="</li>"
			}
			html+="</ul>";
			return html;
        },
        //增加checkbox
        _generateChbNode : function(node,gname){
        	var str="<a";
			if(node.iconclass!=""){
				//str+=" data-icon='"+node.iconclass+"'";
			}
			if(node.name!=""){
				str+=" data-name='"+node.name+"'";
			}
			if(node.disabled!=""){
				str+=" data-disabled='"+node.disabled+"'";
			}
			if(node.url!=""){
				str+=" href='"+node.url+"'";
			}
			if(node.target!=""){
				str+=" target='"+node.target+"'";
			}
			str+=">";
			var checked=node.checked===true?"checked":"";
			var dis=node.disabled=="true"?"disabled=true":"";
			var chkstr="<input type='radio' "+dis+" name='"+gname+"' "+checked+" data-id='"+this.element[0].id+"_"+node.name+"'/>";
			if(this.options.checkable===true){
				chkstr="<input type='checkbox' "+dis+" "+checked+" data-id='"+this.element[0].id+"_"+node.name+"'/>";
			}
			str+=chkstr;
			if(node.name!=""){
				str+=node.name;
			}
			str+="</a>"
			return str;
        },
        _create: function() {
        	this._super();
            this.element.parent().removeClass('coral-tieredmenu').addClass('coral-navigatemenu');

            if(this.options.fixmenu!=="false"){
            	//设置主菜单的高度
            	var ulHeight=$(this.links[0]).parent(":first").find("ul").outerHeight();
            	var divHeight=this.element.parent().outerHeight();
            	this.element.parent().outerHeight(ulHeight+divHeight-3);
            }
            if(this.options.fixmenu!=="false"){
            	//激活第一个菜单
            	this._activate($(this.links[0]).parent());
            	//设置第一个菜单高度 修正ie8下高度为0px
            	$(this.links[0]).parent(":first").find("ul").css("height","auto");
            }
        },
        _showSubmenu: function(menuitem, submenu) {
            var win = $(window),
            submenuOffsetTop = null,
            submenuCSS = {
                'z-index': ++$.coral.zindex
            };

            if(menuitem.parent().hasClass('coral-menu-child')) {
                submenuCSS.left = menuitem.outerWidth();
                submenuCSS.top = 0; 
                submenuOffsetTop = menuitem.offset().top - win.scrollTop();
            } 
            else {
                submenuCSS.left = 0;
                submenuCSS.top = this.element.parent().outerHeight(); 
                submenuOffsetTop = menuitem.offset().top + submenuCSS.top - win.scrollTop();
            }

            //adjust height within viewport
            submenu.css('height', 'auto');
            if((submenuOffsetTop + submenu.outerHeight()) > win.height()) {
                submenuCSS.overflow = 'auto';
                submenuCSS.height = win.height() - (submenuOffsetTop + 20);
            }
            submenu.css(submenuCSS).show();
        },
        //勾选菜单
        check : function(name,checked){
			$("[data-id='"+this.element[0].id+"_"+name+"']").prop("checked",checked);
        }
    });

;
/**
 * JRA: #CORALIV-727
 */
/*
SWFObject v2.2 <http://code.google.com/p/swfobject/> 
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
;var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;
if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;
X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);
ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0;}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");
if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac};
}(),k=function(){if(!M.w3){return;}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f();
}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false);}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);
f();}});if(O==top){(function(){if(J){return;}try{j.documentElement.doScroll("left");}catch(X){setTimeout(arguments.callee,0);return;}f();})();}}if(M.wk){(function(){if(J){return;
}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return;}f();})();}s(f);}}();function f(){if(J){return;}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));
Z.parentNode.removeChild(Z);}catch(aa){return;}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]();}}function K(X){if(J){X();}else{U[U.length]=X;}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false);
}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false);}else{if(typeof O.attachEvent!=D){i(O,"onload",Y);}else{if(typeof O.onload=="function"){var X=O.onload;
O.onload=function(){X();Y();};}else{O.onload=Y;}}}}}function h(){if(T){V();}else{H();}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);
aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");
M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return;}}X.removeChild(aa);Z=null;H();
})();}else{H();}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);
if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa);}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;
ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class");}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align");
}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value");
}}P(ai,ah,Y,ab);}else{p(ae);if(ab){ab(aa);}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z;}ab(aa);}}}}}function z(aa){var X=null;
var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y;}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z;}}}return X;}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312);
}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null;}else{l=ae;Q=X;}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310";
}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137";}j.title=j.title.slice(0,47)+" - Flash Player Installation";
var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac;
}else{ab.flashvars=ac;}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";
(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae);}else{setTimeout(arguments.callee,10);}})();}u(aa,ab,X);}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");
Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y);}else{setTimeout(arguments.callee,10);
}})();}else{Y.parentNode.replaceChild(g(Y),Y);}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML;}else{var Y=ab.getElementsByTagName(r)[0];
if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true));
}}}}}return aa;}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X;}if(aa){if(typeof ai.id==D){ai.id=Y;}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae];
}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"';}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"';}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />';
}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id);}else{var Z=C(r);Z.setAttribute("type",q);
for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac]);}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac]);
}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab]);}}aa.parentNode.replaceChild(Z,aa);X=Z;}}return X;}function e(Z,X,Y){var aa=C("param");
aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa);}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";
(function(){if(X.readyState==4){b(Y);}else{setTimeout(arguments.callee,10);}})();}else{X.parentNode.removeChild(X);}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null;
}}Y.parentNode.removeChild(Y);}}function c(Z){var X=null;try{X=j.getElementById(Z);}catch(Y){}return X;}function C(X){return j.createElement(X);}function i(Z,X,Y){Z.attachEvent(X,Y);
I[I.length]=[Z,X,Y];}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false;
}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return;}var aa=j.getElementsByTagName("head")[0];if(!aa){return;}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;
G=null;}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1];
}G=X;}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y);}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"));
}}}function w(Z,X){if(!m){return;}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y;}else{v("#"+Z,"visibility:"+Y);}}function L(Y){var Z=/[\\\"<>\.;]/;
var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y;}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;
for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2]);}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa]);}for(var Y in M){M[Y]=null;}M=null;for(var X in swfobject){swfobject[X]=null;
}swfobject=null;});}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;
w(ab,false);}else{if(Z){Z({success:false,id:ab});}}},getObjectById:function(X){if(M.w3){return z(X);}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};
if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al];}}aj.data=ab;
aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak];}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai];
}else{am.flashvars=ai+"="+Z[ai];}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true);}X.success=true;X.ref=an;}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);
return;}else{w(ah,true);}}if(ac){ac(X);}});}else{if(ac){ac(X);}}},switchOffAutoHideShow:function(){m=false;},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]};
},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X);}else{return undefined;}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y);
}},removeSWF:function(X){if(M.w3){y(X);}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X);}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;
if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1];}if(aa==null){return L(Z);}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)));
}}}return"";},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block";
}}if(E){E(B);}}a=false;}}};}();;


$.component("coral.swfuploader", {
	options: {
		swfUploadOptions: null,
		swf      : 'external/swfupload.swf',  // The path to the swfuploader SWF file
		uploader : 'swfupload.php',  // The path to the server-side upload script
		
		// Options
		auto            : true,               // Automatically upload files when added to the queue
		buttonClass     : '',                 // A class name to add to the browse button DOM object
		buttonCursor    : 'hand',             // The cursor to use with the browse button
		buttonImage     : null,               // (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
		buttonText      : 'SELECT FILES',     // The text to use for the browse button
		checkExisting   : false,              // The path to a server-side script that checks for existing files on the server
		debug           : false,              // Turn on swfUpload debugging mode
		fileObjName     : 'Filedata',         // The name of the file object to use in your server-side script
		maxFileSize   : 0,                  // The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
		fileTypeDesc    : 'All Files',        // The description for file types in the browse dialog
		fileTypeExts    : '*.*',              // Allowed extensions in the browse dialog (server-side validation should also be used)
		uploadTemplate  : false,              // The template for the file item in the queue
		method          : 'post',             // The method to use when sending files to the server-side upload script
		multiple           : true,               // Allow multiple file selection in the browse dialog
		formData        : {},                 // An object with additional data to send to the server-side upload script with every file upload
		preventCaching  : true,               // Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
		uploadedFileList: [],
		separator       : ",",
		progressData    : 'speed',       // ('percentage' or 'speed') Data to show in the queue item during a file upload
		queueID         : false,              // The ID of the DOM object to use as a file queue (without the #)
		queueSizeLimit  : 999,                // The maximum number of files that can be in the queue at one time
		removeCompleted : true,               // Remove queue items from the queue when they are done uploading
		removeTimeout   : 3,                  // The delay in seconds before removing a queue item if removeCompleted is set to true
		requeueErrors   : false,              // Keep errored files in the queue and keep trying to upload them
		successTimeout  : 30,                 // The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
		uploadLimit     : 999,                  // The maximum number of files you can upload
		
		// Events
		overrideEvents  : []             // (Array) A list of default event handlers to skip
		/*
		onCancel         // Triggered when a file is cancelled from the queue
		onClearQueue     // Triggered during the 'clear queue' method
		onDestroy        // Triggered when the swfuploader object is destroyed
		onDialogClose    // Triggered when the browse dialog is closed
		onDialogOpen     // Triggered when the browse dialog is opened
		onDisable        // Triggered when the browse button gets disabled
		onEnable         // Triggered when the browse button gets enabled
		onFallback       // Triggered is Flash is not detected    
		onInit           // Triggered when swfuploader is initialized
		onQueueComplete  // Triggered when all files in the queue have been uploaded
		onSelectError    // Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
		onSelect         // Triggered for each file that is selected
		onSWFReady       // Triggered when the SWF button is loaded
		onComplete // Triggered when a file upload completes (success or error)
		onError    // Triggered when a file upload returns an error
		onSuccess  // Triggered when a file is uploaded successfully
		onProgress // Triggered every time a file progress is updated
		onStart    // Triggered immediately before a file upload starts
		*/
	},
	_create: function() {
		// Create a reference to the jQuery DOM object
		// Clone the original DOM object
		var that = this,
			$clone = this.element.clone(),
			opts = this.options;

		// Setup the default options
		this.options.id = this.element.attr('id'); // The ID of the DOM object
		var $wrapper = $('<div />', {
			'id': opts.id + "_wrappper",
			'class': 'swfuploader',
			'css': {
				'height': opts.height + 'px',
				'width': opts.width + 'px'
			}
		});
		this.element.append($wrapper);
		// Prepare options for SWFUpload
		var swfUploadSettings = {
			assume_success_timeout   : opts.successTimeout,
			button_placeholder_id    : $wrapper[0].id,
			button_width             : opts.width,
			button_height            : opts.height,
			button_text              : null,
			button_text_style        : null,
			button_text_top_padding  : 0,
			button_text_left_padding : 0,
			button_action            : (opts.multiple ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE),
			button_disabled          : false,
			button_cursor            : (opts.buttonCursor == 'arrow' ? SWFUpload.CURSOR.ARROW : SWFUpload.CURSOR.HAND),
			button_window_mode       : SWFUpload.WINDOW_MODE.TRANSPARENT,
			debug                    : opts.debug,						
			requeue_on_error         : opts.requeueErrors,
			file_post_name           : opts.fileObjName,
			file_size_limit          : opts.maxFileSize,
			file_types               : opts.fileTypeExts,
			file_types_description   : opts.fileTypeDesc,
			file_queue_limit         : opts.queueSizeLimit,
			file_upload_limit        : opts.uploadLimit,
			flash_url                : opts.swf,					
			prevent_swf_caching      : opts.preventCaching,
			post_params              : opts.formData,
			upload_url               : opts.uploader,
			delete_url               : opts.deleteUrl,
			use_query_string         : (opts.method == 'get'),
			
			// Event Handlers 
			swfupload_loaded_handler: opts.onSWFReady,
			file_dialog_complete_handler: this.onDialogClose,
			file_dialog_start_handler: this.onDialogOpen,
			file_queued_handler: function(file){
				that.onSelect.apply(that, [this,file]);
			},
			file_queue_error_handler: function(file, errorCode, errorMsg){
				that.onSelectError.apply(that, [this, file, errorCode, errorMsg]);
			},
			upload_complete_handler: function(file){
				that.onUploadComplete.apply(that, [this,file]);
			},
			upload_error_handler: function(file,errorCode,errorMsg){
				that.onUploadError.apply(that, [this, file, errorCode, errorMsg]);
			},
			upload_progress_handler: function(file, fileBytesLoaded, fileTotalBytes){
				that.onUploadProgress.apply(that, [this, file, fileBytesLoaded, fileTotalBytes]);
			},
			upload_start_handler: function(file){
				that.onUploadStart.apply(that, [this,file]);
			},
			upload_remove_handler: function(file){
				that.onRemove.apply(that, [this,file]);
			},
			upload_success_handler: function(file, data, response){
				that.onUploadSuccess.apply(that, [this, file, data, response]);
			}
		}

		// Merge the user-defined options with the defaults
		if (opts.swfUploadOptions) {
			swfUploadSettings = $.extend(swfUploadSettings, opts.swfUploadOptions);
		}
		// Add the user-defined settings to the swfupload object
		swfUploadSettings = $.extend(swfUploadSettings, opts);
		
		// Detect if Flash is available
		var playerVersion  = swfobject.getFlashPlayerVersion();
		var flashInstalled = (playerVersion.major >= 9);

		if (flashInstalled) {
			// Create the swfUpload instance
			window['swfuploader_' + opts.id] = new SWFUpload(swfUploadSettings);
			var swfuploaderObj = window['swfuploader_' + opts.id];

			// Add the SWFUpload object to the elements data object
			this.element.data('swfuploader', swfuploaderObj);
			// Wrap the instance
			
			$('#' + swfuploaderObj.movieName).wrap($wrapper);
			// Recreate the reference to wrapper
			$wrapper = $('#' + opts.id);
			// Add the data object to the wrapper 
			$wrapper.data('swfuploader', swfuploaderObj);

			/*// Create the button
			var $button = $('<div />', {
				'id'    : opts.id + '-button',
				'class' : 'swfuploader-button ' + opts.buttonClass
			});
			if (opts.buttonImage) {
				$button.css({
					'background-image' : "url('" + opts.buttonImage + "')",
					'text-indent'      : '-9999px'
				});
			}
			$button.html('<span class="swfuploader-button-text">' + opts.buttonText + '</span>')
			.css({
				'height'      : opts.height + 'px',
				'line-height' : opts.height + 'px',
				'width'       : opts.width + 'px'
			});
			// Append the button to the wrapper
			$wrapper.append($button);*/

			// Adjust the styles of the movie
			$('#' + swfuploaderObj.movieName).css({
				'position' : 'absolute',
				'z-index'  : 1
			});
			
			// Create the file queue
			if (!opts.queueID) {
				var $queue = $('<div />', {
					'id'    : opts.id + '-queue',
					'class' : 'swfuploader-queue'
				});
				$wrapper.after($queue);
				swfuploaderObj.settings.queueID      = opts.id + '-queue';
				swfuploaderObj.settings.defaultQueue = true;
			}
			
			// Create some queue related objects and variables
			swfuploaderObj.queueData = {
				files              : {}, // The files in the queue
				filesSelected      : 0, // The number of files selected in the last select operation
				filesQueued        : 0, // The number of files added to the queue in the last select operation
				filesReplaced      : 0, // The number of files replaced in the last select operation
				filesCancelled     : 0, // The number of files that were cancelled instead of replaced
				filesErrored       : 0, // The number of files that caused error in the last select operation
				uploadsSuccessful  : 0, // The number of files that were successfully uploaded
				uploadsErrored     : 0, // The number of files that returned errors during upload
				averageSpeed       : 0, // The average speed of the uploads in KB
				queueLength        : 0, // The number of files in the queue
				queueSize          : 0, // The size in bytes of the entire queue
				uploadSize         : 0, // The size in bytes of the upload queue
				queueBytesUploaded : 0, // The size in bytes that have been uploaded for the current upload queue
				uploadQueue        : [], // The files currently to be uploaded
				errorMsg           : 'Some files were not added to the queue:'
			};

			// Save references to all the objects
			swfuploaderObj.original = $clone;
			swfuploaderObj.wrapper  = $wrapper;
			//swfuploaderObj.button   = $button;
			swfuploaderObj.queue    = $queue;

			// Call the user-defined init event handler
			if (opts.onInit) opts.onInit.call(this.element, swfuploaderObj);

		} else {
			// Call the fallback function
			var uiBorder = opts.onNoflash.call(this.element);
			var warp = $("<div class='coral-uploader-button' style='height: 40px;'></div>").appendTo(uiBorder);
			var button = $("<input type='button'/>").appendTo(warp);
			button.button({
				id : opts.id + '-button',
				label : opts.buttonText,
				onClick : function() {
					alert("没有安装flash或flash版本过低");
				}
			})
			
		}
	},
	addUploadCount: function(){
		var swfuploaderObj = this.element.data('swfuploader');
		swfuploaderObj.addUploadCount();
	},
	reduece: function(fileID){
		var swfuploaderObj = this.element.data('swfuploader'),
			settings = swfuploaderObj.settings;
		if ($('#' + fileID).hasClass("template-download")) {
			swfuploaderObj.reduceUploadCount();
			uploadList = settings.uploadedFileList;
            var values = this.getValues();
            uploadList.splice($.inArray(fileID,values),1); 
		} else if ($('#' + fileID).hasClass("template-upload")) {
			downList = settings.unUploadedFileList;
            var values = this.getUnUploadValues();
            downList.splice($.inArray(fileID,values),1); 
		}
	},
	setValues: function(values) {
		var swfuploaderObj = this.element.data('swfuploader'),
			settings = swfuploaderObj.settings;
		settings.uploadedFileList = values;
	},
	// Stop a file upload and remove it from the queue 
	cancel: function(fileID, supressEvent) {
		var args = arguments,uploadList,downList,
			that = this;
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader'),
			settings = swfuploaderObj.settings,
			delay = -1;
		if(!settings.disabled){
			if (typeof fileID === "array" || typeof fileID === "undefined") {
				// Clear the queue
				if (typeof fileID === "undefined") {
					var queueItemCount = swfuploaderObj.queueData.queueLength;
					$('#' + settings.queueID).children().each(function() {
						delay++;
						if (args[1] === true) {
							swfuploaderObj.cancelUpload(this.id, false);
						} else {
							swfuploaderObj.cancelUpload(this.id);
						}
						$(this).find('.data').removeClass('data');
						var values = that.getValues();
						if($.inArray(this.id,values) != -1){
							var item = $('#' + this.id),
								$item = $(item);
							if($item.data().url && $item.data().url != "undefined"){
								var data = {};
								for(var j = 0; j< settings.uploadedFileList.length; j++){
			                		if(this.id == settings.uploadedFileList[j].fileId){
			                			data.data = settings.uploadedFileList[j];
			                		}
			                	}
								data.dataType = settings.dataType || "json";
								data.url = settings.uploadedFileList[0].fileUrl;
								$.ajax(data).done(function(){
									$item.delay(1000).fadeOut(500, function() {
										$(this).remove();
									});
								})
								that._trigger("onRemove", null,{"fileId":this.id});
							} else {
								$item.delay(1000 + 100 * delay).fadeOut(500, function() {
									$(this).remove();
								});
								that._trigger("onRemove", null,{"fileId":this.id});
							}
							delete swfuploaderObj.queueData.files[this.id];// #CORALIV-727
							that.reduece(this.id);
						}
					});
					swfuploaderObj.queueData.queueSize   = 0;
					swfuploaderObj.queueData.queueLength = 0;
					if (settings.onClearQueue) settings.onClearQueue.call(this.element, queueItemCount);
				} else {
					for (var n = 0; n < args.length; n++) {
						swfuploaderObj.cancelUpload(args[n]);
						$('#' + args[n]).find('.data').removeClass('data');
						//$('#' + args[n]).find('.progress').remove();
						$('#' + args[n]).delay(1000 + 100 * n).fadeOut(500, function() {
							$(this).remove();
						});
						this._trigger("onRemove", null);
						delete swfuploaderObj.queueData.files[args[n]];// #CORALIV-727
						that.reduece(args[n]);
					}
				}
			} else {
				var item = $('#' + fileID);
				$item = $(item);
				swfuploaderObj.cancelUpload($item.attr('id'));
				$item.find('.data').removeClass('data');
				//$item.find('.progress').remove();
				if($item.data().url && $item.data().url != "undefined"){
					var data = {};
					for(var j = 0; j< settings.uploadedFileList.length; j++){
                		if(fileID == settings.uploadedFileList[j].fileId){
                			data.data = settings.uploadedFileList[j];
                		}
                	}
					data.dataType = settings.dataType || "json";
					data.url = $item.data().url;
					$.ajax(data).done(function(){
						$item.delay(1000).fadeOut(500, function() {
							$(this).remove();
						});
					})
				} else {
					$item.delay(1000).fadeOut(500, function() {
						$(this).remove();
					});
				}
				this._trigger("onRemove", null);
				delete swfuploaderObj.queueData.files[fileID];// #CORALIV-727
				if ($('#' + fileID).hasClass("template-download")) {
					swfuploaderObj.reduceUploadCount();
					uploadList = settings.uploadedFileList;
	                var values = this.getValues();
	                uploadList.splice($.inArray(fileID,values),1); 
				} else if ($('#' + fileID).hasClass("template-upload")) {
					downList = settings.unUploadedFileList;
	                var values = this.getUnUploadValues();
	                downList.splice($.inArray(fileID,values),1); 
				}
			}
		}
	},
	// Revert the DOM object back to its original state
	_destroy: function() {
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader'),
			settings     = swfuploaderObj.settings;

		// Destroy the SWF object and 
		swfuploaderObj.destroy();
		this.element.find(".swfuploader").remove();
		// Destroy the queue
		if (settings.uploadedFileList) {
			$('#' + settings.queueID).remove();
		}
		// Reload the original DOM element
		//$('#' + settings.id).replaceWith(swfuploaderObj.original);
		$('#' + settings.id).replaceWith(this.element);
		// Call the user-defined event handler
		if (settings.onDestroy) settings.onDestroy.call(this);

		delete swfuploaderObj;
	},
	// Disable the select button
	disable: function(isDisabled) {
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader'),
			settings     = swfuploaderObj.settings;
		// Call the user-defined event handlers
		if (isDisabled) {
			//swfuploaderObj.button.addClass('disabled');
			$("#" + this.options.queueID).addClass('coral-state-disabled');
			settings.disabled = true;
			//if (settings.onDisable) settings.onDisable.call(this);
			this._trigger("onDisable", null, []);
		} else {
			//swfuploaderObj.button.removeClass('disabled');
			$("#" + this.options.queueID).removeClass('coral-state-disabled');
			settings.disabled = false;
			//if (settings.onEnable) settings.onEnable.call(this);
			this._trigger("onEnable", null, []);
		}
		// Enable/disable the browse button
		swfuploaderObj.setButtonDisabled(isDisabled);
	},
	getQueueData: function(){
    	var valArr1 = [],valArr2 = [];
    	var swfuploaderObj = this.element.data('swfuploader'),
		settings = swfuploaderObj.settings;
    	for(var i = 0; i < settings.uploadedFileList.length; i++){
    		valArr1.push(settings.uploadedFileList[i].fileId);
    	}
    	for(var i = 0; i < settings.unUploadedFileList.length; i++){
    		valArr2.push(settings.unUploadedFileList[i].fileId);
    	}
    	return $.merge(valArr1,valArr2);
    },
	getUnUploadValues: function(){
    	var fileArray = [];
    	var swfuploaderObj = this.element.data('swfuploader'),
			settings = swfuploaderObj.settings;
    	for(var i = 0; i < settings.unUploadedFileList.length; i++){
    		fileArray.push(settings.unUploadedFileList[i].fileId);
    	}
    	return fileArray;
    },
    getValues: function(){
    	var valArr = [];
		var swfuploaderObj = this.element.data('swfuploader'),
			settings = swfuploaderObj.settings;
		for (var i = 0; i < settings.uploadedFileList.length; i++) {
			valArr.push(settings.uploadedFileList[i].fileId);
		}
		return valArr;
    },
	getValue: function(){
		var swfuploaderObj = this.element.data('swfuploader'),
		settings = swfuploaderObj.settings;
    	return this.getValues().join( settings.separator );
    },
    getValidateValue: function(){
    	return this.getValue();
    },
    // Get or set the settings data
    _setOption: function(key, value, resetObjects) {
		var args = arguments;
		var returnValue = value;
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader'),
			settings     = swfuploaderObj.settings;
		this._super( key, value );
		switch (key) {
			case 'uploader':
				swfuploaderObj.setUploadURL(value);
				break;
			case 'formData':
				if (!resetObjects) {
					value = $.extend(settings.formData, value);
				}
				swfuploaderObj.setPostParams(settings.formData);
				break;
			case 'method':
				if (value == 'get') {
					swfuploaderObj.setUseQueryString(true);
				} else {
					swfuploaderObj.setUseQueryString(false);
				}
				break;
			case 'fileObjName':
				swfuploaderObj.setFilePostName(value);
				break;
			case 'fileTypeExts':
				swfuploaderObj.setFileTypes(value, settings.fileTypeDesc);
				break;
			case 'fileTypeDesc':
				swfuploaderObj.setFileTypes(settings.fileTypeExts, value);
				break;
			case 'maxFileSize':
				swfuploaderObj.setFileSizeLimit(value);
				break;
			case 'uploadLimit':
				swfuploaderObj.setFileUploadLimit(value);
				break;
			case 'queueSizeLimit':
				swfuploaderObj.setFileQueueLimit(value);
				break;
			/*case 'buttonImage':
				swfuploaderObj.button.css('background-image', settingValue);
				break;*/
			case 'buttonCursor':
				if (value == 'arrow') {
					swfuploaderObj.setButtonCursor(SWFUpload.CURSOR.ARROW);
				} else {
					swfuploaderObj.setButtonCursor(SWFUpload.CURSOR.HAND);
				}
				break;
			case 'buttonText':
				$('#' + this.options.id + '-button').find('.swfuploader-button-text').html(value);
				break;
			case 'width':
				swfuploaderObj.setButtonDimensions(value, settings.height);
				break;
			case 'height':
				swfuploaderObj.setButtonDimensions(settings.width, value);
				break;
			case 'multiple':
				if (value) {
					swfuploaderObj.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILES);
				} else {
					swfuploaderObj.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILE);
				}
				break;
		}
	},
	// Stop the current uploads and requeue what is in progress
	stop: function() {
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader');

		// Reset the queue information
		swfuploaderObj.queueData.averageSpeed  = 0;
		swfuploaderObj.queueData.uploadSize    = 0;
		swfuploaderObj.queueData.bytesUploaded = 0;
		swfuploaderObj.queueData.uploadQueue   = [];

		swfuploaderObj.stopUpload();
		this._trigger("onStop", null, []);
	},

	// Start uploading files in the queue
	upload: function(fileId) {
		var args = arguments,n;
		// Create a reference to the jQuery DOM object
		var swfuploaderObj = this.element.data('swfuploader'),
			settings     = swfuploaderObj.settings;
		// Reset the queue information
		swfuploaderObj.queueData.averageSpeed  = 0;
		swfuploaderObj.queueData.uploadSize    = 0;
		swfuploaderObj.queueData.bytesUploaded = 0;
		swfuploaderObj.queueData.uploadQueue   = [];
		if(!settings.disabled){
			// Upload the files
			if (args[0] || typeof fileId === "undefined") {
				if (typeof fileId === "undefined") {
					swfuploaderObj.queueData.uploadSize = swfuploaderObj.queueData.queueSize;
					var arr = settings.unUploadedFileList;
					/*for (key in swfuploaderObj.queueData.files) {
						var obj = swfuploaderObj.queueData.files[key];
						if (!obj.error) {
							swfuploaderObj.queueData.uploadQueue.push(obj.id);
							swfuploaderObj.startUpload(swfuploaderObj.queueData.uploadQueue.shift());
						} else {
							swfuploaderObj.queueData.uploadQueue.shift();
						}
					}*/
					swfuploaderObj.queueData.uploadQueue.push('*');
					swfuploaderObj.startUpload();
				} else {
					for (n = 0; n < args.length; n++) {
						//swfuploaderObj.queueData.uploadSize += swfuploaderObj.queueData.files[args[n]].size;
						swfuploaderObj.queueData.uploadQueue.push(args[n]);
					}
					swfuploaderObj.startUpload(swfuploaderObj.queueData.uploadQueue.shift());
				}
			} else {
				swfuploaderObj.startUpload();
			}
		}
	},
	// Triggered when the file dialog is opened
	onDialogOpen: function() {
		// Load the swfupload settings
		var settings = this.settings;

		// Reset some queue info
		this.queueData.errorMsg       = 'Some files were not added to the queue:';
		this.queueData.filesReplaced  = 0;
		this.queueData.filesCancelled = 0;

		// Call the user-defined event handler
		if (settings.onDialogOpen) settings.onDialogOpen.call(this);
	},

	// Triggered when the browse dialog is closed
	onDialogClose:  function(filesSelected, filesQueued, queueLength) {
		// Load the swfupload settings
		var settings = this.settings;

		// Update the queue information
		this.queueData.filesErrored  = filesSelected - filesQueued;
		this.queueData.filesSelected = filesSelected;
		this.queueData.filesQueued   = filesQueued - this.queueData.filesCancelled;
		this.queueData.queueLength   = queueLength;

		// Run the default event handler
		if ($.inArray('onDialogClose', settings.overrideEvents) < 0) {
			if (this.queueData.filesErrored > 0) {
				//alert(this.queueData.errorMsg);
			}
		}

		// Call the user-defined event handler
		if (settings.onDialogClose) settings.onDialogClose.call(this, this.queueData);

		// Upload the files if auto is true
		if (settings.auto) $('#' + settings.id).swfuploader('upload');
	},
	handerSWFEvent: function(){
		
	},
	validateFiles: function(swfObj, file){
		var settings = swfObj.settings;
		if(settings.acceptFileTypes &&
           !(settings.acceptFileTypes.test(file.type) ||
        		   settings.acceptFileTypes.test(file.name))){
			file.error = "The file is not an accepted file type.";
		} else if (file.size > settings.maxFileSize) {
			file.error = "The File is too large.";
		}
		return file.error;
	},
	// Triggered once for each file added to the queue
	onSelect: function(swfObj, file) {
		// Load the swfupload settings
		var settings = swfObj.settings,item,itemHTML;
		
		// Check if a file with the same name exists in the queue
		var queuedFile = {};
		/*for (var n in swfObj.queueData.files) {
			queuedFile = swfObj.queueData.files[n];
			if (queuedFile.uploaded != true && queuedFile.name == file.name) {
				var replaceQueueItem = confirm('The file named "' + file.name + '" is already in the queue.\nDo you want to replace the existing item in the queue?');
				if (!replaceQueueItem) {
					swfObj.cancelUpload(file.id);
					swfObj.queueData.filesCancelled++;
					return false;
				} else {
					$('#' + queuedFile.id).remove();// #CORALIV-727
					delete swfObj.queueData.files[n];
					swfObj.cancelUpload(queuedFile.id);
					swfObj.queueData.filesReplaced++;
				}
			}
		}*/
		// Get the size of the file
		var fileSize = Math.round(file.size / 1024);
		var suffix   = 'KB';
		if (fileSize > 1000) {
			fileSize = Math.round(fileSize / 1000);
			suffix   = 'MB';
		}
		var fileSizeParts = fileSize.toString().split('.');
		fileSize = fileSizeParts[0];
		if (fileSizeParts.length > 1) {
			fileSize += '.' + fileSizeParts[1].substr(0,2);
		}
		fileSize += suffix;
		
		// Truncate the filename if it's too long
		var fileName = file.name;
		if (fileName.length > 25) {
			fileName = fileName.substr(0,25) + '...';
		}
		/*var number = this.getQueueData();
		if(number.length >= settings.filesLimt){
			$.messageQueue( {
                message:"Maximum number of files exceeded:" + settings.filesLimt
            }); 
			return;
		}*/
		// Create the file data object
		itemData = {
			'fileID'     : file.id,
			'instanceID' : settings.id,
			'fileName'   : fileName,
			'fileSize'   : fileSize
		}
		// Run the default event handler
		if ($.inArray('onSelect', settings.overrideEvents) < 0) {
			// Replace the item data in the template
			//file.error = true;
			item = settings.uploadTemplate({
                files: [file],
                options: settings
            });
			for (var d in itemData) {
				item = item.replace(new RegExp('\\$\\{' + d + '\\}', 'g'), itemData[d]);
			}
			// Add the file item to the queue
			item = $(settings.templatesContainer).html(item).children();
			item.addClass("template-upload fade");
			//item.find('.error').text(swfObj.queueData.errorMsg);
			$('#' + settings.queueID).append(item);
			//$('#' + settings.queueID).find('.progress').empty().progressbar();
        	this._trigger("onRenderUploadTmp", null, {"item":item});
		}
		//settings.unUploadedFileList.push(file.id);
		swfObj.queueData.queueSize += file.size;
		swfObj.queueData.files[file.id] = file;
		this._trigger("onSelect", null, [{"file": file}]);
	},

	// Triggered when a file is not added to the queue
	onSelectError : function(swfObj, file, errorCode, errorMsg) {
		// Load the swfupload settings
		var settings = swfObj.settings,itemData,item;
		
		// Run the default event handler
		if ($.inArray('onSelectError', settings.overrideEvents) < 0) {
			switch(errorCode) {
				case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED:
					if (settings.queueSizeLimit > errorMsg) {
						alert('\nThe number of files selected exceeds the remaining upload limit');
					} else {
						//alert( '\nThe number of files selected exceeds the queue size limit');
						$.messageQueue( {
		                    message:settings.messages.maxNumberOfFiles
		                }); 
					}
					break;
				case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
					$.messageQueue( {
	                    message:settings.messages.maxFileSize
	                }); 
					break;
				case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
					swfObj.queueData.errorMsg = '\nThe file "' + file.name + '" is empty.';
					break;
				case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
					$.messageQueue( {
	                    message:settings.messages.acceptFileTypes
	                }); 
					break;
			}
		}
		if (errorCode != SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
			delete swfObj.queueData.files[file.id];
			/*$.messageQueue( {
                message:"Maximum number of files exceeded:" + settings.filesLimt
            }); */
		}
		/*if ($.inArray('onSelectError', settings.overrideEvents) < 0) {
			file.error = true;
			// Replace the item data in the template
			item = settings.uploadTemplate({
                files: [file],
                options: settings
            });
			for (var d in itemData) {
				item = item.replace(new RegExp('\\$\\{' + d + '\\}', 'g'), itemData[d]);
			}
			// Add the file item to the queue
			item = $(settings.templatesContainer).html(item).children();
			item.addClass("template-upload fade");
			$('#' + settings.queueID).append(item);
			$('#' + settings.queueID).find('.progress').empty().progressbar();
        	this._trigger("onRenderUploadTmp", null, {"item":item});
		}
		$("#" + file.id).find('.error').text(swfObj.queueData.errorMsg);*/
		// Call the user-defined event handler
		this._trigger("onSelectError", null, [{
			"file": file,
			"error": errorMsg
		}]);
	},

	// Triggered when all the files in the queue have been processed
	onQueueComplete : function() {
		if (this.settings.onQueueComplete) this.settings.onQueueComplete.call(this, this.settings.queueData);
	},

	// Triggered when a file upload successfully completes
	onUploadComplete : function(swfObj, file) {
		// Load the swfupload settings
		var settings     = swfObj.settings,
			swfuploaderObj = swfObj;

		// Check if all the files have completed uploading
		var stats = swfObj.getStats();
		swfObj.queueData.queueLength = stats.files_queued;
		/*swfObj.queueData.queueLength = '*';*/
		if (swfObj.queueData.uploadQueue[0] == '*') {
			if (swfObj.queueData.queueLength > 0) {
				swfObj.startUpload();
			} else {
				swfObj.queueData.uploadQueue = [];

				// Call the user-defined event handler for queue complete
				if (settings.onQueueComplete) settings.onQueueComplete.call(swfObj, swfObj.queueData);
			}
		} else {
			if (swfObj.queueData.uploadQueue.length > 0) {
				swfObj.startUpload(swfObj.queueData.uploadQueue.shift());
			} else {
				swfObj.queueData.uploadQueue = [];

				// Call the user-defined event handler for queue complete
				if (settings.onQueueComplete) settings.onQueueComplete.call(swfObj, swfObj.queueData);
			}
		}

		// Call the default event handler
		if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {
			if (settings.removeCompleted) {
				switch (file.filestatus) {
					case SWFUpload.FILE_STATUS.COMPLETE:
						setTimeout(function() { 
							if ($('#' + file.id)) {
								swfuploaderObj.queueData.queueSize   -= file.size;
								swfuploaderObj.queueData.queueLength -= 1;
								delete swfuploaderObj.queueData.files[file.id]
								$('#' + file.id).fadeOut(500, function() {
									$(this).remove();
								});
							}
						}, settings.removeTimeout * 1000);
						break;
					case SWFUpload.FILE_STATUS.ERROR:
						if (!settings.requeueErrors) {
							setTimeout(function() {
								if ($('#' + file.id)) {
									swfuploaderObj.queueData.queueSize   -= file.size;
									swfuploaderObj.queueData.queueLength -= 1;
									delete swfuploaderObj.queueData.files[file.id];
									$('#' + file.id).fadeOut(500, function() {
										$(this).remove();
									});
								}
							}, settings.removeTimeout * 1000);
						}
						break;
				}
			} else {
				file.uploaded = true;
			}
		}
		var arrList = settings.unUploadedFileList;
        var values = this.getUnUploadValues();
        arrList.splice($.inArray(file[settings.prmNames.fileId],values),1); 
		// Call the user-defined event handler
		this._trigger("onComplete", null, [{
			"file": file
		}]);
	},

	// Triggered when a file upload returns an error
	onUploadError : function(swfObj, file, errorCode, errorMsg) {
		// Load the swfupload settings
		var settings = swfObj.settings;
		// Set the error string
		var errorString = 'Error';
		switch(errorCode) {
			case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
				errorString = 'HTTP Error (' + errorMsg + ')';
				this._trigger("onFail", null, [{
					"file": file,
					"error": errorMsg
				}]);
				break;
			case SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL:
				errorString = 'Missing Upload URL';
				break;
			case SWFUpload.UPLOAD_ERROR.IO_ERROR:
				errorString = 'IO Error';
				this._trigger("onFail", null, [{
					"file": file,
					"error": errorMsg
				}]);
				break;
			case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
				errorString = 'Security Error';
				this._trigger("onFail", null, [{
					"file": file,
					"error": errorMsg
				}]);
				break;
			case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
				alert('The upload limit has been reached (' + errorMsg + ').');
				errorString = 'Exceeds Upload Limit';
				break;
			case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
				errorString = 'Failed';
				this._trigger("onFail", null, [{
					"file": file,
					"error": errorMsg
				}]);
				break;
			case SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND:
				break;
			case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
				errorString = 'Validation Error';
				break;
			case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
				errorString = 'Cancelled';
				swfObj.queueData.queueSize   -= file.size;
				swfObj.queueData.queueLength -= 1;
				if (file.status == SWFUpload.FILE_STATUS.IN_PROGRESS || $.inArray(file.id, swfObj.queueData.uploadQueue) >= 0) {
					swfObj.queueData.uploadSize -= file.size;
				}
				delete swfObj.queueData.files[file.id];
				break;
			case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
				errorString = 'Stopped';
				this._trigger("onFail", null, [{
					"file": file,
					"error": errorMsg
				}]);
				break;
		}

		// Call the default event handler
		if ($.inArray('onUploadError', settings.overrideEvents) < 0) {

			/*if (errorCode != SWFUpload.UPLOAD_ERROR.FILE_CANCELLED && errorCode != SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED) {
				$('#' + settings.unUploadedFileList[0].fileId).addClass('swfuploader-error');
			}

			// Reset the progress bar
			//$('#' + file.id).find('.swfuploader-progress-bar').css('width','1px');
			$('#' + settings.unUploadedFileList[0].fileId).find('.progress').progressbar("value", 1);

			// Add the error message to the queue item
			if (errorCode != SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND && file.status != SWFUpload.FILE_STATUS.COMPLETE) {
				$('#' + settings.unUploadedFileList[0].fileId).find('.data').html(' - ' + errorString);
			}*/
		}

		var stats = swfObj.getStats();
		swfObj.queueData.uploadsErrored = stats.upload_errors;

		// Call the user-defined event handler
		//this._trigger("onComplete", null, [{"file": file}]);
	},

	// Triggered periodically during a file upload
	onUploadProgress : function(swfObj, file, fileBytesLoaded, fileTotalBytes) {
		// Load the swfupload settings
		var settings = swfObj.settings;

		// Setup all the variables
		var timer            = new Date();
		var newTime          = timer.getTime();
		var lapsedTime       = newTime - swfObj.timer;
		if (lapsedTime > 500) {
			swfObj.timer = newTime;
		}
		var lapsedBytes      = fileBytesLoaded - swfObj.bytesLoaded;
		swfObj.bytesLoaded     = fileBytesLoaded;
		var queueBytesLoaded = swfObj.queueData.queueBytesUploaded + fileBytesLoaded;
		var progress       = Math.round(fileBytesLoaded / fileTotalBytes * 100);
		
		// Calculate the average speed
		var suffix = 'KB/s';
		var mbs = 0;
		var kbs = (lapsedBytes / 1024) / (lapsedTime / 1000);
		    kbs = Math.floor(kbs * 10) / 10;
		if (swfObj.queueData.averageSpeed > 0) {
			swfObj.queueData.averageSpeed = Math.floor((swfObj.queueData.averageSpeed + kbs) / 2);
		} else {
			swfObj.queueData.averageSpeed = Math.floor(kbs);
		}
		if (kbs > 1000) {
			mbs = (kbs * .001);
			swfObj.queueData.averageSpeed = Math.floor(mbs);
			suffix = 'MB/s';
		}
		
		// Call the default event handler
		if ($.inArray('onUploadProgress', settings.overrideEvents) < 0) {
			$('#' + file.id).find('.progressbar-value').show().css("width", progress+"%");
			$('#' + file.id).find('.progressbar-text').text(progress+"%");
		}

		// Call the user-defined event handler
		this._trigger("onProgress", null, [{"file": file}]);
	},

	// Triggered right before a file is uploaded
	onUploadStart : function(swfObj, file) {
		// Load the swfupload settings
		var settings = swfObj.settings;

		var timer        = new Date();
		swfObj.timer       = timer.getTime();
		swfObj.bytesLoaded = 0;
		if (swfObj.queueData.uploadQueue.length == 0) {
			swfObj.queueData.uploadSize = file.size;
		}
		if (settings.checkExisting) {
			$.ajax({
				type    : 'POST',
				async   : false,
				url     : settings.checkExisting,
				data    : {filename: file.name},
				success : function(data) {
					if (data == 1) {
						var overwrite = confirm('A file with the name "' + file.name + '" already exists on the server.\nWould you like to replace the existing file?');
						if (!overwrite) {
							swfObj.cancelUpload(file.id);
							$('#' + file.id).remove();
							if (swfObj.queueData.uploadQueue.length > 0 && swfObj.queueData.queueLength > 0) {
								if (swfObj.queueData.uploadQueue[0] == '*') {
									swfObj.startUpload();
								} else {
									swfObj.startUpload(swfObj.queueData.uploadQueue.shift());
								}
							}
						}
					}
				}
			});
		}

		// Call the user-defined event handler
		this._trigger("onStart", null, [{
			"file": file
		}]);
		this._trigger("onSend", null, [{
			"file": file
		}]);
	},

	// Triggered when a file upload returns a successful code
	onUploadSuccess : function(swfObj, file, data, response) {
		// Load the swfupload settings
		var settings = swfObj.settings,item;
		var stats    = swfObj.getStats(),
			returnVal = JSON.parse(data).files;
		swfObj.queueData.uploadsSuccessful = stats.successful_uploads;
		swfObj.queueData.queueBytesUploaded += file.size;

		// Call the default event handler
		if ($.inArray('onUploadSuccess', settings.overrideEvents) < 0) {
			$('#' + file.id).find('.data').html(' - 上传完成');
		}
		var fileSize = Math.round(file.size / 1024);
		var suffix   = 'KB';
		if (fileSize > 1000) {
			fileSize = Math.round(fileSize / 1000);
			suffix   = 'MB';
		}
		var fileSizeParts = fileSize.toString().split('.');
		fileSize = fileSizeParts[0];
		if (fileSizeParts.length > 1) {
			fileSize += '.' + fileSizeParts[1].substr(0,2);
		}
		fileSize += suffix;
		// Truncate the filename if it's too long
		var fileName = file.name;
		if (fileName.length > 25) {
			fileName = fileName.substr(0,25) + '...';
		}
		if ($.inArray('onSelect', settings.overrideEvents) < 0) {
			// Replace the item data in the template
			item = settings.downloadTemplate({
                files: returnVal,
                options: settings
            });
			for (var d in itemData) {
				item = item.replace(new RegExp('\\$\\{' + d + '\\}', 'g'), itemData[d]);
			}
			if (settings.uploadTemplate){
				item = $(settings.templatesContainer).html(item).children();
				item.addClass("template-download fade");
				$('#' + file.id).replaceWith(item);
			}
			this._trigger("onRenderDownloadTmp", null, {"item":item});
		}
		this._trigger("onSuccess", null, [{"file": returnVal[0]}]);
		//this._trigger("onComplete", null, [{"file": file}]);
	}
});
;


/* jshint nomen:false */
/* global define, require, window, document, location, Blob, FormData */

(function () {
    'use strict';

    // Detect file input support, based on
    // http://viljamis.com/blog/2012/file-upload-support-on-mobile/
    $.support.fileInput = !(new RegExp(
        // Handle devices which give false positives for the feature detection:
        '(Android (1\\.[0156]|2\\.[01]))' +
            '|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +
            '|(w(eb)?OSBrowser)|(webOS)' +
            '|(Kindle/(1\\.0|2\\.[05]|3\\.0))'
    ).test(window.navigator.userAgent) ||
        // Feature detection for all other devices:
        $('<input type="file">').prop('disabled'));

    // The FileReader API is not actually used, but works as feature detection,
    // as some Safari versions (5?) support XHR file uploads via the FormData API,
    // but not non-multipart XHR file uploads.
    // window.XMLHttpRequestUpload is not available on IE10, so we check for
    // window.ProgressEvent instead to detect XHR2 file upload capability:
    $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);
    $.support.xhrFormDataFileUpload = !!window.FormData;

    // Detect support for Blob slicing (required for chunked uploads):
    $.support.blobSlice = window.Blob && (Blob.prototype.slice ||
        Blob.prototype.webkitSlice || Blob.prototype.mozSlice);

    // Helper function to create drag handlers for dragover/dragenter/dragleave:
    function getDragHandler(type) {
        var isDragOver = type === 'dragover';
        return function (e) {
            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
            var dataTransfer = e.dataTransfer;
            if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&
                    this._trigger(
                        type,
                        $.Event(type, {delegatedEvent: e})
                    ) !== false) {
                e.preventDefault();
                if (isDragOver) {
                    dataTransfer.dropEffect = 'copy';
                }
            }
        };
    }

    // The fileupload widget listens for change events on file input fields defined
    // via fileInput setting and paste or drop events of the given dropZone.
    // In addition to the default jQuery Widget methods, the fileupload widget
    // exposes the "add" and "send" methods, to add or directly send files using
    // the fileupload API.
    // By default, files added via file input selection, paste, drag & drop or
    // "add" method are uploaded immediately, but it is possible to override
    // the "add" callback option to queue file uploads.
    $.component('blueimp.fileupload', {

        options: {
            // The drop target element(s), by the default the complete document.
            // Set to null to disable drag & drop support:
            dropZone: $(document),
            // The paste target element(s), by the default undefined.
            // Set to a DOM node or jQuery object to enable file pasting:
            pasteZone: undefined,
            // The file input field(s), that are listened to for change events.
            // If undefined, it is set to the file input fields inside
            // of the widget element on plugin initialization.
            // Set to null to disable the change listener.
            fileInput: undefined,
            // By default, the file input field is replaced with a clone after
            // each input field change event. This is required for iframe transport
            // queues and allows change events to be fired for the same file
            // selection, but can be disabled by setting the following option to false:
            replaceFileInput: true,
            // The parameter name for the file form data (the request argument name).
            // If undefined or empty, the name property of the file input field is
            // used, or "files[]" if the file input name property is also empty,
            // can be a string or an array of strings:
            paramName: undefined,
            // By default, each file of a selection is uploaded using an individual
            // request for XHR type uploads. Set to false to upload file
            // selections in one request each:
            singleFileUploads: true,
            // To limit the number of files uploaded with one XHR request,
            // set the following option to an integer greater than 0:
            limitMultiFileUploads: undefined,
            // The following option limits the number of files uploaded with one
            // XHR request to keep the request size under or equal to the defined
            // limit in bytes:
            limitMultiFileUploadSize: undefined,
            // Multipart file uploads add a number of bytes to each uploaded file,
            // therefore the following option adds an overhead for each file used
            // in the limitMultiFileUploadSize configuration:
            limitMultiFileUploadSizeOverhead: 512,
            // Set the following option to true to issue all file upload requests
            // in a sequential order:
            sequentialUploads: false,
            // To limit the number of concurrent uploads,
            // set the following option to an integer greater than 0:
            limitConcurrentUploads: undefined,
            // Set the following option to true to force iframe transport uploads:
            forceIframeTransport: false,
            // Set the following option to the location of a redirect url on the
            // origin server, for cross-domain iframe transport uploads:
            redirect: undefined,
            // The parameter name for the redirect url, sent as part of the form
            // data and set to 'redirect' if this option is empty:
            redirectParamName: undefined,
            // Set the following option to the location of a postMessage window,
            // to enable postMessage transport uploads:
            postMessage: undefined,
            // By default, XHR file uploads are sent as multipart/form-data.
            // The iframe transport is always using multipart/form-data.
            // Set to false to enable non-multipart XHR uploads:
            multipart: true,
            // To upload large files in smaller chunks, set the following option
            // to a preferred maximum chunk size. If set to 0, null or undefined,
            // or the browser does not support the required Blob API, files will
            // be uploaded as a whole.
            maxChunkSize: undefined,
            // When a non-multipart upload or a chunked multipart upload has been
            // aborted, this option can be used to resume the upload by setting
            // it to the size of the already uploaded bytes. This option is most
            // useful when modifying the options object inside of the "add" or
            // "send" callbacks, as the options are cloned for each file upload.
            uploadedBytes: undefined,
            // By default, failed (abort or error) file uploads are removed from the
            // global progress calculation. Set the following option to false to
            // prevent recalculating the global progress data:
            recalculateProgress: true,
            // Interval in milliseconds to calculate and trigger progress events:
            progressInterval: 100,
            // Interval in milliseconds to calculate progress bitrate:
            bitrateInterval: 500,
            // By default, uploads are started automatically when adding files:
            autoUpload: true,

            // Error and info messages:
            messages: {
                uploadedBytes: 'Uploaded bytes exceed file size'
            },

            // Translation function, gets the message key to be translated
            // and an object with context specific data as arguments:
            i18n: function (message, context) {
                message = this.messages[message] || message.toString();
                if (context) {
                    $.each(context, function (key, value) {
                        message = message.replace('{' + key + '}', value);
                    });
                }
                return message;
            },

            // Additional form data to be sent along with the file uploads can be set
            // using this option, which accepts an array of objects with name and
            // value properties, a function returning such an array, a FormData
            // object (for XHR file uploads), or a simple object.
            // The form of the first fileInput is given as parameter to the function:
            formData: function (form) {
                return form.serializeArray();
            },

            // The add callback is invoked as soon as files are added to the fileupload
            // widget (via file input selection, drag & drop, paste or add API call).
            // If the singleFileUploads option is enabled, this callback will be
            // called once for each file in the selection for XHR file uploads, else
            // once for each file selection.
            //
            // The upload starts when the submit method is invoked on the data parameter.
            // The data object contains a files property holding the added files
            // and allows you to override plugin options as well as define ajax settings.
            //
            // Listeners for this callback can also be bound the following way:
            // .bind('fileuploadadd', func);
            //
            // data.submit() returns a Promise object and allows to attach additional
            // handlers using jQuery's Deferred callbacks:
            // data.submit().done(func).fail(func).always(func);
            add: function (e, data) {
                if (e.isDefaultPrevented()) {
                    return false;
                }
                if (data.autoUpload || (data.autoUpload !== false &&
                        $(this).fileupload('option', 'autoUpload'))) {
                    data.process().done(function () {
                        data.submit();
                    });
                }
            },

            // Other callbacks:

            // Callback for the submit event of each file upload:
            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);

            // Callback for the start of each file upload request:
            // send: function (e, data) {}, // .bind('fileuploadsend', func);

            // Callback for successful uploads:
            // done: function (e, data) {}, // .bind('fileuploaddone', func);

            // Callback for failed (abort or error) uploads:
            // fail: function (e, data) {}, // .bind('fileuploadfail', func);

            // Callback for completed (success, abort or error) requests:
            // always: function (e, data) {}, // .bind('fileuploadalways', func);

            // Callback for upload progress events:
            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);

            // Callback for global upload progress events:
            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);

            // Callback for uploads start, equivalent to the global ajaxStart event:
            // start: function (e) {}, // .bind('fileuploadstart', func);

            // Callback for uploads stop, equivalent to the global ajaxStop event:
            // stop: function (e) {}, // .bind('fileuploadstop', func);

            // Callback for change events of the fileInput(s):
            // change: function (e, data) {}, // .bind('fileuploadchange', func);

            // Callback for paste events to the pasteZone(s):
            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);

            // Callback for drop events of the dropZone(s):
            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);

            // Callback for dragover events of the dropZone(s):
            // dragover: function (e) {}, // .bind('fileuploaddragover', func);

            // Callback for the start of each chunk upload request:
            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);

            // Callback for successful chunk uploads:
            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);

            // Callback for failed (abort or error) chunk uploads:
            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);

            // Callback for completed (success, abort or error) chunk upload requests:
            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);

            // The plugin options are used as settings object for the ajax calls.
            // The following are jQuery ajax settings required for the file uploads:
            processData: false,
            contentType: false,
            cache: false,
            timeout: 0
        },

        // A list of options that require reinitializing event listeners and/or
        // special initialization code:
        _specialOptions: [
            'fileInput',
            'dropZone',
            'pasteZone',
            'multipart',
            'forceIframeTransport'
        ],

        _blobSlice: $.support.blobSlice && function () {
            var slice = this.slice || this.webkitSlice || this.mozSlice;
            return slice.apply(this, arguments);
        },

        _BitrateTimer: function () {
            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());
            this.loaded = 0;
            this.bitrate = 0;
            this.getBitrate = function (now, loaded, interval) {
                var timeDiff = now - this.timestamp;
                if (!this.bitrate || !interval || timeDiff > interval) {
                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;
                    this.loaded = loaded;
                    this.timestamp = now;
                }
                return this.bitrate;
            };
        },

        _isXHRUpload: function (options) {
            return !options.forceIframeTransport &&
                ((!options.multipart && $.support.xhrFileUpload) ||
                $.support.xhrFormDataFileUpload);
        },

        _getFormData: function (options) {
            var formData;
            if ($.type(options.formData) === 'function') {
                return options.formData(options.form);
            }
            if ($.isArray(options.formData)) {
                return options.formData;
            }
            if ($.type(options.formData) === 'object') {
                formData = [];
                $.each(options.formData, function (name, value) {
                    formData.push({name: name, value: value});
                });
                return formData;
            }
            return [];
        },

        _getTotal: function (files) {
            var total = 0;
            $.each(files, function (index, file) {
                total += file.size || 1;
            });
            return total;
        },

        _initProgressObject: function (obj) {
            var progress = {
                loaded: 0,
                total: 0,
                bitrate: 0
            };
            if (obj._progress) {
                $.extend(obj._progress, progress);
            } else {
                obj._progress = progress;
            }
        },

        _initResponseObject: function (obj) {
            var prop;
            if (obj._response) {
                for (prop in obj._response) {
                    if (obj._response.hasOwnProperty(prop)) {
                        delete obj._response[prop];
                    }
                }
            } else {
                obj._response = {};
            }
        },

        _onProgress: function (e, data) {
            if (e.lengthComputable) {
                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),
                    loaded;
                if (data._time && data.progressInterval &&
                        (now - data._time < data.progressInterval) &&
                        e.loaded !== e.total) {
                    return;
                }
                data._time = now;
                loaded = Math.floor(
                    e.loaded / e.total * (data.chunkSize || data._progress.total)
                ) + (data.uploadedBytes || 0);
                // Add the difference from the previously loaded state
                // to the global loaded counter:
                this._progress.loaded += (loaded - data._progress.loaded);
                this._progress.bitrate = this._bitrateTimer.getBitrate(
                    now,
                    this._progress.loaded,
                    data.bitrateInterval
                );
                data._progress.loaded = data.loaded = loaded;
                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(
                    now,
                    loaded,
                    data.bitrateInterval
                );
                // Trigger a custom progress event with a total data property set
                // to the file size(s) of the current upload and a loaded data
                // property calculated accordingly:
                this._trigger(
                    'progress',
                    $.Event('progress', {delegatedEvent: e}),
                    data
                );
                // Trigger a global progress event for all current file uploads,
                // including ajax calls queued for sequential file uploads:
                this._trigger(
                    'progressall',
                    $.Event('progressall', {delegatedEvent: e}),
                    this._progress
                );
            }
        },

        _initProgressListener: function (options) {
            var that = this,
                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();
            // Accesss to the native XHR object is required to add event listeners
            // for the upload progress event:
            if (xhr.upload) {
                $(xhr.upload).bind('progress', function (e) {
                    var oe = e.originalEvent;
                    // Make sure the progress event properties get copied over:
                    e.lengthComputable = oe.lengthComputable;
                    e.loaded = oe.loaded;
                    e.total = oe.total;
                    that._onProgress(e, options);
                });
                options.xhr = function () {
                    return xhr;
                };
            }
        },

        _isInstanceOf: function (type, obj) {
            // Cross-frame instanceof check
            return Object.prototype.toString.call(obj) === '[object ' + type + ']';
        },

        _initXHRData: function (options) {
            var that = this,
                formData,
                file = options.files[0],
                // Ignore non-multipart setting if not supported:
                multipart = options.multipart || !$.support.xhrFileUpload,
                paramName = $.type(options.paramName) === 'array' ?
                    options.paramName[0] : options.paramName;
            options.headers = $.extend({}, options.headers);
            if (options.contentRange) {
                options.headers['Content-Range'] = options.contentRange;
            }
            if (!multipart || options.blob || !this._isInstanceOf('File', file)) {
                options.headers['Content-Disposition'] = 'attachment; filename="' +
                    encodeURI(file.name) + '"';
            }
            if (!multipart) {
                options.contentType = file.type || 'application/octet-stream';
                options.data = options.blob || file;
            } else if ($.support.xhrFormDataFileUpload) {
                if (options.postMessage) {
                    // window.postMessage does not allow sending FormData
                    // objects, so we just add the File/Blob objects to
                    // the formData array and let the postMessage window
                    // create the FormData object out of this array:
                    formData = this._getFormData(options);
                    if (options.blob) {
                        formData.push({
                            name: paramName,
                            value: options.blob
                        });
                    } else {
                        $.each(options.files, function (index, file) {
                            formData.push({
                                name: ($.type(options.paramName) === 'array' &&
                                    options.paramName[index]) || paramName,
                                value: file
                            });
                        });
                    }
                } else {
                    if (that._isInstanceOf('FormData', options.formData)) {
                        formData = options.formData;
                    } else {
                        formData = new FormData();
                        $.each(this._getFormData(options), function (index, field) {
                            formData.append(field.name, field.value);
                        });
                    }
                    if (options.blob) {
                        formData.append(paramName, options.blob, file.name);
                    } else {
                        $.each(options.files, function (index, file) {
                            // This check allows the tests to run with
                            // dummy objects:
                            if (that._isInstanceOf('File', file) ||
                                    that._isInstanceOf('Blob', file)) {
                                formData.append(
                                    ($.type(options.paramName) === 'array' &&
                                        options.paramName[index]) || paramName,
                                    file,
                                    file.uploadName || file.name
                                );
                            }
                        });
                    }
                }
                options.data = formData;
            }
            // Blob reference is not needed anymore, free memory:
            options.blob = null;
        },

        _initIframeSettings: function (options) {
            var targetHost = $('<a></a>').prop('href', options.url).prop('host');
            // Setting the dataType to iframe enables the iframe transport:
            options.dataType = 'iframe ' + (options.dataType || '');
            // The iframe transport accepts a serialized array as form data:
            options.formData = this._getFormData(options);
            // Add redirect url to form data on cross-domain uploads:
            if (options.redirect && targetHost && targetHost !== location.host) {
                options.formData.push({
                    name: options.redirectParamName || 'redirect',
                    value: options.redirect
                });
            }
        },

        _initDataSettings: function (options) {
            if (this._isXHRUpload(options)) {
                if (!this._chunkedUpload(options, true)) {
                    if (!options.data) {
                        this._initXHRData(options);
                    }
                    this._initProgressListener(options);
                }
                if (options.postMessage) {
                    // Setting the dataType to postmessage enables the
                    // postMessage transport:
                    options.dataType = 'postmessage ' + (options.dataType || '');
                }
            } else {
                this._initIframeSettings(options);
            }
        },

        _getParamName: function (options) {
            var fileInput = $(options.fileInput),
                paramName = options.paramName;
            if (!paramName) {
                paramName = [];
                fileInput.each(function () {
                    var input = $(this),
                        name = input.prop('name') || 'files[]',
                        i = (input.prop('files') || [1]).length;
                    while (i) {
                        paramName.push(name);
                        i -= 1;
                    }
                });
                if (!paramName.length) {
                    paramName = [fileInput.prop('name') || 'files[]'];
                }
            } else if (!$.isArray(paramName)) {
                paramName = [paramName];
            }
            return paramName;
        },

        _initFormSettings: function (options) {
            // Retrieve missing options from the input field and the
            // associated form, if available:
            if (!options.form || !options.form.length) {
                options.form = $(options.fileInput.prop('form'));
                // If the given file input doesn't have an associated form,
                // use the default widget file input's form:
                if (!options.form.length) {
                    options.form = $(this.options.fileInput.prop('form'));
                }
            }
            options.paramName = this._getParamName(options);
            if (!options.url) {
                options.url = options.form.prop('action') || location.href;
            }
            // The HTTP request method must be "POST" or "PUT":
            options.type = (options.type ||
                ($.type(options.form.prop('method')) === 'string' &&
                    options.form.prop('method')) || ''
                ).toUpperCase();
            if (options.type !== 'POST' && options.type !== 'PUT' &&
                    options.type !== 'PATCH') {
                options.type = 'POST';
            }
            if (!options.formAcceptCharset) {
                options.formAcceptCharset = options.form.attr('accept-charset');
            }
        },

        _getAJAXSettings: function (data) {
            var options = $.extend({}, this.options, data);
            this._initFormSettings(options);
            this._initDataSettings(options);
            return options;
        },

        // jQuery 1.6 doesn't provide .state(),
        // while jQuery 1.8+ removed .isRejected() and .isResolved():
        _getDeferredState: function (deferred) {
            if (deferred.state) {
                return deferred.state();
            }
            if (deferred.isResolved()) {
                return 'resolved';
            }
            if (deferred.isRejected()) {
                return 'rejected';
            }
            return 'pending';
        },

        // Maps jqXHR callbacks to the equivalent
        // methods of the given Promise object:
        _enhancePromise: function (promise) {
            promise.success = promise.done;
            promise.error = promise.fail;
            promise.complete = promise.always;
            return promise;
        },

        // Creates and returns a Promise object enhanced with
        // the jqXHR methods abort, success, error and complete:
        _getXHRPromise: function (resolveOrReject, context, args) {
            var dfd = $.Deferred(),
                promise = dfd.promise();
            context = context || this.options.context || promise;
            if (resolveOrReject === true) {
                dfd.resolveWith(context, args);
            } else if (resolveOrReject === false) {
                dfd.rejectWith(context, args);
            }
            promise.abort = dfd.promise;
            return this._enhancePromise(promise);
        },

        // Adds convenience methods to the data callback argument:
        _addConvenienceMethods: function (e, data) {
            var that = this,
                getPromise = function (args) {
                    return $.Deferred().resolveWith(that, args).promise();
                };
            data.process = function (resolveFunc, rejectFunc) {
                if (resolveFunc || rejectFunc) {
                    data._processQueue = this._processQueue =
                        (this._processQueue || getPromise([this])).pipe(
                            function () {
                                if (data.errorThrown) {
                                    return $.Deferred()
                                        .rejectWith(that, [data]).promise();
                                }
                                return getPromise(arguments);
                            }
                        ).pipe(resolveFunc, rejectFunc);
                }
                return this._processQueue || getPromise([this]);
            };
            data.submit = function () {
                if (this.state() !== 'pending') {
                    data.jqXHR = this.jqXHR =
                        (that._trigger(
                            'submit',
                            $.Event('submit', {delegatedEvent: e}),
                            this
                        ) !== false) && that._onSend(e, this);
                }
                return this.jqXHR || that._getXHRPromise();
            };
            data.abort = function () {
                if (this.jqXHR) {
                    return this.jqXHR.abort();
                }
                this.errorThrown = 'abort';
                that._trigger('fail', null, this);
                return that._getXHRPromise(false);
            };
            data.state = function () {
                if (this.jqXHR) {
                    return that._getDeferredState(this.jqXHR);
                }
                if (this._processQueue) {
                    return that._getDeferredState(this._processQueue);
                }
            };
            data.processing = function () {
                return !this.jqXHR && this._processQueue && that
                    ._getDeferredState(this._processQueue) === 'pending';
            };
            data.progress = function () {
                return this._progress;
            };
            data.response = function () {
                return this._response;
            };
        },

        // Parses the Range header from the server response
        // and returns the uploaded bytes:
        _getUploadedBytes: function (jqXHR) {
            var range = jqXHR.getResponseHeader('Range'),
                parts = range && range.split('-'),
                upperBytesPos = parts && parts.length > 1 &&
                    parseInt(parts[1], 10);
            return upperBytesPos && upperBytesPos + 1;
        },

        // Uploads a file in multiple, sequential requests
        // by splitting the file up in multiple blob chunks.
        // If the second parameter is true, only tests if the file
        // should be uploaded in chunks, but does not invoke any
        // upload requests:
        _chunkedUpload: function (options, testOnly) {
            options.uploadedBytes = options.uploadedBytes || 0;
            var that = this,
                file = options.files[0],
                fs = file.size,
                ub = options.uploadedBytes,
                mcs = options.maxChunkSize || fs,
                slice = this._blobSlice,
                dfd = $.Deferred(),
                promise = dfd.promise(),
                jqXHR,
                upload;
            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||
                    options.data) {
                return false;
            }
            if (testOnly) {
                return true;
            }
            if (ub >= fs) {
                file.error = options.i18n('uploadedBytes');
                return this._getXHRPromise(
                    false,
                    options.context,
                    [null, 'error', file.error]
                );
            }
            // The chunk upload method:
            upload = function () {
                // Clone the options object for each chunk upload:
                var o = $.extend({}, options),
                    currentLoaded = o._progress.loaded;
                o.blob = slice.call(
                    file,
                    ub,
                    ub + mcs,
                    file.type
                );
                // Store the current chunk size, as the blob itself
                // will be dereferenced after data processing:
                o.chunkSize = o.blob.size;
                // Expose the chunk bytes position range:
                o.contentRange = 'bytes ' + ub + '-' +
                    (ub + o.chunkSize - 1) + '/' + fs;
                // Process the upload data (the blob and potential form data):
                that._initXHRData(o);
                // Add progress listeners for this chunk upload:
                that._initProgressListener(o);
                jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||
                        that._getXHRPromise(false, o.context))
                    .done(function (result, textStatus, jqXHR) {
                        ub = that._getUploadedBytes(jqXHR) ||
                            (ub + o.chunkSize);
                        // Create a progress event if no final progress event
                        // with loaded equaling total has been triggered
                        // for this chunk:
                        if (currentLoaded + o.chunkSize - o._progress.loaded) {
                            that._onProgress($.Event('progress', {
                                lengthComputable: true,
                                loaded: ub - o.uploadedBytes,
                                total: ub - o.uploadedBytes
                            }), o);
                        }
                        options.uploadedBytes = o.uploadedBytes = ub;
                        o.result = result;
                        o.textStatus = textStatus;
                        o.jqXHR = jqXHR;
                        that._trigger('chunkdone', null, o);
                        that._trigger('chunkalways', null, o);
                        if (ub < fs) {
                            // File upload not yet complete,
                            // continue with the next chunk:
                            upload();
                        } else {
                            dfd.resolveWith(
                                o.context,
                                [result, textStatus, jqXHR]
                            );
                        }
                    })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        o.jqXHR = jqXHR;
                        o.textStatus = textStatus;
                        o.errorThrown = errorThrown;
                        that._trigger('chunkfail', null, o);
                        that._trigger('chunkalways', null, o);
                        dfd.rejectWith(
                            o.context,
                            [jqXHR, textStatus, errorThrown]
                        );
                    });
            };
            this._enhancePromise(promise);
            promise.abort = function () {
                return jqXHR.abort();
            };
            upload();
            return promise;
        },

        _beforeSend: function (e, data) {
            if (this._active === 0) {
                // the start callback is triggered when an upload starts
                // and no other uploads are currently running,
                // equivalent to the global ajaxStart event:
                this._trigger('start');
                // Set timer for global bitrate progress calculation:
                this._bitrateTimer = new this._BitrateTimer();
                // Reset the global progress values:
                this._progress.loaded = this._progress.total = 0;
                this._progress.bitrate = 0;
            }
            // Make sure the container objects for the .response() and
            // .progress() methods on the data object are available
            // and reset to their initial state:
            this._initResponseObject(data);
            this._initProgressObject(data);
            data._progress.loaded = data.loaded = data.uploadedBytes || 0;
            data._progress.total = data.total = this._getTotal(data.files) || 1;
            data._progress.bitrate = data.bitrate = 0;
            this._active += 1;
            // Initialize the global progress values:
            this._progress.loaded += data.loaded;
            this._progress.total += data.total;
        },

        _onDone: function (result, textStatus, jqXHR, options) {
            var total = options._progress.total,
                response = options._response;
            if (options._progress.loaded < total) {
                // Create a progress event if no final progress event
                // with loaded equaling total has been triggered:
                this._onProgress($.Event('progress', {
                    lengthComputable: true,
                    loaded: total,
                    total: total
                }), options);
            }
            response.result = options.result = result;
            response.textStatus = options.textStatus = textStatus;
            response.jqXHR = options.jqXHR = jqXHR;
            this._trigger('done', null, options);
        },

        _onFail: function (jqXHR, textStatus, errorThrown, options) {
            var response = options._response;
            if (options.recalculateProgress) {
                // Remove the failed (error or abort) file upload from
                // the global progress calculation:
                this._progress.loaded -= options._progress.loaded;
                this._progress.total -= options._progress.total;
            }
            response.jqXHR = options.jqXHR = jqXHR;
            response.textStatus = options.textStatus = textStatus;
            response.errorThrown = options.errorThrown = errorThrown;
            this._trigger('fail', null, options);
        },

        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {
            // jqXHRorResult, textStatus and jqXHRorError are added to the
            // options object via done and fail callbacks
            this._trigger('always', null, options);
        },

        _onSend: function (e, data) {
            if (!data.submit) {
                this._addConvenienceMethods(e, data);
            }
            var that = this,
                jqXHR,
                aborted,
                slot,
                pipe,
                options = that._getAJAXSettings(data),
                send = function () {
                    that._sending += 1;
                    // Set timer for bitrate progress calculation:
                    options._bitrateTimer = new that._BitrateTimer();
                    jqXHR = jqXHR || (
                        ((aborted || that._trigger(
                            'send',
                            $.Event('send', {delegatedEvent: e}),
                            options
                        ) === false) &&
                        that._getXHRPromise(false, options.context, aborted)) ||
                        that._chunkedUpload(options) || $.ajax(options)
                    ).done(function (result, textStatus, jqXHR) {
                        that._onDone(result, textStatus, jqXHR, options);
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        that._onFail(jqXHR, textStatus, errorThrown, options);
                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {
                        that._onAlways(
                            jqXHRorResult,
                            textStatus,
                            jqXHRorError,
                            options
                        );
                        that._sending -= 1;
                        that._active -= 1;
                        if (options.limitConcurrentUploads &&
                                options.limitConcurrentUploads > that._sending) {
                            // Start the next queued upload,
                            // that has not been aborted:
                            var nextSlot = that._slots.shift();
                            while (nextSlot) {
                                if (that._getDeferredState(nextSlot) === 'pending') {
                                    nextSlot.resolve();
                                    break;
                                }
                                nextSlot = that._slots.shift();
                            }
                        }
                        if (that._active === 0) {
                            // The stop callback is triggered when all uploads have
                            // been completed, equivalent to the global ajaxStop event:
                            that._trigger('stop');
                        }
                    });
                    return jqXHR;
                };
            this._beforeSend(e, options);
            if (this.options.sequentialUploads ||
                    (this.options.limitConcurrentUploads &&
                    this.options.limitConcurrentUploads <= this._sending)) {
                if (this.options.limitConcurrentUploads > 1) {
                    slot = $.Deferred();
                    this._slots.push(slot);
                    pipe = slot.pipe(send);
                } else {
                    this._sequence = this._sequence.pipe(send, send);
                    pipe = this._sequence;
                }
                // Return the piped Promise object, enhanced with an abort method,
                // which is delegated to the jqXHR object of the current upload,
                // and jqXHR callbacks mapped to the equivalent Promise methods:
                pipe.abort = function () {
                    aborted = [undefined, 'abort', 'abort'];
                    if (!jqXHR) {
                        if (slot) {
                            slot.rejectWith(options.context, aborted);
                        }
                        return send();
                    }
                    return jqXHR.abort();
                };
                return this._enhancePromise(pipe);
            }
            return send();
        },

        _onAdd: function (e, data) {
            var that = this,
                result = true,
                options = $.extend({}, this.options, data),
                files = data.files,
                filesLength = files.length,
                limit = options.limitMultiFileUploads,
                limitSize = options.limitMultiFileUploadSize,
                overhead = options.limitMultiFileUploadSizeOverhead,
                batchSize = 0,
                paramName = this._getParamName(options),
                paramNameSet,
                paramNameSlice,
                fileSet,
                i,
                j = 0;
            if (!filesLength) {
                return false;
            }
            if (limitSize && files[0].size === undefined) {
                limitSize = undefined;
            }
            if (!(options.singleFileUploads || limit || limitSize) ||
                    !this._isXHRUpload(options)) {
                fileSet = [files];
                paramNameSet = [paramName];
            } else if (!(options.singleFileUploads || limitSize) && limit) {
                fileSet = [];
                paramNameSet = [];
                for (i = 0; i < filesLength; i += limit) {
                    fileSet.push(files.slice(i, i + limit));
                    paramNameSlice = paramName.slice(i, i + limit);
                    if (!paramNameSlice.length) {
                        paramNameSlice = paramName;
                    }
                    paramNameSet.push(paramNameSlice);
                }
            } else if (!options.singleFileUploads && limitSize) {
                fileSet = [];
                paramNameSet = [];
                for (i = 0; i < filesLength; i = i + 1) {
                    batchSize += files[i].size + overhead;
                    if (i + 1 === filesLength ||
                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||
                            (limit && i + 1 - j >= limit)) {
                        fileSet.push(files.slice(j, i + 1));
                        paramNameSlice = paramName.slice(j, i + 1);
                        if (!paramNameSlice.length) {
                            paramNameSlice = paramName;
                        }
                        paramNameSet.push(paramNameSlice);
                        j = i + 1;
                        batchSize = 0;
                    }
                }
            } else {
                paramNameSet = paramName;
            }
            data.originalFiles = files;
            $.each(fileSet || files, function (index, element) {
                var newData = $.extend({}, data);
                newData.files = fileSet ? element : [element];
                newData.paramName = paramNameSet[index];
                that._initResponseObject(newData);
                that._initProgressObject(newData);
                that._addConvenienceMethods(e, newData);
                result = that._trigger(
                    'add',
                    $.Event('add', {delegatedEvent: e}),
                    newData
                );
                return result;
            });
            return result;
        },

        _replaceFileInput: function (data) {
            var input = data.fileInput,
                inputClone = input.clone(true),
                restoreFocus = input.is(document.activeElement);
            // Add a reference for the new cloned file input to the data argument:
            data.fileInputClone = inputClone;
            $('<form></form>').append(inputClone)[0].reset();
            // Detaching allows to insert the fileInput on another form
            // without loosing the file input value:
            input.after(inputClone).detach();
            // If the fileInput had focus before it was detached,
            // restore focus to the inputClone.
            if (restoreFocus) {
                inputClone.focus();
            }
            // Avoid memory leaks with the detached file input:
            $.cleanData(input.unbind('remove'));
            // Replace the original file input element in the fileInput
            // elements set with the clone, which has been copied including
            // event handlers:
            this.options.fileInput = this.options.fileInput.map(function (i, el) {
                if (el === input[0]) {
                    return inputClone[0];
                }
                return el;
            });
            // If the widget has been initialized on the file input itself,
            // override this.element with the file input clone:
            if (input[0] === this.element[0]) {
                this.element = inputClone;
            }
        },

        _handleFileTreeEntry: function (entry, path) {
            var that = this,
                dfd = $.Deferred(),
                errorHandler = function (e) {
                    if (e && !e.entry) {
                        e.entry = entry;
                    }
                    // Since $.when returns immediately if one
                    // Deferred is rejected, we use resolve instead.
                    // This allows valid files and invalid items
                    // to be returned together in one set:
                    dfd.resolve([e]);
                },
                successHandler = function (entries) {
                    that._handleFileTreeEntries(
                        entries,
                        path + entry.name + '/'
                    ).done(function (files) {
                        dfd.resolve(files);
                    }).fail(errorHandler);
                },
                readEntries = function () {
                    dirReader.readEntries(function (results) {
                        if (!results.length) {
                            successHandler(entries);
                        } else {
                            entries = entries.concat(results);
                            readEntries();
                        }
                    }, errorHandler);
                },
                dirReader, entries = [];
            path = path || '';
            if (entry.isFile) {
                if (entry._file) {
                    // Workaround for Chrome bug #149735
                    entry._file.relativePath = path;
                    dfd.resolve(entry._file);
                } else {
                    entry.file(function (file) {
                        file.relativePath = path;
                        dfd.resolve(file);
                    }, errorHandler);
                }
            } else if (entry.isDirectory) {
                dirReader = entry.createReader();
                readEntries();
            } else {
                // Return an empy list for file system items
                // other than files or directories:
                dfd.resolve([]);
            }
            return dfd.promise();
        },

        _handleFileTreeEntries: function (entries, path) {
            var that = this;
            return $.when.apply(
                $,
                $.map(entries, function (entry) {
                    return that._handleFileTreeEntry(entry, path);
                })
            ).pipe(function () {
                return Array.prototype.concat.apply(
                    [],
                    arguments
                );
            });
        },

        _getDroppedFiles: function (dataTransfer) {
            dataTransfer = dataTransfer || {};
            var items = dataTransfer.items;
            if (items && items.length && (items[0].webkitGetAsEntry ||
                    items[0].getAsEntry)) {
                return this._handleFileTreeEntries(
                    $.map(items, function (item) {
                        var entry;
                        if (item.webkitGetAsEntry) {
                            entry = item.webkitGetAsEntry();
                            if (entry) {
                                // Workaround for Chrome bug #149735:
                                entry._file = item.getAsFile();
                            }
                            return entry;
                        }
                        return item.getAsEntry();
                    })
                );
            }
            return $.Deferred().resolve(
                $.makeArray(dataTransfer.files)
            ).promise();
        },

        _getSingleFileInputFiles: function (fileInput) {
            fileInput = $(fileInput);
            var entries = fileInput.prop('webkitEntries') ||
                    fileInput.prop('entries'),
                files,
                value;
            if (entries && entries.length) {
                return this._handleFileTreeEntries(entries);
            }
            files = $.makeArray(fileInput.prop('files'));
            if (!files.length) {
                value = fileInput.prop('value');
                if (!value) {
                    return $.Deferred().resolve([]).promise();
                }
                // If the files property is not available, the browser does not
                // support the File API and we add a pseudo File object with
                // the input value as name with path information removed:
                files = [{name: value.replace(/^.*\\/, '')}];
            } else if (files[0].name === undefined && files[0].fileName) {
                // File normalization for Safari 4 and Firefox 3:
                $.each(files, function (index, file) {
                    file.name = file.fileName;
                    file.size = file.fileSize;
                });
            }
            return $.Deferred().resolve(files).promise();
        },

        _getFileInputFiles: function (fileInput) {
            if (!(fileInput instanceof $) || fileInput.length === 1) {
                return this._getSingleFileInputFiles(fileInput);
            }
            return $.when.apply(
                $,
                $.map(fileInput, this._getSingleFileInputFiles)
            ).pipe(function () {
                return Array.prototype.concat.apply(
                    [],
                    arguments
                );
            });
        },

        _onChange: function (e) {
            var that = this,
                data = {
                    fileInput: $(e.target),
                    form: $(e.target.form)
                };
            this._getFileInputFiles(data.fileInput).always(function (files) {
                data.files = files;
                if (that.options.replaceFileInput) {
                    that._replaceFileInput(data);
                }
                if (that._trigger(
                        'change',
                        $.Event('change', {delegatedEvent: e}),
                        data
                    ) !== false) {
                    that._onAdd(e, data);
                }
            });
        },

        _onPaste: function (e) {
            var items = e.originalEvent && e.originalEvent.clipboardData &&
                    e.originalEvent.clipboardData.items,
                data = {files: []};
            if (items && items.length) {
                $.each(items, function (index, item) {
                    var file = item.getAsFile && item.getAsFile();
                    if (file) {
                        data.files.push(file);
                    }
                });
                if (this._trigger(
                        'paste',
                        $.Event('paste', {delegatedEvent: e}),
                        data
                    ) !== false) {
                    this._onAdd(e, data);
                }
            }
        },

        _onDrop: function (e) {
            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;
            var that = this,
                dataTransfer = e.dataTransfer,
                data = {};
            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                e.preventDefault();
                this._getDroppedFiles(dataTransfer).always(function (files) {
                    data.files = files;
                    if (that._trigger(
                            'drop',
                            $.Event('drop', {delegatedEvent: e}),
                            data
                        ) !== false) {
                        that._onAdd(e, data);
                    }
                });
            }
        },

        _onDragOver: getDragHandler('dragover'),

        _onDragEnter: getDragHandler('dragenter'),

        _onDragLeave: getDragHandler('dragleave'),

        _initEventHandlers: function () {
            if (this._isXHRUpload(this.options)) {
                this._on(this.options.dropZone, {
                    dragover: this._onDragOver,
                    drop: this._onDrop,
                    // event.preventDefault() on dragenter is required for IE10+:
                    dragenter: this._onDragEnter,
                    // dragleave is not required, but added for completeness:
                    dragleave: this._onDragLeave
                });
                this._on(this.options.pasteZone, {
                    paste: this._onPaste
                });
            }
            if ($.support.fileInput) {
                this._on(this.options.fileInput, {
                    change: this._onChange
                });
            }
        },

        _destroyEventHandlers: function () {
            this._off(this.options.dropZone, 'dragenter dragleave dragover drop');
            this._off(this.options.pasteZone, 'paste');
            this._off(this.options.fileInput, 'change');
        },

        _setOption: function (key, value) {
            var reinit = $.inArray(key, this._specialOptions) !== -1;
            if (reinit) {
                this._destroyEventHandlers();
            }
            this._super(key, value);
            if (reinit) {
                this._initSpecialOptions();
                this._initEventHandlers();
            }
        },

        _initSpecialOptions: function () {
            var options = this.options;
            if (options.fileInput === undefined) {
                options.fileInput = this.element.is('input[type="file"]') ?
                        this.element : this.element.find('input[type="file"]');
            } else if (!(options.fileInput instanceof $)) {
                options.fileInput = $(options.fileInput);
            }
            if (!(options.dropZone instanceof $)) {
                options.dropZone = $(options.dropZone);
            }
            if (!(options.pasteZone instanceof $)) {
                options.pasteZone = $(options.pasteZone);
            }
        },

        _getRegExp: function (str) {
            var parts = str.split('/'),
                modifiers = parts.pop();
            parts.shift();
            return new RegExp(parts.join('/'), modifiers);
        },

        _isRegExpOption: function (key, value) {
            return key !== 'url' && $.type(value) === 'string' &&
                /^\/.*\/[igm]{0,3}$/.test(value);
        },

        _initDataAttributes: function () {
            var that = this,
                options = this.options,
                data = this.element.data();
            // Initialize options set via HTML5 data-attributes:
            $.each(
                this.element[0].attributes,
                function (index, attr) {
                    var key = attr.name.toLowerCase(),
                        value;
                    if (/^data-/.test(key)) {
                        // Convert hyphen-ated key to camelCase:
                        key = key.slice(5).replace(/-[a-z]/g, function (str) {
                            return str.charAt(1).toUpperCase();
                        });
                        value = data[key];
                        if (that._isRegExpOption(key, value)) {
                            value = that._getRegExp(value);
                        }
                        options[key] = value;
                    }
                }
            );
        },

        _create: function () {
            this._initDataAttributes();
            this._initSpecialOptions();
            this._slots = [];
            this._sequence = this._getXHRPromise(true);
            this._sending = this._active = 0;
            this._initProgressObject(this);
            this._initEventHandlers();
        },

        // This method is exposed to the widget API and allows to query
        // the number of active uploads:
        active: function () {
            return this._active;
        },

        // This method is exposed to the widget API and allows to query
        // the widget upload progress.
        // It returns an object with loaded, total and bitrate properties
        // for the running uploads:
        progress: function () {
            return this._progress;
        },

        // This method is exposed to the widget API and allows adding files
        // using the fileupload API. The data parameter accepts an object which
        // must have a files property and can contain additional options:
        // .fileupload('add', {files: filesList});
        add: function (data) {
            var that = this;
            if (!data || this.options.disabled) {
                return;
            }
            if (data.fileInput && !data.files) {
                this._getFileInputFiles(data.fileInput).always(function (files) {
                    data.files = files;
                    that._onAdd(null, data);
                });
            } else {
                data.files = $.makeArray(data.files);
                this._onAdd(null, data);
            }
        },

        // This method is exposed to the widget API and allows sending files
        // using the fileupload API. The data parameter accepts an object which
        // must have a files or fileInput property and can contain additional options:
        // .fileupload('send', {files: filesList});
        // The method returns a Promise object for the file upload call.
        send: function (data) {
            if (data && !this.options.disabled) {
                if (data.fileInput && !data.files) {
                    var that = this,
                        dfd = $.Deferred(),
                        promise = dfd.promise(),
                        jqXHR,
                        aborted;
                    promise.abort = function () {
                        aborted = true;
                        if (jqXHR) {
                            return jqXHR.abort();
                        }
                        dfd.reject(null, 'abort', 'abort');
                        return promise;
                    };
                    this._getFileInputFiles(data.fileInput).always(
                        function (files) {
                            if (aborted) {
                                return;
                            }
                            if (!files.length) {
                                dfd.reject();
                                return;
                            }
                            data.files = files;
                            jqXHR = that._onSend(null, data);
                            jqXHR.then(
                                function (result, textStatus, jqXHR) {
                                    dfd.resolve(result, textStatus, jqXHR);
                                },
                                function (jqXHR, textStatus, errorThrown) {
                                    dfd.reject(jqXHR, textStatus, errorThrown);
                                }
                            );
                        }
                    );
                    return this._enhancePromise(promise);
                }
                data.files = $.makeArray(data.files);
                if (data.files.length) {
                    return this._onSend(null, data);
                }
            }
            return this._getXHRPromise(false, data && data.context);
        }

    });
})();
;


/* jshint nomen:false */
/* global define, require, window */
(function () {
    'use strict';

    var originalAdd = $.blueimp.fileupload.prototype.options.add;

    // The File Upload Processing plugin extends the fileupload widget
    // with file processing functionality:
    $.component('blueimp.fileupload', $.blueimp.fileupload, {

        options: {
            // The list of processing actions:
            processQueue: [
                /*
                {
                    action: 'log',
                    type: 'debug'
                }
                */
            ],
            add: function (e, data) {
                var $this = $(this);
                data.process(function () {
                    return $this.fileupload('process', data);
                });
                originalAdd.call(this, e, data);
            }
        },

        processActions: {
            /*
            log: function (data, options) {
                console[options.type](
                    'Processing "' + data.files[data.index].name + '"'
                );
            }
            */
        },

        _processFile: function (data, originalData) {
            var that = this,
                dfd = $.Deferred().resolveWith(that, [data]),
                chain = dfd.promise();
            this._trigger('process', null, data);
            $.each(data.processQueue, function (i, settings) {
                var func = function (data) {
                    if (originalData.errorThrown) {
                        return $.Deferred()
                                .rejectWith(that, [originalData]).promise();
                    }
                    return that.processActions[settings.action].call(
                        that,
                        data,
                        settings
                    );
                };
                chain = chain.pipe(func, settings.always && func);
            });
            chain
                .done(function () {
                    that._trigger('onProcessDone', null, data);
                    that._trigger('onProcessAlways', null, data);
                })
                .fail(function () {
                    that._trigger('onProcessFail', null, data);
                    that._trigger('onProcessAlways', null, data);
                });
            return chain;
        },

        // Replaces the settings of each processQueue item that
        // are strings starting with an "@", using the remaining
        // substring as key for the option map,
        // e.g. "@autoUpload" is replaced with options.autoUpload:
        _transformProcessQueue: function (options) {
            var processQueue = [];
            $.each(options.processQueue, function () {
                var settings = {},
                    action = this.action,
                    prefix = this.prefix === true ? action : this.prefix;
                $.each(this, function (key, value) {
                    if ($.type(value) === 'string' &&
                            value.charAt(0) === '@') {
                        settings[key] = options[
                            value.slice(1) || (prefix ? prefix +
                                key.charAt(0).toUpperCase() + key.slice(1) : key)
                        ];
                    } else {
                        settings[key] = value;
                    }

                });
                processQueue.push(settings);
            });
            options.processQueue = processQueue;
        },

        // Returns the number of files currently in the processsing queue:
        processing: function () {
            return this._processing;
        },

        // Processes the files given as files property of the data parameter,
        // returns a Promise object that allows to bind callbacks:
        process: function (data) {
            var that = this,
                options = $.extend({}, this.options, data);
            if (options.processQueue && options.processQueue.length) {
                this._transformProcessQueue(options);
                if (this._processing === 0) {
                    this._trigger('onProcessStart');
                }
                $.each(data.files, function (index) {
                    var opts = index ? $.extend({}, options) : options,
                        func = function () {
                            if (data.errorThrown) {
                                return $.Deferred()
                                        .rejectWith(that, [data]).promise();
                            }
                            return that._processFile(opts, data);
                        };
                    opts.index = index;
                    that._processing += 1;
                    that._processingQueue = that._processingQueue.pipe(func, func)
                        .always(function () {
                            that._processing -= 1;
                            if (that._processing === 0) {
                                that._trigger('onProcessStop');
                            }
                        });
                });
            }
            return this._processingQueue;
        },

        _create: function () {
            this._super();
            this._processing = 0;
            this._processingQueue = $.Deferred().resolveWith(this)
                .promise();
        }

    });

})();
;

/* jshint nomen:false */
/* global define, require, window */

(function () {
    'use strict';

    $.blueimp.fileupload.prototype._specialOptions.push(
        'filesContainer',
        'uploadTemplateId',
        'downloadTemplateId'
    );
    $.component('blueimp.fileupload', $.blueimp.fileupload, {
    	getUnUploadValues: function(){
        	var fileArray = [];
        	for(var i = 0; i < this.options.unUploadedFileList.length; i++){
        		fileArray.push(this.options.unUploadedFileList[i][this.options.prmNames.fileId]);
        	}
        	return fileArray;
        },
        remove: function(ids){
        	var that = this;
        	function clear(id){
        		var data = $("#"+ id).data('data');
        		if ($("#"+ id).hasClass("template-download")) {
        			that._trigger('remove', null, $.extend({
    					context: $("#"+ id),
    					id: id,
    					type: 'DELETE'
    				}, $("#"+ id).data()));
    			} else if ($("#"+ id).hasClass("template-upload")) {
    				if (data.abort) {
    	                data.abort();
    	            } else {
    	                data.errorThrown = 'abort';
    	                that._trigger('fail', null, $.extend({
    	                	context: $("#"+ id),
    	                	type: 'DELETE'
    	                }, data));
    	            }
    			}
        	}
        	if(ids === undefined){
        		this.options.filesContainer.children().each(function(){
        			clear(this.id);
        		});
        	} else if($.isArray(ids)) {
        		for(var i = 0; i < ids.length; i++){
        			clear(ids[i]);
        		}
        	}else{
        		clear(ids);
        	}
        	this._trigger('onDelete', null);
        },
        destroy: function () {
            this.element
                .find('.fileupload-buttonbar')
                .find('.fileinput-button').each(function () {
                    var input = $(this).find('input:file').detach();
                    $(this)
                        .button('destroy')
                        .append(input);
                });
            this.element.find(".ctrl-init-button").remove();
            this.options.filesContainer.remove();
               /* .end().find('.start')
                .button('destroy')
                .end().find('.cancel')
                .button('destroy')
                .end().find('.delete')
                .button('destroy')
                .end().find('.progress').progressbar('destroy');*/
            this._super();
        },
        upload: function(ids){
        	if($.isArray(ids)){
        		for(var i = 0; i < ids.length; i++){
    				var data = $("#"+ ids[i]).data('data');
    				if (data && data.submit) {
    					data.submit();
    				}
    			}
        	} else {
        		var data = $("#"+ ids).data('data');
				if (data && data.submit) {
					data.submit();
				}
        	}
        }
    });
    // The UI version extends the file upload widget
    // and adds complete user interface interaction:
    $.component('coral.fileuploader', {
    	castProperties : ["triggers", "uploadBtnOptions", "formData"],    	
    	checkIE: function(){
    		var v = 3, div = document.createElement('div'), all = div.getElementsByTagName('i');
    		while (
				div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
				all[0]
    		);
    		return v > 4 ? v : false ;
    	},
    	options: {
    		 prmNames:{ fileName: "name", fileSize: "size", fileURL: "url", fileError: "error", fileId: "id",filetype:"type",fileDate:"date",thumbnailUrl:"thumbnailUrl"},
    		 focus: null,
             clearError: null,
    		 triggers: null,
    		 postData: {},
    		 autoUpload: false,
    		 removeCompleted: false,
    		 maxFileSize: "5012kb",
    		 minFileSize: "0kb",
             separator:',',
             filesUrl: null,
             filesLimt: 9999 ,
             multiple: 'multiple',
             uploadBtnOptions:{
            	icons: "",
 				label: "+"
             }
    	},
        _getConfig: function() {
        	var config,
        		$t = this;
        	var version = this.checkIE();
			var options = this.options;
			if (!options.queueID) {
			 	options.queueID = this.element[0].id +'_queueID';
			 	options.filesContainer = $('<ul/>', {
					'class': 'files',
					'id': options.queueID
			 	});
			 	this.element.before(options.filesContainer);
			} else {
			    options.filesContainer = $("#"+options.queueID);
			    options.filesContainer.addClass("files");
			}
			if (options.queueMode == "list") {
				options.filesContainer.addClass("list-files");
			}
			if (options.queueMode == "card") {
				options.filesContainer.addClass("card-files");
			}
			if (options.queueMode !== "card" && options.queueMode !== "list") {
				options.filesContainer.addClass(options.queueMode);
			}
			
			options.templatesContainer = this.document[0].createElement(
	            options.filesContainer.prop('nodeName')
	        );
			var p = {
				uploadTmp : function(files) {
					var error,itemHTML;
					if(files.fileError){
						error = '<div class="fileError"><span class="error"></span></div>';
					}else{
						error = "";
					}
					itemHTML = '<li id="{{fileId}}" class="fileItem"><div class="fileContent">' +
					'<span class="fileThumb">{{fileType}}</span>' +
					'<div class="progress"><div class="progressbar-value"></div></div>' +
					'<span class="fileName" title="{{fileName}}">{{fileName}}</span>' +
					'<span class="fileSize">({{fileSize}})k</span>' + 
					'<span class="fileAction">' +
					'<span class="progressbar-text"></span>' + 
					'<span class="upload cui-icon-plus-circle2"></span>' +
					'<span class="remove cui-icon-minus-circle2"></span>' +  
					'</span>' + error +
					'</div></li>';
					return itemHTML;
				},
				uploadTemplate : function(o){
					var randomId = "fileId_" + new Date().getTime();
					var prm = o.options.prmNames;
					o.options.unUploadedFileList = o.options.unUploadedFileList || [];
					var	autoUpload = o.options.autoUpload,isAuto,itemHTML,
					itemData = {
							'fileName': o.files[0][prm.fileName],
							'fileSize': o.files[0][prm.fileSize],
							'fileId': o.files[0][prm.fileId] || randomId,
							'fileError': o.files[0][prm.fileError],
							'fileType': o.files[0][prm.filetype],
							'fileDate': o.files[0][prm.fileDate]
					}; 
					o.files[0].id = itemData.fileId;
					itemData.fileType = itemData.fileName.substring(itemData.fileName.lastIndexOf(".") + 1);
					//$.extend(itemData, o.files[0]);
					o.options.unUploadedFileList.push(itemData);
					if(!autoUpload){
						isAuto = "disabled";
					}
					itemHTML = o.options.uploadTmp(itemData);
					for (var d in itemData) {
						itemHTML = itemHTML.replace(new RegExp('\\{\\{' + d + '\\}\\}', 'g'), itemData[d]);
					}
					//itemData.elementId = this.element[0].id;
					return itemHTML;
				},
				downloadTmp : function(files) {
					var error,itemHTML,str='',arr=[];
					if(files.fileError){
						error = '<div class="fileError"><span class="error"></span>{{fileError}}</div>';
					}else{
						error = "";
					}
					if(files.thumbnailUrl){
						str = '<span class="fileThumb"> <img src= "{{thumbnailUrl}}"></span>';
					} else {
						str = '<span class="fileThumb">{{fileType}}</span>';
					}
					itemHTML = '<li id="{{fileId}}" data-url="{{fileUrl}}" class="fileItem"><div class="fileContent">' +
					str +
					'<div class="progress"><div class="progressbar-value"></div></div>' +
					'<span class="fileName">' + 
					'<a href="javascript:void(0)" title="{{fileName}}" download="{{fileName}}">{{fileName}}</a>' +
					'</span>' + 
					'<span class="fileSize">({{fileSize}})k</span>' + 
					'<span class="remove cui-icon-minus-circle2 fileAction"></span>' + 
					'</span>' + error +
					'</div></li>';
					return itemHTML;
				},
				downloadTemplate : function(o){
					var prm = o.options.prmNames;
					o.options.uploadedFileList = o.options.uploadedFileList || [];
					var randomId = "fileId_" + new Date().getTime();
					var	autoUpload = o.options.autoUpload,isAuto,itemHTML,error,
					itemData = {
							'fileName': o.files[0][prm.fileName],
							'fileSize': o.files[0][prm.fileSize],
							'fileUrl': o.files[0][prm.fileURL],
							'fileError':  o.files[0][prm.fileError],
							'fileId':  o.files[0][prm.fileId] || randomId,
							'fileType': o.files[0][prm.filetype],
							'fileDate': o.files[0][prm.fileDate],
							'thumbnailUrl': o.files[0][prm.thumbnailUrl]
					};
					o.options.uploadedFileList.push(itemData);
					itemHTML = o.options.downloadTmp(itemData);
					for (var d in itemData) {
						itemHTML = itemHTML.replace(new RegExp('\\{\\{' + d + '\\}\\}', 'g'), itemData[d]);
					}
					//itemData.elementId = this.element[0].id;
					return itemHTML;
				}
			};
			this.options = $.extend(true,{},p,this.options);
			this.useFlash = (version !== false && version < 10);
			//this.useFlash = true;
			if (this.options.uploadBtn) {
				var btnClass = "fileinput-button",
					uploadBtnOptions = $.coral.toFunction(this.options.uploadBtnOptions);
				if(uploadBtnOptions.cls){
					uploadBtnOptions = $.extend({},
							uploadBtnOptions,
							{cls: btnClass + " " + uploadBtnOptions.cls});
				} else {
					uploadBtnOptions = $.extend({},uploadBtnOptions,{cls: btnClass});
				}
				$(this.options.uploadBtn).button(uploadBtnOptions);
				var upOption = {
					'type': 'file',
					'name':'uploadFile'
			 	};
				if (this.options.multiple) {
					upOption.multiple = "multiple";
				}
				if (this.options.fileObjName) {
					upOption.name = this.options.fileObjName;
				}
				$('<input/>', upOption).appendTo($(this.options.uploadBtn));
				this.uploadFile = $(this.options.uploadBtn).find("input[type=file]");
				this.uploaderBtn = $(this.options.uploadBtn).uniqueId();
			} else {
				this.uploadFile = this.element.find("input[type=file]");
				this.uploaderBtn = this.element.find(".fileinput-button").uniqueId();
			}
			//this.uploader = $("<div id=\""+ this.element[0].id +"_uploaderID\"></div>");
        	if (this.useFlash) {
        		this.uploadFile.hide();
        		config = {
    				swf: $.coral.scriptPath+'external/swfupload.swf',
    				uploader: this.options.url,
        			auto      : this.options.autoUpload,               // Automatically upload files when added to the queue
        			messages: {
        	            uploadedBytes: 'Uploaded bytes exceed file size',
        	            maxNumberOfFiles: '上传的文件数量超出限制',
                        acceptFileTypes: '选择的文件类型不符合',
                        maxFileSize: '上传文件的大小超出最大限制',
                        minFileSize: '上传文件的大小低于最小限制'
        	        },
        			separator :this.options.separator,
        			checkExisting   : false,              // The path to a server-side script that checks for existing files on the server
					debug           : this.options.debug,              // Turn on swfUpload debugging mode
					fileObjName     : "uploadFile",         // The name of the file object to use in your server-side script
					height          : 130,                 // The height of the browse button
					uploadTemplate  : this.options.uploadTemplate,              // The template for the file item in the queue
					downloadTemplate: this.options.downloadTemplate,
					method          : 'post',             // The method to use when sending files to the server-side upload script
					multi           : this.options.multi,               // Allow multiple file selection in the browse dialog
					formData        : this.options.formData,                 // An object with additional data to send to the server-side upload script with every file upload
					preventCaching  : true,               // Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
					progressData    : "percentage",       // ('percentage' or 'speed') Data to show in the queue item during a file upload
					queueID         : this.options.queueID,              // The ID of the DOM object to use as a file queue (without the #)
					queueSizeLimit  : 999,                // The maximum number of files that can be in the queue at one time
					removeCompleted : this.options.removeCompleted,               // Remove queue items from the queue when they are done uploading
					removeTimeout   : this.options.removeTimeout,                  // The delay in seconds before removing a queue item if removeCompleted is set to true
					requeueErrors   : false,              // Keep errored files in the queue and keep trying to upload them
					successTimeout  : 30,                 // The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
					uploadLimit     : this.options.filesLimt,                  // The maximum number of files you can upload
					width           : 820,                // The width of the browse button
					maxFileSize     : this.options.maxFileSize,
					minFileSize	    : this.options.minFileSize,
		            fileTypeExts  :  this.options.acceptFileTypes,
		            onSWFReady: function(){
		            	if ($t.options.filesUrl) {
		    				$.ajax({
		    					type    : 'POST',
		    					async   : false,
		    					datatype: "json",
		    					url     : $t.options.filesUrl,
		    					data    : $t.options.postData,
		    					success : function(data) {
		    						for(var i=0; i< data.length; i++) {
		    							var template = $t._renderDownload([data[i]]).appendTo($t.options.filesContainer);
		    							$t._transition(template);
		    							$t.uploaderBtn.swfuploader("addUploadCount");
		    							$t.setValue($t.options.uploadedFileList);
		    						}
		    					},
		    					error: function(e){
		    					}
		    				});
		    			}
		            },
					// Events
					overrideEvents  : []             // (Array) A list of default event handlers to skip	
        		};
        		$.extend(true,config, this.options);
        		this.uploaderBtn.swfuploader(config);
        	} else {
        		config = {
	                // By default, files added to the widget are uploaded as soon
	                // as the user clicks on the start buttons. To enable automatic
	                // uploads, set the following option to true:
        			disabled: false,
	                autoUpload: false,
	                url: this.options.url,
	                maxFileSize: this.options.maxFileSize,
	                minFileSize	    : this.options.minFileSize,
	                maxNumberOfFiles: this.options.maxNumberOfFiles,
	                acceptFileTypes: this.options.acceptFileTypes,
	                // The ID of the upload template:
	                uploadTemplate: this.options.uploadTemplate,
	                // The ID of the download template:
	                downloadTemplate: this.options.downloadTemplate,
	                templatesContainer: this.options.templatesContainer,
	                // The container for the list of files. If undefined, it is set to
	                // an element with class "files" inside of the widget element:
	                filesContainer: this.options.filesContainer,
	                // By default, files are appended to the files container.
	                // Set the following option to true, to prepend files instead:
	                prependFiles: false,
	                // The expected data type of the upload response, sets the dataType
	                // option of the $.ajax upload requests:
	                formData : this.options.formData,
	                dataType: 'json',
	                separator:',',
	              /*  uploadedFileList: this.options.uploadedFileList,
	                unUploadedFileList:this.options.unUploadedFileList,*/
	                // Error and info messages:
	                messages: {
	                    unknownError: 'Unknown error',
        	            uploadedBytes: 'Uploaded bytes exceed file size',
        	            maxNumberOfFiles: '上传的文件数量超出限制',
                        acceptFileTypes: '选择的文件类型不符合',
                        maxFileSize: '上传文件的大小超出最大限制',
                        minFileSize: '上传文件的大小低于最小限制'
	                },
	               
	                processdone: function (e, data) {
	                    data.context.find('.upload').button('enable');
	                },
	                required:true,
	                // used by the maxNumberOfFiles validation:
	                getNumberOfFiles: function () {
	                    return this.filesContainer.children()
	                        .not('.processing').length;
	                },
	                // Callback to retrieve the list of files from the server response:
	                getFilesFromResponse: function (data) {
	                	if (typeof(data.result)==="string") {
	                		data.result = $.parseJSON(data.result);
	                	}
	                    if (data.result && $.isArray(data.result.files)) {
	                        return data.result.files;
	                    }
	                    return [];
	                },
	                // The add callback is invoked as soon as files are added to the fileupload
	                // widget (via file input selection, drag & drop or add API call).
	                // See the basic file upload widget for more information:
	                add: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var $this = $(this),size,
	                        that = $this.data('blueimp-fileupload'),
	                        options = that.options;
	                    if (!$t.validateFile(options,data) ) {
	                    	return;
	                    }
	                    
	                    //选择后校验
	                    $this.fileupload('process', data);
	                    data.context = $t._renderUpload(data.files)
	                        .data('data', data)
	                        .addClass('processing');
	                    options.filesContainer[
	                        options.prependFiles ? 'prepend' : 'append'
	                    ](data.context);
	                    $t._forceReflow(data.context);
	                    $t._transition(data.context);
	                    data.process(function () {//上传后校验
	                        return $this.fileupload('process', data);
	                    }).always(function () {
	                        data.context.each(function (index) {
	                            $(this).find('.size').text(
	                            		$t._formatFileSize(data.files[index].size)
	                            );
	                        }).removeClass('processing');
	                       //$t._renderPreviews(data);
	                    }).done(function () {
	                        data.context.find('.upload').prop('disabled', false);
	                        if (($t._trigger('onSelect', e, [{"file": data.files[0]}])!== false) &&
	                                (options.autoUpload || data.autoUpload) &&
	                                data.autoUpload !== false) {
	                            data.submit();
	                        }
	                    }).fail(function () {
	                        if (data.files.error) {
	                            data.context.each(function (index) {
	                                var error = data.files[index].error;
	                                if (error) {
	                                    $(this).find('.error').text(error);
	                                }
	                            });
	                        }
	                    });
	                },
	                done: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var that = $(this).data('blueimp-fileupload'),
	                        getFilesFromResponse = data.getFilesFromResponse ||
	                            that.options.getFilesFromResponse,
	                        files = getFilesFromResponse(data),
	                        template,
	                        deferred;
	                    if (data.context) {
	                        data.context.each(function (index) {
	                            var file = files[index] ||
	                                    {error: 'Empty file upload result'};
	                            deferred = $t._addFinishedDeferreds();
	                            $t._transition($(this)).done(
	                                function () {
	                                    var node = $(this);
	                                    template = $t._renderDownload([file])
	                                    	.data('data', data)
	                                        .replaceAll(node);
	                                    $t._forceReflow(template);
	                                    $t._transition(template).done(
	                                        function () {
	                                            data.context = $(this);
	                                            $t._trigger('onSuccess', e, [{"file": file}]);
	                                            $t._trigger('onComplete', e, [{"file": file}]);
	                                            deferred.resolve();
	                                        }
	                                    );
	                                }
	                            );
	                        });
	                    } else {
	                        template = $t._renderDownload(files)[
	                            that.options.prependFiles ? 'prependTo' : 'appendTo'
	                        ](that.options.filesContainer);
	                        $t._forceReflow(template);
	                        deferred = $t._addFinishedDeferreds();
	                        $t._transition(template).done(
	                            function () {
	                                data.context = $(this);
	                                $t._trigger('onSuccess', e, [{"file": file}]);
	                                $t._trigger('onComplete', e, [{"file": file}]);
	                                deferred.resolve();
	                            }
	                        );
	                    }
	                    var arrList = $t.options.unUploadedFileList;
	                    $t.clearFileList(arrList,data);
	                },
	             // Callback for uploads stop, equivalent to the global ajaxStop event:
	                stop: function (e) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var that = $(this).data('blueimp-fileupload'),
	                        deferred = $t._addFinishedDeferreds();
	                    $.when.apply($, $t._getFinishedDeferreds())
	                        .done(function () {
	                        	$t._trigger('onStop', e);
	                        });
	                    $t._transition($(this).find('.fileupload-progress')).done(
	                        function () {
	                            $(this).find('.progress')
	                                .attr('aria-valuenow', '0')
	                                .children().first().css('width', '0%');
	                            $(this).find('.progress-extended').html('&nbsp;');
	                            deferred.resolve();
	                        }
	                    );
	                },
	                processstart: function (e) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    $(this).addClass('fileupload-processing');
	                },
	                processstop: function (e) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    $(this).removeClass('fileupload-processing');
	                },
	                // Callback for failed (abort or error) uploads:
	                fail: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var that = $(this).data('blueimp-fileupload'), value, arrList,
	                        template,
	                        deferred;
	                    if (data.context) {
	                        data.context.each(function (index) {
	                            if (data.errorThrown !== 'abort') {
	                                var file = data.files[index];
	                                file.error = file.error || data.errorThrown ||
	                                    data.i18n('unknownError');
	                                deferred = $t._addFinishedDeferreds();
	                                $t._transition($(this)).done(
	                                    function () {
	                                        var node = $(this);
	                                        template = $t._renderDownload([file])
	                                            .replaceAll(node);
	                                        $t._forceReflow(template);
	                                        $t._transition(template).done(
	                                            function () {
	                                                data.context = $(this);
	                                                $t._trigger('onFail', e, [{"file": file,"error":file.error}]);
	                                                $t._trigger('onComplete', e, [{"file": file}]);
	                                                deferred.resolve();
	                                            }
	                                        );
	                                    }
	                                );
	                            } else {
	                                deferred = $t._addFinishedDeferreds();
	                                $t._transition($(this)).done(
	                                    function () {
	                                        $(this).remove();
	                                        $t._trigger('onRemove', e);
	                                        deferred.resolve();
	                                    }
	                                );
	                            }
	                        });
	                    } else if (data.errorThrown !== 'abort') {
	                        data.context = $t._renderUpload(data.files)[
	                            that.options.prependFiles ? 'prependTo' : 'appendTo'
	                        ](that.options.filesContainer)
	                            .data('data', data);
	                        $t._forceReflow(data.context);
	                        deferred = $t._addFinishedDeferreds();
	                        $t._transition(data.context).done(
	                            function () {
	                                data.context = $(this);
	                                $t._trigger('onFail', e, [{"file": data.files[0],"error":data.files[0].error}]);
	                                $t._trigger('onComplete', e, [{"file": data.files[0]}]);
	                                deferred.resolve();
	                            }
	                        );
	                    } else {
	                    	$t._trigger('onFail', e, [{"file": data.files[0],"error":data.files[0].error}]);
	                    	$t._trigger('onComplete', e, [{"file": data.files[0]}]);
	                    	$t._addFinishedDeferreds().resolve();
	                    }
	                    var arrList1 = $t.options.uploadedFileList;
	                    $t.clearFileList(arrList1,data);
	                    var arrList2 = $t.options.unUploadedFileList;
	                    $t.clearFileList(arrList2,data);
	                },
	                // Callback for upload progress events:
	                progress: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var progress = Math.floor(data.loaded / data.total * 100);
	                    if (data.context) {
	                        data.context.each(function () {
	                            $(this).find('.progressbar-value').show().css("width", progress+"%");
	                            $(this).find('.progressbar-text').text(progress+"%");
	                        });
	                    }
	                    $t._trigger('onProgress', e, [{"file": data.files[0]}]);
	                },
	                // Callback for global upload progress events:
	                progressall: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var $this = $(this),
	                        progress = Math.floor(data.loaded / data.total * 100),
	                        globalProgressNode = $this.find('.fileupload-progress'),
	                        extendedProgressNode = globalProgressNode
	                            .find('.progress-extended');
	                    if (extendedProgressNode.length) {
	                        extendedProgressNode.html(
	                            $t._renderExtendedProgress(data)
	                        );
	                    }
	                   /* globalProgressNode
	                        .find('.progress').progressbar("value", progress)*/
	                },
	                start: function (e) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var that = $(this).data('blueimp-fileupload');
	                    $t._resetFinishedDeferreds();
	                    $t._transition($(this).find('.fileupload-progress')).done(
	                        function () {
	                        	$t._trigger('onStart', e);
	                        }
	                    );
	                },
	                // Callback for successful uploads:
	                send: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    /*var that = $(this).data('blueimp-fileupload') ||
	                            $(this).data('fileupload');*/
	                    if (data.context && data.dataType &&
	                            data.dataType.substr(0, 6) === 'iframe') {
	                        // Iframe Transport does not support progress events.
	                        // In lack of an indeterminate progress bar, we set
	                        // the progress to 100%, showing the full animated bar:
	                        data.context
	                            .find('.progress').addClass(
	                                !$.support.transition && 'progress-animated'
	                            )
	                            .attr('aria-valuenow', 100)
	                            .children().first().css(
	                                'width',
	                                '100%'
	                            );
	                    }
	                    return $t._trigger('onSend', e, [{"file": data.files[0]}]);
	                },
	                // Callback for the start of each file upload request:
	                // Callback for file deletion:
	                remove: function (e, data) {
	                    if (e.isDefaultPrevented()) {
	                        return false;
	                    }
	                    var that = $(this).data('blueimp-fileupload'), value, arrList,
	                        removeNode = function () {
	                            $t._transition(data.context).done(
	                                function () {
	                                    $(this).remove();
	                                    $t._trigger('onRemove', e, {"fileId":data.id});
	                                }
	                            );
	                        };
	                    if (data.url && data.url != "undefined") {
	                    	var postData = {};
	                    	data.data=[ ];
	                    	for(var j = 0; j< $t.options.uploadedFileList.length; j++){
	                    		if(data.id == $t.options.uploadedFileList[j].fileId){
	                    			postData.data = $t.options.uploadedFileList[j];
	                    		}
	                    	}
	                    	
	                    	postData.dataType = data.dataType || that.options.dataType;
	                    	postData.url = data.url;
	                        $.ajax(postData).done(removeNode).fail(function () {
	                        	$t._trigger('onRemoveFailed', e);
	                        });
	                    } else {
	                        removeNode();
	                    }
	                    var arrList = $t.options.uploadedFileList;
	                    $t.clearFileList(arrList,data);
	                }
        		};
        		$.extend(true, config, this.options);
        		this.uploaderBtn.fileupload(config);
        		if (this.options.filesUrl) {
    				$.ajax({
    					type    : 'POST',
    					async   : false,
    					datatype: "json",
    					url     : this.options.filesUrl,
    					data    : this.options.postData,
    					success : function(data) {
    						for(var i=0; i< data.length; i++) {
    							var template = $t._renderDownload([data[i]]).appendTo($t.options.filesContainer);
    							$t._transition(template);
    						}
    					},
    					error: function(e){
    					}
    				});
    			}
        	}
        },
        upload: function(fileId){
        	var version = this.checkIE(),ids=[];
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("upload",fileId);
        	} else {
        		if(fileId === undefined){
        			fileId = this.getUnUploadValues();
        		}
        		this.uploaderBtn.fileupload("upload",fileId);
        	}
        },
        _destroy: function(){
        	var version = this.checkIE(),ids=[];
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("destroy");
        	} else {
        		this.uploaderBtn.fileupload("destroy");
        	}
        },
        remove: function(fileId){
        	var version = this.checkIE(),ids=[];
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("cancel", fileId);
        	} else {
        		this.uploaderBtn.fileupload("remove", fileId);
        	}
        },
        _resetFinishedDeferreds: function () {
            this._finishedUploads = [];
        },

        _addFinishedDeferreds: function (deferred) {
            if (!deferred) {
                deferred = $.Deferred();
            }
            this._finishedUploads.push(deferred);
            return deferred;
        },

        _getFinishedDeferreds: function () {
            return this._finishedUploads;
        },

        // Link handler, that allows to download files
        // by drag & drop of the links to the desktop:
        _enableDragToDesktop: function () {
            var link = $(this),
                url = link.prop('href'),
                name = link.prop('download'),
                type = 'application/octet-stream';
            link.bind('dragstart', function (e) {
                try {
                    e.originalEvent.dataTransfer.setData(
                        'DownloadURL',
                        [type, name, url].join(':')
                    );
                } catch (ignore) {}
            });
        },

        _formatFileSize: function (bytes) {
            if (typeof bytes !== 'number') {
                return '';
            }
            if (bytes >= 1000000000) {
                return (bytes / 1000000000).toFixed(2) + ' GB';
            }
            if (bytes >= 1000000) {
                return (bytes / 1000000).toFixed(2) + ' MB';
            }
            return (bytes / 1000).toFixed(2) + ' KB';
        },

        _formatBitrate: function (bits) {
            if (typeof bits !== 'number') {
                return '';
            }
            if (bits >= 1000000000) {
                return (bits / 1000000000).toFixed(2) + ' Gbit/s';
            }
            if (bits >= 1000000) {
                return (bits / 1000000).toFixed(2) + ' Mbit/s';
            }
            if (bits >= 1000) {
                return (bits / 1000).toFixed(2) + ' kbit/s';
            }
            return bits.toFixed(2) + ' bit/s';
        },

        _formatTime: function (seconds) {
            var date = new Date(seconds * 1000),
                days = Math.floor(seconds / 86400);
            days = days ? days + 'd ' : '';
            return days +
                ('0' + date.getUTCHours()).slice(-2) + ':' +
                ('0' + date.getUTCMinutes()).slice(-2) + ':' +
                ('0' + date.getUTCSeconds()).slice(-2);
        },

        _formatPercentage: function (floatValue) {
            return (floatValue * 100).toFixed(2) + ' %';
        },

        _renderExtendedProgress: function (data) {
            return this._formatBitrate(data.bitrate) + ' | ' +
                this._formatTime(
                    (data.total - data.loaded) * 8 / data.bitrate
                ) + ' | ' +
                this._formatPercentage(
                    data.loaded / data.total
                ) + ' | ' +
                this._formatFileSize(data.loaded) + ' / ' +
                this._formatFileSize(data.total);
        },

        _renderTemplate: function (func, files) {
            if (!func) {
                return $();
            }
            var result = func({
                files: files,
                formatFileSize: this._formatFileSize,
                options: this.options
            });
            if (result instanceof $) {
                return result;
            }
            return $(this.options.templatesContainer).html(result).children();
        },

        _renderPreviews: function (data) {

            data.context.find('.preview').each(function (index, elm) {
                $(elm).append(data.files[index].preview);
            });
        },

        _renderUpload: function (func, files) {
        	var item = this._renderTemplate(
    			this.options.uploadTemplate,
    			func
        	);
        	//item.find('.progress').empty().progressbar();
        	item.addClass("template-upload fade");
        	if (item.hasClass('fade')) {
        		item.hide();
           	}
        	this._trigger("onRenderUploadTmp", null, {"item":item});
        	return item;
        },

        _renderDownload: function (files) {
            var item = this._renderTemplate(
                this.options.downloadTemplate,
                files
            ).find('a[download]').each(this._enableDragToDesktop).end();
            item.addClass("template-download fade");
            if (item.hasClass('fade')) {
            	item.hide();
            }
            
            this._trigger("onRenderDownloadTmp", null, {"item":item});
            return item;
        },
        _forceReflow: function (node) {
            return $.support.transition && node.length &&
                node[0].offsetWidth;
        },

        /*_transition: function (node) {
            var dfd = $.Deferred();
            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {
                node.bind(
                    $.support.transition.end,
                    function (e) {
                        // Make sure we don't respond to other transitions events
                        // in the container element, e.g. from button elements:
                        if (e.target === node[0]) {
                            node.unbind($.support.transition.end);
                            dfd.resolveWith(node);
                        }
                    }
                ).toggleClass('in');
            } else {
                node.toggleClass('in');
                dfd.resolveWith(node);
            }
            return dfd;
        },*/
        _transition: function (node) {
            var deferred = $.Deferred();
            if (node.hasClass('fade')) {
                node.fadeToggle(
                    this.options.transitionDuration,
                    this.options.transitionEasing,
                    function () {
                        deferred.resolveWith(node);
                    }
                );
            } else {
                deferred.resolveWith(node);
            }
            return deferred;
        },
        _destroyButtonBarEventHandlers: function () {
            this._off(
                this.element.find('.fileupload-buttonbar')
                    .find('.upload, .remove'),
                'click'
            );
            this._off(
                this.element.find('.fileupload-buttonbar .toggle'),
                'change.'
            );
        },

        _destroyEventHandlers: function () {
            this._destroyButtonBarEventHandlers();
            this._off(this.options.filesContainer, 'click');
            this._super();
        },

        _enableFileInputButton: function () {
            this.element.find('.fileinput-button input')
                .prop('disabled', false)
                .parent().removeClass('disabled');
        },

        _disableFileInputButton: function () {
            this.element.find('.fileinput-button input')
                .prop('disabled', true)
                .parent().addClass('disabled');
        },

        _create: function () {
        	var options = this.options;
        	this.options.id = this.element.uniqueId().attr("id");
            this._super();
            this._resetFinishedDeferreds();
            
            if (!$.support.fileInput) {
                this._disableFileInputButton();
            }
            this.element
            .find('.fileupload-buttonbar')
            .find('.fileinput-button').each(function () {
               /* var input = $(this).find('input:file').detach();
                $(this)
                    .button({icons: 'icon-plus3'})
                    .append(input);*/
            });
            options.uploadedFileList = [];
            options.unUploadedFileList = [];
            this._getConfig();
            if(options.beforeCreate){
            	options.beforeCreate.apply(this);
            } else {
            	this.beforeCreate();
            }
        },
        beforeCreate: function () {
        	//this.options.id = this.element.uniqueId()[0].id;
        	var that = this;
        	this._on(this.options.filesContainer, {
                'click .upload': function(e){
                	e.preventDefault();
                    var template = $(e.currentTarget).closest('.template-upload');
                    $("#"+that.element[0].id).fileuploader("upload", template[0].id);
                },
                'click .remove': function(e){
                	e.preventDefault();
                    var template = $(e.currentTarget).closest('.template-upload,.template-download');
                    $("#"+that.element[0].id).fileuploader("remove", template[0].id);
                },
                'click .stop': function(e){
                	e.preventDefault();
                    var template = $(e.currentTarget).closest('.template-upload');
                    $("#"+that.element[0].id).fileuploader("stop", template[0].id);
                }
            });
        },
        _setOption: function(key, value) {
    		//默认属性不允许更改
    		this._super(key, value );
    		if (key === "formData") {
    			if (this.useFlash) {
    				this.uploaderBtn.swfuploader("option", "formData", value);
    			} else {
    				this.uploaderBtn.fileupload("option", "formData", value);
    			}
    			
    		}
    	},
        clearFileList: function(arrList,data){
        	var values,arr;
        	if(arrList ===this.options.uploadedFileList){
        		values = this.getValues();
        	}else if (arrList === this.options.unUploadedFileList) {
        		values = this.getUnUploadValues();
        	}
        	arr = $.inArray(data.context[0][this.options.prmNames.fileId],values)
        	if(arr!== -1){
        		arrList.splice(arr,1); 
        	}else{
        		arrList.splice(arr,0);
        	}
        },
        validateFile: function(options,data){
        	var type = data.files[0].name.substring(data.files[0].name.lastIndexOf(".") + 1);
        	type = $.trim(type);
        	var acceptFileTypes = $.trim(options.acceptFileTypes);
        	var numbers = this.getQueueData(),
        		maxFileSize = this.formatMaxSize(options.maxFileSize);
        	if( numbers.length >= options.filesLimt ){
        		$.messageQueue( {
                    message:options.messages.maxNumberOfFiles
                }); 
            	return false;
            }
        	if(data.files[0].size >= maxFileSize){
        		$.messageQueue( {
                    message: options.messages.maxFileSize
                }); 
        		return false;
        	}
//        	if(data.files[0].size <= minFileSize){
//        		$.messageQueue( {
//                    message: options.messages.minFileSize
//                }); 
//        		return false;
//        	}//和IE的校验一致
        	if(acceptFileTypes == "*.*"){
        		return true;
        	}else{
        		if(acceptFileTypes.indexOf(type.toLowerCase())== -1){
        			$.messageQueue( {
        				message: options.messages.acceptFileTypes
        			}); 
        			return false;
        		}
        	}
        	return true;
        },
        formatMinSize: function(size){
        	// Trim the string
			var trimPattern = new RegExp("/^\s*|\s*$/"),minFileSize,value,
				multiplier = 1024;
			size = size.toLowerCase();
			size = size.replace(trimPattern, "");
			var values = size.match(/^\d+/);
			if (values !== null && values.length > 0) {
				value = parseInt(values[0]);
			}
			if (isNaN(value) || value < 0) value = 0;
			minFileSize = value * multiplier;
			return minFileSize;
        },
        formatMaxSize: function(size){
        	// Trim the string
			var trimPattern = new RegExp("/^\s*|\s*$/"),maxFileSize,value,
				multiplier = 1024;
			size = size.toLowerCase();
			size = size.replace(trimPattern, "");
			var values = size.match(/^\d+/);
			if (values !== null && values.length > 0) {
				value = parseInt(values[0]);
			}
			if (isNaN(value) || value < 0) value = 0;
			maxFileSize = value * multiplier;
			return maxFileSize;
        },
        getQueueData: function(){
        	var valArr1 = [],valArr2 = [];
        	for(var i = 0; i < this.options.uploadedFileList.length; i++){
        		valArr1.push(this.options.uploadedFileList[i].fileId);
        	}
        	for(var i = 0; i < this.options.unUploadedFileList.length; i++){
        		valArr2.push(this.options.unUploadedFileList[i].fileId);
        	}
        	return $.merge(valArr1,valArr2);
        },
        getValues: function(){
        	var valArr = [];
        	for(var i = 0; i < this.options.uploadedFileList.length; i++){
        		valArr.push(this.options.uploadedFileList[i].fileId);
        	}
        	return valArr;
        },
        getValidateValue:function(){
        	var version = this.checkIE();
        	if (this.useFlash) {
        		return this.uploaderBtn.swfuploader("getValidateValue");
        	} else {
        		return this.getValue();
        	}
        },
    	setValue: function(value) {
    		var version = this.checkIE();
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("setValues", value);
        	} else {
        		//this.setValues();
        	}
    	},
    	getValue: function() {
        	var version = this.checkIE();
        	if (this.useFlash) {
        		return this.uploaderBtn.swfuploader("getValue");
        	} else {
        		return this.getValues().join( this.options.separator );
        	}
    	},
    	clearError: function(){},
    	focus: function(){},
        getUnUploadValues: function(){
        	var fileArray = [];
        	for(var i = 0; i < this.options.unUploadedFileList.length; i++){
        		fileArray.push(this.options.unUploadedFileList[i].fileId);
        	}
        	return fileArray;
        },
        enable: function () {
        	var version = this.checkIE();
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("disable",false);
        	} else {
        		var wasDisabled = false;
        		if (this.options.disabled) {
        			wasDisabled = true;
        		}
        		this._super();
        		if (wasDisabled) {
        			this.element.find('input, button').prop('disabled', false);
        			this._enableFileInputButton();
        			this.options.filesContainer.prop('disabled', false)
					   						   .removeClass('coral-state-disabled');
        		}
        		this.options.disabled = false;
        		this._trigger("onEnable", null, []);
        	}
        },

        disable: function () {
        	var version = this.checkIE();
        	if (this.useFlash) {
        		this.uploaderBtn.swfuploader("disable",true);
        	} else {
        		if (!this.options.disabled) {
        			this.element.find('input, button').prop('disabled', true);
        			this._disableFileInputButton();
        			this.options.filesContainer.prop('disabled', true)
        									   .addClass('coral-state-disabled');
        		}
        		this._super();
        		this.options.disabled = true;
        		this._trigger("onDisable", null, []);
        	}
        }
        // uploadify function
    });
})();
;

/*
Uploadify v3.2.1
Copyright (c) 2012 Reactive Apps, Ronnie Garcia
Released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/

(function() {

	// These methods can be called by adding them as the first argument in the uploadify plugin call
	var methods = {

		init : function(options, swfUploadOptions) {
			
			return this.each(function() {

				// Create a reference to the jQuery DOM object
				var $this = $(this);

				// Clone the original DOM object
				var $clone = $this.clone();

				// Setup the default options
				var settings = $.extend({
					// Required Settings
					id       : $this.attr('id'), // The ID of the DOM object
					swf      : $.coral.scriptPath+'external/swfupload.swf',  // The path to the uploadify SWF file
					uploader : 'swfupload.php',  // The path to the server-side upload script
					
					// Options
					auto            : true,               // Automatically upload files when added to the queue
					buttonClass     : '',                 // A class name to add to the browse button DOM object
					buttonCursor    : 'hand',             // The cursor to use with the browse button
					buttonImage     : null,               // (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
					buttonText      : 'SELECT FILES',     // The text to use for the browse button
					checkExisting   : false,              // The path to a server-side script that checks for existing files on the server
					debug           : false,              // Turn on swfUpload debugging mode
					fileObjName     : 'Filedata',         // The name of the file object to use in your server-side script
					fileSizeLimit   : 0,                  // The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
					fileTypeDesc    : 'All Files',        // The description for file types in the browse dialog
					fileTypeExts    : '*.*',              // Allowed extensions in the browse dialog (server-side validation should also be used)
					height          : 30,                 // The height of the browse button
					itemTemplate    : false,              // The template for the file item in the queue
					method          : 'post',             // The method to use when sending files to the server-side upload script
					multi           : true,               // Allow multiple file selection in the browse dialog
					formData        : {},                 // An object with additional data to send to the server-side upload script with every file upload
					preventCaching  : true,               // Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
					progressData    : 'percentage',       // ('percentage' or 'speed') Data to show in the queue item during a file upload
					queueID         : false,              // The ID of the DOM object to use as a file queue (without the #)
					queueSizeLimit  : 999,                // The maximum number of files that can be in the queue at one time
					removeCompleted : true,               // Remove queue items from the queue when they are done uploading
					removeTimeout   : 3,                  // The delay in seconds before removing a queue item if removeCompleted is set to true
					requeueErrors   : false,              // Keep errored files in the queue and keep trying to upload them
					successTimeout  : 30,                 // The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
					uploadLimit     : 0,                  // The maximum number of files you can upload
					width           : 120,                // The width of the browse button
					
					// Events
					overrideEvents  : []             // (Array) A list of default event handlers to skip
					/*
					onCancel         // Triggered when a file is cancelled from the queue
					onClearQueue     // Triggered during the 'clear queue' method
					onDestroy        // Triggered when the uploadify object is destroyed
					onDialogClose    // Triggered when the browse dialog is closed
					onDialogOpen     // Triggered when the browse dialog is opened
					onDisable        // Triggered when the browse button gets disabled
					onEnable         // Triggered when the browse button gets enabled
					onFallback       // Triggered is Flash is not detected    
					onInit           // Triggered when Uploadify is initialized
					onQueueComplete  // Triggered when all files in the queue have been uploaded
					onSelectError    // Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
					onSelect         // Triggered for each file that is selected
					onSWFReady       // Triggered when the SWF button is loaded
					onUploadComplete // Triggered when a file upload completes (success or error)
					onUploadError    // Triggered when a file upload returns an error
					onUploadSuccess  // Triggered when a file is uploaded successfully
					onUploadProgress // Triggered every time a file progress is updated
					onUploadStart    // Triggered immediately before a file upload starts
					*/
				}, options);

				// Prepare settings for SWFUpload
				var swfUploadSettings = {
					assume_success_timeout   : settings.successTimeout,
					button_placeholder_id    : settings.id,
					button_width             : settings.width,
					button_height            : settings.height,
					button_text              : null,
					button_text_style        : null,
					button_text_top_padding  : 0,
					button_text_left_padding : 0,
					button_action            : (settings.multi ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE),
					button_disabled          : false,
					button_cursor            : (settings.buttonCursor == 'arrow' ? SWFUpload.CURSOR.ARROW : SWFUpload.CURSOR.HAND),
					button_window_mode       : SWFUpload.WINDOW_MODE.TRANSPARENT,
					debug                    : settings.debug,						
					requeue_on_error         : settings.requeueErrors,
					file_post_name           : settings.fileObjName,
					file_size_limit          : settings.fileSizeLimit,
					file_types               : settings.fileTypeExts,
					file_types_description   : settings.fileTypeDesc,
					file_queue_limit         : settings.queueSizeLimit,
					file_upload_limit        : settings.uploadLimit,
					flash_url                : settings.swf,					
					prevent_swf_caching      : settings.preventCaching,
					post_params              : settings.formData,
					upload_url               : settings.uploader,
					use_query_string         : (settings.method == 'get'),
					
					// Event Handlers 
					file_dialog_complete_handler : handlers.onDialogClose,
					file_dialog_start_handler    : handlers.onDialogOpen,
					file_queued_handler          : handlers.onSelect,
					file_queue_error_handler     : handlers.onSelectError,
					swfupload_loaded_handler     : settings.onSWFReady,
					upload_complete_handler      : handlers.onUploadComplete,
					upload_error_handler         : handlers.onUploadError,
					upload_progress_handler      : handlers.onUploadProgress,
					upload_start_handler         : handlers.onUploadStart,
					upload_success_handler       : handlers.onUploadSuccess
				}

				// Merge the user-defined options with the defaults
				if (swfUploadOptions) {
					swfUploadSettings = $.extend(swfUploadSettings, swfUploadOptions);
				}
				// Add the user-defined settings to the swfupload object
				swfUploadSettings = $.extend(swfUploadSettings, settings);
				
				// Detect if Flash is available
				var playerVersion  = swfobject.getFlashPlayerVersion();
				var flashInstalled = (playerVersion.major >= 9);

				if (flashInstalled) {
					// Create the swfUpload instance
					window['uploadify_' + settings.id] = new SWFUpload(swfUploadSettings);
					var swfuploadify = window['uploadify_' + settings.id];

					// Add the SWFUpload object to the elements data object
					$this.data('uploadify', swfuploadify);
					
					// Wrap the instance
					var $wrapper = $('<div />', {
						'id'    : settings.id,
						'class' : 'uploadify',
						'css'   : {
									'height'   : settings.height + 'px',
									'width'    : settings.width + 'px'
								  }
					});
					$('#' + swfuploadify.movieName).wrap($wrapper);
					// Recreate the reference to wrapper
					$wrapper = $('#' + settings.id);
					// Add the data object to the wrapper 
					$wrapper.data('uploadify', swfuploadify);

					// Create the button
					var $button = $('<div />', {
						'id'    : settings.id + '-button',
						'class' : 'uploadify-button ' + settings.buttonClass
					});
					if (settings.buttonImage) {
						$button.css({
							'background-image' : "url('" + settings.buttonImage + "')",
							'text-indent'      : '-9999px'
						});
					}
					$button.html('<span class="uploadify-button-text">' + settings.buttonText + '</span>')
					.css({
						'height'      : settings.height + 'px',
						'line-height' : settings.height + 'px',
						'width'       : settings.width + 'px'
					});
					// Append the button to the wrapper
					$wrapper.append($button);

					// Adjust the styles of the movie
					$('#' + swfuploadify.movieName).css({
						'position' : 'absolute',
						'z-index'  : 1
					});
					
					// Create the file queue
					if (!settings.queueID) {
						var $queue = $('<div />', {
							'id'    : settings.id + '-queue',
							'class' : 'uploadify-queue'
						});
						$wrapper.after($queue);
						swfuploadify.settings.queueID      = settings.id + '-queue';
						swfuploadify.settings.defaultQueue = true;
					}
					
					// Create some queue related objects and variables
					swfuploadify.queueData = {
						files              : {}, // The files in the queue
						filesSelected      : 0, // The number of files selected in the last select operation
						filesQueued        : 0, // The number of files added to the queue in the last select operation
						filesReplaced      : 0, // The number of files replaced in the last select operation
						filesCancelled     : 0, // The number of files that were cancelled instead of replaced
						filesErrored       : 0, // The number of files that caused error in the last select operation
						uploadsSuccessful  : 0, // The number of files that were successfully uploaded
						uploadsErrored     : 0, // The number of files that returned errors during upload
						averageSpeed       : 0, // The average speed of the uploads in KB
						queueLength        : 0, // The number of files in the queue
						queueSize          : 0, // The size in bytes of the entire queue
						uploadSize         : 0, // The size in bytes of the upload queue
						queueBytesUploaded : 0, // The size in bytes that have been uploaded for the current upload queue
						uploadQueue        : [], // The files currently to be uploaded
						errorMsg           : 'Some files were not added to the queue:'
					};

					// Save references to all the objects
					swfuploadify.original = $clone;
					swfuploadify.wrapper  = $wrapper;
					swfuploadify.button   = $button;
					swfuploadify.queue    = $queue;

					// Call the user-defined init event handler
					if (settings.onInit) settings.onInit.call($this, swfuploadify);

				} else {

					// Call the fallback function
					if (settings.onFallback) settings.onFallback.call($this);
					var uiBorder = settings.onNoflash.call($this);
					var warp = $("<div class='coral-uploader-button' style='height: 40px;'></div>").appendTo(uiBorder);
					var button = $("<input type='button'/>").appendTo(warp);
					button.button({
						id : settings.id + '-button',
						label : settings.buttonText,
						onClick : function() {
							alert("没有安装flash或flash版本过低");
						}
					})
				}
			});

		},

		// Stop a file upload and remove it from the queue 
		cancel : function(fileID, supressEvent) {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings,
					delay        = -1;

				if (args[0]) {
					// Clear the queue
					if (args[0] == '*') {
						var queueItemCount = swfuploadify.queueData.queueLength;
						$('#' + settings.queueID).find('.uploadify-queue-item').each(function() {
							delay++;
							if (args[1] === true) {
								swfuploadify.cancelUpload($(this).attr('id'), false);
							} else {
								swfuploadify.cancelUpload($(this).attr('id'));
							}
							$(this).find('.data').removeClass('data').html(' - Cancelled');
							$(this).find('.uploadify-progress-bar').remove();
							$(this).delay(1000 + 100 * delay).fadeOut(500, function() {
								$(this).remove();
							});
							delete swfuploadify.queueData.files[fileID];// #CORALIV-727
						});
						swfuploadify.queueData.queueSize   = 0;
						swfuploadify.queueData.queueLength = 0;
						// Trigger the onClearQueue event
						if (settings.onClearQueue) settings.onClearQueue.call($this, queueItemCount);
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.cancelUpload(args[n]);
							$('#' + args[n]).find('.data').removeClass('data').html(' - Cancelled');
							$('#' + args[n]).find('.uploadify-progress-bar').remove();
							$('#' + args[n]).delay(1000 + 100 * n).fadeOut(500, function() {
								$(this).remove();
							});
							delete swfuploadify.queueData.files[fileID];// #CORALIV-727
						}
					}
				} else {
					var item = $('#' + settings.queueID).find('.uploadify-queue-item').get(0);
					$item = $(item);
					swfuploadify.cancelUpload($item.attr('id'));
					$item.find('.data').removeClass('data').html(' - Cancelled');
					$item.find('.uploadify-progress-bar').remove();
					$item.delay(1000).fadeOut(500, function() {
						$(this).remove();
					});
					delete swfuploadify.queueData.files[fileID];// #CORALIV-727
				}
			});

		},

		// Revert the DOM object back to its original state
		destroy : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Destroy the SWF object and 
				swfuploadify.destroy();
				
				// Destroy the queue
				if (settings.defaultQueue) {
					$('#' + settings.queueID).remove();
				}
				
				// Reload the original DOM element
				$('#' + settings.id).replaceWith(swfuploadify.original);

				// Call the user-defined event handler
				if (settings.onDestroy) settings.onDestroy.call(this);

				delete swfuploadify;
			});

		},

		// Disable the select button
		disable : function(isDisabled) {
			
			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Call the user-defined event handlers
				if (isDisabled) {
					swfuploadify.button.addClass('disabled');
					if (settings.onDisable) settings.onDisable.call(this);
				} else {
					swfuploadify.button.removeClass('disabled');
					if (settings.onEnable) settings.onEnable.call(this);
				}

				// Enable/disable the browse button
				swfuploadify.setButtonDisabled(isDisabled);
			});

		},

		// Get or set the settings data
		settings : function(name, value, resetObjects) {

			var args        = arguments;
			var returnValue = value;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				if (typeof(args[0]) == 'object') {
					for (var n in value) {
						setData(n,value[n]);
					}
				}
				if (args.length === 1) {
					returnValue =  settings[name];
				} else {
					switch (name) {
						case 'uploader':
							swfuploadify.setUploadURL(value);
							break;
						case 'formData':
							if (!resetObjects) {
								value = $.extend(settings.formData, value);
							}
							swfuploadify.setPostParams(settings.formData);
							break;
						case 'method':
							if (value == 'get') {
								swfuploadify.setUseQueryString(true);
							} else {
								swfuploadify.setUseQueryString(false);
							}
							break;
						case 'fileObjName':
							swfuploadify.setFilePostName(value);
							break;
						case 'fileTypeExts':
							swfuploadify.setFileTypes(value, settings.fileTypeDesc);
							break;
						case 'fileTypeDesc':
							swfuploadify.setFileTypes(settings.fileTypeExts, value);
							break;
						case 'fileSizeLimit':
							swfuploadify.setFileSizeLimit(value);
							break;
						case 'uploadLimit':
							swfuploadify.setFileUploadLimit(value);
							break;
						case 'queueSizeLimit':
							swfuploadify.setFileQueueLimit(value);
							break;
						case 'buttonImage':
							swfuploadify.button.css('background-image', settingValue);
							break;
						case 'buttonCursor':
							if (value == 'arrow') {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.ARROW);
							} else {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.HAND);
							}
							break;
						case 'buttonText':
							$('#' + settings.id + '-button').find('.uploadify-button-text').html(value);
							break;
						case 'width':
							swfuploadify.setButtonDimensions(value, settings.height);
							break;
						case 'height':
							swfuploadify.setButtonDimensions(settings.width, value);
							break;
						case 'multi':
							if (value) {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILES);
							} else {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILE);
							}
							break;
					}
					settings[name] = value;
				}
			});
			
			if (args.length === 1) {
				return returnValue;
			}

		},

		// Stop the current uploads and requeue what is in progress
		stop : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];

				swfuploadify.stopUpload();
			});

		},

		// Start uploading files in the queue
		upload : function() {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];
				
				// Upload the files
				if (args[0]) {
					if (args[0] == '*') {
						swfuploadify.queueData.uploadSize = swfuploadify.queueData.queueSize;
						swfuploadify.queueData.uploadQueue.push('*');
						swfuploadify.startUpload();
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.queueData.uploadSize += swfuploadify.queueData.files[args[n]].size;
							swfuploadify.queueData.uploadQueue.push(args[n]);
						}
						swfuploadify.startUpload(swfuploadify.queueData.uploadQueue.shift());
					}
				} else {
					swfuploadify.startUpload();
				}

			});

		}

	}

	// These functions handle all the events that occur with the file uploader
	var handlers = {

		// Triggered when the file dialog is opened
		onDialogOpen : function() {
			// Load the swfupload settings
			var settings = this.settings;

			// Reset some queue info
			this.queueData.errorMsg       = 'Some files were not added to the queue:';
			this.queueData.filesReplaced  = 0;
			this.queueData.filesCancelled = 0;

			// Call the user-defined event handler
			if (settings.onDialogOpen) settings.onDialogOpen.call(this);
		},

		// Triggered when the browse dialog is closed
		onDialogClose :  function(filesSelected, filesQueued, queueLength) {
			// Load the swfupload settings
			var settings = this.settings;

			// Update the queue information
			this.queueData.filesErrored  = filesSelected - filesQueued;
			this.queueData.filesSelected = filesSelected;
			this.queueData.filesQueued   = filesQueued - this.queueData.filesCancelled;
			this.queueData.queueLength   = queueLength;

			// Run the default event handler
			if ($.inArray('onDialogClose', settings.overrideEvents) < 0) {
				if (this.queueData.filesErrored > 0) {
					alert(this.queueData.errorMsg);
				}
			}

			// Call the user-defined event handler
			if (settings.onDialogClose) settings.onDialogClose.call(this, this.queueData);

			// Upload the files if auto is true
			if (settings.auto) $('#' + settings.id).uploadify('upload', '*');
		},

		// Triggered once for each file added to the queue
		onSelect : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			// Check if a file with the same name exists in the queue
			var queuedFile = {};
			for (var n in this.queueData.files) {
				queuedFile = this.queueData.files[n];
				if (queuedFile.uploaded != true && queuedFile.name == file.name) {
					var replaceQueueItem = confirm('The file named "' + file.name + '" is already in the queue.\nDo you want to replace the existing item in the queue?');
					if (!replaceQueueItem) {
						this.cancelUpload(file.id);
						this.queueData.filesCancelled++;
						return false;
					} else {
						$('#' + queuedFile.id).remove();// #CORALIV-727
						delete this.queueData.files[n];
						this.cancelUpload(queuedFile.id);
						this.queueData.filesReplaced++;
					}
				}
			}

			// Get the size of the file
			var fileSize = Math.round(file.size / 1024);
			var suffix   = 'KB';
			if (fileSize > 1000) {
				fileSize = Math.round(fileSize / 1000);
				suffix   = 'MB';
			}
			var fileSizeParts = fileSize.toString().split('.');
			fileSize = fileSizeParts[0];
			if (fileSizeParts.length > 1) {
				fileSize += '.' + fileSizeParts[1].substr(0,2);
			}
			fileSize += suffix;
			
			// Truncate the filename if it's too long
			var fileName = file.name;
			if (fileName.length > 25) {
				fileName = fileName.substr(0,25) + '...';
			}

			// Create the file data object
			itemData = {
				'fileID'     : file.id,
				'instanceID' : settings.id,
				'fileName'   : fileName,
				'fileSize'   : fileSize
			}

			// Create the file item template
			if (settings.itemTemplate == false) {
				settings.itemTemplate = '<div id="${fileID}" class="uploadify-queue-item">\
					<div class="cancel">\
						<a href="javascript:$(\'#${instanceID}\').uploadify(\'cancel\', \'${fileID}\')">X</a>\
					</div>\
					<span class="fileName">${fileName} (${fileSize})</span><span class="data"></span>\
					<div class="uploadify-progress">\
						<div class="uploadify-progress-bar"><!--Progress Bar--></div>\
					</div>\
				</div>';
			}

			// Run the default event handler
			if ($.inArray('onSelect', settings.overrideEvents) < 0) {
				
				// Replace the item data in the template
				itemHTML = settings.itemTemplate;
				for (var d in itemData) {
					itemHTML = itemHTML.replace(new RegExp('\\$\\{' + d + '\\}', 'g'), itemData[d]);
				}

				// Add the file item to the queue
				$('#' + settings.queueID).append(itemHTML);
			}

			this.queueData.queueSize += file.size;
			this.queueData.files[file.id] = file;

			// Call the user-defined event handler
			if (settings.onSelect) settings.onSelect.apply(this, arguments);
		},

		// Triggered when a file is not added to the queue
		onSelectError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Run the default event handler
			if ($.inArray('onSelectError', settings.overrideEvents) < 0) {
				switch(errorCode) {
					case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED:
						if (settings.queueSizeLimit > errorMsg) {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the remaining upload limit (' + errorMsg + ').';
						} else {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the queue size limit (' + settings.queueSizeLimit + ').';
						}
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" exceeds the size limit (' + settings.fileSizeLimit + ').';
						break;
					case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is empty.';
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is not an accepted file type (' + settings.fileTypeDesc + ').';
						break;
				}
			}
			if (errorCode != SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
				delete this.queueData.files[file.id];
			}

			// Call the user-defined event handler
			if (settings.onSelectError) settings.onSelectError.apply(this, arguments);
		},

		// Triggered when all the files in the queue have been processed
		onQueueComplete : function() {
			if (this.settings.onQueueComplete) this.settings.onQueueComplete.call(this, this.settings.queueData);
		},

		// Triggered when a file upload successfully completes
		onUploadComplete : function(file) {
			// Load the swfupload settings
			var settings     = this.settings,
				swfuploadify = this;

			// Check if all the files have completed uploading
			var stats = this.getStats();
			this.queueData.queueLength = stats.files_queued;
			/*this.queueData.queueLength = '*';*/
			if (this.queueData.uploadQueue[0] == '*') {
				if (this.queueData.queueLength > 0) {
					this.startUpload();
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			} else {
				if (this.queueData.uploadQueue.length > 0) {
					this.startUpload(this.queueData.uploadQueue.shift());
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			}

			// Call the default event handler
			if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {
				if (settings.removeCompleted) {
					switch (file.filestatus) {
						case SWFUpload.FILE_STATUS.COMPLETE:
							setTimeout(function() { 
								if ($('#' + file.id)) {
									swfuploadify.queueData.queueSize   -= file.size;
									swfuploadify.queueData.queueLength -= 1;
									delete swfuploadify.queueData.files[file.id]
									$('#' + file.id).fadeOut(500, function() {
										$(this).remove();
									});
								}
							}, settings.removeTimeout * 1000);
							break;
						case SWFUpload.FILE_STATUS.ERROR:
							if (!settings.requeueErrors) {
								setTimeout(function() {
									if ($('#' + file.id)) {
										swfuploadify.queueData.queueSize   -= file.size;
										swfuploadify.queueData.queueLength -= 1;
										delete swfuploadify.queueData.files[file.id];
										$('#' + file.id).fadeOut(500, function() {
											$(this).remove();
										});
									}
								}, settings.removeTimeout * 1000);
							}
							break;
					}
				} else {
					file.uploaded = true;
				}
			}

			// Call the user-defined event handler
			if (settings.onUploadComplete) settings.onUploadComplete.call(this, file);
		},

		// Triggered when a file upload returns an error
		onUploadError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Set the error string
			var errorString = 'Error';
			switch(errorCode) {
				case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
					errorString = 'HTTP Error (' + errorMsg + ')';
					break;
				case SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL:
					errorString = 'Missing Upload URL';
					break;
				case SWFUpload.UPLOAD_ERROR.IO_ERROR:
					errorString = 'IO Error';
					break;
				case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
					errorString = 'Security Error';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
					alert('The upload limit has been reached (' + errorMsg + ').');
					errorString = 'Exceeds Upload Limit';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
					errorString = 'Failed';
					break;
				case SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND:
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
					errorString = 'Validation Error';
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
					errorString = 'Cancelled';
					this.queueData.queueSize   -= file.size;
					this.queueData.queueLength -= 1;
					if (file.status == SWFUpload.FILE_STATUS.IN_PROGRESS || $.inArray(file.id, this.queueData.uploadQueue) >= 0) {
						this.queueData.uploadSize -= file.size;
					}
					// Trigger the onCancel event
					if (settings.onCancel) settings.onCancel.call(this, file);
					delete this.queueData.files[file.id];
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
					errorString = 'Stopped';
					break;
			}

			// Call the default event handler
			if ($.inArray('onUploadError', settings.overrideEvents) < 0) {

				if (errorCode != SWFUpload.UPLOAD_ERROR.FILE_CANCELLED && errorCode != SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED) {
					$('#' + file.id).addClass('uploadify-error');
				}

				// Reset the progress bar
				$('#' + file.id).find('.uploadify-progress-bar').css('width','1px');

				// Add the error message to the queue item
				if (errorCode != SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND && file.status != SWFUpload.FILE_STATUS.COMPLETE) {
					$('#' + file.id).find('.data').html(' - ' + errorString);
				}
			}

			var stats = this.getStats();
			this.queueData.uploadsErrored = stats.upload_errors;

			// Call the user-defined event handler
			if (settings.onUploadError) settings.onUploadError.call(this, file, errorCode, errorMsg, errorString);
		},

		// Triggered periodically during a file upload
		onUploadProgress : function(file, fileBytesLoaded, fileTotalBytes) {
			// Load the swfupload settings
			var settings = this.settings;

			// Setup all the variables
			var timer            = new Date();
			var newTime          = timer.getTime();
			var lapsedTime       = newTime - this.timer;
			if (lapsedTime > 500) {
				this.timer = newTime;
			}
			var lapsedBytes      = fileBytesLoaded - this.bytesLoaded;
			this.bytesLoaded     = fileBytesLoaded;
			var queueBytesLoaded = this.queueData.queueBytesUploaded + fileBytesLoaded;
			var percentage       = Math.round(fileBytesLoaded / fileTotalBytes * 100);
			
			// Calculate the average speed
			var suffix = 'KB/s';
			var mbs = 0;
			var kbs = (lapsedBytes / 1024) / (lapsedTime / 1000);
			    kbs = Math.floor(kbs * 10) / 10;
			if (this.queueData.averageSpeed > 0) {
				this.queueData.averageSpeed = Math.floor((this.queueData.averageSpeed + kbs) / 2);
			} else {
				this.queueData.averageSpeed = Math.floor(kbs);
			}
			if (kbs > 1000) {
				mbs = (kbs * .001);
				this.queueData.averageSpeed = Math.floor(mbs);
				suffix = 'MB/s';
			}
			
			// Call the default event handler
			if ($.inArray('onUploadProgress', settings.overrideEvents) < 0) {
				if (settings.progressData == 'percentage') {
					$('#' + file.id).find('.data').html(' - ' + percentage + '%');
				} else if (settings.progressData == 'speed' && lapsedTime > 500) {
					$('#' + file.id).find('.data').html(' - ' + this.queueData.averageSpeed + suffix);
				}
				$('#' + file.id).find('.uploadify-progress-bar').css('width', percentage + '%');
			}

			// Call the user-defined event handler
			if (settings.onUploadProgress) settings.onUploadProgress.call(this, file, fileBytesLoaded, fileTotalBytes, queueBytesLoaded, this.queueData.uploadSize);
		},

		// Triggered right before a file is uploaded
		onUploadStart : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			var timer        = new Date();
			this.timer       = timer.getTime();
			this.bytesLoaded = 0;
			if (this.queueData.uploadQueue.length == 0) {
				this.queueData.uploadSize = file.size;
			}
			if (settings.checkExisting) {
				$.ajax({
					type    : 'POST',
					async   : false,
					url     : settings.checkExisting,
					data    : {filename: file.name},
					success : function(data) {
						if (data == 1) {
							var overwrite = confirm('A file with the name "' + file.name + '" already exists on the server.\nWould you like to replace the existing file?');
							if (!overwrite) {
								this.cancelUpload(file.id);
								$('#' + file.id).remove();
								if (this.queueData.uploadQueue.length > 0 && this.queueData.queueLength > 0) {
									if (this.queueData.uploadQueue[0] == '*') {
										this.startUpload();
									} else {
										this.startUpload(this.queueData.uploadQueue.shift());
									}
								}
							}
						}
					}
				});
			}

			// Call the user-defined event handler
			if (settings.onUploadStart) settings.onUploadStart.call(this, file); 
		},

		// Triggered when a file upload returns a successful code
		onUploadSuccess : function(file, data, response) {
			// Load the swfupload settings
			var settings = this.settings;
			var stats    = this.getStats();
			this.queueData.uploadsSuccessful = stats.successful_uploads;
			this.queueData.queueBytesUploaded += file.size;

			// Call the default event handler
			if ($.inArray('onUploadSuccess', settings.overrideEvents) < 0) {
				$('#' + file.id).find('.data').html(' - 上传完成');
			}

			// Call the user-defined event handler
			if (settings.onUploadSuccess) settings.onUploadSuccess.call(this, file, data, response); 
		}

	}

	$.fn.uploadify = function(method) {

		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(this, arguments);
		} else {
			$.error('The method ' + method + ' does not exist in $.uploadify');
		}

	}

})();
;

/**
 *	Coral 4.0: uploader
 *
 *	Depends:
 *		jquery.coral.core.js
 *		jquery.coral.component.js
 *
 */
$.component ( "coral.uploader", {
	version: $.coral.version,
	castProperties : ["dataCustom", "formData", "overrideEvents", "buttons", "itemTemplate"],
	options: {				
		// Required Settings
		id: "", 														 	// The ID of the DOM object
		swf: $.coral.scriptPath+'external/swfupload.swf',  // The path to the uploadify SWF file
		uploader : "",  										  	// The path to the server-side upload script			
		// Options
		auto: true,               								    // Automatically upload files when added to the queue
		buttonClass: "",                 						// A class name to add to the browse button DOM object
		buttonCursor: "hand",         				    // The cursor to use with the browse button
		buttonImage: null,                              	// (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
		buttonText: "SELECT FILES",          	// The text to use for the browse button
		checkExisting: false,                           	// The path to a server-side script that checks for existing files on the server
		debug: false,                                        		//Turn on swfUpload debugging mode
		fileObjName: "Filedata",                     	// The name of the file object to use in your server-side script
		fileSizeLimit: 0,                                    		// The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
		fileTypeDesc: "All Files",                    		// The description for file types in the browse dialog
		fileTypeExts: "*.*",              		       		// Allowed extensions in the browse dialog (server-side validation should also be used)
		heigh: 30,                                             		// The height of the browse button
		itemTemplate: false,                        		// The template for the file item in the queue
		method: "post",                                  		// The method to use when sending files to the server-side upload script
		multi: true,                                        		// Allow multiple file selection in the browse dialog
		formData: {},                                      		// An object with additional data to send to the server-side upload script with every file upload
		preventCaching: true,                     		// Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
		progressData: "percentage",           		// ('percentage' or 'speed') Data to show in the queue item during a file upload
		queueID: false,                                 		// The ID of the DOM object to use as a file queue (without the #)
		queueSizeLimit: 999,                        		// The maximum number of files that can be in the queue at one time
		removeCompleted: true,                		// Remove queue items from the queue when they are done uploading
		removeTimeout: 3,                           		// The delay in seconds before removing a queue item if removeCompleted is set to true
		requeueError: false,                       		// Keep errored files in the queue and keep trying to upload them
		successTimeout: 30,                        		// The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
		uploadLimit: 0,                                 		// The maximum number of files you can upload
		width: 120,                                        		// The width of the browse button	
		cls: "",
		displayStyle: "original", // original(原生的样式),custom(定制的带输入框的样式),
		emptyText: "请选择...",
		delay: 1000, //延迟dialog消失的时间
		buttons: null, //[{label: "上传",id: "uploader_btn_upload",click: function (e, ui) {} },{...}],"上传 upload,清空 clear" custom 模式下显示的buttons
		
		// Events
		overrideEvents  : [],             // (Array) A list of default event handlers to skip			
		onCancel: null, 					// Triggered when a file is cancelled from the queue
		onClearQueue : null,  			// Triggered during the 'clear queue' method
		onDestroy: null, 					// Triggered when the uploadify object is destroyed
		onDialogClose: null, 			// Triggered when the browse dialog is closed
		onDialogOpen: null, 			// Triggered when the browse dialog is opened
		onDisable: null, 					// Triggered when the browse button gets disabled
		onEnable: null, 					// Triggered when the browse button gets enabled
		onFallback: null, 					// Triggered is Flash is not detected
		onNoflash: null,
		onInit: null, 							// Triggered when Uploadify is initialized
		onQueueComplete: null, 	// Triggered when all files in the queue have been uploaded
		onSelectError: null, 		// Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
		onSelect: null, 			// Triggered for each file that is selected
		onNoFlash: null,			// Triggered for computer is Flash
		onSWFReady: null, 			// Triggered when the SWF button is loaded
		onUploadComplete: null, 	// Triggered when a file upload completes (success or error)
		onUploadError: null, 			// Triggered when a file upload returns an error
		onUploadSuccess: null, 		// Triggered when a file is uploaded successfully
		onUploadProgress: null, 	// Triggered every time a file progress is updated
		onUploadStart: null			// Triggered immediately before a file upload starts
	},
	_create: function() {
		var that = this;		
		that._initElement();
		//that._flashCheck();
		var isFlash = that._flashCheck();
		if(isFlash == false){
			that._trigger( "onNoFlash", null, [] );
		}
	},
	_initElement: function () {
		var that = this,
			opts = that.options,
			events = {};	

		// Initialize structure
		if(typeof that.element.attr("id") != "undefined") {
    		opts.id = that.element.attr("id");
    	} else if (opts.id){
    		that.element.attr("id", opts.id);
    	}		
		if(typeof that.element.attr("name") != "undefined") {
    		opts.name = that.element.attr("name");
    	} else if (opts.name) {
    		that.element.attr("name", opts.name);
    	}
		
		delete opts.id;			
		events = that.getEventsObj();
		
		opts = $.extend({}, opts, events);
		this._initUploder(opts);
		opts.id = that.element.attr("id");
	},
	//检测电脑（IE8）下是否安装了flash
/*	_flashCheck: function(){
		var hasFlash = true;
		try {
			if (document.all) {
				var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
				if(!swf){
					hasFlash = false;
				}
			} else {
				var swf = navigator.plugins["Shockwave Flash"];
				if(!swf){
					hasFlash = false;
				}
			}
			return hasFlash;
		} catch (e){
			
			return hasFlash;
		}
	},*/
	_flashCheck: function(){
		var isIE = !-[1,];
		var hasFlash = true;
		if(isIE){
		    try{
		        var swf1 = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
		        hasFlash = true;
		    }
		    catch(e){
		        hasFlash = false;
		    }
		}
		else {
		    try{
		    	if(navigator.plugins && navigator.plugins.length > 0){
		    		var swf2 = navigator.plugins['Shockwave Flash'];
		    		if(swf2 == undefined){
		    			hasFlash = false;
		    		}
		    	}
		        else {
		        	hasFlash = true;
		        }
		    }
		    catch(e){
		    	hasFlash = false;
		    }
		}
		return hasFlash;
	},
	
	// methods
	component: function () {
		return this.uiUploader;
	},
	destroy: function () {
		this.uploader.uploadify( "destroy" );
	},
	disable: function (isDisabled) {
		this.uploader.uploadify( "disable", isDisabled );
	},
	settings: function (name, value, resetObjects) {
		this.uploader.uploadify( "settings", name, value, resetObjects);
	},
	stop: function () {
		this.uploader.uploadify( "stop" );
	},
	upload: function(option) {
		if ("original" == this.options.displayStyle || !this._isQueueDialog()) {
			this.uploader.uploadify("upload", option);
			return ;
		}
		
		if (this.select.length == 0) return;
		
		var that = this,
			id = this.element.attr("id");
		
		$("#" + id + "_queue").dialog("open");
	},
    getvalue: function(){
    	if (this.select.length == 0) alert( "none file");
    	return this.select.join(",");
    },
	cancel: function() {
		this.uploader.uploadify("cancel");
	},
	clear: function(option) {
		if ("custom" == this.options.displayStyle) {
			this.select = [];
			this.uiUploader.find(".coral-file").html("请选择...");
			this.uiUploader.find("object").attr("title","请选择...");
		}
		
		this.uploader.uploadify("cancel");
		this.clearQueue();
	},
	/**
	 * 清除队列文件
	**/
	clearQueue: function() {
		this.uploader.clearQueue() ;
	},
	uploadify: function () {
		return this.uploader ;
	},
	/**
		获取队列文件数据
	**/
	queueData: function() {
		return this.uploader.data("uploadify").queueData ;
	},
	/**
	 * 获取buttons数据结构
	 * @returns
	 */
	_getButtons: function () {
		if (typeof this.options.buttons === "object") return this.options.buttons;
		if (typeof this.options.buttons !== "string") return [];

		var that = this,
			opts = this.options,
			buttons = this.options.buttons,
			buttonsArr = [];
		
		var tempArr = $.trim( buttons ).split( "," );
		for ( var i in tempArr ) {
			var buttonItem = {},
				itemArr = tempArr[i].split(" ");				
			
			buttonItem.label = itemArr[0];
			buttonItem.click = itemArr[1];
			
			buttonsArr.push( buttonItem );
		}
			
		return buttonsArr;
	},
	/**
	 * callback click handler
	 */
	_triggerClick: function ( handler, event, data ) {
		var that = this;
		
		var _fn = $.coral.toFunction(handler);
		event = $.Event( event );
		
		return _fn.apply( that.element[0], [ event ].concat( data )); 
	},
	/**
	 * create buttons when the displayStyle is custom
	 */
	_createButtons: function() {
		var that = this,
			opts = this.options,
			buttons = this._getButtons();
		
		var $icons = $("<span class=\"coral-uploader-btn-icons coral-corner-right\"></span>");
		that.uiBorder.append( $icons );

		$.each ( buttons, function ( index, item ) {
			var label = item.label,
				id = item.id,
				handler = item.click,
				callbackData = {},
				$icon = $("<span class=\"coral-uploader-btn-ico icon coral-uploader-btn-textico\"></span>");
			
			if (label) {
				$icon.html(label);
				callbackData["label"] = label;
			}
			if (id) {
				$icon.attr("data-id", id);
				callbackData["id"] = id;
			}
			$icon.bind("click" + that.eventNamespace, function (e) {
				if ( that.options.disabled ) return;
				
				that._triggerClick( handler, e , callbackData );
			});				
			$icons.append($icon);
		});
	},
	/**
	 * initialize uploader
	 */
	_initUploder: function(options) {
		var that = this,
			id = that.element.attr("id");
		
		that.uiUploader = $( "<span class=\"coral-uploader\"></span>" );	
		that.uiBorder =  $( "<span class=\"coral-uploader-border coral-corner-all\"></span>" );
		that.uploader = $("<div id=\""+ id +"_uploader\"></div>");
		that.element.after( that.uiUploader );
		that.uiUploader.append(that.uiBorder);
		that.uiBorder.append(that.element);
		that.element.hide();
		
		if (options.displayStyle == "original") {	
			that.element.before( that.uploader );
			this.uploader.uploadify( options );
			return ;
		}
		
		this.uiUploader.addClass("coral-uploader-custom coral-textbox");
		this.uiBorder.addClass("coral-textbox-border");
		if (options.buttons) {
			this._createButtons();
		}
		that.select = [];			
		$(this.element).wrap("<span class=\"coral-file-default\"></span>")
			.before("<span class='coral-file'>" + options.emptyText + "</span>")
			.before( that.uploader );
		
		var opts = $.extend(options, {
			height: 28,
			width: 800
		});
		if (!opts.queueID) {
			$(this.element).before("<div id='" + id + "_queue'></div>");
			$("#" + id + "_queue").dialog({
				autoOpen: false,
				title: "上传",
				modal: false,
				resizable: false,
				onOpen: function () {
					that.uploader.uploadify("upload","*");
				}
			});
			options.queueID = id+"_queue";
			this.hasDialog = true; // 说明进度条在dialog中显示
		}
		that.uploader.uploadify(opts);			
	},	
	_isQueueDialog: function() {
		return this.hasDialog;
	},
	_reloadUploader: function() {
		var that = this,
			opts = this.options;
		
		delete opts.id;
		that.uploader.uploadify( opts );
		opts.id = that.element.attr("id");
	},
	getEventsObj: function () {		
		var that = this,
			opts = this.options,
			id = this.element.attr("id");
		
		return {
			onCancel: function (file) {
				that._trigger( "onCancel", null, [{file:file}] );
			},
			onClearQueue: function (queueItemCount) {
				that._trigger( "onClearQueue", null, [{queueItemCount:queueItemCount}] );
			},
			onDestroy: function() {
				that._trigger( "onDestroy", null, [] );
			},
			onDialogClose: function(queueData) {
				if ("custom" == opts.displayStyle && opts.auto && that._isQueueDialog()) {
					$("#" + id + "_queue").dialog("open");
				}
				that._trigger( "onDialogClose", null, [{queueData:queueData}] );
			},
			onDialogOpen: function() {
				if ("custom" == opts.displayStyle) {
	//				that.select = [];
				}
				that._trigger( "onDialogOpen", null, [] );
			},
			onDisable: function() {
				that._trigger( "onDisable", null, [] );
			},
			onEnable: function() {
				that._trigger( "onEnable", null, [] );
			},
			onFallback : function() {
				that._trigger( "onFallback ", null, [] );
			},
			onNoflash : function() {
				return that.uiBorder;
			},
			onInit: function(swfuploadify) {
				that._trigger( "onInit", null, [{swfuploadify:swfuploadify}] );
			},
			onQueueComplete: function(queueData) {
				var id = that.element.attr("id");
				
				if ( "custom" == opts.displayStyle && that._isQueueDialog())  {
					setTimeout(function() {
		        		$("#" + id + "_queue").dialog("close");
		        		that.select = [];
		        	}, opts.delay);
				}
				that._trigger( "onQueueComplete", null, [{queueData:queueData}] );
			},
			onSelectError: function(file, errorCode, errorMsg) {
				that._trigger( "onSelectError", null, [{arguments:arguments}] );
			},
			onSelect: function(file) {
				if ( "custom" == opts.displayStyle )  {
					that.select.push(file.name);
		        	that.uiUploader.find(".coral-file").html(that.select.join(","));
		        	that.uiUploader.find("object").attr("title",that.select.join(","));
				}

				that._trigger( "onSelect", null, [{file:file}] );
			},
			onSWFReady: function() {
				that._trigger( "onSWFReady", null, [] );
			},
			onUploadComplete: function(file) {
				that._trigger( "onUploadComplete", null, [{file:file}] );
			},
			onUploadError: function(file, errorCode, errorMsg, errorString) {
				that._trigger( "onUploadError", null, [{file:file, errorCode:errorCode, errorMsg:errorMsg, errorString:errorString}] );
			},
			onUploadSuccess: function (file, data, response) {
				that._trigger( "onUploadSuccess", null, [{file:file, data:data, response:response}] );
			},
			onUploadProgress: function(file, fileBytesLoaded, fileTotalBytes, queueBytesLoaded, uploadSize) {
				that._trigger( "onUploadProgress", null, [{file:file, fileBytesLoaded:fileBytesLoaded, fileTotalBytes:fileTotalBytes, queueBytesLoaded:queueBytesLoaded, uploadSize:uploadSize}] );
			},
			onUploadStart: function(file) {
				that._trigger( "onUploadStart", null, [{file:file}] );
			}				
		};
	},	
	_setOption: function ( key, value ) {
		var that = this;
		
		if  ( key === "id" || key === "name" ) {
			return ;
		}
		
		this._super( key, value );
		
		if (key === "emptyText") {
			this.uiUploader.find(".coral-file").html(value);
			return;
		}
		
		that.settings( key, value);
	},
	_destroy: function() {
		var that = this;
		
		that.uiUploader.replaceWith( that.element );
	}
});
;

var tooltip = $.component( "coral.tooltip", {
	version: "4.0.1",
	options: {
		content: function() {
			// support: IE<9, Opera in jQuery <1.7
			// .text() can't accept undefined, so coerce to a string
			var title = $( this ).attr( "title" ) || "";
			// Escape title, since we're going from an attribute to raw HTML
			return $( "<a>" ).text( title ).html();
		},
		hide: true,
		// Disabled elements have inconsistent behavior across browsers (#8661)
		items: "[title]:not([disabled])",
		position: {
			my: "left top+15",
			at: "left bottom",
			collision: "flipfit flip"
		},
		show: true,
		tooltipClass: null,
		track: false,

		// callbacks
		onClose: null,
		onOpen: null
	},

	_addDescribedBy: function( elem, id ) {
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
		describedby.push( id );
		elem
			.data( "coral-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	},

	_removeDescribedBy: function( elem ) {
		var id = elem.data( "coral-tooltip-id" ),
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
			index = $.inArray( id, describedby );

		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "coral-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	},

	_create: function() {
		this._on({
			mouseover: "open",
			focusin: "open"
		});

		// IDs of generated tooltips, needed for destroy
		this.tooltips = {};
		// IDs of parent tooltips where we removed the title attribute
		this.parents = {};

		if ( this.options.disabled ) {
			this._disable();
		}

		// Append the aria-live region so tooltips announce correctly
		this.liveRegion = $( "<div>" )
			.attr({
				role: "log",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "coral-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );
	},

	_setOption: function( key, value ) {
		var that = this;

		if ( key === "disabled" ) {
			this[ value ? "_disable" : "_enable" ]();
			this.options[ key ] = value;
			// disable element style changes
			return;
		}

		this._super( key, value );

		if ( key === "content" ) {
			$.each( this.tooltips, function( id, element ) {
				that._updateContent( element );
			});
		}
	},

	_disable: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );
		});

		// remove title attributes to prevent native tooltips
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.is( "[title]" ) ) {
				element
					.data( "coral-tooltip-title", element.attr( "title" ) )
					.removeAttr( "title" );
			}
		});
	},

	_enable: function() {
		// restore title attributes
		this.element.find( this.options.items ).addBack().each(function() {
			var element = $( this );
			if ( element.data( "coral-tooltip-title" ) ) {
				element.attr( "title", element.data( "coral-tooltip-title" ) );
			}
		});
	},

	open: function( event ) {
		var that = this,
			target = $( event ? event.target : this.element )
				// we need closest here due to mouseover bubbling,
				// but always pointing at the same event target
				.closest( this.options.items );

		// No element to show a tooltip for or the tooltip is already open
		if ( !target.length || target.data( "coral-tooltip-id" ) ) {
			return;
		}

		if ( target.attr( "title" ) ) {
			target.data( "coral-tooltip-title", target.attr( "title" ) );
		}

		target.data( "coral-tooltip-open", true );

		// kill parent tooltips, custom or native, for hover
		if ( event && event.type === "mouseover" ) {
			target.parents().each(function() {
				var parent = $( this ),
					blurEvent;
				if ( parent.data( "coral-tooltip-open" ) ) {
					blurEvent = $.Event( "blur" );
					blurEvent.target = blurEvent.currentTarget = this;
					that.close( blurEvent, true );
				}
				if ( parent.attr( "title" ) ) {
					parent.uniqueId();
					that.parents[ this.id ] = {
						element: this,
						title: parent.attr( "title" )
					};
					parent.attr( "title", "" );
				}
			});
		}

		this._updateContent( target, event );
	},

	_updateContent: function( target, event ) {
		var content,
			contentOption = this.options.content,
			that = this,
			eventType = event ? event.type : null;

		if ( typeof contentOption === "string" ) {
			return this._open( event, target, contentOption );
		}

		content = contentOption.call( target[0], function( response ) {
			// ignore async response if tooltip was closed already
			if ( !target.data( "coral-tooltip-open" ) ) {
				return;
			}
			// IE may instantly serve a cached response for ajax requests
			// delay this call to _open so the other call to _open runs first
			that._delay(function() {
				// jQuery creates a special event for focusin when it doesn't
				// exist natively. To improve performance, the native event
				// object is reused and the type is changed. Therefore, we can't
				// rely on the type being correct after the event finished
				// bubbling, so we set it back to the previous value. (#8740)
				if ( event ) {
					event.type = eventType;
				}
				this._open( event, target, response );
			});
		});
		if ( content ) {
			this._open( event, target, content );
		}
	},

	_open: function( event, target, content ) {
		var tooltip, events, delayedShow, a11yContent,
			positionOption = $.extend( {}, this.options.position );

		if ( !content ) {
			return;
		}

		// Content can be updated multiple times. If the tooltip already
		// exists, then just update the content and bail.
		tooltip = this._find( target );
		if ( tooltip.length ) {
			tooltip.find( ".coral-tooltip-content" ).html( content );
			return;
		}

		// if we have a title, clear it to prevent the native tooltip
		// we have to check first to avoid defining a title if none exists
		// (we don't want to cause an element to start matching [title])
		//
		// We use removeAttr only for key events, to allow IE to export the correct
		// accessible attributes. For mouse events, set to empty string to avoid
		// native tooltip showing up (happens only when removing inside mouseover).
		if ( target.is( "[title]" ) ) {
			if ( event && event.type === "mouseover" ) {
				target.attr( "title", "" );
			} else {
				target.removeAttr( "title" );
			}
		}

		tooltip = this._tooltip( target );
		this._addDescribedBy( target, tooltip.attr( "id" ) );
		tooltip.find( ".coral-tooltip-content" ).html( content );
		// Support: Voiceover on OS X, JAWS on IE <= 9
		// JAWS announces deletions even when aria-relevant="additions"
		// Voiceover will sometimes re-read the entire log region's contents from the beginning
		this.liveRegion.children().hide();
		if ( content.clone ) {
			a11yContent = content.clone();
			a11yContent.removeAttr( "id" ).find( "[id]" ).removeAttr( "id" );
		} else {
			a11yContent = content;
		}
		$( "<div>" ).html( a11yContent ).appendTo( this.liveRegion );

		function position( event ) {
			positionOption.of = event;
			if ( tooltip.is( ":hidden" ) ) {
				return;
			}
			tooltip.position( positionOption );
		}
		if ( this.options.track && event && /^mouse/.test( event.type ) ) {
			this._on( this.document, {
				mousemove: position
			});
			// trigger once to override element-relative positioning
			position( event );
		} else {
			tooltip.position( $.extend({
				of: target
			}, this.options.position ) );
		}

		this.hiding = false;
		this.closing = false;
		tooltip.hide();

		this._show( tooltip, this.options.show );
		// Handle tracking tooltips that are shown with a delay (#8644). As soon
		// as the tooltip is visible, position the tooltip using the most recent
		// event.
		if ( this.options.show && this.options.show.delay ) {
			delayedShow = this.delayedShow = setInterval(function() {
				if ( tooltip.is( ":visible" ) ) {
					position( positionOption.of );
					clearInterval( delayedShow );
				}
			}, $.fx.interval );
		}

		this._trigger( "onOpen", event, { tooltip: tooltip } );

		events = {
			keyup: function( event ) {
				if ( event.keyCode === $.coral.keyCode.ESCAPE ) {
					var fakeEvent = $.Event(event);
					fakeEvent.currentTarget = target[0];
					this.close( fakeEvent, true );
				}
			}
		};

		// Only bind remove handler for delegated targets. Non-delegated
		// tooltips will handle this in destroy.
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			events.remove = function() {
				this._removeTooltip( tooltip );
			};
		}

		if ( !event || event.type === "mouseover" ) {
			events.mouseleave = "close";
		}
		if ( !event || event.type === "focusin" ) {
			events.focusout = "close";
		}
		this._on( true, target, events );
	},

	close: function( event ) {
		var that = this,
			target = $( event ? event.currentTarget : this.element ),
			tooltip = this._find( target );

		// disabling closes the tooltip, so we need to track when we're closing
		// to avoid an infinite loop in case the tooltip becomes disabled on close
		if ( this.closing ) {
			return;
		}

		// Clear the interval for delayed tracking tooltips
		clearInterval( this.delayedShow );

		// only set title if we had one before (see comment in _open())
		// If the title attribute has changed since open(), don't restore
		if ( target.data( "coral-tooltip-title" ) && !target.attr( "title" ) ) {
			target.attr( "title", target.data( "coral-tooltip-title" ) );
		}

		this._removeDescribedBy( target );

		this.hiding = true;
		tooltip.stop( true );
		this._hide( tooltip, this.options.hide, function() {
			that._removeTooltip( $( this ) );
			this.hiding = false;
			this.closing = false;
		});

		target.removeData( "coral-tooltip-open" );
		this._off( target, "mouseleave focusout keyup" );

		// Remove 'remove' binding only on delegated targets
		if ( target[ 0 ] !== this.element[ 0 ] ) {
			this._off( target, "remove" );
		}
		this._off( this.document, "mousemove" );

		if ( event && event.type === "mouseleave" ) {
			$.each( this.parents, function( id, parent ) {
				$( parent.element ).attr( "title", parent.title );
				delete that.parents[ id ];
			});
		}

		this.closing = true;
		this._trigger( "onClose", event, { tooltip: tooltip } );
		if ( !this.hiding ) {
			this.closing = false;
		}
	},

	_tooltip: function( element ) {
		var tooltip = $( "<div>" )
				.attr( "role", "tooltip" )
				.addClass( "coral-tooltip coral-component coral-corner-all coral-component-content " +
					( this.options.tooltipClass || "" ) ),
			id = tooltip.uniqueId().attr( "id" );

		$( "<div>" )
			.addClass( "coral-tooltip-content" )
			.appendTo( tooltip );

		tooltip.appendTo( this.document[0].body );
		this.tooltips[ id ] = element;
		return tooltip;
	},

	_find: function( target ) {
		var id = target.data( "coral-tooltip-id" );
		return id ? $( "#" + id ) : $();
	},

	_removeTooltip: function( tooltip ) {
		tooltip.remove();
		delete this.tooltips[ tooltip.attr( "id" ) ];
	},

	_destroy: function() {
		var that = this;

		// close open tooltips
		$.each( this.tooltips, function( id, element ) {
			// Delegate to close method to handle common cleanup
			var event = $.Event( "blur" );
			event.target = event.currentTarget = element[0];
			that.close( event, true );

			// Remove immediately; destroying an open tooltip doesn't use the
			// hide animation
			$( "#" + id ).remove();

			// Restore the title
			if ( element.data( "coral-tooltip-title" ) ) {
				// If the title attribute has changed since open(), don't restore
				if ( !element.attr( "title" ) ) {
					element.attr( "title", element.data( "coral-tooltip-title" ) );
				}
				element.removeData( "coral-tooltip-title" );
			}
		});
		this.liveRegion.remove();
	}
});
;


function spinner_modifier( fn ) {
	return function() {
		var previous = this.element.val();
		fn.apply( this, arguments );
		this._refresh();
		if ( previous !== this.element.val() ) {
			this._trigger( "onChange" );
		}
	};
}

var spinner = $.component( "coral.spinner", $.coral.formelement, {
	version: "4.0.3",
	castProperties : ["triggers"],
	defaultElement: "<input>",
	componentEventPrefix: "spin",
	options: {
		culture: null,
		icons: {
			down: "cui-icon-arrow-down3",
			up: "cui-icon-arrow-up3"
		},
		incremental: true,
		max: null,
		min: null,
		numberFormat: null,
		page: 10,
		step: 1,

		onChange: null,
		onSpin: null,
		onStart: null,
		onStop: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},

	_create: function() {
		if (typeof this.element.attr("id") != "undefined") {
    		this.options.id = this.element.attr("id");
    	} else if (this.options.id) {
    		this.element.attr("id", this.options.id);
    	}
		if (typeof this.element.attr("name") != "undefined") {
    		this.options.name = this.element.attr("name");
    	} else if (this.options.name) {
    		this.element.attr("name", this.options.name);
    	}
		if (typeof this.element.attr("value") != "undefined") {
    		this.options.value = this.element.attr("value");
    	}
		
		// handle string values that need to be parsed
		this._setOption( "max", this.options.max );
		this._setOption( "min", this.options.min );
		this._setOption( "step", this.options.step );
		
		// Only format if there is a value, prevents the field from being marked
		// as invalid in Firefox, see #9573.
		if ( this.value() !== "" ) {
			// Format the value, but don't constrain.
			this._value( this.element.val(), true );
		}
		if ($.trim(this.element.val()) !== "") {
    		this.options.value = this.element.text();
    	} else if (this.options.value) {
    		this.element.val( this.options.value );
    	}
		this.originalValue = this.getValue();
		this._draw();
		this._on( this._events );
		this._refresh();

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the component is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
	},

	_getCreateOptions: function() {
		var options = {},
			element = this.element;

		$.each( [ "min", "max", "step" ], function( i, option ) {
			var value = element.attr( option );
			if ( value !== undefined && value.length ) {
				options[ option ] = value;
			}
		});

		return options;
	},

	_events: {
		"mouseenter.coral-textbox-border": function( event ) {
			if ( typeof this.options.isLabel == "boolean" && this.options.isLabel ) { 
				return;
			}
			if ( typeof this.options.readonly == "boolean" && this.options.readonly ) { 
				return;
			}
			
			this.component().addClass("coral-textbox-hover");
			this._trigger( "onMouseEnter", event, [] );
		},
		"mouseleave.coral-textbox-border": function( event ) {
			if ( typeof this.options.isLabel == "boolean" && this.options.isLabel ) { 
				return;
			}
			if ( typeof this.options.readonly == "boolean" && this.options.readonly  ) { 
				return;
			}	
			
			this.component().removeClass( "coral-textbox-hover" );	
			this._trigger( "onMouseLeave", event, [] );
		},
		keydown: function( event ) {
			if ( this._start( event ) && this._keydown( event ) ) {
				event.preventDefault();
			}
		},
		keyup: "_stop",
		focus: function() {
			this.previous = this.element.val();
		},
		blur: function( event ) {
			var val,newVal;
			if ( this.cancelBlur ) {
				delete this.cancelBlur;
				return;
			}
			this._stop();
			this._refresh();
			val = this._parse(this.element.val());
			if(isNaN(val)){
				val = 0;
			}
			newVal = this._restrictMinMax(val);
			this.setValue(newVal);
			if ( this.previous !== this.element.val() ) {
				this._trigger( "onChange", event );
			}
		},
		mousewheel: function( event, delta ) {
			if ( !delta ) {
				return;
			}
			if ( !this.spinning && !this._start( event ) ) {
				return false;
			}

			this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
			clearTimeout( this.mousewheelTimer );
			this.mousewheelTimer = this._delay(function() {
				if ( this.spinning ) {
					this._stop( event );
				}
			}, 100 );
			event.preventDefault();
		},
		"mousedown .coral-spinner-button": function( event ) {
			var previous;

			// We never want the buttons to have focus; whenever the user is
			// interacting with the spinner, the focus should be on the input.
			// If the input is focused then this.previous is properly set from
			// when the input first received focus. If the input is not focused
			// then we need to set this.previous based on the value before spinning.
			previous = this.element[0] === this.document[0].activeElement ?
				this.previous : this.element.val();
			function checkFocus() {
				var isActive = this.element[0] === this.document[0].activeElement;
				if ( !isActive ) {
					this.element.focus();
					this.previous = previous;
					// support: IE
					// IE sets focus asynchronously, so we need to check if focus
					// moved off of the input because the user clicked on the button.
					this._delay(function() {
						this.previous = previous;
					});
				}
			}

			// ensure focus is on (or stays on) the text field
			event.preventDefault();
			checkFocus.call( this );

			// support: IE
			// IE doesn't prevent moving focus even with event.preventDefault()
			// so we set a flag to know when we should ignore the blur event
			// and check (again) if focus moved off of the input.
			this.cancelBlur = true;
			this._delay(function() {
				delete this.cancelBlur;
				checkFocus.call( this );
			});

			if ( this._start( event ) === false ) {
				return;
			}

			this._repeat( null, $( event.currentTarget ).hasClass( "coral-spinner-up" ) ? 1 : -1, event );
		},
		"mouseup .coral-spinner-button": "_stop",
		"mouseenter .coral-spinner-button": function( event ) {
			// button will add coral-state-active if mouse was down while mouseleave and kept down
			if ( !$( event.currentTarget ).hasClass( "coral-state-active" ) ) {
				return;
			}

			if ( this._start( event ) === false ) {
				return false;
			}
			this._repeat( null, $( event.currentTarget ).hasClass( "coral-spinner-up" ) ? 1 : -1, event );
		},
		// TODO: do we really want to consider this a stop?
		// shouldn't we just stop the repeater and wait until mouseup before
		// we trigger the stop event?
		"mouseleave .coral-spinner-button": "_stop"
	},

	_draw: function() {
		var uiSpinner = this.uiSpinner = this.element
			.addClass( "coral-spinner-input coral-textbox-default" )
			.attr( "autocomplete", "off" )
			.wrap( this._uiSpinnerHtml() )
			.parent()
				// add buttons
				.append( this._buttonHtml() );

		this.element.attr( "role", "spinbutton" );
		if (this.options.vertical) {
			this.component().addClass("spinner-vertical");
		}
		// button bindings
		this.buttons = uiSpinner.find( ".coral-spinner-button" )
			.attr( "tabIndex", -1 )
			.button()
			.removeClass( "coral-corner-all" );

		// IE 6 doesn't understand height: 50% for the buttons
		// unless the wrapper has an explicit height
		if (!this.options.vertical) {
			if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
					uiSpinner.height() > 0 ) {
				uiSpinner.height( uiSpinner.height() );
			}
		}

		// disable spinner if element was already disabled
		if ( this.options.disabled ) {
			this.disable();
		}
	},

	_keydown: function( event ) {
		var options = this.options,
			keyCode = $.coral.keyCode;

		switch ( event.keyCode ) {
		case keyCode.UP:
			this._repeat( null, 1, event );
			return true;
		case keyCode.DOWN:
			this._repeat( null, -1, event );
			return true;
		case keyCode.PAGE_UP:
			this._repeat( null, options.page, event );
			return true;
		case keyCode.PAGE_DOWN:
			this._repeat( null, -options.page, event );
			return true;
		}

		return false;
	},

	_uiSpinnerHtml: function() {
		return "<span class='coral-spinner coral-textbox coral-component'><span class='coral-textbox-border coral-corner-all'></span></span>";
	},

	_buttonHtml: function() {
		return "" +
			"<a class='coral-spinner-button coral-spinner-up coral-corner-tr'>" +
				"<span class='icon " + this.options.icons.up + "'></span>" +
			"</a>" +
			"<a class='coral-spinner-button coral-spinner-down coral-corner-br'>" +
				"<span class='icon " + this.options.icons.down + "'></span>" +
			"</a>";
	},

	_start: function( event ) {
		if ( !this.spinning && this._trigger( "onStart", event ) === false ) {
			return false;
		}

		if ( !this.counter ) {
			this.counter = 1;
		}
		this.spinning = true;
		return true;
	},

	_repeat: function( i, steps, event ) {
		i = i || 500;

		clearTimeout( this.timer );
		this.timer = this._delay(function() {
			this._repeat( 40, steps, event );
		}, i );

		this._spin( steps * this.options.step, event );
	},

	_spin: function( step, event ) {
		var value = this.value() || 0;

		if ( !this.counter ) {
			this.counter = 1;
		}

		value = this._adjustValue( value + step * this._increment( this.counter ) );

		if ( !this.spinning || this._trigger( "onSpin", event, { value: value } ) !== false) {
			this._value( value );
			this.counter++;
		}
	},

	_increment: function( i ) {
		var incremental = this.options.incremental;

		if ( incremental ) {
			return $.isFunction( incremental ) ?
				incremental( i ) :
				Math.floor( i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1 );
		}

		return 1;
	},

	_precision: function() {
		var precision = this._precisionOf( this.options.step );
		if ( this.options.min !== null ) {
			precision = Math.max( precision, this._precisionOf( this.options.min ) );
		}
		return precision;
	},

	_precisionOf: function( num ) {
		var str = num.toString(),
			decimal = str.indexOf( "." );
		return decimal === -1 ? 0 : str.length - decimal - 1;
	},

	_adjustValue: function( value ) {
		var base, aboveMin,
			options = this.options;

		// make sure we're at a valid step
		// - find out where we are relative to the base (min or 0)
		base = options.min !== null ? options.min : 0;
		aboveMin = value - base;
		// - round to the nearest step
		aboveMin = Math.round(aboveMin / options.step) * options.step;
		// - rounding is based on 0, so adjust back to our base
		value = base + aboveMin;

		// fix precision from bad JS floating point math
		value = parseFloat( value.toFixed( this._precision() ) );

		// clamp the value
		if ( options.max !== null && value > options.max) {
			return options.max;
		}
		if ( options.min !== null && value < options.min ) {
			return options.min;
		}

		return value;
	},

	_stop: function( event ) {
		if ( !this.spinning ) {
			return;
		}

		clearTimeout( this.timer );
		clearTimeout( this.mousewheelTimer );
		this.counter = 0;
		this.spinning = false;
		this._trigger( "onStop", event );
	},
	_restrictMinMax: function(val){
		var min = this.options.min,
			max = this.options.max;
		var newVal = (min && val < min ? min : val);
		return (max && newVal > max ? max : newVal);
	},
	_setOption: function( key, value ) {
		if ( key === "value" ) {
			if ( typeof value !== "undefined" ) {
				this.value( value );
			} else {
				this.value( );
			}
		}
		
		if ( key === "culture" || key === "numberFormat" ) {
			var prevValue = this._parse( this.element.val() );
			this.options[ key ] = value;
			this.element.val( this._format( prevValue ) );
			return;
		}

		if ( key === "max" || key === "min" || key === "step" ) {
			if ( typeof value === "string" ) {
				value = this._parse( value );
			}
		}
		if ( key === "icons" ) {
			this.buttons.first().find( ".coral-icon" )
				.removeClass( this.options.icons.up )
				.addClass( value.up );
			this.buttons.last().find( ".coral-icon" )
				.removeClass( this.options.icons.down )
				.addClass( value.down );
		}

		this._super( key, value );

		if ( key === "disabled" ) {
			this.component().toggleClass( "coral-state-disabled", !!value );
			this.element.prop( "disabled", !!value );
			this.buttons.button( value ? "disable" : "enable" );
		}
	},

	_setOptions: spinner_modifier(function( options ) {
		this._super( options );
	}),

	_parse: function( val ) {
		if ( typeof val === "string" && val !== "" ) {
			val = window.Globalize && this.options.numberFormat ?
				Globalize.parseFloat( val, 10, this.options.culture ) : +val;
		}
		return val;
	},

	_format: function( value ) {
		if ( value === "" ) {
			return "";
		}
		return window.Globalize && this.options.numberFormat ?
			Globalize.format( value, this.options.numberFormat, this.options.culture ) :
			value;
	},

	_refresh: function() {
		this.element.attr({
			"aria-valuemin": this.options.min,
			"aria-valuemax": this.options.max,
			// TODO: what should we do with values that can't be parsed?
			"aria-valuenow": this._parse( this.element.val() )
		});
	},

	isValid: function() {
		var value = this.value();

		// null is invalid
		if ( value === null ) {
			return false;
		}

		// if value gets adjusted, it's invalid
		return value === this._adjustValue( value );
	},

	// update the value without triggering change
	_value: function( value, allowAny ) {
		var parsed;
		if ( value !== "" ) {
			parsed = this._parse( value );
			if ( parsed !== null ) {
				if ( !allowAny ) {
					parsed = this._adjustValue( parsed );
				}
				value = this._format( parsed );
			}
		}
		this.element.val( value );
		this._refresh();
	},

	_destroy: function() {
		this.element
			.removeClass( "coral-spinner-input" )
			.removeClass("coral-textbox-default")
			.prop( "disabled", false )
			.removeAttr( "autocomplete" )
			.removeAttr( "role" )
			.removeAttr( "aria-valuemin" )
			.removeAttr( "aria-valuemax" )
			.removeAttr( "aria-valuenow" );
		this.component().replaceWith( this.element );
	},
	reset: function(){
		this.setValue(this.originalValue);
	},
	stepUp: spinner_modifier(function( steps ) {
		this._stepUp( steps );
	}),
	_stepUp: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * this.options.step );
			this._stop();
		}
	},

	stepDown: spinner_modifier(function( steps ) {
		this._stepDown( steps );
	}),
	_stepDown: function( steps ) {
		if ( this._start() ) {
			this._spin( (steps || 1) * -this.options.step );
			this._stop();
		}
	},

	pageUp: spinner_modifier(function( pages ) {
		this._stepUp( (pages || 1) * this.options.page );
	}),

	pageDown: spinner_modifier(function( pages ) {
		this._stepDown( (pages || 1) * this.options.page );
	}),
	setValue: function( newVal ) {
		if (newVal == 0) {
			newVal = 0
		}else {
			newVal = newVal || "";
		}
		this.value( newVal );
	},
	getValue: function( newVal ) {
		return this.value()+"";
	},
	value: function( newVal ) {
		if ( !arguments.length ) {
			return this._parse( this.element.val() );
		}
		spinner_modifier( this._value ).call( this, newVal );
	},

	component: function() {
		return this.uiSpinner.parent();
	}
});
;



var slider = $.component( "coral.slider", $.coral.mouse, {
	version: "4.0.3",
	componentEventPrefix: "slide",

	options: {
		animate: false,
		distance: 0,
		max: 100,
		min: 0,
		orientation: "horizontal",
		range: false,
		step: 1,
		value: 0,
		values: null,

		// callbacks
		change: null,
		slide: null,
		start: null,
		stop: null
	},

	// number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	numPages: 5,

	_create: function() {
		this._keySliding = false;
		this._mouseSliding = false;
		this._animateOff = true;
		this._handleIndex = null;
		this._detectOrientation();
		this._mouseInit();
		this._calculateNewMax();

		this.element
			.addClass( "coral-slider" +
				" coral-slider-" + this.orientation +
				" coral-component" +
				" coral-component-content" +
				" coral-corner-all");

		this._refresh();
		this._setOption( "disabled", this.options.disabled );

		this._animateOff = false;
	},

	_refresh: function() {
		this._createRange();
		this._createHandles();
		this._setupEvents();
		this._refreshValue();
	},

	_createHandles: function() {
		var i, handleCount,
			options = this.options,
			existingHandles = this.element.find( ".coral-slider-handle" ).addClass( "coral-state-default coral-corner-all" ),
			handle = "<span class='coral-slider-handle coral-state-default coral-corner-all' tabindex='0'></span>",
			handles = [];

		handleCount = ( options.values && options.values.length ) || 1;

		if ( existingHandles.length > handleCount ) {
			existingHandles.slice( handleCount ).remove();
			existingHandles = existingHandles.slice( 0, handleCount );
		}

		for ( i = existingHandles.length; i < handleCount; i++ ) {
			handles.push( handle );
		}

		this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

		this.handle = this.handles.eq( 0 );

		this.handles.each(function( i ) {
			$( this ).data( "coral-slider-handle-index", i );
		});
	},

	_createRange: function() {
		var options = this.options,
			classes = "";

		if ( options.range ) {
			if ( options.range === true ) {
				if ( !options.values ) {
					options.values = [ this._valueMin(), this._valueMin() ];
				} else if ( options.values.length && options.values.length !== 2 ) {
					options.values = [ options.values[0], options.values[0] ];
				} else if ( $.isArray( options.values ) ) {
					options.values = options.values.slice(0);
				}
			}

			if ( !this.range || !this.range.length ) {
				this.range = $( "<div></div>" )
					.appendTo( this.element );

				classes = "coral-slider-range" +
				// note: this isn't the most fittingly semantic framework class for this element,
				// but worked best visually with a variety of themes
				" coral-component-header coral-corner-all";
			} else {
				this.range.removeClass( "coral-slider-range-min coral-slider-range-max" )
					// Handle range switching from true to min/max
					.css({
						"left": "",
						"bottom": ""
					});
			}

			this.range.addClass( classes +
				( ( options.range === "min" || options.range === "max" ) ? " coral-slider-range-" + options.range : "" ) );
		} else {
			if ( this.range ) {
				this.range.remove();
			}
			this.range = null;
		}
	},

	_setupEvents: function() {
		this._off( this.handles );
		this._on( this.handles, this._handleEvents );
		this._hoverable( this.handles );
		this._focusable( this.handles );
	},

	_destroy: function() {
		this.handles.remove();
		if ( this.range ) {
			this.range.remove();
		}

		this.element
			.removeClass( "coral-slider" +
				" coral-slider-horizontal" +
				" coral-slider-vertical" +
				" coral-component" +
				" coral-component-content" +
				" coral-corner-all" );

		this._mouseDestroy();
	},

	_mouseCapture: function( event ) {
		var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
			that = this,
			o = this.options;

		if ( o.disabled ) {
			return false;
		}

		this.elementSize = {
			width: this.element.outerWidth(),
			height: this.element.outerHeight()
		};
		this.elementOffset = this.element.offset();

		position = { x: event.pageX, y: event.pageY };
		normValue = this._normValueFromMouse( position );
		distance = this._valueMax() - this._valueMin() + 1;
		this.handles.each(function( i ) {
			var thisDistance = Math.abs( normValue - that.values(i) );
			if (( distance > thisDistance ) ||
				( distance === thisDistance &&
					(i === that._lastChangedValue || that.values(i) === o.min ))) {
				distance = thisDistance;
				closestHandle = $( this );
				index = i;
			}
		});

		allowed = this._start( event, index );
		if ( allowed === false ) {
			return false;
		}
		this._mouseSliding = true;

		this._handleIndex = index;

		closestHandle
			.addClass( "coral-state-active" )
			.focus();

		offset = closestHandle.offset();
		mouseOverHandle = !$( event.target ).parents().addBack().is( ".coral-slider-handle" );
		this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
			left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
			top: event.pageY - offset.top -
				( closestHandle.height() / 2 ) -
				( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
				( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
				( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
		};

		if ( !this.handles.hasClass( "coral-state-hover" ) ) {
			this._slide( event, index, normValue );
		}
		this._animateOff = true;
		return true;
	},

	_mouseStart: function() {
		return true;
	},

	_mouseDrag: function( event ) {
		var position = { x: event.pageX, y: event.pageY },
			normValue = this._normValueFromMouse( position );

		this._slide( event, this._handleIndex, normValue );

		return false;
	},

	_mouseStop: function( event ) {
		this.handles.removeClass( "coral-state-active" );
		this._mouseSliding = false;

		this._stop( event, this._handleIndex );
		this._change( event, this._handleIndex );

		this._handleIndex = null;
		this._clickOffset = null;
		this._animateOff = false;

		return false;
	},

	_detectOrientation: function() {
		this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
	},

	_normValueFromMouse: function( position ) {
		var pixelTotal,
			pixelMouse,
			percentMouse,
			valueTotal,
			valueMouse;

		if ( this.orientation === "horizontal" ) {
			pixelTotal = this.elementSize.width;
			pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
		} else {
			pixelTotal = this.elementSize.height;
			pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
		}

		percentMouse = ( pixelMouse / pixelTotal );
		if ( percentMouse > 1 ) {
			percentMouse = 1;
		}
		if ( percentMouse < 0 ) {
			percentMouse = 0;
		}
		if ( this.orientation === "vertical" ) {
			percentMouse = 1 - percentMouse;
		}

		valueTotal = this._valueMax() - this._valueMin();
		valueMouse = this._valueMin() + percentMouse * valueTotal;

		return this._trimAlignValue( valueMouse );
	},

	_start: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}
		return this._trigger( "start", event, uiHash );
	},

	_slide: function( event, index, newVal ) {
		var otherVal,
			newValues,
			allowed;

		if ( this.options.values && this.options.values.length ) {
			otherVal = this.values( index ? 0 : 1 );

			if ( ( this.options.values.length === 2 && this.options.range === true ) &&
					( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
				) {
				newVal = otherVal;
			}

			if ( newVal !== this.values( index ) ) {
				newValues = this.values();
				newValues[ index ] = newVal;
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal,
					values: newValues
				} );
				otherVal = this.values( index ? 0 : 1 );
				if ( allowed !== false ) {
					this.values( index, newVal );
				}
			}
		} else {
			if ( newVal !== this.value() ) {
				// A slide can be canceled by returning false from the slide callback
				allowed = this._trigger( "slide", event, {
					handle: this.handles[ index ],
					value: newVal
				} );
				if ( allowed !== false ) {
					this.value( newVal );
				}
			}
		}
	},

	_stop: function( event, index ) {
		var uiHash = {
			handle: this.handles[ index ],
			value: this.value()
		};
		if ( this.options.values && this.options.values.length ) {
			uiHash.value = this.values( index );
			uiHash.values = this.values();
		}

		this._trigger( "stop", event, uiHash );
	},

	_change: function( event, index ) {
		if ( !this._keySliding && !this._mouseSliding ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			//store the last changed value index for reference when handles overlap
			this._lastChangedValue = index;

			this._trigger( "change", event, uiHash );
		}
	},

	value: function( newValue ) {
		if ( arguments.length ) {
			this.options.value = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, 0 );
			return;
		}

		return this._value();
	},

	values: function( index, newValue ) {
		var vals,
			newValues,
			i;

		if ( arguments.length > 1 ) {
			this.options.values[ index ] = this._trimAlignValue( newValue );
			this._refreshValue();
			this._change( null, index );
			return;
		}

		if ( arguments.length ) {
			if ( $.isArray( arguments[ 0 ] ) ) {
				vals = this.options.values;
				newValues = arguments[ 0 ];
				for ( i = 0; i < vals.length; i += 1 ) {
					vals[ i ] = this._trimAlignValue( newValues[ i ] );
					this._change( null, i );
				}
				this._refreshValue();
			} else {
				if ( this.options.values && this.options.values.length ) {
					return this._values( index );
				} else {
					return this.value();
				}
			}
		} else {
			return this._values();
		}
	},

	_setOption: function( key, value ) {
		var i,
			valsLength = 0;

		if ( key === "range" && this.options.range === true ) {
			if ( value === "min" ) {
				this.options.value = this._values( 0 );
				this.options.values = null;
			} else if ( value === "max" ) {
				this.options.value = this._values( this.options.values.length - 1 );
				this.options.values = null;
			}
		}

		if ( $.isArray( this.options.values ) ) {
			valsLength = this.options.values.length;
		}

		if ( key === "disabled" ) {
			this.element.toggleClass( "coral-state-disabled", !!value );
		}

		this._super( key, value );

		switch ( key ) {
			case "orientation":
				this._detectOrientation();
				this.element
					.removeClass( "coral-slider-horizontal coral-slider-vertical" )
					.addClass( "coral-slider-" + this.orientation );
				this._refreshValue();

				// Reset positioning from previous orientation
				this.handles.css( value === "horizontal" ? "bottom" : "left", "" );
				break;
			case "value":
				this._animateOff = true;
				this._refreshValue();
				this._change( null, 0 );
				this._animateOff = false;
				break;
			case "values":
				this._animateOff = true;
				this._refreshValue();
				for ( i = 0; i < valsLength; i += 1 ) {
					this._change( null, i );
				}
				this._animateOff = false;
				break;
			case "step":
			case "min":
			case "max":
				this._animateOff = true;
				this._calculateNewMax();
				this._refreshValue();
				this._animateOff = false;
				break;
			case "range":
				this._animateOff = true;
				this._refresh();
				this._animateOff = false;
				break;
		}
	},

	//internal value getter
	// _value() returns value trimmed by min and max, aligned by step
	_value: function() {
		var val = this.options.value;
		val = this._trimAlignValue( val );

		return val;
	},

	//internal values getter
	// _values() returns array of values trimmed by min and max, aligned by step
	// _values( index ) returns single value trimmed by min and max, aligned by step
	_values: function( index ) {
		var val,
			vals,
			i;

		if ( arguments.length ) {
			val = this.options.values[ index ];
			val = this._trimAlignValue( val );

			return val;
		} else if ( this.options.values && this.options.values.length ) {
			// .slice() creates a copy of the array
			// this copy gets trimmed by min and max and then returned
			vals = this.options.values.slice();
			for ( i = 0; i < vals.length; i += 1) {
				vals[ i ] = this._trimAlignValue( vals[ i ] );
			}

			return vals;
		} else {
			return [];
		}
	},

	// returns the step-aligned value that val is closest to, between (inclusive) min and max
	_trimAlignValue: function( val ) {
		if ( val <= this._valueMin() ) {
			return this._valueMin();
		}
		if ( val >= this._valueMax() ) {
			return this._valueMax();
		}
		var step = ( this.options.step > 0 ) ? this.options.step : 1,
			valModStep = (val - this._valueMin()) % step,
			alignValue = val - valModStep;

		if ( Math.abs(valModStep) * 2 >= step ) {
			alignValue += ( valModStep > 0 ) ? step : ( -step );
		}

		// Since JavaScript has problems with large floats, round
		// the final value to 5 digits after the decimal point (see #4124)
		return parseFloat( alignValue.toFixed(5) );
	},

	_calculateNewMax: function() {
		var remainder = ( this.options.max - this._valueMin() ) % this.options.step;
		this.max = this.options.max - remainder;
	},

	_valueMin: function() {
		return this.options.min;
	},

	_valueMax: function() {
		return this.max;
	},

	_refreshValue: function() {
		var lastValPercent, valPercent, value, valueMin, valueMax,
			oRange = this.options.range,
			o = this.options,
			that = this,
			animate = ( !this._animateOff ) ? o.animate : false,
			_set = {};

		if ( this.options.values && this.options.values.length ) {
			this.handles.each(function( i ) {
				valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
				_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
				if ( that.options.range === true ) {
					if ( that.orientation === "horizontal" ) {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					} else {
						if ( i === 0 ) {
							that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
						}
						if ( i === 1 ) {
							that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
						}
					}
				}
				lastValPercent = valPercent;
			});
		} else {
			value = this.value();
			valueMin = this._valueMin();
			valueMax = this._valueMax();
			valPercent = ( valueMax !== valueMin ) ?
					( value - valueMin ) / ( valueMax - valueMin ) * 100 :
					0;
			_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
			this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

			if ( oRange === "min" && this.orientation === "horizontal" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "horizontal" ) {
				this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
			if ( oRange === "min" && this.orientation === "vertical" ) {
				this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
			}
			if ( oRange === "max" && this.orientation === "vertical" ) {
				this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
			}
		}
	},

	_handleEvents: {
		keydown: function( event ) {
			var allowed, curVal, newVal, step,
				index = $( event.target ).data( "coral-slider-handle-index" );

			switch ( event.keyCode ) {
				case $.coral.keyCode.HOME:
				case $.coral.keyCode.END:
				case $.coral.keyCode.PAGE_UP:
				case $.coral.keyCode.PAGE_DOWN:
				case $.coral.keyCode.UP:
				case $.coral.keyCode.RIGHT:
				case $.coral.keyCode.DOWN:
				case $.coral.keyCode.LEFT:
					event.preventDefault();
					if ( !this._keySliding ) {
						this._keySliding = true;
						$( event.target ).addClass( "coral-state-active" );
						allowed = this._start( event, index );
						if ( allowed === false ) {
							return;
						}
					}
					break;
			}

			step = this.options.step;
			if ( this.options.values && this.options.values.length ) {
				curVal = newVal = this.values( index );
			} else {
				curVal = newVal = this.value();
			}

			switch ( event.keyCode ) {
				case $.coral.keyCode.HOME:
					newVal = this._valueMin();
					break;
				case $.coral.keyCode.END:
					newVal = this._valueMax();
					break;
				case $.coral.keyCode.PAGE_UP:
					newVal = this._trimAlignValue(
						curVal + ( ( this._valueMax() - this._valueMin() ) / this.numPages )
					);
					break;
				case $.coral.keyCode.PAGE_DOWN:
					newVal = this._trimAlignValue(
						curVal - ( (this._valueMax() - this._valueMin()) / this.numPages ) );
					break;
				case $.coral.keyCode.UP:
				case $.coral.keyCode.RIGHT:
					if ( curVal === this._valueMax() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal + step );
					break;
				case $.coral.keyCode.DOWN:
				case $.coral.keyCode.LEFT:
					if ( curVal === this._valueMin() ) {
						return;
					}
					newVal = this._trimAlignValue( curVal - step );
					break;
			}

			this._slide( event, index, newVal );
		},
		keyup: function( event ) {
			var index = $( event.target ).data( "coral-slider-handle-index" );

			if ( this._keySliding ) {
				this._keySliding = false;
				this._stop( event, index );
				this._change( event, index );
				$( event.target ).removeClass( "coral-state-active" );
			}
		}
	}
});
;

/*jslint nomen: true */

/**
 * @fileOverview EasyEdit - A jQuery plugin for the input dom element of type text
 * @author Andres Jorquera
 * @version 0.2
 * @requires jQuery
 * @namespace easyInput.easyText
 * TODO Must set the new values if the storage option changes
 */

(function () {
    'use strict';
    
    var NAMESPACE = 'easyinput',
        PLUG_NAME = 'easytext',
        // constant use for events handlers to get the plugin instance using
        //$(this).data(NAME_SPAC_PLUG)
        NAME_SPAC_PLUG = NAMESPACE + PLUG_NAME.charAt(0).toUpperCase() + 
                         PLUG_NAME.slice(1);

    /**
     * Description of the plugin
     * 
     */

    $.component(NAMESPACE + '.' + PLUG_NAME, {

        options: {
            /**
             * The current value of the input element
             * @type String
             * @default ''
             */
            currentValue: '',

            /**
             * A custom array containing values for the input element
             * @type Array
             * @default []
             */
            values: [],

            /**
             * Max width in pixels for the input element.
             * @type Number
             * @default 200
             */
            maxWidth: 200,
            /**
             * Min width for the input element in pixels fo the input element.
             * @type number
             * @default 80
             */
            minWidth: 80,
            /**
             * Maximum number of characters permitted in the input.
             * @type number
             * @default 200
             */
            maxChars: 200,
            /**
             * Type of storage use for the input element.
             * @type string
             * @default 'array'
             */
            storage: 'array',
            /**
             * Configuration options for the ajax requests
             * @type object
             */
            ajaxConfig: {
                url: '/',
                id: '',
                UPDATETemplate: '',
                UPDATEData: {},
                GETCallback: null
            }
        },
        //---------------------------------------------------------------------
        //                          PRIVATE PROPERTIES
        //---------------------------------------------------------------------

        /**
         * Holder for the name of the plugin.
         * @type string
         * @private
         */
        _name: PLUG_NAME,
        /**
         * Holder for the input Jquery object.
         * @type Jquery object
         * @private
         */
        _input:null,
        /**
         * Holder for the id of the input.
         * @type string
         * @private
         */
        _id:null,
        /**
         * Holder for the current position of the current value in the
         * values attribute. It's use by the getNextBackValue public function
         * @type number
         * @private
         */
        _valuesIndex:null,
        /**
         * Holder for the class-name for the 'unChange'. Its the look of the
         * input when it hasn't been modified
         * @type String
         * @private
         */
        _classUnChanged:null,
        /**
         * Holder for the class-name for the 'empty'. The look of the input
         * when it's empty
         * @type String
         * @private
         */
        _classEmpty:null,
        /**
         * Holder for the class-name for the 'onEdit'.The look of the input
         * when it's been edited
         * @type String
         * @private
         */
        _classOnEdit: null,
        /**
         * Holder for the class-name for the "changed". The look of the input
         * when it's has been changed
         * @type String
         * @private
         */
        _classChanged:null,
        /**
         * Holder for the class-name of the input. It will be a class for the
         * input that has the plugin.
         * @type String
         * @private
         */
        _classEasyText:PLUG_NAME.toLowerCase(),

//-----------------------------------------------------------------------------
//                          PRIVATE FUNCTIONS
//-----------------------------------------------------------------------------
        /**
         * Add listeners to the input
         * @private
         */
        _setListeners:function() {
            this._input.bind({
                focus: this._focusBehaviour,
                input: this._autoGrownBehaviour,
                blur: this._blurBehaviour,
                storageChange: this._storageChange
            });
        },

        /**
         * Function that it's inspired in the getClassName function from the YUI
         * widget library.
         * reference: http://yuilibrary.com/yui/docs/api/files/widget_js_Widget.js.html#l309
         * FIXME re-think this function
         * @private
         */
        _getClassName: function(str) {
            return this._name.toLowerCase() + '-' + str;
        },
        /**
         * Sets the name for all the classes
         * @private
         */
        _setClassNames: function() {
            // set classes names
            this._classOnHover = this._getClassName('onHover');
            this._classUnChanged = this._getClassName('unChanged');
            this._classOnEdit = this._getClassName('onEdit');
            this._classChanged = this._getClassName('changed');
            this._classEmpty = this._getClassName('empty');

        },
        /**
         * Sets initial values for private variables
         * @private
         */
        _setVars: function() {
            var input = this.element;

            //save the host node to the private variable
            this._input = input;

            //creates an unique id in the element
            input.uniqueId();

            //saves the current position for the values attribute
            this._valuesIndex = 0;

            //sets the id
            this._id = this._name + '-' + input.attr('id');

            //set the maximum characters allow in the input
            input.attr('maxLength',this.options.maxChars);
        },
        /**
         * Creates a span element with the purpose for measuring the length in
         * pixels.
         * @private
         */
        _setRuler: function() {
            var rulerID    = '#' + this._name + '-ruler',
                ruler      = $(rulerID),
                input      = this._input;

            // check if a ruler already exist
            if (!ruler.length) {
                //NOTE maybe we shouldn't augment the string object
                String.prototype.visualLength = function() {
                    var ruler = $(rulerID);
                    //we need to escaped spaces
                    ruler.html(this.replace(/&/g, '&amp;').replace(/\s/g,'&nbsp;')
                          .replace(/</g, '&lt;').replace(/>/g, '&gt;'));

                    return ruler.width();
                };
                /* It will copy the same font family and size. Must be
                 * careful because if the font doesn't match it will not grown in the
                 * same way as the ruler
                 */
                ruler = $('<span id="' + rulerID.substr(1) + '"></span>');

                ruler.css({
                    fontSize:input.css('fontSize'),
                    fontFamily:input.css('font-family'),
                    fontWeight:input.css('fontWeight'),
                    position:'absolute',
                    visibility:'hidden',
                    //hides the ruler and breaks the text to avoid overflow
                    whiteSpace: 'nowrap'
                });
                $('body').after(ruler);
            }
        },
        /**
         * Prepares the configuration object for the ajax request. 
         * @private
         */
        _initializeAjax: function() {
            var ajaxConfig = this.options.ajaxConfig;
            
            //checks if there's a callback in the configuration object.
            //Do not send request if not
            if (!$.isFunction(ajaxConfig.GETCallback)) return;
            
            if (ajaxConfig.url.charAt(ajaxConfig.url.length - 1) !== '/') {
                ajaxConfig.url += '/'; 
            }
            
            if (!ajaxConfig.id) {
                ajaxConfig.id = this._id;
            }
            
            $.ajax({
                url:ajaxConfig.url + ajaxConfig.id,
                succes:ajaxConfig.GETCallback
            });
        },
        /**
         * Checks and sets the state for the input element 
         * @private
         */
        _setState:function() {
            var input         = this._input,
                text          = input.val(),
                visualLenText = text.visualLength(),
                minWidth      = this.options.minWidth,
                maxWidth      = this.options.maxWidth,
                width;

            if (visualLenText < minWidth) {
                width = minWidth;
            } else if (maxWidth < visualLenText) {
                width = maxWidth;
            } else {
                width = visualLenText;
            }

            input.width(width);

            //set the appropriate classes
            if (input.val().length === 0){
                //TODO do it in one call
                input.removeClass(this._classChanged);
                input.addClass(this._classEmpty);
            } else {
                input.addClass(this._classChanged);
            }
        },

        /**
         * Set the behaviour when the input gets clicked
         * @private
         */
        _focusBehaviour: function() {
            var that = $(this).data(NAME_SPAC_PLUG),
                input = that._input;

            input.removeClass(that._classChanged + ' ' +
                              that._classUnChanged + ' ' +
                              that._classEmpty)
                 .addClass(that._classOnEdit);
        },
        
        /**
         * Function that controls the auto-grown behaviour of the input 
         * @private
         */
        _autoGrownBehaviour: function() {
            var that     = $(this).data(NAME_SPAC_PLUG),
                input    = that._input,
                text     = input.val(),
                minWidth = that.options.minWidth,
                maxWidth = that.options.maxWidth,
                width    = text.visualLength();
                
            if (width < minWidth) {
                width = minWidth;
            } else if (width > maxWidth) {
                width = maxWidth;
            } 

            input.width(width);   
        },
        /**
         * Function that is trigger when the input loses focus. 
         * @private 
         */
        _blurBehaviour: function(){
            var that = $(this).data(NAME_SPAC_PLUG),
                input = that._input,
                value = input.val(),
                ajaxConfig = that.options.ajaxConfig,
                UPDATETemplate;

            input.removeClass(that._classOnEdit);

            //check if the field if empty. Don't store values if it is
            if (value.length === 0) {
                input.addClass(that._classEmpty);

            } else {
                
                input.addClass(that._classChanged);
                that.option('values',value);

                //TODO check this, not sure if it is the best way to do it
                that._valuesIndex = that.option('values').length - 1;

                //ajax feature
                if (that.options.storage === 'ajax') {
                    ajaxConfig.UPDATEData.value = input.val();

                    $.ajax({
                        url: ajaxConfig.url + ajaxConfig.id,
                        data: that._tmpl(ajaxConfig.UPDATETemplate,
                                         ajaxConfig.UPDATEData),
                        type: 'UPDATE'
                    });
                }
            }
            that._setState();
        },

        /**
         * Simple JavaScript Templating
         * John Resig - http://ejohn.org/ - MIT Licensed
         * ref:http://ejohn.org/blog/javascript-micro-templating/
         * @private
         */
        _tmpl : function(str, data) {
            // Figure out if we're getting a template, or if we need to
            // load the template - and be sure to cache the result.
            var fn = typeof(str) !== 'string' ?
               (function(){throw {
                   name: 'Invalid Parameter',
                   message: 'You must insert a string into the function'
               }}()):
             
              // Generate a reusable function that will serve as a template
              // generator (and which will be cached).
              new Function("obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};" +
               
                // Introduce the data as local variables using with(){}
                "with(obj){p.push('" +
               
                // Convert the template into pure JavaScript
                str
                  .replace(/[\r\t\n]/g, " ")
                  .split("<%").join("\t")
                  .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                  .replace(/\t=(.*?)%>/g, "',$1,'")
                  .split("\t").join("');")
                  .split("%>").join("p.push('")
                  .split("\r").join("\\'")
              + "');}return p.join('');");
           
            // Provide some basic currying to the user
            return data ? fn( data ) : fn;
        },
        /**
         * Setter function for the options of the plugin
         * @param {string} key - key string for the option value
         * @param {string} value - value for the option 
         * @private
         */
        _setOption: function(key, value) {
            var options = this.options;

            switch (key) {

            case 'values':
                //adds a new value to the array
                options.values.push(value);

                //saves the value on the local storage if it applies.
                //Add instead of replace. 
                if (options.storage === 'localStorage') {
                    localStorage.setItem(this._id,JSON.stringify(options.values));
                }

                return;
            case 'currentValue':
                this.option('values',value);
                this._input.val(value);
                break;
            }
            this._super("_setOption", key, value);

        },
        /**
         * Function that automatically runs the first time the plugin is 
         * instantiated. 
         * @private
         */
        _create: function () {
            var values,
                input,
                storage = this.options.storage;

            this._setClassNames();
            this._setVars();
            this._setListeners();


            input = this._input;
            //TODO re-think this
            input.addClass(this._classEasyText);

            //check the type of storage
            if (storage === 'localStorage') {

                //Check if there's some initial value in the localStorage
                if (localStorage[this._id]) {
                    values = JSON.parse(localStorage[this._id]);
                    this.options.values = values;

                    input.val(values[values.length - 1]);
                    this._valuesIndex = values.length - 1;
                }

            //ajax feature. Sends a GET request to the the web service.
            //TODO Not sure of this. With server side scripting we can write the
            //     values on the input.
            } else if (storage === 'ajax') {
                this._initializeAjax();
            }

            //create a ruler to measure the text in pixels
            this._setRuler();
            this._setState();
        },
        /**
         * Destroy an instantiated plugin and clean up
         * @private
         */
        _destroy: function () {
            //removes any classes
            this._input.attr('class','');
            //$.Widget.prototype.destroy.call(this);
        },
        
        /**
         * Deletes the storage for all the values. 
         * @public
         */
        deleteStorage: function() {
            var ajaxConfig = this.options.ajaxConfig,
                typeStorage = this.options.storage;

            if (typeStorage === 'localStorage') {
                localStorage.removeItem(this._id);

            } else if (typeStorage === 'ajax') {
                $.ajax({
                    url: ajaxConfig.url + ajaxConfig.id,
                    type: 'DELETE'
                });
            }

            this.options.values = [];
            this._input.val('');
            this._setState();
        },
        /**
         * Get the value store before or after the current value.
         * @param {boolean} direction - Flag use to set the direction of the
         *                              searched value. True is next value
         *                              and false is the previous value.
         * @public
         */
        getNextBackValue:function(direction) {
            var values = this.option('values'),
                index = this._valuesIndex;

            if (direction === undefined) {
                direction = true;
            }

            //check valid direction
            if (typeof(direction) !== 'boolean') {
                throw new Error('Invalid parameter');
            }

            //check if next or back
            index += direction ? 1 : (-1);

            //check if we are in one extreme
            if (values[index] === undefined) return -1;

            this._valuesIndex = index;
            this._input.val(values[index]);
            
            this._setState();
            
            return values[index];    
        }
    });
})();
;

$.component( "coral.autocomplete", $.coral.inputbase,{
	version: "4.0.2",
	defaultElement: "<input>",
	castProperties : ["source","pageData","buttons","title","rootNode", "triggers","showRequiredMark","shortCut","hideRequiredMark","itemattr", "onValidSuccess", "onValidError"],
	options: {
		appendTo: "body",//如果放在dialog里面，会把dialog撑开。
		autoFocus: false,
		allowRepeat: false,
		asyncType: "post",
		delay: 300,
		scrollTimeOut:100,
		maxLabelWidth : "auto" ,
		pageData:[],
		multiLineLabel: false,
		minLength: 0,
		minHeight: 1,
		panelComponentCls: null,
		panelWidth: null,
		height: "auto",
		multiple : false,
		position: {
			my: "left top",
			at: "left bottom",
			collision: "none"
		},
		value: "",
		text: "",
		forceSelection: false,
		defaultValue: "", // value separator text
		postMode:"value", // value, text, value-text
		required: false,
		showStar: true,
		separator: ",",
		labelCls:"",
		buttons: [],
		rowNum: 100,
		title:null,
		errMsg: null,
		errMsgPosition: "leftBottom",
		panelHeight:"auto",
		placeholder: "",
		maxPanelHeight: 200,
		iframePanel : false,
		isLabel: false,
		source: null,
		valueField: "value",
		textField: "label",
		searchField:"valueField",
		// callbacks
		onValidSuccess: null,
		onValidError: null,
		onChange: null,
		onBlur: null,
		onClose: null,
		onFocus: null,
		onOpen: null,
		oncancel:null,
		onResponse: null,
		onSearch: null,
		onSelect: null,
		triggers: null, // 覆盖 validate 里的 triggers
		excluded: false // true 则不单独校验
	},
	requestIndex: 0,
	pending: 0,
	_create: function() {
		var that = this;
		this._prepareInit();
		this._initAutocomplete();
		this._initState();
		this._initSource();
		this._initData();
		this._bindEvent();
		this._setDefaultValue();
		this._setDefaultText();
		this.liveRegion = $( "<span>", {
				role: "status",
				"aria-live": "assertive",
				"aria-relevant": "additions"
			})
			.addClass( "coral-helper-hidden-accessible" )
			.appendTo( this.document[ 0 ].body );

		// turning off autocomplete prevents the browser from remembering the
		// value when navigating through history, so we re-enable autocomplete
		// if the page is unloaded before the component is destroyed. #7790
		this._on( this.window, {
			beforeunload: function() {
				this.element.removeAttr( "autocomplete" );
			}
		});
		if ( this.options.multiLineLabel ) {
			// TODO: 销毁的时候应该考虑easytext组件的销毁情况，待测试
			$( this.element ).easytext({
				minWidth:10,
				maxWidth:200,
				maxChars:60
			});
			// Clicks outside of a treePanel move the input element to the end
			this._on( this.document, {
				click: function( event ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					this._moveInput( "last", event );
				}
			
			});
		}
	},
	_prepareInit: function(){
		this.lastSelectedItem = {};
		this.selectedItems = [];
		
		this.isNewMenu = true;
	},
	_initAutocomplete: function(){
		var autocompleteCls = this.options.render == "tree"?"coral-autocompletetree":"coral-autocomplete";
		this.className = "coral-autocomplete-text coral-combo-default coral-textbox-default tabbable "+this.element[0].className;
		this.classBorder = "";
		this.hiddenClass = "";
		if ( this.options.iframePanel ){
			   this.iframePanel = $("<iframe class='coral-autocomplete-iframePanel' style='position:absolute;display:none;'></iframe>" ).appendTo( "body" );
		}
		if ( this.options.multiLineLabel ) {
			var that = this, nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.compClass = autocompleteCls + " coral-textboxlist coral-textbox";
			
			this.createInput();
			
			this.valuebox = $(this.textboxWrapper.lastChild);
			this.textboxWrapper = $(this.textboxWrapper);
			this.elementBorder = $(this.elementBorder);
			this.element = $(this.textboxInput);
			
			this.elementBorder.css({
				minHeight: this.options.minHeight  + "px",
				height: this.options.height,
				overflow: "auto"
			})
			
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			this.textboxlistUl = $( "<ul class='coral-textboxlist-ul'><li class='coral-textboxlist-inputLi'></li></ul>" );
			this.textboxlistUl.appendTo( this.elementBorder );
			this.element.appendTo( this.textboxlistUl.find( ".coral-textboxlist-inputLi" ) );
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
			
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
			if ( this.options.showPopup ) {
				
			}
		} else {
			var nodeName = this.element[ 0 ].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";
			this.ismultiLineLabel =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );
			
			this.compClass = autocompleteCls + " coral-textbox";
			this.createInput();
			this.valuebox = $(this.textboxWrapper.lastChild);
			this.elementBorder = $(this.elementBorder);
			this.textboxWrapper = $(this.textboxWrapper);
			this.element = $(this.textboxInput);
			
			
			this.textboxWrapper.css({
				"border-width":"0"
			})
			
			this.elementBorder.css({
				minHeight: this.options.minHeight  + "px"
			})
			// 下拉框显示值文本框
			this.valueMethod = this.valuebox[ isTextarea || isInput ? "val" : "text" ];
			this.textMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			
			if ( this.options.buttons.length > 0 ) {
				this._createButtonPanel();
			}
			// 初始化id，name，value
			if ( typeof this.element.attr("id") != "undefined" ) {
	    		this.options.id = this.element.attr("id");
	    	} else if ( this.options.id ){
	    		this.element.attr("id", this.options.id);
	    	}
			if ( typeof this.element.attr( "name" ) != "undefined" ) {
	    		this.options.name = this.element.attr( "name" ); // name属性加到hidden元素上
	    		this.valuebox.attr( "name", this.options.name );
	    		this.element.removeAttr( "name" );
	    	} else if ( this.options.name ) {
	    		this.valuebox.attr( "name", this.options.name );
	    	}
			this.element.attr( "placeholder", this.options.placeholder );
			if ( this.options.placeholder && "" === this.element.val() ) {
				this._showPlaceholder();
			}
			if ( this.options.text ) {
				this.setText( this.options.text );
			}
			if ( $.trim( this.valuebox.val() ) != "" ) {
	    		this.options.value = this.valuebox.val();
	    	}
		}
		if ( this.options.showClose ) {
			this.clearIcon.css( "right", this.rightPos ? this.rightPos: 0);
		}
	},
	_initState: function(){
		if( this.element.prop("readonly") || this.options.readonly ){
    		this.options.readonly = true;
    		this.valuebox.prop( "readonly", true );
    		this.element.prop( "readonly", true );
    		this.element.removeClass("tabbable");
    		this.component().addClass("coral-readonly");
    	}
		if ( this.options.isLabel ) {
			this.element.prop( "readonly", true );
			this.valuebox.prop( "readonly", true );
			this.element.removeClass("tabbable");
			this.component().addClass( "coral-isLabel" );
		}
	},
	reset : function() {
		this.setValue(this.originalValue);
	},
	/**
	 * 显示 placeholder
	 */
	_showPlaceholder: function () {
		if ( $.support.placeholder && !this.options.multiLineLabel) {
			return ;
		}
		var that = this,
			$placeholder = $("<span class='coral-textbox-placeholder-label'>" + that.options.placeholder  + "</span>");
		$(that.element).after( $placeholder );
	},
	/**
	 * 隐藏 placeholder
	 */
	_hidePlaceholder: function () {
		if ( $.support.placeholder && !this.options.multiLineLabel) {
			return ;
		}
		
		var that  = this;

		that.textboxWrapper.find( ".coral-textbox-placeholder-label" ).remove();
	},
	_bindEvent: function(){
		// Some browsers only repeat  events, not keypress events,
		// so we use the suppressKeyPress flag to determine if we've already
		// handled the keydown event. #7269
		// Unfortunately the code for & in keypress is the same as the up arrow,
		// so we use the suppressKeyPressRepeat flag to avoid handling keypress
		// events when we know the keydown event was used to modify the
		// search term. #7799
		var that = this, 
			suppressKeyPress, suppressKeyPressRepeat, suppressInput;
		this._on({
			"mouseenter.coral-textbox-border" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.textboxWrapper.addClass("coral-textbox-hover");
			},
			"mouseleave.coral-textbox-border" : function(e) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				that.textboxWrapper.removeClass("coral-textbox-hover");
			},
			"click.coral-input-clearIcon" : function(e) {
				this.setValue( "", true );
				// 清空后如果有placeholder则显示 @added by@lhb at @20150417 : placeholder
				if (this.options.placeholder) {
					this._showPlaceholder();
				}
			},
			keyup: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				this._trigger( "onKeyUp", event, { } );
			},
			keydown: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.element.prop( "readOnly" ) ) {
					suppressKeyPress = true;
					suppressInput = true;
					suppressKeyPressRepeat = true;
					return;
				}

				suppressKeyPress = false;
				suppressInput = false;
				suppressKeyPressRepeat = false;
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._move( "nextPage", event );
					break;
				case keyCode.LEFT:
					suppressKeyPress = true;
					this._moveItem( "left", event );
					break;
				case keyCode.RIGHT:
					suppressKeyPress = true;
					this._moveItem( "right", event );
					break;
				case keyCode.UP:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					if ( this.options.render == "tree" ) {
						break;
					}
					suppressKeyPress = true;
					this._keyEvent( "next", event );
					break;
				case keyCode.ENTER:
					// when menu is open and has focus
					if ( this.menu.active ) {
						// #6055 - Opera still allows the keypress to occur
						// which causes forms to submit
						suppressKeyPress = true;
						event.preventDefault();
						this.menu.select( event );
					}
					break;
				case keyCode.TAB:
					if ( this.menu.active ) {
						this.menu.select( event );
					}
					break;
				case keyCode.ESCAPE:
					if ( this.menu.element.is( ":visible" ) ) {
						if ( !this.ismultiLineLabel ) {
							// ??
							this.setValue( this.term, true );
						}
						this.close( event );
						// Different browsers have different default behavior for escape
						// Single press can mean undo or clear
						// Double press in IE means clear the whole form
						event.preventDefault();
					}
					break;
				default:
					suppressKeyPressRepeat = true;
					// search timeout should be triggered before the input value is changed
					this._searchTimeout( event );
					break;
				}
				//this._change( event );
				var options = this.options;
				if(options.shortCut){
					$.coral.callFunction(options.shortCut,event,this);
				}
				this._trigger( "onKeyDown", event, { } );
			},
			keypress: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressKeyPress ) {
					suppressKeyPress = false;
					if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
						event.preventDefault();
					}
					return;
				}
				if ( suppressKeyPressRepeat ) {
					return;
				}
				if ( this.options.render == "tree" ) {
					return;
				}				
				// replicate some key handlers to allow them to repeat in Firefox and Opera
				var keyCode = $.coral.keyCode;
				switch ( event.keyCode ) {
				case keyCode.PAGE_UP:
					this._move( "previousPage", event );
					break;
				case keyCode.PAGE_DOWN:
					this._move( "nextPage", event );
					break;
				case keyCode.UP:
					this._keyEvent( "previous", event );
					break;
				case keyCode.DOWN:
					this._keyEvent( "next", event );
					break;
				default:
					break;
				}
			},
			input: function( event ) {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( suppressInput ) {
					suppressInput = false;
					event.preventDefault();
					return;
				}
				this._searchTimeout( event );
			},
			focus: function() {
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				this.selectedItem = null;
				this.previous = this.getValue();
				this.component().addClass( "coral-state-focus" );
				this._hidePlaceholder();
			},
			blur: function( event ) {
				this.component().removeClass( "coral-state-focus" );
				if ( that.options.disabled || that.options.isLabel || that.options.readonly ) { return; }
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}
				clearTimeout( this.searching );
				this.close( event );
				// 非multiLineLabel不需要额外校验
				if ( !this.options.multiLineLabel ) {
					if ( this.options.multiple ) {
						
					} else {
						// 20150121 : value 无值时设置为输入值，text为空时，value也设置为空。
						if ( !this.options.forceSelection ) {
							if ( this.lastSelectedItem[this.options.textField] != this.element.val() ) {
								this.setValue( this.element.val(), true );
							}
						} else {
							// TODO: 检查输入的值是否是建议列表里面的值，如果不是则清空输入框和隐藏域
							// 如果是url
							// 如果是数组
							/*if ( !this.lastSelectedItem 
									|| this.getText() !== this.lastSelectedItem[this.options.textField] ) {
								this.setValue( "", true );
							}*/
							if ( this.options.render == "tree" ){
								
							}else{
								var grepArr = $.grep( this.responseItems, function( value0 ) {
									return value0[that.options.textField] == that.element.val();
								});
								if ( !grepArr.length ){
									this.setValue( "", true );
								} else {
									this.setValue( grepArr[0][that.options.valueField], true );
								}
							}
						}
					}
				}
				if ( "" === this.getValue() ) {
					this._showPlaceholder();
				}
				this._trigger( "onBlur", event, { item: this.selectedItem } );
			}
		});
		this._on( this.menu.element, {
			scroll : function(e){
				var that = this
				    viewH =this.menu.element.height(),
			    	contentH =this.menu.element[0].scrollHeight,
			    	scrollTop =this.menu.element.scrollTop();
				if(contentH - viewH - scrollTop <= 15){
					if(this.renderNumber<this.options.pageData.length){
						if(that.scrollTimer){clearTimeout(that.scrollTimer)};
						that.scrollTimer = setTimeout(function(){
							that._renderMenu(that.menu.element,that.options.pageData[that.renderNumber])
							that.menu.refresh();
							that.renderNumber++;
						}, that.options.scrollTimeout);
					}
				}
			},
			mousedown: function( event ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				// prevent moving focus out of the text field
				event.preventDefault();

				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
				});

				// clicking on the scrollbar causes focus to shift to the body
				// but we can't detect a mouseup or a click immediately afterward
				// so we have to track the next mousedown and close the menu if
				// the user clicks somewhere outside of the autocomplete
				var menuElement = this.menu.element[ 0 ];
				if ( !$( event.target ).closest( ".coral-menu-item" ).length ) {
					this._delay(function() {
						var that = this;
						this.document.one( "mousedown", function( event ) {
							if ( event.target !== that.element[ 0 ] &&
									event.target !== menuElement &&
									!$.contains( menuElement, event.target ) ) {
								that.close();
							}
						});
					});
				}
			},
			menuonfocus: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				var label, item;
				// support: Firefox
				// Prevent accidental activation of menu items in Firefox (#7024 #9118)
				if ( this.isNewMenu ) {
					this.isNewMenu = false;
					if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
						this.menu.blur();

						this.document.one( "mousemove", function() {
							$( event.target ).trigger( event.originalEvent );
						});

						return;
					}
				}

				//item = ui.item.data( "coral-autocomplete-item" );
				item = this.options.tempData[ui.item.data( "key" )];
				if ( false !== this._trigger( "onFocus", event, { item: item } ) ) {
					// use value to match what will end up in the input, if it was a key event
					if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
						/*if (this.options.postMode=="value") {
							this.setValue( item[this.options.valueField] );
						} else if (this.options.postMode=="text") {
							this.setValue( item[this.options.textField] );
						} else if (this.options.postMode=="value-text") {
							this.setValue( item[this.options.valueField] + "-"+ item[this.options.textField] );
						}*/
						// this._value( item[this.options.valueField] );
						//this._text( item[this.options.textField] );
					}
				}

				// Announce the value in the liveRegion
				label = ui.item.attr( "aria-label" ) || item[this.options.valueField] ;
				if ( label && $.trim( label ).length ) {
					this.liveRegion.children().hide();
					$( "<div>" ).text( label ).appendTo( this.liveRegion );
				}
			},
			menuonselect: function( event, ui ) {
				if ( this.options.readonly || this.options.isLabel ) return;
				//var item = ui.item.data( "coral-autocomplete-item" ),
				var item = this.options.tempData[ui.item.data( "key" )],
					previous = this.previous;

				// only trigger when focus was lost (click on menu)
				if ( this.element[ 0 ] !== this.document[ 0 ].activeElement ) {
					this.element.focus();
					this.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					this._delay(function() {
						this.previous = previous;
						this.selectedItem = item;
						that.lastSelectedItem = item;
					});
				}
				that.lastSelectedItem = item;
				this.selectedItem = item;
				//setValue()和setText(),先将原有的值删去，再加上选择的值
				if ( false !== this._trigger( "onSelect", event, { item: item } ) ) {
						//var item = ui.item.data( "coral-autocomplete-item" );
						var item = this.options.tempData[ui.item.data( "key" )];
						valueField = item[this.options.valueField];
						textField = item[this.options.textField];
						var value = that.getValue(),
						text = that.getText(),
						vv = value==""?[]:value.split(this.options.separator),
						vt = text==""?[]:text.split(this.options.separator);
						if ( that.options.multiple ) {
							if (this.options.postMode=="value") {
								if ( !this.options.allowRepeat && $.inArray(valueField, vv) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setText(vt.join(this.options.separator));
								this.setValue(vv.join(this.options.separator), true);
							} 
							if (this.options.postMode=="text") {
								if ( !this.options.allowRepeat && $.inArray(textField, vt) > -1 ) {
									return ;
								}
								vt.push( textField );
								that.setValue(vt.join(this.options.separator), true );
							} 
							if (this.options.postMode=="value-text") {
								if ( !this.options.allowRepeat && $.inArray(valueField + "-"+textField, vv + "-" + vt) > -1 ) {
									return ;
								}
								vv.push( valueField );
								vt.push( textField );
								this.setValue(vv.join(this.options.separator) + "-"+ vt.join(this.options.separator), true );
							}
						} else{
							if (this.options.postMode=="value") {
								this.setText(item[this.options.textField], true );
								this.setValue(item[this.options.valueField], true );
							} 
							if (this.options.postMode=="text") {
								this.setValue(item[this.options.textField], true );
							} 
							if (this.options.postMode=="value-text") {
								this.setValue(item[this.options.valueField] + "-"+ item[this.options.textField], true );
							}
						}
				}
				// reset the term after the select event
				// this allows custom select handling to work properly
				this.term = this.getText();
				this.close( event );
			}
		});
		if ( this.options.multiLineLabel ) {
			this._on( {
				"click .coral-label-close" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this._removeLabel( e );
					e.stopPropagation();
					this._trigger( "onLabelClose", e , [] );
				},
				"click .coral-textboxlist-item" : function( e ){
					//if ( this.options.readonly || this.options.isLabel ) return;
					e.stopPropagation();
					this._trigger( "onLabelClick", e , [] );
				},
				"click .coral-textbox-border" : function( e ){
					if ( this.options.readonly || this.options.isLabel ) return;
					this.element.focus();
				},
				"mouseenter .coral-label-close" : function( e ){
					$( e.target ).addClass( "coral-label-close-hover" );
				},
				"mouseleave .coral-label-close" : function( e ){
					$( e.target ).removeClass( "coral-label-close-hover" );
				},
				"focus .coral-textboxlist-item" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					$( e.target ).addClass( "coral-state-active" );
				},
				"blur .coral-textboxlist-item" : function( e ) {
					$( e.target ).removeClass( "coral-state-active" );
				},
				"keydown .coral-state-active" : function( e ) {
					if ( this.options.readonly || this.options.isLabel ) return;
					var keyCode = $.coral.keyCode;
					switch ( e.keyCode ) {
					case keyCode.LEFT:
						//suppressKeyPress = true;
						this._moveInput( "left", e );
						break;
					case keyCode.RIGHT:
						//suppressKeyPress = true;
						this._moveInput( "right", e );
						break;
					case keyCode.BACKSPACE:
						this._removeLabel( e );
						break;
					case keyCode.DELETE:
						this._removeLabel( e );
						break;
					default:
						break;
					}
				}
			});
		}
	},
	_initData: function(){
		var that = this;
		var opts = this.options;
		this.menu = $( "<ul>" )
		.addClass( "coral-autocomplete-panel coral-front" )
		.appendTo( this._appendTo() )
		.menu({
			// disable ARIA support, the live region takes care of that
			role: null
		})
		.hide()
		.menu( "instance" );
		if ( isNaN( opts.panelHeight ) ) {
			$(".coral-autocomplete-panel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
			$(".coral-autocomplete-iframePanel").css( {
				"max-height": opts.maxPanelHeight +"px"
			} );
		}
	},
	_setDefaultValue: function(){
		if (!this.options.value) {
			this.originalValue = "";
			return ;
		} else {
			this.setValue(this.options.value);
			this.originalValue = this.getValue();
		}
	},
	_setDefaultText: function(){
		if ( !this.options.text ) return ;
		this.setText( this.options.text );
	},
/*	_createButtonPanel: function() {
		this.uiDialogButtonPanel = $("<span class=\"coral-autocomplete-btn-icons coral-corner-right coral-buttonset\"></span>");
		this.elementBorder.append( this.uiDialogButtonPanel );
		this._createButtons();
		this.elementBorder.css( "padding-right", this.uiDialogButtonPanel.outerWidth() );
	},*/
/*	_createButtons: function() {
		var that = this,
			buttons = this.options.buttons.concat();
		if ( $.isEmptyObject( buttons ) ) buttons = {};
		$.each( buttons, function(i) {
			var buttonOptions,
				addCls = "",
				removeCls = "",
				props = $.extend( { type: "button" }, {click: this.click} );
			var click = this.click || $.noop;
			props.click = function() {
				click.apply( that.element[0], arguments );
			};
			delete this.click;
			removeCls = "coral-corner-all";
			if ( i == ( buttons.length - 1 ) ) {
				addCls = "coral-corner-right"
			}
			$( "<button></button>", props ).button( this )
				.addClass(addCls).removeClass(removeCls).appendTo( that.uiDialogButtonPanel );
			this.click = click;
		});
	},*/
	getLastSelectedItem: function(){
		return this.lastSelectedItem;
	},
	
	_destroy: function() {
		clearTimeout( this.searching );
		this.element
			.removeClass( "coral-autocomplete-input" )
			.removeAttr( "autocomplete" )
			.removeAttr("title");
		this.menu.element.remove();
		if(this.options.iframePanel){
			this.iframePanel.remove();
		}
		this.liveRegion.remove();
	},

	_setOption: function( key, value ) {
		var maxWidth = this.options.maxLabelWidth;
		if ( maxWidth != "auto" ) {
			maxWidth = maxWidth+"px";
		}

		this._super( key, value );
		
		if ( key === "isLabel" && typeof value === "boolean" ) {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-readonly" );	
			this.component().toggleClass( "coral-isLabel", value );
			this.element.toggleClass( "tabbable", !value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "readonly" && typeof value === "boolean") {
			this.element.prop( "readonly", value );
			this.valuebox.prop( "readonly", value );
			this.component().removeClass( "coral-isLabel" );	
			this.component().toggleClass( "coral-readonly", value );
			this.element.toggleClass( "tabbable", !value );
			if ( this.textboxlistUl ) {
				if( value ){
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width","");
				}else{
					this.textboxlistUl.find(".coral-textboxlist-item").css("max-width",maxWidth);
				}
			}
		}
		if ( key === "source" ) {
			this._initSource();
		}
		if ( key === "appendTo" ) {
			this.menu.element.appendTo( this._appendTo() );
		}
		if ( key === "disabled" && value && this.xhr ) {
			this.xhr.abort();
		}
		if ( key === "value") {
			this.setValue( value );
		}
		if ( key === "placeholder" ) {
			this.element.attr( "placeholder", this.options.placeholder );	
			if ( this.getValue() === "" ) {
				this._showPlaceholder();					
			}
		}
		if ( key === "panelComponentCls" ) {
			this.menu.element.addClass(this.options.panelComponentCls);
		}
	},
	
	_appendTo: function() {
		var element = this.options.appendTo;

		if ( element ) {
			element = element.jquery || element.nodeType ?
				$( element ) :
				this.document.find( element ).eq( 0 );
		}

		if ( !element || !element[ 0 ] ) {
			element = this.element.closest( ".coral-front" );
		}

		if ( !element.length ) {
			element = this.document[ 0 ].body;
		}

		return element;
	},
	_filter: function( array, request, response ){
		response( $.coral.autocomplete.filter( array, request.term, this.options.valueField, this.options.textField ,this.options.searchField) );
	},
	transTempData: function(data) {
		function convtree(node, opts){
			for ( var j=0; j<node.length; j++ ) {
				if ( node[j].children ) {
					convtree(node[j].children, opts);
				}
				opts.tempData[node[j].id] = node[j];
			}
		}
		if (data && this.options.render === "tree") {
			this.options.tempData = {};
			this.options.textField = this.options.textField || "name";
			this.options.valueField = this.options.valueField || "id";
			convtree(data, this.options);
		}
		if (data && this.options.render !== "tree") {
			this.options.tempData = {};
			this.options.textField = this.options.textField || "text";
			this.options.valueField = this.options.valueField || "value";
			for(var k =0; k< data.length;k++){
				this.options.tempData[data[k][this.options.valueField]] = data[k];
			}
		}
	},
	_initSource: function() {
		var array, url,
			that = this;
		if ( $.isArray( this.options.source ) ) {
			array = this.options.source;
			this.transTempData(array);
			this.source = function( request, response ) {
				that._filter( array, request, response );
			};
		} else if ( typeof this.options.source === "string" ) {
			url = this.options.source;
			this.source = function( request, response ) {
				if ( that.xhr ) {
					that.xhr.abort();
				}
				if ( this.element.attr("name") ){
					request[this.element.attr("name")] = request.term;
				}
				that.xhr = $.ajax({
					url: url,
					data: request,
					type: that.options.asyncType,
					dataType: "json",
					success: function( data ) {

						if ( that.options.render != "tree" ) {
							response( data );
						} else {
							$( that.menu.element ).tree("reload", data);
							response( data );
						}
						that.transTempData(data);
					},
					error: function() {
						response([]);
					}
				});
			};
		} else {
			this.source = this.options.source;
		}
	},

	_searchTimeout: function( event ) {
		clearTimeout( this.searching );
		this.searching = this._delay(function() {

			// Search if the value has changed, or if the user retypes the same value (see #7434)
			var equalValues = this.term === this._term(),
				menuVisible = this.menu.element.is( ":visible" ),
				modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

			if ( !equalValues || ( equalValues && !menuVisible && !modifierKey ) ) {
				this.selectedItem = null;
				this.search( null, event );
			}
		}, this.options.delay );
	},
	_term: function(){
		if ( this.options.multiLineLabel ) {
			return this.element.val();
		}
		return this.getText();
	},
	_updateTitle: function(text) {
		var that = this,element,
			opts = this.options;
		if( opts.multiLineLabel ){
			element = that.element.closest("ul");
		}else{
			element = that.element;
		}
		if (opts.title == true) {
			element.attr("title", text);
		} else if (opts.title == false) {
			element.attr("title", "");
		} else {
			element.attr("title", opts.title);
		}
	},
	search: function( text/*value*/, event ) {
		text = text != null ? text : this._term();
		// always save the actual value, not the one passed as an argument
		this.term = this._term();

		if ( text.length < this.options.minLength ||
			( this.options.minLength > 0 && $.trim( text ) == "" ) ) {
			return this.close( event );
		}

		if ( this._trigger( "onSearch", event ) === false ) {
			return;
		}

		return this._search( text );
	},

	_search: function( text ) {
		this.pending++;
		this.element.addClass( "coral-autocomplete-loading" );
		this.cancelSearch = false;

		this.source( { term: text }, this._response() );
	},

	_response: function() {
		var index = ++this.requestIndex;

		return $.proxy(function( content ) {
			if ( index === this.requestIndex ) {
				this.__response( content );
			}

			this.pending--;
			if ( !this.pending ) {
				this.element.removeClass( "coral-autocomplete-loading" );
			}
		}, this );
	},

	__response: function( content ) {
		var that = this;
		this.renderNumber = 1;
		this.options.pageData=[];
		
		if ( content ) {
			content = this._normalize( content );
		}
		this._trigger( "onResponse", null, { content: content } );
		if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
			var length = content.length,// 所有的数据的长度
			    showNum = that.options.rowNum,// 一次加载的条数
	            number = Math.ceil(length/showNum);// 多少页
			if (number>1) {
				for(var i=0;i<number;i++){
					that.options.pageData[i]=content.slice(i*showNum,(i+1)*showNum-1);
				}
				content=that.options.pageData[0];
			}
			this._suggest( content );
			this._trigger( "onOpen" );
		} else {
			// use ._close() instead of .close() so we don't cancel future searches
			this._close();
		}
	},

	close: function( event ) {
		this.cancelSearch = true;
		this._close( event );
	},

	_close: function( event ) {
		if ( this.menu.element.is( ":visible" ) ) {
			this.menu.element.hide();
			if(this.options.iframePanel){
				this.iframePanel.hide();
			}
			this.options.render != "tree" && this.menu.blur();
			this.isNewMenu = true;
			this._trigger( "onClose", event );
		}
	},

	_change: function( event ) {
		if ( this.previous !== this.getValue() ) {
			this._trigger( "onChange", event, { item: this.selectedItem,oldValue: this.previous,value: this.getValue(),text:this.getText(),lastSelectedItem: this.lastSelectedItem} );
		}
	},
	_normalize: function( items ) {
		var that = this;
		// assume all items have the right format when the first item is complete
		if ( items.length && items[ 0 ][this.options.textField] && items[ 0 ][this.options.valueField] ) {
			return items;
		}
		return $.map( items, function( item ) {
			if ( typeof item === "string" ) {
				return {
					label: item,
					value: item
				};
			}
			return $.extend( {}, item, {
				label: item.label || item.value,
				value: item.value || item.label
			});
		});
	},
	_suggest: function( items ) {
		var that=this;
		var ul = this.menu.element,nData;//.empty();
		var iframePanel = this.iframePanel || $();
		if ( this.options.render == "tree" ){
			//$( ul ).tree("addNodes", null, items);
			//$( ul ).tree("filterNodesByParam", {"name": "112"} );
		}else{
			this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();
		}
		this.responseItems = items;
		// size and position menu
		var height = ul.height();
		iframePanel.css("height",height);
		ul.show();
		ul.scrollTop(0);
		iframePanel.show();
		var zIndicies = ul.siblings( ".coral-front:visible" ).map(function() {
				return +$( this ).css( "z-index" );
			}).get(),
			zIndexMax = Math.max.apply( null, zIndicies );
		if ( zIndexMax >= +ul.css( "z-index" ) ) {
			ul.css( "z-index", zIndexMax + 1 );
			iframePanel.css( "z-index", zIndexMax );
		}
		/*iframePanel.outerWidth(
				 Math.max(
						// Firefox wraps long text (possibly a rounding bug)
						// so we add 1px to avoid the wrapping (#7513)
						ul.width( "" ).outerWidth() + 1,
						this.elementBorder.outerWidth()
				 )
		);*/
		this._resizeMenu();
		ul.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		iframePanel.position( $.extend({
			of: this.elementBorder
		}, this.options.position ) );
		if ( this.options.autoFocus ) {
			this.menu.next();
		}
	},

	_resizeMenu: function() {
		var ul = this.menu.element;
		var iframePanel = this.iframePanel || $();
		ul.outerWidth( Math.max(
			// Firefox wraps long text (possibly a rounding bug)
			// so we add 1px to avoid the wrapping (#7513)
			this.options.panelWidth? this.options.panelWidth: ul.width( "" ).outerWidth() + 1,
			this.elementBorder.outerWidth()
		) );
		iframePanel.outerWidth(ul.outerWidth());
	},

	_renderMenu: function( ul, items ) {
		var that = this,
			htmlArr = [],
			arr;
		$.each( items, function( index, item ) {
			htmlArr.push(that._renderItemData( ul, item ));
		});
		ul.append(htmlArr.join(""));
	},

	_renderItemData: function( ul, item ) {
		return this._renderItem( ul, item )//.data( "coral-autocomplete-item", item );
	},

	_renderItem: function( ul, item ) {
		var text = item[this.options.textField];
		var attrName, restAttr = '', style = '', classes = !!item.hidden==true?"hidden":"";
		var _fn = $.coral.toFunction(this.options.formatter),nData;
		if($.isFunction(_fn)){
			text = _fn.apply(this.element[0], [{"item":item}]);
		}
		var itemattrFun = $.coral.toFunction(this.options.itemattr);
		restAttr += ' data-key="' + item[this.options.valueField]+'"';
		if($.isFunction(itemattrFun)){
			var itemAttrObj = itemattrFun.apply( this.element[0], [{"item":item}]);
			if(!$.isEmptyObject( itemAttrObj )) {
				if (itemAttrObj.hasOwnProperty("style")) {
					style += itemAttrObj.style;
					delete itemAttrObj.style;
				}
				if (itemAttrObj.hasOwnProperty("class")) {
					classes += ' ' + itemAttrObj['class'];
					delete itemAttrObj['class'];
				}
				// dot't allow to change role attribute
				try { delete itemAttrObj.role; } catch(ra){}
				for (attrName in itemAttrObj) {
					if (itemAttrObj.hasOwnProperty(attrName)) {
						restAttr += ' ' + attrName + '=' + itemAttrObj[attrName];
					}
				}
			}
			return "<li class='" + classes + "' " + restAttr + " style='"+ style +"'>"+text+"</li>";
			
		}else{

			return "<li class='" + classes + "' " + restAttr + ">"+text+"</li>";
		}
		
	},
	_move: function( direction, event ) {
		if ( !this.menu.element.is( ":visible" ) ) {
			this.search( null, event );
			return;
		}
		if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
				this.menu.isLastItem() && /^next/.test( direction ) ) {

			if (!this.options.multiLineLabel ) {
				this.setValue( "", true );
				this.setText( this.term );
			}

			this.menu.blur();
			return;
		}
		this.menu[ direction ]( event );
	},

	component: function() {
		return this.textboxWrapper;
	},
	/**
	 * set the lastSelectedItem 
	 **/
	_setLastSelectedItem: function(){
		var options = this.options;
		var value = this.getValue(),
			text = this.getText();
		// lastSelectedItem是引用模式，如果改变的值是空，会影响source里面的值。
		this.lastSelectedItem = {};
		this.lastSelectedItem[options.valueField] = value;
		this.lastSelectedItem[options.textField] = text;
	},
	
	/*_value: function( value, noChange ) {
		if ( this.options.multiLineLabel ) {
			var that = this;
			if ( value != "" && !value ) {
				return this.valuebox.val();
			}
			
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val()==""?[]:this.valuebox.val().split( "," );
			if ( this.options.multiple ) {
				values.splice(index,0,value);
			} else {
				values = [];
				values.push( value );
			}
			
			if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var array = $( this.menu.element ).tree("transformToArray", this.options.source),
					texts = [],
					grepArr = $.grep( value.split( "," ), function( value0 ) {
						var ret = false;
						$.each(array, function(i){
							if ( value0 == array[i][that.options.valueField] ) {
								texts.push(array[i][that.options.textField]);
								return true;
							}
						});
						return ret;
					});
				if ( texts.length ){
					this.setText( texts );
				}
			} else if ( typeof this.options.source == "string" && this.selectedItem ) {
				this.setText(this.selectedItem[this.options.textField]);
			} else if ( $.trim( value ) == "" ) {
				this.setText(value);
			}
			this.valuebox.val( values.join( "," ) );
			!noChange && this._change(null);
		} else {
			return this.valueMethod.apply( this.valuebox, value );
		}
	},*/

	_text: function( text ) {
		var maxLabelWidth = this.options.maxLabelWidth,
		    readonly = this.options.readonly,
		    isLabel = this.options.isLabel,
			labelCls = this.options.labelCls;
		if ( this.options.multiLineLabel ) {
			if ( text != "" && !text ) {
				var texts = [];
				$.each( this.textboxlistUl.find( ".coral-textboxlist-item" ), function(){
					texts.push($( this ).text());
				});
				return texts.join( "," );
			}
			var item = "";
			if ( text != "" && !(text instanceof Array) ) {
				text = text.split( this.options.separator );
			}
			if ( text instanceof Array ) {
				if ( maxLabelWidth == "auto" || isLabel || readonly ){
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item "+ labelCls +"'  title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}else{
					$.each(text, function(i){
						text.splice(i,1,"<li tabindex='-1' class='coral-textboxlist-item "+ labelCls +"'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"'>"+this+"<span class='coral-label-close cui-icon-cross2'></span></li>");
					});
				}
				item = text.join("");
			} else {
				if ( maxLabelWidth == "auto"|| isLabel || readonly){
					item = "<li tabindex='-1' class='coral-textboxlist-item "+ labelCls +"'   title='"+this+"' >"+text+"<span class='coral-label-close  cui-icon-cross2'></span></li>";
				}else{
					item = "<li tabindex='-1' class='coral-textboxlist-item "+ labelCls +"'  style='  max-width:"+maxLabelWidth+"px;' title='"+this+"' >"+text+"<span class='coral-label-close cui-icon-cross2'></span></li>";
				}
			}
			if ( text != "" ) {
				if ( this.options.multiple ) {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				} else {
					this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
					this.textboxlistUl.find( ".coral-textboxlist-inputLi" ).before( item );
				}
			} else {
				this.textboxlistUl.find( ".coral-textboxlist-item" ).remove(".coral-textboxlist-item");
			}
		} else {
			return this.textMethod.apply( this.element, arguments );
		}
		
		
	},
	getOldValue: function(){
		var opts = this.options,
		    valArr = [],
		    substr = [],
		    i = 0;
		if ( !this.currentValues ) return valArr;
		var substr = this.currentValues.split(",");
		for (; i <substr.length; i++) {
			var value = substr[i];
			valArr.push(value);
		}
		return valArr;
	},
	/**
	 * value: 设置的值。
	 * 
	 * changed：不对外开放，如果不传默认是false，内部调用，
	 * 如果需要出发onChange事件，则设置changed为true。
	 * 
	 */
	setValue: function ( opts, changed ) {
		// 如果null或者空，则设置为""。
		opts = opts || "";
		var that = this,
			value, text,changed, removed;
		if ( typeof opts !== "string" ) {
			value = opts.value;
			changed = opts.changed;
			removed = opts.removed;
		} else {
			value = opts;
		}
		if ( this.options.multiLineLabel ) {
			this.element.val("");
			this.element.css({width:"10px"});//清空值并且 将宽度还原；否则会将元素的高度撑开
		}
		this.previous = this.getValue();
		// 多行标签模式的设置值，有多选的功能
		if ( this.options.multiLineLabel ) {
			var that = this;
			var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
				indexOfInputLi = inputLi.index(),
				index = indexOfInputLi,
				values = this.valuebox.val(value)==""?[]:this.valuebox.val(value);
				//this.setText("");
			if ( $.trim( value ) == "" ) {
				this.setText(value);
			} else if ( "text" === this.options.postMode ) {
				this.setText( value );
			} else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				
				var texts = [],
					textField = this.options.textField,
					cArr = value.split( "," );
				for ( var i=0; i<cArr.length; i++ ) {
					var t = this.options.tempData[cArr[i]];
					if (t) {
						texts.push( this.options.tempData[cArr[i]][textField] );
					} else {
						texts.push( cArr[i] );
					}
				}
				if ( texts.length ){
					this.setText( texts );
				}
			}			
			//}
			if ( value == "" ) values = [];
			this.valuebox.val( value );
			this.currentValues = value;
		} else {
			// 不是标签模式，目前没有多选的功能
			// 设置text
			if ( $.trim( value ) == "" ) {
				this.setText(value);
			} else if ( "text" === this.options.postMode ) {
				this.setText( value );
			} else if ( $.trim( value ) !== "" && $.isArray( this.options.source ) ) {
				var texts = [],
					textField = this.options.textField,
					cArr = value.split( "," );
				for ( var i=0; i<cArr.length; i++ ) {
					var t = this.options.tempData[cArr[i]];
					if (t) {
						texts.push( this.options.tempData[cArr[i]][textField] );
					} else {
						texts.push( cArr[i] );
					}
				}
				if ( texts.length ){
					this.setText( texts );
				}
//				if ( texts.length ){
//					this.setText( texts[0] );
//				}
			}
			this.valuebox.val( value );
		}
		if ( value !== "" ) {
			this._hidePlaceholder();
		}
		changed && this._change(null);
	},
	
	setText: function (text) {
		this._updateTitle(text);
		this._text(text);
		this._setLastSelectedItem();
	},
	
	getValue: function(){
		if ( this.options.multiLineLabel ) {
			//if ( value != "" && !value ) {
			return this.valuebox.val();
			//}
		}else {
			return this.valueMethod.apply( this.valuebox );
		}
	//	return this._value();
	},	
	
	getText: function(){
		return this._text();
	},
	focus: function(){
		if (this.options.disabled || this.options.readonly || this.options.isLabel) return false;
		this.element.focus();
	},
	_keyEvent: function( keyEvent, event ) {
		if ( !this.ismultiLineLabel || this.menu.element.is( ":visible" ) ) {
			this._move( keyEvent, event );

			// prevents moving cursor to beginning/end of the text field in some browsers
			event.preventDefault();
		}
	},
	_removeLabel: function( e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" ),
			curItem = $(e.target).closest( "li.coral-textboxlist-item" ),
			lastItem = $(e.target).closest( "li.coral-textboxlist-item:last" );
		inputLi.insertAfter( lastItem );
		var indexOfInputLi = inputLi.index();
		var indexOfItem = curItem.index();
		var index = indexOfItem;
		if ( indexOfItem > indexOfInputLi ) {
			index = indexOfItem - 1;
		}
		var texts = this.getText().split( "," );
		texts.splice( index, 1 );
		curItem.remove();
		var values = this.getValue().split( "," );
		values.splice( index, 1 );
		this.selectedItems.splice( index, 1 );
		this.selectedItem = null;
		//this.valuebox.val( values.join(",") );
		/*this.setValue( {
			value: values.join(","), 
			changed: true,
			removed: index
		});*/
		this.setValue( values.join(","), true );
		if(typeof this.options.source == "string" ){
			this.setText( texts.join(",") );
		}
		//this._change( e );
		this._moveInput( "last", e );
		this.element.val("");
		this.element.focus();
	},
	_moveInput: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		var curItem = $(e.target).closest( "li.coral-textboxlist-item" );
		var lastItem = $(inputLi).closest( "li.coral-textboxlist-inputLi" ).nextAll("li.coral-textboxlist-item").last();

		switch ( direction ) {
		case 'left':
			inputLi.insertBefore( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'right':
			inputLi.insertAfter( curItem );
			this.element.val("");
			this.element.focus();
			break;
		case 'last':
			inputLi.insertAfter( lastItem );
			this.element.val("");
			break;
		}
	},
	_moveItem: function( direction, e ){
		var inputLi = this.element.closest( "li.coral-textboxlist-inputLi" );
		if ( direction == "left" && inputLi.prev().length && $( inputLi.find( "input" ) ).caret() == 0 ) {
			this.element.val("");
			inputLi.prev().focus();
		}
		if ( direction == "right" && inputLi.next().length && $( inputLi.find( "input" ) ).caret() == inputLi.find( "input" ).val().length ) {
			this.element.val("");
			inputLi.next().focus();
		}
	}
});
$.extend( $.coral.autocomplete, {
	escapeRegex: function( value ) {
		return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
	},
	filter: function( array, term , valueField, textField, searchField) {
		var that = this;
		var matcher = new RegExp( $.coral.autocomplete.escapeRegex( term ), "i" );
		if ( searchField ) {
			return $.grep( array, function( value ) {
				var r = matcher.test( value[textField] || value[valueField] || value );
				var sarr = searchField.split( "," );
				for( var i = 0; i < sarr.length; i ++ ){
					if ( !r && value[sarr[i]] ) {
						r = matcher.test( value[sarr[i]] );
						if ( r ) break;
					}
				}
				return r;
				/*if ( !r && value[searchField] ) {
					r = matcher.test( value[searchField] );
				}
				return r;*/
			});
		}
		return $.grep( array, function( value ) {
			return matcher.test( value[textField] || value[valueField] || value[searchField] || value );
		});
	}
});
$.component( "coral.autocomplete", $.coral.autocomplete, {
	options: {
		messages: {
			noResults: "No search results.",
			results: function( amount ) {
				return amount + ( amount > 1 ? " results are" : " result is" ) +
					" available, use up and down arrow keys to navigate.";
			}
		}
	},

	__response: function( content ) {
		var message;
		this._superApply( arguments );
		if ( this.options.disabled || this.cancelSearch ) {
			return;
		}
		if ( content && content.length ) {
			message = this.options.messages.results( content.length );
		} else {
			message = this.options.messages.noResults;
		}
		this.liveRegion.children().hide();
		$( "<div>" ).text( message ).appendTo( this.liveRegion );
	}
});
;

$.component( "coral.autocompletetree", $.coral.autocomplete, {
	requestIndex: 0,
	pending: 0,
	options: {
		allowPushParent: false,
		rootNode: false,
		multiLineLabel: false,
		radioType: "level",
		showRootNode: true,
		showClose: false,
		cascadeCheck: false,
		multiple : false,
        triggers: null, // 覆盖 validate 里的 triggers
        excluded: false // true 则不单独校验
	},
	_create: function() {
		this.options.render = "tree";
		this._super();
	},
	_filter: function( array, request, response  ){
		$( this.menu.element ).tree("reload", array);
		$( this.menu.element ).tree("filterNodesByParam", {"name": request.term} );
		response( array );
	},
	
	_initData: function(){
		var that = this;
		this.menu = {};
		var u = $( "<ul>" )[0];
		$( u )
		.uniqueId()
		.addClass( "coral-autocomplete-panel coral-front" )
		.appendTo( this._appendTo() )
		.tree({
			showLine: false,
			showIcon: true,
			radioType: this.options.radioType,
			checkable : this.options.chkStyle != null ? true : false,
			chkStyle : this.options.chkStyle,	
			showRootNode:this.options.showRootNode,
			rootNode:this.options.rootNode,
			componentCls: "coral-autocomplete-tree",
			beforeClick : function ( treeId, treeNode ) {
				if ( !that.options.allowPushParent && treeNode.isParent ) return false;
				var fn = $.coral.toFunction( that.options.beforeClick );
				if(!that.options.checkable){
					if ( $.isFunction(fn) ) {
						return fn(treeId, treeNode);
					}
					return true;
				} else {
					return false;
				}
			},
			onClick: function( event, treeId, treeNode ){
				var item = treeNode,
					previous = that.previous;
				// only trigger when focus was lost (click on menu)
				if ( that.element[ 0 ] !== that.document[ 0 ].activeElement ) {
					that.element.focus();
					that.previous = previous;
					// #6109 - IE triggers two focus events and the second
					// is asynchronous, so we need to reset the previous
					// term synchronously and asynchronously :-(
					that._delay(function() {
						that.previous = previous;
						that.selectedItem = item;
					});
				}

				if ( false !== that._trigger( "beforeNodeClick", event, { item: item ,value: that.getValue() } ) ) {
					that.selectedItem = item;
					that.selectedItems.push( item );
					var value = that.getValue(),
					text = that.getText(),
					vv = value==""?[]:value.split(that.options.separator),
					vt = text==""?[]:text.split(that.options.separator);
					if ( that.options.multiple ) {
						if ( !that.options.allowRepeat && $.inArray(treeNode.id , vv) > -1 ) {
							return ;
						}
						vv.push( treeNode.id );
						vt.push( treeNode.name );
					} else {
						vv = [ treeNode.id ];
						vt = [ treeNode.name ];
					}
					that.setText( vt.join(that.options.separator) );
					that.setValue( vv.join(that.options.separator), true );
				}
				that._trigger( "onNodeClick", event, { item: item ,value: that.getValue() } );
				// reset the term after the select event
				// this allows custom select handling to work properly
				//that.term = that._text();
				that.term = that._text();
				that.close( event );
			},
			onCheck : function(e, treeId, treeNode){
				var textArr = [];
				var valueArr = [];
				var nodes = $('#'+treeId).tree("getCheckedNodes",true);
				var value = that.getValue(),
					text = that.getText(),
					valueArr = value==""?[]:value.split(that.options.separator),
					textArr = text==""?[]:text.split(that.options.separator);
				for (var i=0, l=nodes.length; i<l; i++) {
					//在关联父子节点时,半选状态节点不作为下拉框的值
					if(that.options.cascadeCheck || !nodes[i].getCheckStatus().half){
						if (!that.options.allowPushParent && nodes[i].isParent) {
							continue;
						}
						if ( that.options.allowRepeat || $.inArray(nodes[i].id , valueArr) == -1 ) {
							textArr.push(nodes[i].name);
							valueArr.push(nodes[i].id);
						}
					}
				}
				//给下拉框赋值
				that.setValue(valueArr.join(that.options.separator), true);
				that._trigger("onNodeCheck", e, {treeId:treeId, node:treeNode});
			}
		})
		.hide();
		this.menu.element = $( u );
		if ( isNaN( this.options.panelHeight ) ) {
			$(".coral-autocomplete-panel").css( {
				"max-height": this.options.maxPanelHeight +"px"
			} );
		}
	}
});
;
window.PINYIN_DATA = {a:"啊阿吖嗄腌锕",ai:"爱埃挨哎唉哀皑癌蔼矮艾碍隘捱嗳嗌嫒瑷暧砹锿霭",an:"安案按鞍氨俺暗岸胺谙埯揞犴庵桉铵鹌黯",ang:"肮昂盎",ao:"凹敖熬翱袄傲奥懊澳坳拗嗷岙廒遨媪骜獒聱螯鏊鳌鏖",ba:"芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸茇菝岜灞钯粑鲅魃",bai:"白柏百摆佰败拜稗捭掰",ban:"版般办斑班搬扳颁板扮拌伴瓣半绊阪坂钣瘢癍舨",bang:"帮邦梆榜膀绑棒磅蚌镑傍谤蒡浜",bao:"保报包苞胞褒剥薄雹堡饱宝抱暴豹鲍爆炮曝瀑勹葆孢煲鸨褓趵龅",bei:"北备杯碑悲卑辈背贝钡倍狈惫焙被孛陂邶蓓呗悖碚鹎褙鐾鞴",ben:"本奔苯笨夯畚坌锛",beng:"蚌崩绷甭泵蹦迸嘣甏",bi:"比必币毕逼鼻鄙笔彼碧蓖蔽毙毖庇痹闭敝弊辟壁臂避陛匕俾芘荜荸萆薜吡哔狴庳愎滗濞弼妣婢嬖璧贲睥畀铋秕裨筚箅篦舭襞跸髀",bian:"变编边便鞭贬扁卞辨辩辫遍匾弁苄忭汴缏煸砭碥窆褊蝙笾鳊",biao:"表标彪膘婊骠飑飙飚镖镳瘭裱鳔",bie:"别鳖憋瘪蹩",bin:"彬斌濒滨宾摈傧豳缤玢槟殡膑镔髌鬓",bing:"并兵冰柄丙秉饼炳病屏禀邴摒槟",bo:"播博柏剥薄玻菠拨钵波勃搏铂箔伯帛舶脖膊渤泊驳卜亳啵饽檗擘礴钹鹁簸跛踣",bu:"不布部步捕卜哺补埠簿怖埔卟逋瓿晡钚钸醭",ca:"擦嚓礤",cai:"才采材彩猜裁财睬踩菜蔡",can:"参餐蚕残惭惨灿孱骖璨粲黪",cang:"藏苍舱仓沧伧",cao:"操糙槽曹草嘈漕螬艚",ce:"册策测厕侧恻",ceng:"曾层蹭噌",cha:"查插叉茬茶碴搽察岔差诧刹喳嚓猹馇汊姹杈楂槎檫锸镲衩",chai:"差拆柴豺侪钗瘥虿",chan:"产搀掺蝉馋谗缠铲阐颤冁谄蒇廛忏潺澶孱羼婵骣觇禅蟾躔",chang:"场常长昌猖尝偿肠厂敞畅唱倡裳伥鬯苌菖徜怅惝阊娼嫦昶氅鲳",chao:"超抄钞朝嘲潮巢吵炒绰剿怊晁焯耖",che:"车扯撤掣彻澈坼砗",chen:"称郴臣辰尘晨忱沉陈趁衬沈谌谶抻嗔宸琛榇碜龀",cheng:"成程称城撑橙呈乘惩澄诚承逞骋秤丞埕枨柽塍瞠铖铛裎蛏酲",chi:"持吃痴匙池迟弛驰耻齿侈尺赤翅斥炽傺墀茌叱哧啻嗤彳饬媸敕眵鸱瘛褫蚩螭笞篪豉踟魑",chong:"重充冲虫崇宠茺忡憧铳舂艟",chou:"抽酬畴踌稠愁筹仇绸瞅丑臭俦帱惆瘳雠",chu:"出除处础初橱厨躇锄雏滁楚储矗搐触畜亍刍怵憷绌杵楮樗褚蜍蹰黜",chuai:"揣搋啜嘬膪踹",chuan:"传川穿椽船喘串舛遄氚钏舡",chuang:"创疮窗幢床闯怆",chui:"吹炊捶锤垂椎陲棰槌",chun:"春椿醇唇淳纯蠢莼鹑蝽",chuo:"戳绰啜辍踔龊",ci:"次此词差疵茨磁雌辞慈瓷刺赐茈祠鹚糍",cong:"从聪葱囱匆丛苁淙骢琮璁枞",cou:"凑楱辏腠",cu:"促粗醋簇卒蔟徂猝殂酢蹙蹴",cuan:"蹿篡窜攒汆撺爨镩",cui:"摧崔催脆瘁粹淬翠衰萃啐悴璀榱毳",cun:"存村寸忖皴",cuo:"错措磋撮搓挫厝嵯脞锉矬痤瘥鹾蹉",da:"大达打答搭瘩耷哒嗒囗怛妲沓褡笪靼鞑",dai:"代带呆歹傣戴殆贷袋待逮怠埭甙呔岱迨绐玳黛",dan:"单但耽担丹郸掸胆旦氮惮淡诞弹蛋石儋凼萏菪啖澹宕殚赕眈疸瘅聃箪",dang:"当挡党荡档谠砀铛裆",dao:"到道导刀捣蹈倒岛祷稻悼盗叨氘焘纛",de:"的地得德锝",deng:"等登蹬灯瞪凳邓噔嶝戥磴镫簦",di:"的地第底弟堤低滴迪敌笛狄涤翟嫡抵蒂帝递缔氐籴诋谛邸坻荻嘀娣柢棣觌祗砥碲睇镝羝骶",dian:"电点典店颠掂滇碘靛垫佃甸惦奠淀殿丶阽坫巅玷钿癜癫簟踮",diao:"调碉叼雕凋刁掉吊钓铞貂鲷",die:"跌爹碟蝶迭谍叠垤堞揲喋牒瓞耋鲽",ding:"定丁盯叮钉顶鼎锭订仃啶玎腚碇町疔耵酊",diu:"丢铥",dong:"动东冬董懂栋侗恫冻洞垌咚岽峒氡胨胴硐鸫",dou:"都兜抖斗陡豆逗痘蔸钭窦蚪篼",du:"都度读督毒犊独堵睹赌杜镀肚渡妒芏嘟渎椟牍蠹笃髑黩",duan:"断段短端锻缎椴煅簖",dui:"对堆兑队敦怼憝碓镦",dun:"墩吨蹲敦顿囤钝盾遁沌炖砘礅盹趸",duo:"多度掇哆夺垛躲朵跺舵剁惰堕咄哚沲缍铎裰踱",e:"阿蛾峨鹅俄额讹娥恶厄扼遏鄂饿哦噩谔垩苊莪萼呃愕屙婀轭腭锇锷鹗颚鳄",en:"恩蒽摁嗯",er:"而二儿耳尔饵洱贰迩珥铒鸸鲕",fa:"发法罚筏伐乏阀珐垡砝",fan:"范藩帆番翻樊矾钒繁凡烦反返贩犯饭泛蕃蘩幡夂梵攵燔畈蹯",fang:"方放访房坊芳肪防妨仿纺邡枋钫舫鲂",fei:"费非菲啡飞肥匪诽吠肺废沸芾狒悱淝妃绯榧腓斐扉砩镄痱蜚篚翡霏鲱",fen:"分份芬酚吩氛纷坟焚汾粉奋忿愤粪偾瀵棼鲼鼢",feng:"风丰封枫蜂峰锋疯烽逢冯缝讽奉凤俸酆葑唪沣砜",fo:"佛",fou:"否缶",fu:"服复府父负福富夫敷肤孵扶拂辐幅氟符伏俘浮涪袱弗甫抚辅俯釜斧脯腑腐赴副覆赋傅付阜腹讣附妇缚咐莆匐凫郛芙芾苻茯莩菔拊呋呒幞怫滏艴孚驸绂绋桴赙祓黻黼罘稃馥蚨蜉蝠蝮麸趺跗鲋鳆",ga:"噶嘎夹轧垓尬尕尜旮钆",gai:"改该概钙盖溉芥丐陔戤赅",gan:"感敢干甘杆柑竿肝赶秆赣坩苷尴擀泔淦澉绀橄旰矸疳酐",gang:"港冈刚钢缸肛纲岗杠戆罡筻",gao:"告高篙皋膏羔糕搞镐稿睾诰郜藁缟槔槁杲锆",ge:"个格合歌各革哥搁戈鸽胳疙割葛蛤阁隔铬咯鬲仡哿圪塥嗝纥搿膈硌镉袼颌虼舸骼",gei:"给",gen:"根跟亘茛哏艮",geng:"更耕庚羹埂耿梗哽赓绠鲠",gong:"公工供功共贡攻恭龚躬宫弓巩汞拱珙肱蚣觥",gou:"构够购钩勾沟苟狗垢佝诟岣遘媾缑枸觏彀笱篝鞲",gu:"告故辜菇咕箍估沽孤姑鼓古蛊骨谷股顾固雇贾嘏诂菰崮汩梏轱牯牿臌毂瞽罟钴锢鸪鹄痼蛄酤觚鲴鹘",gua:"刮瓜剐寡挂褂卦诖呱栝胍鸹",guai:"乖拐怪掴",guan:"关管观棺官冠馆罐惯灌贯纶倌莞掼涫盥鹳矜鳏",guang:"广光逛咣犷桄胱",gui:"规瑰圭硅归龟闺轨鬼诡癸桂柜跪贵刽匦刿庋宄妫桧炅晷皈簋鲑鳜",gun:"辊滚棍衮绲磙鲧",guo:"国过果锅郭裹馘埚掴呙帼崞猓椁虢聒蜾蝈",ha:"哈蛤铪",hai:"还海孩骸氦亥害骇嗨胲醢",han:"韩酣憨邯含涵寒函喊罕翰撼捍旱憾悍焊汗汉邗菡撖犴阚瀚晗焓顸颔蚶鼾",hang:"行杭夯航吭沆绗颃",hao:"好号壕嚎豪毫郝耗浩貉蒿薅嗥嚆濠灏昊皓颢蚝",he:"何合呵喝荷菏核禾和盒貉阂河涸赫褐鹤贺诃劾壑嗬阖曷盍颌蚵翮",hei:"嘿黑",hen:"很痕狠恨",heng:"哼亨横衡恒蘅珩桁",hong:"轰哄烘虹鸿洪宏弘红黉訇讧荭蕻薨闳泓",hou:"后候喉侯猴吼厚堠後逅瘊篌糇鲎骺",hu:"户护乎互和呼忽瑚壶葫胡蝴狐糊湖弧虎唬沪冱唿囫岵猢怙惚浒滹琥槲轷觳烀煳戽扈祜瓠鹄鹕鹱笏醐斛鹘",hua:"话华化划花哗猾滑画骅桦砉铧",huai:"槐徊怀淮坏踝",huan:"还欢环桓缓换患唤痪豢焕涣宦幻郇奂萑擐圜獾洹浣漶寰逭缳锾鲩鬟",huang:"荒慌黄磺蝗簧皇凰惶煌晃幌恍谎隍徨湟潢遑璜肓癀蟥篁鳇",hui:"会回恢挥灰辉徽蛔毁悔慧卉惠晦贿秽烩汇讳诲绘诙茴荟蕙咴喙隳洄彗缋珲桧晖恚虺蟪麾",hun:"荤昏婚魂浑混诨馄阍溷珲",huo:"活或获和豁伙火惑霍货祸劐藿攉嚯夥钬锪镬耠蠖",ji:"系己机技计级积际及基击记济辑即几继集极给绩激圾畸稽箕肌饥迹讥鸡姬缉吉棘籍急疾汲嫉挤脊蓟冀季伎祭剂悸寄寂既忌妓纪藉骑亟乩剞佶偈墼芨芰荠蒺蕺掎叽咭哜唧岌嵴洎屐骥畿玑楫殛戟戢赍觊犄齑矶羁嵇稷瘠虮笈笄暨跻跽霁鲚鲫髻麂",jia:"家加价佳嘉枷夹荚颊贾甲钾假稼架驾嫁茄伽郏葭岬浃迦珈戛胛恝铗镓痂瘕蛱笳袈跏",jian:"间件建简荐见健检坚监减键歼尖笺煎兼肩艰奸缄茧柬碱硷拣捡俭剪槛鉴践贱箭舰剑饯渐溅涧僭谏谫菅蒹搛囝湔蹇謇缣枧楗戋戬牮犍毽腱睑锏鹣裥笕翦踺鲣鞯",jiang:"江强僵姜将浆疆蒋桨奖讲匠酱降茳洚绛缰犟礓耩糨豇靓",jiao:"教交校较蕉椒礁焦胶郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿酵轿叫窖佼僬艽茭挢噍峤徼湫姣敫皎鹪蛟醮跤鲛",jie:"接结解介界阶姐揭皆秸街截劫节桔杰捷睫竭洁戒藉芥借疥诫届讦诘拮喈嗟婕孑桀碣疖颉蚧羯鲒骱",jin:"进今金近仅津尽巾筋斤襟紧锦谨靳晋禁烬浸劲卺荩堇噤馑廑妗缙瑾槿赆觐衿矜",jing:"经京精境睛竞竟荆兢茎晶鲸惊粳井警景颈静敬镜径痉靖净刭儆阱菁獍憬泾迳弪婧肼胫腈旌箐",jiong:"炯窘迥扃",jiu:"就究酒揪纠玖韭久灸九厩救旧臼舅咎疚僦啾阄柩桕鸠鹫赳鬏",ju:"具且据车举巨鞠拘狙疽居驹菊局咀矩沮聚拒距踞锯俱句惧炬剧倨讵苣苴莒掬遽屦琚枸椐榘榉橘犋飓钜锔窭裾趄醵踽龃雎鞫",juan:"捐鹃娟倦眷卷绢鄄狷涓桊蠲锩镌隽",jue:"觉决绝嚼撅攫抉掘倔爵诀厥劂谲矍蕨噘噱崛獗孓珏桷橛爝镢蹶觖",jun:"均菌钧军君峻俊竣浚郡骏捃皲筠麇",ka:"喀咖卡咯佧咔胩",kai:"开揩楷凯慨剀垲蒈忾恺铠锎锴",kan:"看槛刊堪勘坎砍侃莰阚戡龛瞰",kang:"康慷糠扛抗亢炕伉闶钪",kao:"考拷烤靠尻栲犒铐",ke:"可科客课坷苛柯棵磕颗壳咳渴克刻嗑岢恪溘骒缂珂轲氪瞌钶锞稞疴窠颏蝌髁",ken:"肯啃垦恳裉龈",keng:"坑吭铿",kong:"控空恐孔倥崆箜",kou:"口抠扣寇芤蔻叩囗眍筘",ku:"枯哭窟苦酷库裤刳堀喾绔骷",kua:"夸垮挎跨胯侉",kuai:"会快块筷侩蒯郐哙狯浍脍",kuan:"款宽髋",kuang:"况匡筐狂框矿眶旷诓诳邝圹夼哐纩贶",kui:"亏盔岿窥葵奎魁傀馈愧溃馗匮夔隗蒉揆喹喟悝愦逵暌睽聩蝰篑跬",kun:"坤昆捆困悃阃琨锟醌鲲髡",kuo:"括扩廓阔蛞",la:"垃拉喇蜡腊辣啦落剌邋旯砬瘌",lai:"来莱赖崃徕涞濑赉睐铼癞籁",lan:"览蓝婪栏拦篮阑兰澜谰揽懒缆烂滥岚漤榄斓罱镧褴",lang:"琅榔狼廊郎朗浪蒗啷阆稂螂",lao:"老捞劳牢佬姥酪烙涝潦唠崂忉栳铑铹痨耢醪",le:"了乐勒仂叻泐鳓",lei:"类雷镭蕾磊累儡垒擂肋泪羸诔嘞嫘缧檑耒酹",leng:"棱楞冷塄愣",li:"理里力立历离利丽厘梨犁黎篱狸漓李鲤礼莉荔吏栗厉励砾傈例俐痢粒沥隶璃哩俪俚郦坜苈莅蓠藜呖唳喱猁溧澧逦娌嫠骊缡枥栎轹膦戾砺詈罹锂鹂疠疬蛎蜊蠡笠篥粝醴跞雳鲡鳢黧",lia:"俩",lian:"联链连练脸莲镰廉怜涟帘敛恋炼蔹奁潋濂琏楝殓臁裢裣蠊鲢",liang:"量两良亮俩粮凉梁粱辆晾谅墚莨椋锒踉靓魉",liao:"了料疗撩聊僚燎寥辽潦撂镣廖蓼尥嘹獠寮缭钌鹩",lie:"列裂烈劣猎冽埒捩咧洌趔躐鬣",lin:"琳林磷霖临邻鳞淋凛赁吝拎蔺啉嶙廪懔遴檩辚瞵粼躏麟",ling:"领另铃令玲菱零龄伶羚凌灵陵岭酃苓呤囹泠绫柃棂瓴聆蛉翎鲮",liu:"留浏流溜琉榴硫馏刘瘤柳六遛骝绺旒熘锍镏鹨鎏",long:"龙聋咙笼窿隆垄拢陇垅茏泷珑栊胧砻癃",lou:"楼娄搂篓漏陋露偻蒌喽嵝镂瘘耧蝼髅",lu:"录陆芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄戮垆撸噜泸渌漉逯璐栌橹轳辂辘氇胪镥鸬鹭簏舻鲈",lv:"律旅虑驴吕铝侣履屡缕氯率滤绿偻捋闾榈膂稆褛",luan:"峦挛孪滦卵乱脔娈栾鸾銮",lue:"略掠锊",lun:"论抡轮伦仑沦纶囵",luo:"络咯烙萝螺罗逻锣箩骡裸落洛骆倮蠃荦摞猡泺漯珞椤脶镙瘰跞雒",ma:"码妈马麻玛蚂骂嘛吗抹唛犸杩蟆麽",mai:"买埋麦卖迈脉劢荬霾",man:"满瞒馒蛮蔓曼慢漫谩墁幔缦熳镘颟螨鳗鞔",mang:"芒茫盲氓忙莽邙漭硭蟒",mao:"贸猫茅锚毛矛铆卯茂冒帽貌袤茆峁泖瑁昴牦耄旄懋瞀蝥蟊髦",me:"么麽",mei:"没美每媒魅玫枚梅酶霉煤眉镁昧寐妹媚糜莓嵋猸浼湄楣镅鹛袂",men:"们门闷扪焖懑钔",meng:"盟萌蒙檬锰猛梦孟勐甍瞢懵朦礞虻蜢蠓艋艨",mi:"密眯醚靡糜迷谜弥米秘觅泌蜜幂芈谧咪嘧猕汨宓弭脒祢敉縻麋",mian:"面免棉眠绵冕勉娩缅沔渑湎腼眄",miao:"描苗瞄藐秒渺庙妙喵邈缈缪杪淼眇鹋",mie:"蔑灭乜咩蠛篾",min:"民抿皿敏悯闽苠岷闵泯缗玟珉愍黾鳘",ming:"明名命螟鸣铭冥茗溟暝瞑酩",miu:"谬缪",mo:"没模脉摸摹蘑膜磨摩魔抹末莫墨默沫漠寞陌谟茉蓦馍嫫嬷殁镆秣瘼耱貊貘麽",mou:"谋牟某侔哞缪眸蛑鍪",mu:"目母牟拇牡亩姆墓暮幕募慕木睦牧穆仫坶苜沐毪钼",na:"那拿哪呐钠娜纳讷捺肭镎衲",nai:"氖乃奶耐奈鼐佴艿萘柰",nan:"男南难喃囝囡楠腩蝻赧",nang:"囊攮囔馕曩",nao:"脑挠恼闹淖孬垴呶猱瑙硇铙蛲",ne:"呢讷",nei:"内馁",nen:"嫩恁",neng:"能",ni:"你妮霓倪泥尼拟匿腻逆溺伲坭蘼猊怩昵旎睨铌鲵",nian:"年蔫拈碾撵捻念粘廿埝辇黏鲇鲶",niang:"娘酿",niao:"鸟尿茑嬲脲袅",nie:"捏聂孽啮镊镍涅乜陧蘖嗫颞臬蹑",nin:"您",ning:"柠狞凝宁拧泞佞咛甯聍",niu:"牛扭钮纽拗狃忸妞",nong:"农脓浓弄侬哝",nu:"努奴怒弩胬孥驽",nv:"女恧钕衄",nuan:"暖",nue:"虐疟挪",nuo:"娜懦糯诺傩搦喏锘",o:"哦噢",ou:"欧鸥殴藕呕偶沤讴怄瓯耦",pa:"扒耙啪趴爬帕怕琶葩杷筢",pai:"牌派排拍徘湃俳蒎哌",pan:"攀潘盘磐盼畔判叛胖拚爿泮袢襻蟠蹒",pang:"磅乓庞旁耪胖彷夂滂逄攵螃",pao:"抛咆刨炮袍跑泡匏狍庖脬疱",pei:"培配呸胚裴赔陪佩沛辔帔旆锫醅霈",pen:"喷盆湓",peng:"朋砰抨烹澎彭蓬棚硼篷膨鹏捧碰堋嘭怦蟛",pi:"否被辟坯砒霹批披劈琵毗啤脾疲皮匹痞僻屁譬丕仳陴邳郫圮埤鼙芘擗噼庀淠媲纰枇甓罴铍癖疋蚍蜱貔",pian:"片便篇偏骗谝骈犏胼翩蹁",piao:"漂飘瓢票剽莩嘌嫖缥殍瞟螵",pie:"撇瞥丿苤彡氕",pin:"品频聘拼贫姘嫔榀牝颦",ping:"评平冯乒坪苹萍凭瓶屏俜娉枰鲆",po:"坡泼颇婆破魄迫粕叵鄱珀钋钷皤笸",pu:"普暴扑铺仆莆葡菩蒲埔朴圃浦谱曝瀑匍噗溥濮璞氆镤镨蹼",qi:"其企起期汽器启气奇缉欺栖戚妻七凄漆柒沏棋歧畦崎脐齐旗祈祁骑岂乞契砌迄弃泣讫亓俟圻芑芪萁萋葺蕲嘁屺岐汔淇骐绮琪琦杞桤槭耆祺憩碛颀蛴蜞綦鳍麒",qia:"夹掐恰洽葜袷髂",qian:"前钱牵扦钎铅千迁签仟谦乾黔钳潜遣浅谴堑嵌欠歉纤倩佥阡芊芡茜荨掮岍悭慊骞搴褰缱椠肷愆钤虔箝",qiang:"强将枪呛腔羌墙蔷抢戕嫱樯戗炝锖锵镪襁蜣羟跄",qiao:"壳橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍削劁诮谯荞峤愀憔缲樵硗跷鞒",qie:"且切茄怯窃郄惬慊妾挈锲箧趄",qin:"亲钦侵秦琴勤芹擒禽寝沁芩揿吣嗪噙溱檎锓矜覃螓衾",qing:"情请庆轻青氢倾卿清擎晴氰顷苘圊檠磬蜻罄綮謦鲭黥",qiong:"琼穷邛茕穹蛩筇跫銎",qiu:"求球秋丘邱囚酋泅俅巯犰湫逑遒楸赇虬蚯蝤裘糗鳅鼽",qu:"区去取曲趋蛆躯屈驱渠娶龋趣诎劬苣蕖蘧岖衢阒璩觑氍朐祛磲鸲癯蛐蠼麴瞿黢",quan:"全权圈颧醛泉痊拳犬券劝诠荃犭悛绻辁畎铨蜷筌鬈",que:"确缺炔瘸却鹊榷雀阕阙悫",qun:"裙群逡麇",ran:"然燃冉染苒蚺髯",rang:"让瓤壤攘嚷禳穰",rao:"饶扰绕荛娆桡",re:"惹热喏",ren:"人任认壬仁忍韧刃妊纫仞荏饪轫稔衽",reng:"扔仍",ri:"日",rong:"容戎茸蓉荣融熔溶绒冗嵘狨榕肜蝾",rou:"揉柔肉糅蹂鞣",ru:"如入茹蠕儒孺辱乳汝褥蓐薷嚅洳溽濡缛铷襦颥",ruan:"软阮朊",rui:"蕊瑞锐芮蕤枘睿蚋",run:"闰润",ruo:"若弱偌箬",sa:"撒洒萨卅挲脎飒",sai:"赛腮鳃塞噻",san:"三叁伞散仨彡馓毵糁",sang:"桑嗓丧搡磉颡",sao:"搔骚扫嫂埽缫臊瘙鳋",se:"色塞瑟涩啬铯穑",sen:"森",seng:"僧",sha:"莎砂杀刹沙纱傻啥煞厦唼挲歃铩痧裟霎鲨",shai:"筛晒酾",shan:"删山珊苫杉煽衫闪陕擅赡膳善汕扇缮栅剡讪鄯埏芟潸姗嬗骟膻钐疝蟮舢跚鳝",shang:"上商尚赏墒伤晌裳垧泷绱殇熵觞",shao:"少绍鞘梢捎稍烧芍勺韶哨邵劭苕潲杓蛸筲艄",she:"设社奢赊蛇舌舍赦摄射慑涉厍佘揲猞滠歙畲麝",shen:"什身参深神甚申砷呻伸娠绅沈审婶肾慎渗诜谂莘葚哂渖椹胂矧蜃糁",sheng:"生声乘甥牲升绳省盛剩胜圣嵊渑晟眚笙",shi:"是时式什市实使事示始世施识视试师史十食势释失室匙狮湿诗尸虱石拾蚀矢屎驶士柿拭誓逝嗜噬适仕侍饰氏恃嘘谥埘莳蓍弑轼贳炻礻铈螫舐筮豕鲥鲺",shou:"手首受授收售守寿瘦兽狩绶艏",shu:"数术束输属殊述蔬枢梳抒叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠树戍竖墅庶漱恕俞丨倏塾菽摅沭澍姝纾毹腧殳秫",shua:"刷耍唰",shuai:"率摔衰甩帅蟀",shuan:"栓拴闩涮",shuang:"霜双爽孀",shui:"说水谁睡税",shun:"吮瞬顺舜",shuo:"数说硕朔烁蒴搠妁槊铄",si:"司思似食四斯撕嘶私丝死肆寺嗣伺饲巳厮俟兕厶咝汜泗澌姒驷缌祀锶鸶耜蛳笥",song:"松送耸怂颂宋讼诵凇菘崧嵩忪悚淞竦",sou:"搜艘擞嗽叟薮嗖嗾馊溲飕瞍锼螋",su:"速诉苏素酥俗粟僳塑溯宿肃缩夙谡蔌嗉愫涑簌觫稣",suan:"算酸蒜狻",sui:"虽随隋绥髓碎岁穗遂隧祟谇荽濉邃燧眭睢",sun:"孙损笋荪狲飧榫隼",suo:"所索莎蓑梭唆缩琐锁唢嗦嗍娑桫挲睃羧",ta:"他它她塌塔獭挞蹋踏嗒闼溻漯遢榻沓铊趿鳎",tai:"大态台胎苔抬泰酞太汰邰薹骀肽炱钛跆鲐",tan:"坛弹坍摊贪瘫滩檀痰潭谭谈坦毯袒碳探叹炭郯澹昙忐钽锬覃",tang:"汤塘搪堂棠膛唐糖倘躺淌趟烫傥帑惝溏瑭樘铴镗耥螗螳羰醣",tao:"讨掏涛滔绦萄桃逃淘陶套鼗叨啕洮韬饕",te:"特忒忑慝铽",teng:"藤腾疼誊滕",ti:"题提体梯剔踢锑蹄啼替嚏惕涕剃屉倜荑悌逖绨缇鹈裼醍",tian:"天添填田甜恬舔腆掭忝阗殄畋",tiao:"调条挑迢眺跳佻苕祧窕蜩笤粜龆鲦髫",tie:"帖贴铁萜餮",ting:"庭听厅烃汀廷停亭挺艇莛葶婷梃铤蜓霆",tong:"同统通桐酮瞳铜彤童桶捅筒痛佟仝茼嗵恸潼砼",tou:"投头偷透骰",tu:"图突凸秃徒途涂屠土吐兔堍荼菟钍酴",tuan:"团湍抟彖疃",tui:"推颓腿蜕褪退忒煺",tun:"囤褪吞屯臀氽饨暾豚",tuo:"拖托脱鸵陀驮驼椭妥拓唾乇佗坨庹沱柝��橐砣箨酡跎鼍",wa:"挖哇蛙洼娃瓦袜佤娲腽",wai:"外歪崴",wan:"完湾万晚玩蔓豌弯顽丸烷碗挽皖惋宛婉腕剜芄莞菀纨绾琬脘畹蜿",wang:"网望汪王亡枉往旺忘妄罔惘辋魍",wei:"为位威未围维委巍微危韦违桅唯惟潍苇萎伟伪尾纬蔚味畏胃喂魏渭谓尉慰卫偎诿隈隗圩葳薇帏帷崴嵬猥猬闱沩洧涠逶娓玮韪軎炜煨痿艉鲔",wen:"文问闻稳瘟温蚊纹吻紊刎夂阌汶璺攵雯",weng:"嗡翁瓮蓊蕹",wo:"我挝蜗涡窝斡卧握沃倭莴喔幄渥肟硪龌",wu:"务无误物午恶巫呜钨乌污诬屋芜梧吾吴毋武五捂舞伍侮坞戊雾晤勿悟兀仵阢邬圬芴唔庑怃忤寤迕妩婺骛杌牾焐鹉鹜痦蜈鋈鼯",xi:"系息戏习希细西喜析栖昔熙硒矽晰嘻吸锡牺稀悉膝夕惜熄烯溪汐犀檄袭席媳铣洗隙僖兮隰郗茜菥葸蓰奚唏徙饩阋浠淅屣嬉玺樨曦觋欷歙熹禊禧皙穸裼蜥螅蟋舄舾羲粞翕醯蹊鼷",xia:"下瞎虾匣霞辖暇峡侠狭厦夏吓呷狎遐瑕柙硖罅黠",xian:"现限线显先见献衔险铣掀锨仙鲜纤咸贤舷闲涎弦嫌县腺馅羡宪陷冼苋莶藓岘猃暹娴氙燹祆鹇痫蚬筅籼酰跣跹霰",xiang:"相想项享详象响香像向降厢镶箱襄湘乡翔祥巷橡芗葙饷庠骧缃蟓鲞飨",xiao:"小销消效校萧硝霄削哮嚣宵淆晓孝肖啸笑哓崤潇逍骁绡枭枵蛸筱箫魈",xie:"些谢械楔歇蝎鞋协挟携邪斜胁谐写卸蟹懈泄泻屑偕亵勰燮薤撷獬廨渫瀣邂绁缬榭榍颉蹀躞",xin:"信新心欣薪芯锌辛忻衅囟馨莘昕歆镡鑫",xing:"行形型性幸姓省星腥猩惺兴刑邢醒杏陉荇荥擤饧悻硎",xiong:"兄凶胸匈汹雄熊芎",xiu:"修秀臭休羞朽嗅锈袖绣咻岫馐庥溴鸺貅髹",xu:"需许须序续墟戌虚嘘徐蓄酗叙旭畜恤絮婿绪吁诩勖圩蓿洫溆顼栩肷煦盱胥糈醑",xuan:"选宣轩喧悬旋玄癣眩绚儇谖萱揎泫渲漩璇楦暄炫煊碹铉镟痃",xue:"学削靴薛穴雪血谑噱泶踅鳕",xun:"询训讯迅寻浚勋熏循旬驯巡殉汛逊巽郇埙荀荨蕈薰峋徇獯恂洵浔曛窨醺鲟",ya:"压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶轧伢垭揠岈迓娅琊桠氩砑睚痖",yan:"言研验眼严颜焉咽阉烟淹盐蜒岩延阎炎沿奄掩衍演艳堰燕厌砚雁唁彦焰宴谚殷厣赝剡俨偃兖谳郾鄢埏芫菸崦恹闫阏湮滟妍嫣琰檐晏胭腌焱罨筵酽趼魇餍鼹",yang:"样央阳养殃鸯秧杨扬佯疡羊洋氧仰痒漾徉怏泱炀烊恙蛘鞅",yao:"要邀腰妖瑶摇尧遥窑谣姚咬舀药耀钥夭爻吆崾徭幺珧杳轺曜肴铫鹞窈繇鳐麽",ye:"业也页椰噎耶爷野冶掖叶曳腋夜液拽靥谒邺揶揲晔烨铘",yi:"一以已意易议医移艺益义艾蛇壹揖铱依伊衣颐夷遗仪胰疑沂宜姨彝椅蚁倚乙矣抑邑屹亿役臆逸肄疫亦裔毅忆溢诣谊译异翼翌绎刈劓佚佾诒圯埸懿苡荑薏弈奕挹弋呓咦咿嗌噫峄嶷猗饴怿怡悒漪迤驿缢殪轶贻欹旖熠眙钇镒镱痍瘗癔翊蜴舣羿翳酏黟",yin:"因音引银茵荫殷阴姻吟淫寅饮尹隐印胤鄞垠堙茚吲喑狺夤洇氤铟瘾窨蚓霪龈",ying:"影应营英迎樱婴鹰缨莹萤荧蝇赢盈颖硬映嬴郢茔荥莺萦蓥撄嘤膺滢潆瀛瑛璎楹媵鹦瘿颍罂",yo:"哟唷",yong:"用拥永佣臃痈庸雍踊蛹咏泳涌恿勇俑壅墉喁慵邕镛甬鳙饔",you:"有游由友优右邮幽悠忧尤铀犹油酉佑釉诱又幼卣攸侑莠莜莸尢呦囿宥柚猷牖铕疣蚰蚴蝣蝤繇鱿黝鼬",yu:"于育语域娱与遇尉迂淤盂榆虞愚舆余俞逾鱼愉渝渔隅予雨屿禹宇羽玉芋郁吁喻峪御愈欲狱誉浴寓裕预豫驭粥禺毓伛俣谀谕萸蓣揄圄圉嵛狳饫馀庾阈鬻妪妤纡瑜昱觎腴欤於煜熨燠聿畲钰鹆鹬瘐瘀窬窳蜮蝓竽臾舁雩龉",yuan:"员原源元院远鸳渊冤垣袁援辕园圆猿缘苑愿怨垸塬芫掾圜沅媛瑗橼爰眢鸢螈箢鼋",yue:"说乐阅越曰约跃钥岳粤月悦龠哕瀹栎樾刖钺",yun:"运耘云郧匀陨允蕴酝晕韵孕郓芸狁恽愠纭韫殒昀氲熨筠",za:"匝砸杂咋拶咂",zai:"在载子再栽哉灾宰崽甾",zan:"暂咱攒赞瓒昝簪糌趱錾",zang:"赃脏葬奘驵臧",zao:"造遭糟凿藻枣早澡蚤躁噪皂灶燥唣",ze:"责择则泽咋仄赜啧帻迮昃笮箦舴",zei:"贼",zen:"怎谮",zeng:"增综曾憎赠缯甑罾锃",zha:"扎喳渣札轧铡闸眨栅榨咋乍炸诈柞揸吒咤哳楂砟痄蚱齄",zhai:"翟摘斋宅窄债寨砦瘵",zhan:"站展战瞻毡詹粘沾盏斩辗崭蘸栈占湛绽谵搌旃",zhang:"章长张樟彰漳掌涨杖丈帐账仗胀瘴障仉鄣幛嶂獐嫜璋蟑",zhao:"着照找招朝昭沼赵罩兆肇召爪诏棹钊笊",zhe:"这者着浙遮折哲蛰辙锗蔗乇谪摺柘辄磔鹧褶蜇螫赭",zhen:"真圳珍斟甄砧臻贞针侦枕疹诊震振镇阵帧蓁浈缜桢椹榛轸赈胗朕祯畛稹鸩箴",zheng:"正政整证争蒸挣睁征狰怔拯症郑诤峥徵钲铮筝",zhi:"只之知制置址支直至织治质执职值致指志芝枝吱蜘肢脂汁植殖侄止趾旨纸挚掷帜峙智秩稚炙痔滞窒卮陟郅埴芷摭帙忮彘咫骘栉枳栀桎轵轾贽胝膣祉黹雉鸷痣蛭絷酯跖踬踯豸觯",zhong:"中种重终盅忠钟衷肿仲众冢忪锺螽舯踵",zhou:"州舟周洲诌粥轴肘帚咒皱宙昼骤荮啁妯纣绉胄碡籀繇酎",zhu:"注主助筑属珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱著柱蛀贮铸住祝驻伫侏邾苎茱洙渚潴杼槠橥炷铢疰瘃竺箸舳翥躅麈",zhua:"挝抓爪",zhuai:"拽",zhuan:"专传转砖撰赚篆啭馔颛",zhuang:"状装幢桩庄妆撞壮僮",zhui:"椎锥追赘坠缀萑惴骓缒隹",zhun:"准屯谆肫窀",zhuo:"着捉拙卓桌琢茁酌啄灼浊倬诼擢浞涿濯禚斫镯",zi:"自资子字咨兹姿滋淄孜紫仔籽滓渍谘茈呲嵫姊孳缁梓辎赀恣眦锱秭耔笫粢趑觜訾龇鲻髭",zong:"综总鬃棕踪宗纵偬腙粽",zou:"邹走奏揍诹陬鄹驺鲰",zu:"组足租卒族祖诅阻俎菹镞",zuan:"钻纂攥缵躜",zui:"最嘴醉罪蕞觜",zun:"尊遵撙樽鳟",zuo:"作左昨佐柞做坐座阼唑嘬怍胙祚笮酢"};;

/*
 * 基于本地数据拼音搜索引擎 v0.1
 * Date: 2011-07-20
 * http://code.google.com/p/pinyin-engine/
 * (c) 2009-2010 TangBin, http://www.planeArt.cn
 * download by http://www.codefans.net
 * This is licensed under the GNU LGPL, version 2.1 or later.
 * For details, see: http://creativecommons.org/licenses/LGPL/2.1/
 */
var pinyinEngine = function () {
	return (this instanceof pinyinEngine) ? this.resetCache() : new pinyinEngine;
};
window.pinyinEngine = pinyinEngine;
pinyinEngine.prototype = {
	/**
	 * 查询
	 * @param		{String}	关键字
	 * @param		{Function}	回调函数(每一次成功匹配都将运行，
	 *							函数接收的第一个参数为匹配到的内容数据)
	 * @return		{Array}		所有匹配到的内容数据列表
	 */
	search: function (keyword, callback) {
		var cache = this._cache,
			history = this._history,
			value = [], number = 0;
		
		keyword = keyword.toLowerCase();
		callback = callback || function () {};
		
		// 在上一次搜索结果中查询
		if (history.length && keyword.indexOf(history.keyword) === 1) {
			cache = history.content;
		};
		
		for (var i = 0, len = cache.length; i < len; i ++) {
			if (cache[i].tags.indexOf(keyword) !== -1) {
				number ++;
				value.push(cache[i]);
				callback(cache[i].content);
			};
		};

		// 缓存本次查询结果
		this._history = {
			keyword: keyword,
			value: value,
			length: number
		};
		
		return value;
	},
	
	/**
	 * 设置索引缓存
	 * @param		{Array}		标签
	 * @param		{Any}		被索引的内容
	 */
	setCache: function (tags, content) {
		var keys, excision = '\u0001';
		
		keys = tags;
		for (var i = 0, len = tags.length; i < len; i ++) {
			 keys.push(pinyinEngine.toPinyin(tags[i], false, excision));
		};
		keys = keys.join(excision);
		
		var obj = {
			tags: keys,
			content: content
		};
		this._cache.push(obj);
	},
	
	/**
	 * 重置索引缓存
	 */
	resetCache: function () {
		this._cache = [];
		this._history = {};
	}
};



/**
 * 拼音转换算法
 *
 * @version	2011-07-19
 * @see		https://github.com/hotoo/pinyin.js
 * @author	闲耘™ (@hotoo <hotoo.cn[AT]gmail.com>), 唐斌 (1987.tangbin[AT]gmail.com)
 */
pinyinEngine.toPinyin = function () {
	var data = window.PINYIN_DATA;

    /*
	 * 建立高速索引缓存
     * Note: 除 Firefox 之外，IE,Chrome,Safari,Opera
     *       均为 s.split("")[i] 比 s.charAt(i) 的性能好。
     */
	var cache = {}, hans, i, j, m;
    for (var i in data) {
        hans = data[i];
		j = 0;
		m = hans.length;
        for(; j < m; j ++) {
            var han = hans.charAt(j);
            if (!cache[han]) {
                cache[han] = [];
            };
            cache[han].push(i);
        };
    };
    data = null;

    /*
     * 笛卡尔乘积，返回两个数组的所有可能的组合。
     * @param	{Array}
     * @param	{Array}
	 * @param	{String}	字符串分割符
     * @return	{Object}	成员包括array与string
     */
    function product (a, b, sp) {
        var r = [], val, str = [];
        for (var i = 0, l = a.length; i < l; i ++) {
            for (var j = 0, m = b.length; j < m; j ++) {
                val = r[r.length] = (a[i] instanceof Array) ? a[i].concat(b[j]) : [].concat(a[i],b[j]);
				str.push(val.join(""));
            };
        };
        return {
			array: r,
			string: str.join(sp || "")
		};
    };

    /**
     *	@param	{String}		要转为拼音的目标字符串（汉字）。
     *	@param	{Boolean}		是否仅保留匹配的第一个拼音。
     *	@param	{String}		返回结果的分隔符，默认返回数组集合。
     *	@return	{String, Array} 如果 sp 为 null，则返回 Array。
     *							否则，返回以 sp 分隔的字符串。
     */
    return function (keyword, single, sp) {
        var len, pys, py, pyl, i, y;
        if(keyword==null||keyword.length==0){
        	len = 0;
        }else{
        	if(typeof keyword == 'number'){
    			if(keyword.toString().length == "13"){
    				keyword = $.coral.longToStringDate(keyword);
    			}
    		}
        	len = keyword.length;
        }
		
        if (len === 0) {return single ? "" : []};
        if (len === 1) {
            y = cache[keyword];
            if (single) {return y && y[0] ? y[0] : keyword};
            return y || [keyword];
        } else {
            var py = [];
            for (i = 0; i < len; i ++) {
                y = cache[keyword.charAt(i)];
                if (y) {
                    py[py.length] = single ? y[0] : y;
                } else {
                    py[py.length] = single ? keyword.charAt(i) : [keyword.charAt(i)];
                };
            };
            if (single) {return sp == null ? py : py.join(sp || "")};

            pys = py[0];
			pyl = py.length;
			var prt, str;
            for (i = 1; i < pyl; i++) {
				prt = product(pys, py[i], sp);
                pys = prt.array;
            };
            return sp == null ? pys : prt.string;
        };
    };
	
}();
;

/**
* Loading plugin for jQuery
* version: v1.0.6
* 
* Small helper to give the user a visual feedback that something is happening 
* when fetching/posting data
* 
* USAGE:
* - global overlay:                     $.loading();
* - use javascript:                     $( selector ).loading();
* - On non-form elements:               $("div").loading({ text: "Loading", position:'inside'});
* - remove the loading element:         $( selector ).loading( "hide" );
*
* @author Laurent Blanes <laurent.blanes@gmail.com>
* ---
* Copyright 2013, Laurent Blanes ( https://github.com/hekigan/is-loading )
* 
* The MIT License (MIT)
* 
* Copyright (c) 2013 Laurent Blanes
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/
(function () {

    // Create the defaults once
    var pluginName = "loading",
        defaults = {
            'position': "overlay",        // right | inside | overlay
            'text': "",                 // Text to display next to the loader
            'loadingIcon': "coral-icon-loading",    // loader CSS loadingIcon
            'tpl': '<span class="loading-wrapper {wrapper}">{text}<span class="{loadingIcon}"></span></span>',    // loader base Tag
            'disableSource': false,      // true | false
            'disableOthers': []
        };

    // The actual plugin constructor
    function Plugin(element, options) {
        this.element = element;
        
        // Merge user options with default ones
        this.options = $.extend({}, defaults, options);

        this._defaults     = defaults;
        this._name         = pluginName;
        this._loader       = null;                // Contain the loading tag element

        this.init();
    }

    // Contructor function for the plugin (only once on page load)
    function contruct() {

        if ( !$[pluginName] ) {
            $.loading = function( opts ) {
                $( "body" ).loading( opts );
            };
        }
    }
    
    Plugin.prototype = {
        init: function() {
            if($(this.element).is("body")) {
                this.options.position = "overlay";
            }
            this.show();
        },

        show: function() {
            var self = this,
                tpl = self.options.tpl.replace( '{wrapper}', ' loading-show ');
            tpl = tpl.replace('{loadingIcon}', self.options['loadingIcon']);
            tpl = tpl.replace('{text}', (self.options.text !== "") ? self.options.text + ' ' : '' );
            self._loader = $( tpl );
            // Disable the element
            if( $(self.element).is("input, textarea") && true === self.options.disableSource ) {
                $(self.element).attr("disabled", "disabled");
            }
            else if(true === self.options.disableSource) {
                $(self.element).addClass("disabled");
            }
            // Set position
            switch (self.options.position) {
                case "inside":
                    $( self.element ).append( self._loader );
                    break;
                case "overlay":
                    var $wrapperTpl = null;
                    if ($(self.element).is("body")) {
                        $wrapperTpl = $('<div class="coral-loading" style="position:fixed; left:0; top:0; z-index: 10001; width: 100%; height: ' + $(window).height() + 'px;" />');
                        $wrapperTpl.prepend("<div class ='coral-component-overlay'/>");
                        $("body").prepend($wrapperTpl);
                        /*$( window ).on('resize', function() {
                            $wrapperTpl.height( $(window).height() + 'px' );
                            self._loader.css({top: ($(window).height()/2 - self._loader.outerHeight()/2) + 'px' });
                        });*/
                    } else {
                        var cssPosition = $(self.element).css('position'),
                            pos = {},
                            height = $(self.element).outerHeight() + 'px',
                            width = '100%'; // $( self.element ).outerWidth() + 'px;

                        if('relative' === cssPosition || 'absolute' === cssPosition ) {
                            pos = {'top': 0 , 'left': 0};
                        } else {
                            pos = $(self.element).position();
                        }
                        $wrapperTpl = $('<div class="coral-loading" style="position:absolute; top: ' + pos.top + 'px; left: ' + pos.left + 'px; z-index: 10000; width: ' + width + '; height: ' + height + ';" />');
                        $wrapperTpl.prepend("<div style='position:absolute;width:100%;height:100%;'><div class ='coral-component-overlay'style='position:relative;'></div></div>");
                        $(self.element).prepend($wrapperTpl);
                        /*$( window ).on('resize', function() {
                            $wrapperTpl.height( $( self.element ).outerHeight() + 'px' );
                            self._loader.css({top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' });
                        });*/
                    }
                    $wrapperTpl.append(self._loader);
                    self._loader.css({
                    	top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' 
                    });
                    break;
                default:
                    $(self.element).after(self._loader);
                    break;
            }
            self.disableOthers();
        },
        refresh: function(){
        	 var $wrapperTpl = null,
        	 	 self = this,
        	 	 cssPosition = $( self.element ).css('position'),
                 pos = {},
                 height = $( self.element ).outerHeight() + 'px',
                 width = '100%'; // $( self.element ).outerWidth() + 'px;
             if( 'relative' === cssPosition || 'absolute' === cssPosition ) {
                 pos = { 'top': 0,  'left': 0 };
             } else {
                 pos = $( self.element ).position();
             }
             $wrapperTpl = $( self.element ).find(".coral-loading");
             $wrapperTpl.css({
            	 top: pos.top,
            	 left: pos.left,
            	 width: width,
            	 height: height
             });
             self._loader.css({
            	 top: ($wrapperTpl.outerHeight()/2 - self._loader.outerHeight()/2) + 'px' 
            });
        },
        hide: function() {
            if("overlay" === this.options.position) {
                $(this.element).find(".coral-loading").first().remove();
            } else {
                $(this._loader).remove();
                $(this.element).text($(this.element).attr("data-loading-label"));
            }
            $(this.element).removeAttr("disabled").removeClass("disabled");
            this.enableOthers();
        },
        /**
         * TODO: do with coral
         */
        disableOthers: function() {
            $.each(this.options.disableOthers, function(i, e) {
                var elt = $(e);
                if(elt.is( "button, input, textarea")) {
                    elt.attr("disabled", "disabled");
                }
                else {
                    elt.addClass("disabled");
                }
            });
        },
        /**
         * TODO: do with coral
         */
        enableOthers: function() {
            $.each(this.options.disableOthers, function(i, e) {
                var elt = $(e);
                if(elt.is("button, input, textarea")) {
                    elt.removeAttr("disabled");
                }
                else {
                    elt.removeClass("disabled");
                }
            });
        }
    };
    var slice = Array.prototype.slice;
    // Constructor
    $.fn[pluginName] = function (options) {
    	var returnValue = this,
    		args = slice.call(arguments, 1),
    		isMethodCall = typeof options === "string";
        return this.each (function () {
        	if (isMethodCall) {
        		if ($.data(this, "plugin_" + pluginName)) {
        			var methodValue, 
        				instance = $.data( this, "plugin_" + pluginName );
        			if (!$.isFunction( instance[options]) || options.charAt( 0 ) === "_") {
    					return $.error( "no such method '" + options + "' for " + name + " component instance" );
    				}
    				methodValue = instance[options].apply(instance, args);
    				if ( methodValue !== instance && methodValue !== undefined ) {
    					returnValue = methodValue && methodValue.jquery ?
    						returnValue.pushStack(methodValue.get()) :
    						methodValue;
    					return false;
    				}
        		}
        	} else {
        		$.data( this, "plugin_" + pluginName, new Plugin( this, options ) );
        	}
        });
    };
    
    contruct();

})();
;

$(function(){
	$( document ).tooltip({
		items: "[data-errors]",
		content: function() {
			var element = $( this );
		    if ( element.is( "[data-errors]" ) ) {
		    	return element.attr( "data-errors" );
		    }
		},
		show: {
	    	effect: "fadeIn",
	        delay: 300
	    },
	    tooltipClass : "coral-state-error",
	    hide: { effect: "fadeOut", delay: 0 },
		position: {
			my: "left top",
	        at: "left bottom+5"/*,
			using: function( position, feedback ) {
				$( this ).css( position );
				$( "<div>" )
					.addClass( "coral-state-error" )
					.addClass( feedback.vertical )
					.addClass( feedback.horizontal )
					.appendTo( this );
			}*/
		}
	});
});
//$.datepicker.valueType="long";
//$.validate.validTypeOptions.maxlength.restrictInput = true;
//$.fn['datepicker'].defaults = {
//	minDate: "2015/8/7", //最小的可选日期，为null则无限制
//	maxDate: "2015-09-01"// 最大的可选日期，为null则无限制
//};
;

/*!
 * 组件库4.0：分栏符
 * 
 * 依赖JS文件：
 *    jquery.coral.core.js
 *    jquery.coral.component.js
 */

$.component("coral.subfield", {
	version: "4.0.1",
	options: {
		title : "",
		lineCls : null,
		textCls : null,
		onClick : null
	},
    _create: function () {
    	if (!this.element.jquery) this.element = $(this.element);
    	
    	this.element.addClass("coral-subfield");
    	
    	this.fieldset = $("<fieldset class=\"coral-subfield-fieldset\"></fieldset>").appendTo(this.element);
    	
    	if (this.options.lineCls) {
    		this.fieldset.addClass(this.options.lineCls);
    	}
    	
    	this.legend   = $("<legend class=\"coral-subfield-legend\">" + this.options.title + "</legend>").appendTo(this.fieldset);
    	
    	if (this.options.textCls) {
    		this.legend.addClass(this.options.textCls);
    	}
    	// 
    	this._bindEvent();
	},
	//
	_bindEvent : function () {
		var _this = this;
		this.legend.bind( "click" + this.eventNamespace, function( event ) {
			if ( _this.options.disabled ) {
				event.preventDefault();
				event.stopImmediatePropagation();
			} else {					
				_this._trigger("onClick");
			}
		});
	},
	//设置属性处理
	_setOption: function(key, value) {
		if (key === "title") {
			this.setTitle(value);
		}
	},
	// 
	_destroy : function() {
		this.uiTitle.remove();
	},
	
	component : function() {
		return this.element;
	},
	show : function() {
		this.component().show();
	},
	hide : function() {
		this.component().hide();
	},
	setTitle: function(title) {
		$("legend", this.fieldset).html(title);
		this.options.title = title;
	},
	getTitle : function() {
		return this.options.title;
	}
});
;

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

( function() {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

})();
;

$.component("coral.splitcontainer", {
	version: "4.1.4",
	options:{
		minWidth:"600"
	},
	_create: function() {
		var that = this,
			childId,
			opts = this.options,
			el = this.element,
			element = $(this.element),
			elementId = $(this.element).attr('id');
		element.addClass("coral-splitcontainer coral-splitcontainer-showhide");
		var tree = $("<ul id=\""+ elementId +"_tree\" style='display:none'></ul>").appendTo("body");
		tree.tree({}, [{
			"id" : "appRoot",
			"name" : "appRoot",
			"children" : [{
				"id" : "appMaster",
				"name" : "appMaster",
				"children" : []
			},{
				"id" : "appDetails",
				"name" : "appDetails",
				"children" : []
			}]
		}]);
		this.curDetailNode;
		this.pageIdArray = [];
		this.historyIdArray = [];
		this.arr = [];
		var splitMasterId = $("#" + elementId).children("div")[0],
			splitDetailId = $("#" + elementId).children("div")[1];
		if (splitMasterId.id == "") {
			splitMasterId.id = "splitContainer-Master";
		}
		if (splitDetailId.id == "") {
			splitDetailId.id = "splitContainer-Detail";
		}
		$("#" + splitMasterId.id).addClass("coral-nav coral-splitcontainer-master coral-splitcontainer-mastervisible");
		$("#" + splitDetailId.id).addClass("coral-nav coral-splitcontainer-detail");
		var nodeMaster = that.getTree().tree("getNodeByParam", "id", "appMaster"),
			nodeDetail = that.getTree().tree("getNodeByParam", "id", "appDetails");
		this.curDetailNode = nodeDetail;
		$("#" + splitMasterId.id).children("div").each(function(i) {
			opts = $.parser.parseOptions(this,[]);
			var newNodes = that._createView(this.id, opts, $("#" + splitMasterId.id), nodeMaster);
			that.getTree().tree("addNodes",nodeMaster,newNodes);
			if (!that.options.initialMaster && i == 0) {
				that.options.initialMaster = this.id;
			}
			that.initialMaster = $("#"+that.options.initialMaster);
		});
		$("#" + splitDetailId.id).children("div").each(function(i) {
			opts = $.parser.parseOptions(this,[]);
			var newNodes = that._createView(this.id, opts, $("#" + splitDetailId.id), nodeDetail);
			that.getTree().tree("addNodes",nodeDetail,newNodes);
			if (!that.options.initialDetail && i == 0) {
				that.options.initialDetail = this.id;
			}
			if (opts.title) {
				
			}
			that.initialDetail = $("#"+that.options.initialDetail);
		});
		childId = nodeDetail.children[0].id;
		nodeDetail.viewId = "view_"+childId;
		this.addView(childId, $("#"+childId));
		this.toDetail(childId);
		this.pageIdArray.push(childId);
		this.historyIdArray.push(childId);
		this._bindEvent();
	},
	addView: function(id, opts) {
		var elementId = $(this.element).attr("id"),
			that = this,
			splitDetailId = $("#" + elementId).children("div")[1];
		var node = this.getTree().tree("getNodeByParam", "id", id);
		if (node) {
			if (opts && typeof opts === "object") {
				if(opts.url){
					$("#"+node.id).panel("reload", opts.url);
				} else if(opts.content){
					$("#"+node.id).panel("setContent", opts.content);
					var toolbaroptionsData = this.initToolbar(opts);
					$("#"+node.id).prev().find(".ctrl-init-toolbar").toolbar("reload",toolbaroptionsData);
				}
			}
		} else {
			var newNode = this._createView(id, opts, $("#" + splitDetailId.id), this.curDetailNode);
			this.getTree().tree("addNodes", this.curDetailNode, newNode);
			node = this.getTree().tree("getNodeByParam", "id", id);
		}
		this.curDetailNode = node;
		this.pageIdArray.push(node.id);
		this.historyIdArray.push(node.id);
		if (node.level-2 === this.arr.length) {
			this.arr.push(node);
		}
		return $("#"+node.id);
	},
	getCurrentView: function(id){
		return $("#" + this.curDetailNode.id);
	},
	toDetail: function(id,data) {
		var opts = this.options,
			elementId = $(this.element).attr("id"),
			splitDetailId = $("#" + elementId).children("div")[1];
		var node = this.getTree().tree("getNodeByParam", "id", id);
		if (node) {
			$("#" + node.viewId).siblings().hide();
			$("#" + node.viewId).show();
		}
		node.data = data;
		$.coral.refreshAllComponent($("#" + id).parent());
		this._trigger("onDetailNavigate", null, [{'from':this.curDetailNode,
			'fromId':this.curDetailNode.id,'to':node,'toId':id,'direction':'to'}] );
	},
	NodeRadio: function (id, pId, isParent,open,icon,nocheck){  
        var node = {};
        node.id = id;    
        node.pId = pId;    
        node.name = id;
        node.isParent = isParent; 
        node.open =  open;
        node.icon = icon;
        node.nocheck = nocheck;
        return node;
    },
	_createView: function(id, opts, viewPos, pNode) {
		var that = this,
			dir = "",
			divPanel = $("#"+id),
			node = {},
			view,
			viewId,
			preNode,
			pageIndex = $.inArray(id, this.pageIdArray);
		if (divPanel.length == 0) {
			divPanel = $("<div id='"+ id +"'></div>");	
		}
		// 当前node的level
		if (pageIndex > -1) {
			preNode = this.getTree().tree("getNodeByParam", "id", this.pageIdArray[pageIndex - 1]);
			viewId = preNode.viewId;
			view = $("#"+viewId);
		} else {
			viewId = "view_"+id;
			view = $("<div id='"+ viewId +"' class='coral-nav-item' style='width:100%'></div>").appendTo(viewPos);
		}
		divPanel.appendTo(view);
		this.initToolbar(opts);
		var setting = $.extend( {}, {
			fit: true,
			componentCls: "coral-page",
			collapsible: false
		}, opts);
		divPanel.panel(setting);
		
		var rNode = this.NodeRadio(id, pNode.id, false,true,null,false);
		rNode.viewId = viewId;
		return rNode;
	},
	initToolbar: function(opts) {
		var that = this;
		var _navbtn = {
				type: "button",
				icons: "cui-icon-arrow-left3",
				label: "back",
				text: false,
				onClick: function() {
					that.backDetail();
				}
			},
			_title = {
				type: "html",
				content: opts.title
			};
		opts.toolbarOptions = opts.toolbarOptions || {};
		opts.toolbarOptions.data = opts.toolbarOptions.data || [];
		if (opts.title) {
			opts.toolbarOptions.data.unshift("->");
			opts.toolbarOptions.data.unshift(_title);
		}
		if (opts.showNavButton) {
			opts.toolbarOptions.data.unshift("->");
			opts.toolbarOptions.data.unshift(_navbtn);
		}
		$.each(opts.toolbarOptions.data, function(i, value){
			if (this === "navBtn") {
				opts.toolbarOptions.data[i] = _navbtn;
			}
		});
		return opts.toolbarOptions.data;
	},
	_bindEvent: function() {
		var that = this;
		var elementId = $(this.element).attr('id'),
			splitMasterId = $("#" + elementId).children("div")[0];
		this._on( this.document, {
			click: function( e ) {
				var target = $(e.target);
				var elementId = $(that.element).attr('id'),
				 	splitMasterId = $("#" + elementId).children("div")[0];
				var popup = that.element.find('.coral-splitcontainer-master'); 
				var offset = popup.offset();
	            if (e.pageX < offset.left || e.pageX > offset.left + popup.width() ||
	                e.pageY < offset.top || e.pageY > offset.top + popup.height()) {
	            	if (!target.parent().is("button") && $("#" + splitMasterId.id).hasClass("showMaster")) {
	            		 that.hideMaster();
	            	}
	             }
			}
		});
	},
	showMaster: function() {
		var elementId = $(this.element).attr('id');
		var splitMasterId = $("#" + elementId).children("div")[0],
			splitDetailId = $("#" + elementId).children("div")[1];
		$("#" + splitMasterId.id).addClass("showMaster");
	},
	hideMaster: function() {
		var elementId = $(this.element).attr('id');
		var splitMasterId = $("#" + elementId).children("div")[0],
			splitDetailId = $("#" + elementId).children("div")[1];
		$("#" + splitMasterId.id).removeClass("showMaster");
	},
	maxDetail: function(minMax) {
		var elementId = $(this.element).attr('id');
		var splitMasterId = $("#" + elementId).children("div")[0],
			splitDetailId = $("#" + elementId).children("div")[1];
		if (minMax == "max"){
			$("#" + elementId).removeClass("coral-splitcontainer-showhide").addClass("coral-splitcontainer-hidemode");
		} else {
			$("#" + elementId).removeClass("coral-splitcontainer-hidemode").addClass("coral-splitcontainer-showhide");
		}
		$("#" + splitMasterId.id).removeClass("coral-splitcontainer-mastervisible showMaster").addClass("coral-splitcontainer-masterhidden");
		$.coral.refreshAllComponent($("#" +splitDetailId.id).parent());
	},
	refresh: function() {
		var that = this, 
			elementId = $(this.element).attr('id'),
			toolbar, 
			title, 
			isExistMenu,
			splitMasterId = $("#" + elementId).children("div")[0],
			splitDetailId = $("#" + elementId).children("div")[1];
		
		if (this.initialDetail) {
			title = $("#"+this.options.initialDetail).panel("option", "title");
			if (title) {
				toolbar = $("#"+this.options.initialDetail).panel("toolbar");
			}
		}
		if ($(window).width() < this.options.minWidth) {
			$("#" + elementId).addClass("coral-splitcontainer-portrait");
			if (toolbar) {
				isExistMenu = toolbar.toolbar("isExist", this.options.id+"_detailMenu");
				if (!isExistMenu) {
					toolbar.toolbar("add", 0 ,{
						"id": this.options.id+"_detailMenu",
						"type": "button",
						"onClick": function(){
							that.showMaster();
						},
						"icons": "cui-icon-menu7",
						"text": false,
						"label": "菜单"
					});
				}
			}
			$("#" + splitMasterId.id).removeClass("coral-splitcontainer-mastervisible showMaster").addClass("coral-splitcontainer-masterhidden");
		} else {
			$("#" + elementId).removeClass("coral-splitcontainer-portrait");
			$("#" + splitMasterId.id).removeClass("coral-splitcontainer-masterhidden showMaster").addClass("coral-splitcontainer-mastervisible");
			if (toolbar) {
				isExistMenu = toolbar.toolbar("isExist", this.options.id+"_detailMenu");
				if (isExistMenu) {
					toolbar.toolbar("remove", 0);
				}
			}
		}
		$.coral.refreshAllComponent($("#" + splitMasterId.id));
		$.coral.refreshAllComponent($("#" +splitDetailId.id));
	},
	backDetail: function (backData) {
		var index = $.inArray(this.curDetailNode.id,this.historyIdArray);
		if(index <= 0){
			return;
		}
		var preNode = this.getTree().tree("getNodeByParam", "id", this.historyIdArray[index-1]);
		$("#" + preNode.viewId).siblings().hide();
		$("#" + preNode.viewId).show();
		preNode.backData = backData;
		if(index>-1){
			var length = this.historyIdArray.length,
			number = length - index;
			this.historyIdArray.splice(index,number);
		}
		$.coral.refreshAllComponent($("#" + preNode.id).parent());
		this._trigger( "onDetailNavigate", null, [{'from':this.curDetailNode,
			'fromId':this.curDetailNode.id,'to':preNode,'toId':preNode.id,'direction':'back'}]);
		this.curDetailNode = preNode;
	},
	backToView: function(id,backData) {
		var index = $.inArray(id,this.historyIdArray);
		if(index < 0){
			return;
		}
		var toNode = this.getTree().tree("getNodeByParam", "id", id);
		$("#" + toNode.viewId).siblings().hide();
		$("#" + toNode.viewId).show();
		toNode.backData = backData;
		$.coral.refreshAllComponent($("#" + id).parent());
		this._trigger( "onDetailNavigate", null, [{'from':this.curDetailNode,
			'fromId':this.curDetailNode.id,'to':toNode,'toId':toNode.id,'direction':'backToView'}]);
	},
	backToTopDetail: function (backData) {
		var topNode = this.getTree().tree("getNodeByParam", "id", "appDetails");
		$("#" + topNode.viewId).siblings().hide();
		$("#" + topNode.viewId).show();
		topNode.backData = backData;
		$.coral.refreshAllComponent($("#" + topNode.id).parent());
		this._trigger( "onDetailNavigate", null, [{'from':this.curDetailNode,
			'fromId':this.curDetailNode.id,'to':topNode,'toId':topNode.id,'direction':'backToTop'}]);
	},
	reload: function(id,pId) {
		var pNode;
		if (pId) {
		
		} else {
			this.curDetailNode = pNode = this.getTree().tree("getNodeByParam", "id", "appDetails");
		}
		this.toDetail(id);
	},
	getTree: function() {
		return $("#"+$(this.element).attr('id')+"_tree");
	}
});
;

$.component( "coral.view", {
	version: "@version",
	options: {
		controllerName: null,
		heightStyle: "auto"
	},
	
	_create: function(e, ui) {
		var that = this;
		var options = this.options;
		this.element.addClass( "coral-view coral-helper-reset" );
		$.controller(this.options.controllerName, {
			view: this.element,
			controllerName: this.options.controllerName
		});
		var c = $.controller(that.options.controllerName);
		$.parseDone({
			fun: c.onInit,
			context: c,
			args: [e, ui]
		});
		this._refresh();
	},
	_destroy: function() {
	},
	_setOption: function(key, value) {
		this._super( key, value );
	},
	refresh: function() {
		this._refresh();
	},
	_refresh: function() {
		$.coral.refreshChild(this.element);
	}
});
;

$.component("coral.adjusted", {
	_create: function() {
		this.element.addClass("ctrl-fit-element coral-scroll")
			.removeClass("coral-adjusted");
		if (this.element.hasClass("fill")) {
			this.element.removeClass("fill").addClass("coral-fill");
		}
	},
	refresh: function() {
		var maxHeight,
			$element = this.element,
			parent = $element.parent();
			
		maxHeight = parent.height();
		$element.siblings( ":visible" ).each(function() {
			var elem = $( this ),
			position = elem.css( "position" );
			
			if ( position === "absolute" || position === "fixed" ) {
				return;
			}
			maxHeight -= elem.outerHeight( true );
		});
		$element.height( Math.max( 0, maxHeight - $element.innerHeight() + $element.height() ) )
		.addClass("coral-scroll");
		$.coral.refreshChild(this.element);
		$.coral.fitParent(parent, true);
	}
});
;

/**
 * jqGrid Chinese Translation for v3.6
 * waiting 2010.01.18
 * http://waiting.javaeye.com/
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 * 
 * update 2010.05.04
 *		add double u3000 SPACE for search:odata to fix SEARCH box display err when narrow width from only use of eq/ne/cn/in/lt/gt operator under IE6/7
**/
$.grid = $.grid || {};
$.extend($.grid,{
	defaults : {
		recordtext: "{0} - {1}\u3000共 {2} 条",	// 共字前是全角空格
		pagetext:"共 {0} 页",
		emptyrecords: "无数据显示",
		loadtext: "数据加载中...",
		pgtext : " {0} 共 {1} 页"
	},
	search : {
		caption: "搜索...",
		Find: "查找",
		Reset: "重置",
		odata: [{ oper:'eq', text:'等于'},{ oper:'ne', text:'不等'},{ oper:'lt', text:'小于'},{ oper:'le', text:'小于等于'},{ oper:'gt', text:'大于'},{ oper:'ge', text:'大于等于'},{ oper:'bw', text:'开始于'},{ oper:'bn', text:'不开始于'},{ oper:'in', text:'包含'},{ oper:'ni', text:'不包含'},{ oper:'ew', text:'结束于'},{ oper:'en', text:'不结束于'},{ oper:'cn', text:'包含'},{ oper:'nc', text:'不包含'},{ oper:'nu', text:'空值'},{ oper:'nn', text:'非空值'}],
		groupOps: [	{ op: "AND", text: "所有" },	{ op: "OR",  text: "任一" }	],
		matchText: " 匹配",
		rulesText: " 规则"
	},
	edit : {
		bUpdate:'更新',
		addCaption: "添加记录",
		editCaption: "编辑记录",
		bSubmit: "提交",
		bCancel: "取消",
		bClose: "关闭",
		saveData: "数据已改变，是否保存？",
		bYes : "是",
		bNo : "否",
		bExit : "取消",
		msg: {
			required:"此字段必需",
			number:"请输入有效数字",
			minValue:"输值必须大于等于 ",
			maxValue:"输值必须小于等于 ",
			email: "这不是有效的e-mail地址",
			integer: "请输入有效整数",
			date: "请输入有效时间",
			url: "无效网址。前缀必须为 ('http://' 或 'https://')",
			nodefined : " 未定义！",
			novalue : " 需要返回值！",
			customarray : "自定义函数需要返回数组！",
			customfcheck : "Custom function should be present in case of custom checking!"
			
		}
	},
	view : {
		caption: "查看记录",
		bClose: "关闭"
	},
	del : {
		caption: "删除",
		msg: "删除所选记录？",
		bSubmit: "删除",
		bCancel: "取消"
	},
	nav : {
		edittext: "",
		edittitle: "编辑所选记录",
		addtext:"",
		addtitle: "添加新记录",
		deltext: "",
		deltitle: "删除所选记录",
		searchtext: "",
		searchtitle: "查找",
		refreshtext: "",
		refreshtitle: "刷新表格",
		alertcap: "注意",
		alerttext: "请选择记录",
		viewtext: "",
		viewtitle: "查看所选记录"
	},
	col : {
		caption: "选择列",
		bSubmit: "确定",
		bCancel: "取消"
	},
	errors : {
		errcap : "错误",
		nourl : "没有设置url",
		norecords: "没有要处理的记录",
		model : "colNames 和 colModel 长度不等！"
	},
	formatter : {
		integer : {thousandsSeparator: ",", defaultValue: '0'},
		number : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, defaultValue: '0.00'},
		currency : {decimalSeparator:".", thousandsSeparator: " ", decimalPlaces: 2, prefix: "", suffix:"", defaultValue: '0.00'},
		date : {
			dayNames:   [
				"Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat",
		         "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
			],
			monthNames: [
				"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
				"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
			],
			AmPm : ["am","pm","AM","PM"],
			S: function (j) {return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th'},
			srcformat: 'Y-m-d',
			newformat: 'm-d-Y',
			masks : {
				ISO8601Long:"Y-m-d H:i:s",
				ISO8601Short:"Y-m-d",
				ShortDate: "Y/j/n",
				LongDate: "l, F d, Y",
				FullDateTime: "l, F d, Y g:i:s A",
				MonthDay: "F d",
				ShortTime: "g:i A",
				LongTime: "g:i:s A",
				SortableDateTime: "Y-m-d\\TH:i:s",
				UniversalSortableDateTime: "Y-m-d H:i:sO",
				YearMonth: "F, Y"
			},
			reformatAfterEdit : false
		},
		baseLinkUrl: '',
		showAction: '',
		target: '',
		checkbox : {/*disabled:true*/},
		idName : 'id'
	}
});
;
}));/*
SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com

mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/

SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilzén and Mammon Media and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
 
SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
*/

var SWFUpload;
if (SWFUpload == undefined) {
	SWFUpload = function(a) {
		this.initSWFUpload(a)
	}
}
SWFUpload.prototype.initSWFUpload = function(b) {
	try {
		this.customSettings = {};
		this.settings = b;
		this.eventQueue = [];
		this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		this.movieElement = null;
		SWFUpload.instances[this.movieName] = this;
		this.initSettings();
		this.loadFlash();
		this.displayDebugInfo()
	} catch (a) {
		delete SWFUpload.instances[this.movieName];
		throw a
	}
};
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
	QUEUE_LIMIT_EXCEEDED : -100,
	FILE_EXCEEDS_SIZE_LIMIT : -110,
	ZERO_BYTE_FILE : -120,
	INVALID_FILETYPE : -130
};
SWFUpload.UPLOAD_ERROR = {
	HTTP_ERROR : -200,
	MISSING_UPLOAD_URL : -210,
	IO_ERROR : -220,
	SECURITY_ERROR : -230,
	UPLOAD_LIMIT_EXCEEDED : -240,
	UPLOAD_FAILED : -250,
	SPECIFIED_FILE_ID_NOT_FOUND : -260,
	FILE_VALIDATION_FAILED : -270,
	FILE_CANCELLED : -280,
	UPLOAD_STOPPED : -290
};
SWFUpload.FILE_STATUS = {
	QUEUED : -1,
	IN_PROGRESS : -2,
	ERROR : -3,
	COMPLETE : -4,
	CANCELLED : -5
};
SWFUpload.BUTTON_ACTION = {
	SELECT_FILE : -100,
	SELECT_FILES : -110,
	START_UPLOAD : -120
};
SWFUpload.CURSOR = {
	ARROW : -1,
	HAND : -2
};
SWFUpload.WINDOW_MODE = {
	WINDOW : "window",
	TRANSPARENT : "transparent",
	OPAQUE : "opaque"
};
SWFUpload.completeURL = function(a) {
	if (typeof (a) !== "string" || a.match(/^https?:\/\//i) || a.match(/^\//)) {
		return a
	}
	var c = window.location.protocol + "//" + window.location.hostname
			+ (window.location.port ? ":" + window.location.port : "");
	var b = window.location.pathname.lastIndexOf("/");
	if (b <= 0) {
		path = "/"
	} else {
		path = window.location.pathname.substr(0, b) + "/"
	}
	return path + a
};
SWFUpload.prototype.initSettings = function() {
	this.ensureDefault = function(b, a) {
		this.settings[b] = (this.settings[b] == undefined) ? a
				: this.settings[b]
	};
	this.ensureDefault("upload_url", "");
	this.ensureDefault("preserve_relative_urls", false);
	this.ensureDefault("file_post_name", "Filedata");
	this.ensureDefault("post_params", {});
	this.ensureDefault("use_query_string", false);
	this.ensureDefault("requeue_on_error", false);
	this.ensureDefault("http_success", []);
	this.ensureDefault("assume_success_timeout", 0);
	this.ensureDefault("file_types", "*.*");
	this.ensureDefault("file_types_description", "All Files");
	this.ensureDefault("file_size_limit", 0);
	this.ensureDefault("file_upload_limit", 0);
	this.ensureDefault("file_queue_limit", 0);
	this.ensureDefault("flash_url", "swfupload.swf");
	this.ensureDefault("prevent_swf_caching", true);
	this.ensureDefault("button_image_url", "");
	this.ensureDefault("button_width", 1);
	this.ensureDefault("button_height", 1);
	this.ensureDefault("button_text", "");
	this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	this.ensureDefault("button_text_top_padding", 0);
	this.ensureDefault("button_text_left_padding", 0);
	this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	this.ensureDefault("button_disabled", false);
	this.ensureDefault("button_placeholder_id", "");
	this.ensureDefault("button_placeholder", null);
	this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
	this.ensureDefault("debug", false);
	this.settings.debug_enabled = this.settings.debug;
	this.settings.return_upload_start_handler = this.returnUploadStart;
	this.ensureDefault("swfupload_loaded_handler", null);
	this.ensureDefault("file_dialog_start_handler", null);
	this.ensureDefault("file_queued_handler", null);
	this.ensureDefault("file_queue_error_handler", null);
	this.ensureDefault("file_dialog_complete_handler", null);
	this.ensureDefault("upload_start_handler", null);
	this.ensureDefault("upload_progress_handler", null);
	this.ensureDefault("upload_error_handler", null);
	this.ensureDefault("upload_success_handler", null);
	this.ensureDefault("upload_complete_handler", null);
	this.ensureDefault("debug_handler", this.debugMessage);
	this.ensureDefault("custom_settings", {});
	this.customSettings = this.settings.custom_settings;
	if (!!this.settings.prevent_swf_caching) {
		this.settings.flash_url = this.settings.flash_url
				+ (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&")
				+ "preventswfcaching=" + new Date().getTime()
	}
	if (!this.settings.preserve_relative_urls) {
		this.settings.upload_url = SWFUpload
				.completeURL(this.settings.upload_url);
		this.settings.button_image_url = this.settings.button_image_url ? SWFUpload
				.completeURL(this.settings.button_image_url)
				: this.settings.button_image_url
	}
	delete this.ensureDefault
};
SWFUpload.prototype.loadFlash = function() {
	var a, b;
	if (document.getElementById(this.movieName) !== null) {
		throw "ID " + this.movieName
				+ " is already in use. The Flash Object could not be added"
	}
	a = document.getElementById(this.settings.button_placeholder_id)
			|| this.settings.button_placeholder;
	if (a == undefined) {
		throw "Could not find the placeholder element: "
				+ this.settings.button_placeholder_id
	}
	b = document.createElement("div");
	b.innerHTML = this.getFlashHTML();
	a.parentNode.replaceChild(b.firstChild, a);
	if (window[this.movieName] == undefined) {
		window[this.movieName] = this.getMovieElement()
	}
};
SWFUpload.prototype.getFlashHTML = function() {
	return [ '<object id="', this.movieName,
			'" type="application/x-shockwave-flash" data="',
			this.settings.flash_url, '" width="', this.settings.button_width,
			'" height="', this.settings.button_height, '" class="swfupload">',
			'<param name="wmode" value="', this.settings.button_window_mode,
			'" />', '<param name="movie" value="', this.settings.flash_url,
			'" />', '<param name="quality" value="high" />',
			'<param name="menu" value="false" />',
			'<param name="allowScriptAccess" value="sameDomain"/>',
			'<param name="flashvars" value="' + this.getFlashVars() + '" />',
			"</object>" ].join("")
};
SWFUpload.prototype.getFlashVars = function() {
	var b = this.buildParamString();
	var a = this.settings.http_success.join(",");
	return [ "movieName=", encodeURIComponent(this.movieName),
			"&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			"&amp;useQueryString=",
			encodeURIComponent(this.settings.use_query_string),
			"&amp;requeueOnError=",
			encodeURIComponent(this.settings.requeue_on_error),
			"&amp;httpSuccess=", encodeURIComponent(a),
			"&amp;assumeSuccessTimeout=",
			encodeURIComponent(this.settings.assume_success_timeout),
			"&amp;params=", encodeURIComponent(b), "&amp;filePostName=",
			encodeURIComponent(this.settings.file_post_name),
			"&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			"&amp;fileTypesDescription=",
			encodeURIComponent(this.settings.file_types_description),
			"&amp;fileSizeLimit=",
			encodeURIComponent(this.settings.file_size_limit),
			"&amp;fileUploadLimit=",
			encodeURIComponent(this.settings.file_upload_limit),
			"&amp;fileQueueLimit=",
			encodeURIComponent(this.settings.file_queue_limit),
			"&amp;debugEnabled=",
			encodeURIComponent(this.settings.debug_enabled),
			"&amp;buttonImageURL=",
			encodeURIComponent(this.settings.button_image_url),
			"&amp;buttonWidth=",
			encodeURIComponent(this.settings.button_width),
			"&amp;buttonHeight=",
			encodeURIComponent(this.settings.button_height),
			"&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			"&amp;buttonTextTopPadding=",
			encodeURIComponent(this.settings.button_text_top_padding),
			"&amp;buttonTextLeftPadding=",
			encodeURIComponent(this.settings.button_text_left_padding),
			"&amp;buttonTextStyle=",
			encodeURIComponent(this.settings.button_text_style),
			"&amp;buttonAction=",
			encodeURIComponent(this.settings.button_action),
			"&amp;buttonDisabled=",
			encodeURIComponent(this.settings.button_disabled),
			"&amp;buttonCursor=",
			encodeURIComponent(this.settings.button_cursor) ].join("")
};
SWFUpload.prototype.getMovieElement = function() {
	if (this.movieElement == undefined) {
		this.movieElement = document.getElementById(this.movieName)
	}
	if (this.movieElement === null) {
		throw "Could not find Flash element"
	}
	return this.movieElement
};
SWFUpload.prototype.buildParamString = function() {
	var c = this.settings.post_params;
	var b = [];
	if (typeof (c) === "object") {
		for ( var a in c) {
			if (c.hasOwnProperty(a)) {
				b.push(encodeURIComponent(a.toString()) + "="
						+ encodeURIComponent(c[a].toString()))
			}
		}
	}
	return b.join("&amp;")
};
SWFUpload.prototype.reduceUploadCount = function() {
	this.callFlash("reduceUploadCount");
}
SWFUpload.prototype.addUploadCount = function() {
	this.callFlash("addUploadCount");
}
SWFUpload.prototype.destroy = function() {
	try {
		this.cancelUpload(null, false);
		this.callFlash("Destroy");
		var a = null;
		a = this.getMovieElement();
		if (a && typeof (a.CallFunction) === "unknown") {
			for ( var c in a) {
				try {
					if (typeof (a[c]) === "function") {
						a[c] = null
					}
				} catch (e) {
				}
			}
			try {
				a.parentNode.removeChild(a)
			} catch (b) {
			}
		}
		window[this.movieName] = null;
		SWFUpload.instances[this.movieName] = null;
		delete SWFUpload.instances[this.movieName];
		this.movieElement = null;
		this.settings = null;
		this.customSettings = null;
		this.eventQueue = null;
		this.movieName = null;
		return true
	} catch (d) {
		return false
	}
};
SWFUpload.prototype.displayDebugInfo = function() {
	this.debug([
			"---SWFUpload Instance Info---\n",
			"Version: ",
			SWFUpload.version,
			"\n",
			"Movie Name: ",
			this.movieName,
			"\n",
			"Settings:\n",
			"\t",
			"upload_url:               ",
			this.settings.upload_url,
			"\n",
			"\t",
			"flash_url:                ",
			this.settings.flash_url,
			"\n",
			"\t",
			"use_query_string:         ",
			this.settings.use_query_string.toString(),
			"\n",
			"\t",
			"requeue_on_error:         ",
			this.settings.requeue_on_error.toString(),
			"\n",
			"\t",
			"http_success:             ",
			this.settings.http_success.join(", "),
			"\n",
			"\t",
			"assume_success_timeout:   ",
			this.settings.assume_success_timeout,
			"\n",
			"\t",
			"file_post_name:           ",
			this.settings.file_post_name,
			"\n",
			"\t",
			"post_params:              ",
			this.settings.post_params.toString(),
			"\n",
			"\t",
			"file_types:               ",
			this.settings.file_types,
			"\n",
			"\t",
			"file_types_description:   ",
			this.settings.file_types_description,
			"\n",
			"\t",
			"file_size_limit:          ",
			this.settings.file_size_limit,
			"\n",
			"\t",
			"file_upload_limit:        ",
			this.settings.file_upload_limit,
			"\n",
			"\t",
			"file_queue_limit:         ",
			this.settings.file_queue_limit,
			"\n",
			"\t",
			"debug:                    ",
			this.settings.debug.toString(),
			"\n",
			"\t",
			"prevent_swf_caching:      ",
			this.settings.prevent_swf_caching.toString(),
			"\n",
			"\t",
			"button_placeholder_id:    ",
			this.settings.button_placeholder_id.toString(),
			"\n",
			"\t",
			"button_placeholder:       ",
			(this.settings.button_placeholder ? "Set" : "Not Set"),
			"\n",
			"\t",
			"button_image_url:         ",
			this.settings.button_image_url.toString(),
			"\n",
			"\t",
			"button_width:             ",
			this.settings.button_width.toString(),
			"\n",
			"\t",
			"button_height:            ",
			this.settings.button_height.toString(),
			"\n",
			"\t",
			"button_text:              ",
			this.settings.button_text.toString(),
			"\n",
			"\t",
			"button_text_style:        ",
			this.settings.button_text_style.toString(),
			"\n",
			"\t",
			"button_text_top_padding:  ",
			this.settings.button_text_top_padding.toString(),
			"\n",
			"\t",
			"button_text_left_padding: ",
			this.settings.button_text_left_padding.toString(),
			"\n",
			"\t",
			"button_action:            ",
			this.settings.button_action.toString(),
			"\n",
			"\t",
			"button_disabled:          ",
			this.settings.button_disabled.toString(),
			"\n",
			"\t",
			"custom_settings:          ",
			this.settings.custom_settings.toString(),
			"\n",
			"Event Handlers:\n",
			"\t",
			"swfupload_loaded_handler assigned:  ",
			(typeof this.settings.swfupload_loaded_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_dialog_start_handler assigned: ",
			(typeof this.settings.file_dialog_start_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_queued_handler assigned:       ",
			(typeof this.settings.file_queued_handler === "function")
					.toString(),
			"\n",
			"\t",
			"file_queue_error_handler assigned:  ",
			(typeof this.settings.file_queue_error_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_start_handler assigned:      ",
			(typeof this.settings.upload_start_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_progress_handler assigned:   ",
			(typeof this.settings.upload_progress_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_error_handler assigned:      ",
			(typeof this.settings.upload_error_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_success_handler assigned:    ",
			(typeof this.settings.upload_success_handler === "function")
					.toString(),
			"\n",
			"\t",
			"upload_complete_handler assigned:   ",
			(typeof this.settings.upload_complete_handler === "function")
					.toString(), "\n", "\t",
			"debug_handler assigned:             ",
			(typeof this.settings.debug_handler === "function").toString(),
			"\n" ].join(""))
};
SWFUpload.prototype.addSetting = function(b, c, a) {
	if (c == undefined) {
		return (this.settings[b] = a)
	} else {
		return (this.settings[b] = c)
	}
};
SWFUpload.prototype.getSetting = function(a) {
	if (this.settings[a] != undefined) {
		return this.settings[a]
	}
	return ""
};
SWFUpload.prototype.callFlash = function(functionName, argumentArray) {
	argumentArray = argumentArray || [];
	var movieElement = this.getMovieElement();
	var returnValue, returnString;
	try {
		returnString = movieElement.CallFunction('<invoke name="'
				+ functionName + '" returntype="javascript">'
				+ __flash__argumentsToXML(argumentArray, 0) + "</invoke>");
		returnValue = eval(returnString)
	} catch (ex) {
		throw "Call to " + functionName + " failed"
	}
	if (returnValue != undefined && typeof returnValue.post === "object") {
		returnValue = this.unescapeFilePostParams(returnValue)
	}
	return returnValue
};
SWFUpload.prototype.selectFile = function() {
	this.callFlash("SelectFile")
};
SWFUpload.prototype.selectFiles = function() {
	this.callFlash("SelectFiles")
};
SWFUpload.prototype.startUpload = function(a) {
	this.callFlash("StartUpload", [ a ])
};
SWFUpload.prototype.cancelUpload = function(a, b) {
	if (b !== false) {
		b = true
	}
	this.callFlash("CancelUpload", [ a, b ])
};
SWFUpload.prototype.stopUpload = function() {
	this.callFlash("StopUpload")
};
SWFUpload.prototype.getStats = function() {
	return this.callFlash("GetStats")
};
SWFUpload.prototype.setStats = function(a) {
	this.callFlash("SetStats", [ a ])
};
SWFUpload.prototype.getFile = function(a) {
	if (typeof (a) === "number") {
		return this.callFlash("GetFileByIndex", [ a ])
	} else {
		return this.callFlash("GetFile", [ a ])
	}
};
SWFUpload.prototype.addFileParam = function(a, b, c) {
	return this.callFlash("AddFileParam", [ a, b, c ])
};
SWFUpload.prototype.removeFileParam = function(a, b) {
	this.callFlash("RemoveFileParam", [ a, b ])
};
SWFUpload.prototype.setUploadURL = function(a) {
	this.settings.upload_url = a.toString();
	this.callFlash("SetUploadURL", [ a ])
};
SWFUpload.prototype.setPostParams = function(a) {
	this.settings.post_params = a;
	this.callFlash("SetPostParams", [ a ])
};
SWFUpload.prototype.addPostParam = function(a, b) {
	this.settings.post_params[a] = b;
	this.callFlash("SetPostParams", [ this.settings.post_params ])
};
SWFUpload.prototype.removePostParam = function(a) {
	delete this.settings.post_params[a];
	this.callFlash("SetPostParams", [ this.settings.post_params ])
};
SWFUpload.prototype.setFileTypes = function(a, b) {
	this.settings.file_types = a;
	this.settings.file_types_description = b;
	this.callFlash("SetFileTypes", [ a, b ])
};
SWFUpload.prototype.setFileSizeLimit = function(a) {
	this.settings.file_size_limit = a;
	this.callFlash("SetFileSizeLimit", [ a ])
};
SWFUpload.prototype.setFileUploadLimit = function(a) {
	this.settings.file_upload_limit = a;
	this.callFlash("SetFileUploadLimit", [ a ])
};
SWFUpload.prototype.setFileQueueLimit = function(a) {
	this.settings.file_queue_limit = a;
	this.callFlash("SetFileQueueLimit", [ a ])
};
SWFUpload.prototype.setFilePostName = function(a) {
	this.settings.file_post_name = a;
	this.callFlash("SetFilePostName", [ a ])
};
SWFUpload.prototype.setUseQueryString = function(a) {
	this.settings.use_query_string = a;
	this.callFlash("SetUseQueryString", [ a ])
};
SWFUpload.prototype.setRequeueOnError = function(a) {
	this.settings.requeue_on_error = a;
	this.callFlash("SetRequeueOnError", [ a ])
};
SWFUpload.prototype.setHTTPSuccess = function(a) {
	if (typeof a === "string") {
		a = a.replace(" ", "").split(",")
	}
	this.settings.http_success = a;
	this.callFlash("SetHTTPSuccess", [ a ])
};
SWFUpload.prototype.setAssumeSuccessTimeout = function(a) {
	this.settings.assume_success_timeout = a;
	this.callFlash("SetAssumeSuccessTimeout", [ a ])
};
SWFUpload.prototype.setDebugEnabled = function(a) {
	this.settings.debug_enabled = a;
	this.callFlash("SetDebugEnabled", [ a ])
};
SWFUpload.prototype.setButtonImageURL = function(a) {
	if (a == undefined) {
		a = ""
	}
	this.settings.button_image_url = a;
	this.callFlash("SetButtonImageURL", [ a ])
};
SWFUpload.prototype.setButtonDimensions = function(c, a) {
	this.settings.button_width = c;
	this.settings.button_height = a;
	var b = this.getMovieElement();
	if (b != undefined) {
		b.style.width = c + "px";
		b.style.height = a + "px"
	}
	this.callFlash("SetButtonDimensions", [ c, a ])
};
SWFUpload.prototype.setButtonText = function(a) {
	this.settings.button_text = a;
	this.callFlash("SetButtonText", [ a ])
};
SWFUpload.prototype.setButtonTextPadding = function(b, a) {
	this.settings.button_text_top_padding = a;
	this.settings.button_text_left_padding = b;
	this.callFlash("SetButtonTextPadding", [ b, a ])
};
SWFUpload.prototype.setButtonTextStyle = function(a) {
	this.settings.button_text_style = a;
	this.callFlash("SetButtonTextStyle", [ a ])
};
SWFUpload.prototype.setButtonDisabled = function(a) {
	this.settings.button_disabled = a;
	this.callFlash("SetButtonDisabled", [ a ])
};
SWFUpload.prototype.setButtonAction = function(a) {
	this.settings.button_action = a;
	this.callFlash("SetButtonAction", [ a ])
};
SWFUpload.prototype.setButtonCursor = function(a) {
	this.settings.button_cursor = a;
	this.callFlash("SetButtonCursor", [ a ])
};
SWFUpload.prototype.queueEvent = function(b, c) {
	if (c == undefined) {
		c = []
	} else {
		if (!(c instanceof Array)) {
			c = [ c ]
		}
	}
	var a = this;
	if (typeof this.settings[b] === "function") {
		this.eventQueue.push(function() {
			this.settings[b].apply(this, c)
		});
		setTimeout(function() {
			a.executeNextEvent()
		}, 0)
	} else {
		if (this.settings[b] !== null) {
			throw "Event handler " + b + " is unknown or is not a function"
		}
	}
};
SWFUpload.prototype.executeNextEvent = function() {
	var a = this.eventQueue ? this.eventQueue.shift() : null;
	if (typeof (a) === "function") {
		a.apply(this)
	}
};
SWFUpload.prototype.unescapeFilePostParams = function(c) {
	var e = /[$]([0-9a-f]{4})/i;
	var f = {};
	var d;
	if (c != undefined) {
		for ( var a in c.post) {
			if (c.post.hasOwnProperty(a)) {
				d = a;
				var b;
				while ((b = e.exec(d)) !== null) {
					d = d.replace(b[0], String.fromCharCode(parseInt("0x"
							+ b[1], 16)))
				}
				f[d] = c.post[a]
			}
		}
		c.post = f
	}
	return c
};
SWFUpload.prototype.testExternalInterface = function() {
	try {
		return this.callFlash("TestExternalInterface")
	} catch (a) {
		return false
	}
};
SWFUpload.prototype.flashReady = function() {
	var a = this.getMovieElement();
	if (!a) {
		this
				.debug("Flash called back ready but the flash movie can't be found.");
		return
	}
	this.cleanUp(a);
	this.queueEvent("swfupload_loaded_handler")
};
SWFUpload.prototype.cleanUp = function(f) {
    try {
        if (this.movieElement && typeof(f.CallFunction) === "unknown") {
            this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
            for (var h in f) {
                try {
                    if (typeof(f[h]) === "function" && h[0] >= 'A' && h[0] <= 'Z') {
                        f[h] = null;
                    }
                } catch(e) {
                	
            	}
            }
        }
    } catch(g) {
    	
    };
    window.__flash__removeCallback = function(c, b) {
        try {
            if (c) {
                c[b] = null;
            }
        } catch(a) {}
    };
};

SWFUpload.prototype.fileDialogStart = function() {
	this.queueEvent("file_dialog_start_handler")
};
SWFUpload.prototype.fileQueued = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("file_queued_handler", a)
};
SWFUpload.prototype.fileQueueError = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("file_queue_error_handler", [a, c, b])
};
SWFUpload.prototype.fileDialogComplete = function(b, c, a) {
	this.queueEvent("file_dialog_complete_handler", [b, c, a])
};
SWFUpload.prototype.uploadStart = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("return_upload_start_handler", a)
};
SWFUpload.prototype.returnUploadStart = function(a) {
	var b;
	if (typeof this.settings.upload_start_handler === "function") {
		a = this.unescapeFilePostParams(a);
		b = this.settings.upload_start_handler.call(this, a)
	} else {
		if (this.settings.upload_start_handler != undefined) {
			throw "upload_start_handler must be a function"
		}
	}
	if (b === undefined) {
		b = true
	}
	b = !!b;
	this.callFlash("ReturnUploadStart", [b])
};
SWFUpload.prototype.uploadProgress = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_progress_handler", [a, c, b])
};
SWFUpload.prototype.uploadError = function(a, c, b) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_error_handler", [a, c, b])
};
SWFUpload.prototype.uploadSuccess = function(b, a, c) {
	b = this.unescapeFilePostParams(b);
	this.queueEvent("upload_success_handler", [b, a, c])
};
SWFUpload.prototype.uploadComplete = function(a) {
	a = this.unescapeFilePostParams(a);
	this.queueEvent("upload_complete_handler", a)
};
SWFUpload.prototype.debug = function(a) {
	this.queueEvent("debug_handler", a)
};
SWFUpload.prototype.debugMessage = function(c) {
	if (this.settings.debug) {
		var a, d = [];
		if (typeof c === "object" && typeof c.name === "string" && typeof c.message === "string") {
			for (var b in c) {
				if (c.hasOwnProperty(b)) {
					d.push(b + ": " + c[b])
				}
			}
			a = d.join("\n") || "";
			d = a.split("\n");
			a = "EXCEPTION: " + d.join("\nEXCEPTION: ");
			SWFUpload.Console.writeLine(a)
		} else {
			SWFUpload.Console.writeLine(c)
		}
	}
};
SWFUpload.Console = {};
SWFUpload.Console.writeLine = function(d) {
	var b, a;
	try {
		b = document.getElementById("SWFUpload_Console");
		if (!b) {
			a = document.createElement("form");
			document.getElementsByTagName("body")[0].appendChild(a);
			b = document.createElement("textarea");
			b.id = "SWFUpload_Console";
			b.style.fontFamily = "monospace";
			b.setAttribute("wrap", "off");
			b.wrap = "off";
			b.style.overflow = "auto";
			b.style.width = "700px";
			b.style.height = "350px";
			b.style.margin = "5px";
			a.appendChild(b)
		}
		b.value += d + "\n";
		b.scrollTop = b.scrollHeight - b.clientHeight
	} catch(c) {
		alert("Exception: " + c.name + " Message: " + c.message)
	}
};;
